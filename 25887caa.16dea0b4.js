(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{67:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return s}));var n=a(2),o=a(6),r=(a(0),a(86)),c={title:"Path"},l={unversionedId:"common/path",id:"common/path",isDocsHomePage:!1,title:"Path",description:"A Path class is an immutable abstraction around file/module paths and the Node.js fs and path",source:"@site/docs/common/path.md",slug:"/common/path",permalink:"/docs/common/path",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/common/path.md",version:"current",sidebar:"docs",previous:{title:"Contract",permalink:"/docs/common/contract"},next:{title:"PathResolver",permalink:"/docs/common/path-resolver"}},i=[{value:"Resolved paths",id:"resolved-paths",children:[]},{value:"Static factories",id:"static-factories",children:[]},{value:"API",id:"api",children:[{value:"<code>.create</code>",id:"create",children:[]},{value:"<code>.resolve</code>",id:"resolve",children:[]},{value:"<code>append</code>",id:"append",children:[]},{value:"<code>equals</code>",id:"equals",children:[]},{value:"<code>ext</code>",id:"ext",children:[]},{value:"<code>exists</code>",id:"exists",children:[]},{value:"<code>isAbsolute</code>",id:"isabsolute",children:[]},{value:"<code>isDirectory</code>",id:"isdirectory",children:[]},{value:"<code>isFile</code>",id:"isfile",children:[]},{value:"<code>name</code>",id:"name",children:[]},{value:"<code>parent</code>",id:"parent",children:[]},{value:"<code>path</code>",id:"path",children:[]},{value:"<code>prepend</code>",id:"prepend",children:[]},{value:"<code>relativeTo</code>",id:"relativeto",children:[]},{value:"<code>toString</code>",id:"tostring",children:[]}]}],p={rightToc:i};function s(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.a)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.a)("p",null,"A ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," class is an immutable abstraction around file/module paths and the Node.js ",Object(r.a)("inlineCode",{parentName:"p"},"fs")," and ",Object(r.a)("inlineCode",{parentName:"p"},"path"),"\nmodules. It aims to solve cross platform and operating system related issues in a straight forward\nway. To begin, import and instantiate the ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," class, with either a single path, or a list of path\nparts that will be joined."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { Path } from '@boost/common';\n\nconst absPath = new Path('/root/some/path');\nconst relPath = new Path('some/path', '../move/around', 'again');\n")),Object(r.a)("h2",{id:"resolved-paths"},"Resolved paths"),Object(r.a)("p",null,"By default, the ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," class operates on the defined path parts as-is. If you would prefer to\noperate against real or resolved paths, use the ",Object(r.a)("inlineCode",{parentName:"p"},"Path#realPath()")," and ",Object(r.a)("inlineCode",{parentName:"p"},"Path#resolve()")," methods\nrespectively. The current path is\n",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"https://nodejs.org/api/path.html#path_path_resolve_paths"}),"resolved against")," the defined current\nworking directory (",Object(r.a)("inlineCode",{parentName:"p"},"process.cwd()"),")."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"path.path(); // Possibly inaccurate\npath.resolve().path(); // Resolved accurately\n")),Object(r.a)("h2",{id:"static-factories"},"Static factories"),Object(r.a)("p",null,"The static ",Object(r.a)("inlineCode",{parentName:"p"},"Path.create()")," and ",Object(r.a)("inlineCode",{parentName:"p"},"Path.resolve()")," methods can be used to factory a ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," instance\nfrom a string or an existing instance. Especially useful when used in combination with the\n",Object(r.a)("inlineCode",{parentName:"p"},"PortablePath")," type."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"Path.create('some/file/path'); // Path\n")),Object(r.a)("h2",{id:"api"},"API"),Object(r.a)("p",null,"The following methods are available on the class instance. In the examples below, the ",Object(r.a)("inlineCode",{parentName:"p"},"PortablePath"),"\ntype is a union of ",Object(r.a)("inlineCode",{parentName:"p"},"FilePath | Path"),", and ",Object(r.a)("inlineCode",{parentName:"p"},"FilePath")," is a ",Object(r.a)("inlineCode",{parentName:"p"},"string"),"."),Object(r.a)("h3",{id:"create"},Object(r.a)("inlineCode",{parentName:"h3"},".create")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path.create(filePath: PortablePath): Path")),Object(r.a)("p",null,"Create and return a new ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," instance if a string. If already a ",Object(r.a)("inlineCode",{parentName:"p"},"Path"),", return as is."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const a = Path.create('foo');\nconst b = Path.create(new Path('bar'));\n")),Object(r.a)("h3",{id:"resolve"},Object(r.a)("inlineCode",{parentName:"h3"},".resolve")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path.resolve(filePath: PortablePath, cwd?: PortablePath): Path")),Object(r.a)("p",null,"Like ",Object(r.a)("inlineCode",{parentName:"p"},"create()")," but also resolves the path against the current working directory (defaults to\n",Object(r.a)("inlineCode",{parentName:"p"},"process.cwd()"),")."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const path = Path.resolve('foo', '/cwd'); // => /cwd/foo\n")),Object(r.a)("h3",{id:"append"},Object(r.a)("inlineCode",{parentName:"h3"},"append")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#append(...parts: PortablePath[]): Path")),Object(r.a)("p",null,"Append path parts to the end of the current path and return a new ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," instance."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const a = new Path('foo', 'bar'); // => foo/bar\nconst b = a.append('baz'); // => foo/bar/baz\n")),Object(r.a)("h3",{id:"equals"},Object(r.a)("inlineCode",{parentName:"h3"},"equals")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#equals(path: PortablePath): boolean")),Object(r.a)("p",null,"Returns true if both paths are equal using strict equality."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const a = new Path('foo');\nconst b = new Path('bar');\n\na.equals(b); // => false\n")),Object(r.a)("h3",{id:"ext"},Object(r.a)("inlineCode",{parentName:"h3"},"ext")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#ext(withoutPeriod?: boolean): string")),Object(r.a)("p",null,"Return the extension (if applicable) with or without leading period."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const path = new Path('some/path/to/file.js');\n\npath.ext(); // => .js\npath.ext(true); // => js\n")),Object(r.a)("h3",{id:"exists"},Object(r.a)("inlineCode",{parentName:"h3"},"exists")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#exists(): boolean")),Object(r.a)("p",null,"Return true if the current path exists on the file system."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const path = new Path('some/path/to/file.js');\n\npath.exists(); // => false\n")),Object(r.a)("h3",{id:"isabsolute"},Object(r.a)("inlineCode",{parentName:"h3"},"isAbsolute")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#isAbsolute(): boolean")),Object(r.a)("p",null,"Return true if the current path is absolute. ",Object(r.a)("em",{parentName:"p"},"Does not")," verify existence on the file system."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const nixPath = new Path('/some/path/to/file.js');\nconst winPath = new Path('C:/some/path/to/file.js');\n\nnixPath.exists(); // => true\nwinPath.exists(); // => true\n")),Object(r.a)("h3",{id:"isdirectory"},Object(r.a)("inlineCode",{parentName:"h3"},"isDirectory")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#isDirectory(): boolean")),Object(r.a)("p",null,"Return true if the current path is a folder."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const filePath = new Path('some/path/to/file.js');\nconst folderPath = new Path('some/path/to/folder');\n\nfilePath.isDirectory(); // => false\nfolderPath.isDirectory(); // => true\n")),Object(r.a)("h3",{id:"isfile"},Object(r.a)("inlineCode",{parentName:"h3"},"isFile")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#isFile(): boolean")),Object(r.a)("p",null,"Return true if the current path is a file."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const filePath = new Path('some/path/to/file.js');\nconst folderPath = new Path('some/path/to/folder');\n\nfilePath.isFile(); // => true\nfolderPath.isFile(); // => false\n")),Object(r.a)("h3",{id:"name"},Object(r.a)("inlineCode",{parentName:"h3"},"name")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#name(withoutExtension?: boolean): string")),Object(r.a)("p",null,"Return the file name (with optional extension) or folder name."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const path = new Path('some/path/to/file.js');\n\npath.name(); // => file.js\npath.name(true); // => file\n")),Object(r.a)("h3",{id:"parent"},Object(r.a)("inlineCode",{parentName:"h3"},"parent")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#parent(): Path")),Object(r.a)("p",null,"Return the parent folder as a new ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," instance."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const path = new Path('foo/bar/baz');\nconst parent = path.parent(); // => foo/bar\n")),Object(r.a)("h3",{id:"path"},Object(r.a)("inlineCode",{parentName:"h3"},"path")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#path(): FilePath")),Object(r.a)("p",null,"Return the current path as a normalized string. Is also triggered when the ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," instance is cast\nto a string."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const path = new Path('foo/bar/baz');\n\npath.path(); // => foo/bar/bar\n")),Object(r.a)("h3",{id:"prepend"},Object(r.a)("inlineCode",{parentName:"h3"},"prepend")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#prepend(...parts: PortablePath[]): Path")),Object(r.a)("p",null,"Prepend path parts to the beginning of the current path and return a new ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," instance."),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const a = new Path('foo', 'bar'); // => foo/bar\nconst b = a.append('baz'); // => bar/foo/bar\n")),Object(r.a)("h3",{id:"relativeto"},Object(r.a)("inlineCode",{parentName:"h3"},"relativeTo")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#relativeTo(to: PortablePath): Path")),Object(r.a)("p",null,"Return a new relative ",Object(r.a)("inlineCode",{parentName:"p"},"Path"),' instance from the current "from" path to the defined "to" path.'),Object(r.a)("pre",null,Object(r.a)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const from = new Path('/foo/bar/baz');\nconst to = from.relativeTo('/foo/qux'); // => ../../qux\n")),Object(r.a)("h3",{id:"tostring"},Object(r.a)("inlineCode",{parentName:"h3"},"toString")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Path#toString(): FilePath")),Object(r.a)("p",null,"Return the current path as a normalized string. See ",Object(r.a)("a",Object(n.a)({parentName:"p"},{href:"#path"}),"path()"),"."))}s.isMDXComponent=!0},86:function(e,t,a){"use strict";a.d(t,"a",(function(){return d}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=s(a),d=n,u=h["".concat(c,".").concat(d)]||h[d]||b[d]||r;return a?o.a.createElement(u,l(l({ref:t},p),{},{components:a})):o.a.createElement(u,l({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,c=new Array(r);c[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var p=2;p<r;p++)c[p]=a[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);