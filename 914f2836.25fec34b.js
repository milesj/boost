(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{73:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return l})),o.d(t,"metadata",(function(){return c})),o.d(t,"rightToc",(function(){return s})),o.d(t,"default",(function(){return p}));var a=o(2),n=o(6),r=(o(0),o(86)),l={title:"PathResolver"},c={unversionedId:"common/path-resolver",id:"common/path-resolver",isDocsHomePage:!1,title:"PathResolver",description:"A PathResolver can be used to find a real path amongst a list of possible lookups. A lookup is",source:"@site/docs/common/path-resolver.md",slug:"/common/path-resolver",permalink:"/docs/common/path-resolver",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/common/path-resolver.md",version:"current",sidebar:"docs",previous:{title:"Path",permalink:"/docs/common/path"},next:{title:"Project",permalink:"/docs/common/project"}},s=[{value:"API",id:"api",children:[{value:"<code>getLookupPaths</code>",id:"getlookuppaths",children:[]},{value:"<code>lookupFilePath</code>",id:"lookupfilepath",children:[]},{value:"<code>lookupNodeModule</code>",id:"lookupnodemodule",children:[]},{value:"<code>resolve</code>",id:"resolve",children:[]},{value:"<code>resolvePath</code>",id:"resolvepath",children:[]}]}],i={rightToc:s};function p(e){var t=e.components,o=Object(n.a)(e,["components"]);return Object(r.a)("wrapper",Object(a.a)({},i,o,{components:t,mdxType:"MDXLayout"}),Object(r.a)("p",null,"A ",Object(r.a)("inlineCode",{parentName:"p"},"PathResolver")," can be used to find a real path amongst a list of possible lookups. A lookup is\neither a file system path or a Node.js module. If a path is found, an absolute resolved\n",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"/docs/common/path"}),Object(r.a)("inlineCode",{parentName:"a"},"Path"))," instance is returned, otherwise an error is thrown."),Object(r.a)("p",null,"A perfect scenario for this mechanism would be finding a valid configuration file, which we'll\ndemonstrate below. Import and instantiate the class to begin."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { PathResolver } from '@boost/common';\n\nconst resolver = new PathResolver();\n")),Object(r.a)("p",null,"To add a file system lookup, use the ",Object(r.a)("inlineCode",{parentName:"p"},"PathResolver#lookupFilePath()")," method, which requires a path\nand an optional current working directory (defaults to ",Object(r.a)("inlineCode",{parentName:"p"},"process.cwd()"),")."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Look in current directory\nresolver\n  .lookupFilePath('tool.config.js')\n  .lookupFilePath('tool.config.json')\n  .lookupFilePath('tool.config.yaml');\n\n// Look in a folder\nresolver.lookupFilePath('configs/tool.js');\n\n// Look in user's home directory\nresolver.lookupFilePath('tool.config.js', os.homedir());\n")),Object(r.a)("p",null,"And to add a Node.js module lookup, use the ",Object(r.a)("inlineCode",{parentName:"p"},"PathResolver#lookupNodeModule()")," method, which accepts\na module name or path."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Look in module (assuming index export)\nresolver.lookupNodeModule('tool-config-module');\n\n// Look in module with sub-path\nresolver.lookupNodeModule('tool-config-module/lib/configs/tool.js');\n")),Object(r.a)("p",null,"Once all the lookup paths have been defined, the ",Object(r.a)("inlineCode",{parentName:"p"},"PathResolver#resolve()")," method will iterate\nthrough them in order until one is found. If a file system path, ",Object(r.a)("inlineCode",{parentName:"p"},"fs.existsSync()")," will be used to\ncheck for existence, while ",Object(r.a)("inlineCode",{parentName:"p"},"require.resolve()")," will be used for Node.js modules. If found, a result\nobject will be returned with the resolved ",Object(r.a)("inlineCode",{parentName:"p"},"Path")," and original lookup parts."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const { originalPath, resolvedPath, type } = resolver.resolve();\n")),Object(r.a)("p",null,"If you'd prefer to only have the resolved path returned, the ",Object(r.a)("inlineCode",{parentName:"p"},"PathResolver#resolvePath()")," method can\nbe used instead."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const resolvedPath = resolver.resolvePath();\n")),Object(r.a)("h2",{id:"api"},"API"),Object(r.a)("h3",{id:"getlookuppaths"},Object(r.a)("inlineCode",{parentName:"h3"},"getLookupPaths")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"PathResolver#getLookupPaths(): string[]")),Object(r.a)("p",null,"Return a list of all lookup paths that have been registered."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"resolver.lookupFilePath('file.js').lookupNodeModule('module-name');\n\nconst paths = resolver.getLookupPaths(); // => ['file.js', 'module-name']\n")),Object(r.a)("h3",{id:"lookupfilepath"},Object(r.a)("inlineCode",{parentName:"h3"},"lookupFilePath")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"PathResolver#lookupFilePath(filePath: PortablePath, cwd?: PortablePath): this")),Object(r.a)("p",null,"Add a file system path to look for, resolved against the defined current working directory (or\n",Object(r.a)("inlineCode",{parentName:"p"},"process.cwd()")," otherwise)."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"resolver.lookupFilePath('./some/path/to/file.js');\n")),Object(r.a)("h3",{id:"lookupnodemodule"},Object(r.a)("inlineCode",{parentName:"h3"},"lookupNodeModule")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"PathResolver#lookupNodeModule(modulePath: PortablePath): this")),Object(r.a)("p",null,"Add a Node.js module, either by name or relative path, to look for."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"resolver.lookupNodeModule('module-name');\n")),Object(r.a)("h3",{id:"resolve"},Object(r.a)("inlineCode",{parentName:"h3"},"resolve")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"PathResolver#resolve(): { originalPath: Path; resolvedPath: Path; type: LookupType; }")),Object(r.a)("p",null,"Given a list of lookups, attempt to find the first real/existing path and return a resolved absolute\npath. If a file system path, will check using ",Object(r.a)("inlineCode",{parentName:"p"},"fs.exists"),". If a node module path, will check using\n",Object(r.a)("inlineCode",{parentName:"p"},"require.resolve"),"."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const { originalPath, resolvedPath, type } = resolver.resolve();\n")),Object(r.a)("h3",{id:"resolvepath"},Object(r.a)("inlineCode",{parentName:"h3"},"resolvePath")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"PathResolver#resolvePath(): Path")),Object(r.a)("p",null,"Like ",Object(r.a)("inlineCode",{parentName:"p"},"resolve()")," but only returns the resolved path."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const resolvedPath = resolver.resolvePath();\n")))}p.isMDXComponent=!0},86:function(e,t,o){"use strict";o.d(t,"a",(function(){return h}));var a=o(0),n=o.n(a);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var i=n.a.createContext({}),p=function(e){var t=n.a.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),d=p(o),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||r;return o?n.a.createElement(m,c(c({ref:t},i),{},{components:o})):n.a.createElement(m,c({ref:t},i))}));function h(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,l=new Array(r);l[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var i=2;i<r;i++)l[i]=o[i];return n.a.createElement.apply(null,l)}return n.a.createElement.apply(null,o)}d.displayName="MDXCreateElement"}}]);