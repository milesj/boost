(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{56:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),r=(n(0),n(86)),l=n(93),o=n(91),c=n(92),p={title:"Pipelines"},s={unversionedId:"pipeline",id:"pipeline",isDocsHomePage:!1,title:"Pipelines",description:"Pipe an input through a series of type-safe routines and tasks to produce an output, or simply, run",source:"@site/docs/pipeline.mdx",slug:"/pipeline",permalink:"/docs/pipeline",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/pipeline.mdx",version:"current",sidebar:"docs",previous:{title:"Logging",permalink:"/docs/log"},next:{title:"Plugins",permalink:"/docs/plugin"}},u=[{value:"Installation",id:"installation",children:[]},{value:"Events",id:"events",children:[]},{value:"Pipelines",id:"pipelines",children:[{value:"Contexts",id:"contexts",children:[]},{value:"Input &amp; output types",id:"input--output-types",children:[]}]},{value:"Work types",id:"work-types",children:[{value:"<code>Task</code>",id:"task",children:[]},{value:"<code>Routine</code>",id:"routine",children:[]}]},{value:"Pipeline types",id:"pipeline-types",children:[{value:"Parallel",id:"parallel",children:[]},{value:"<code>ConcurrentPipeline</code>",id:"concurrentpipeline",children:[]},{value:"<code>AggregatedPipeline</code>",id:"aggregatedpipeline",children:[]},{value:"<code>PooledPipeline</code>",id:"pooledpipeline",children:[]},{value:"Serial",id:"serial",children:[]},{value:"<code>WaterfallPipeline</code>",id:"waterfallpipeline",children:[]}]},{value:"Caveats",id:"caveats",children:[{value:"Serial pipelines",id:"serial-pipelines",children:[]}]}],d={rightToc:u};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.a)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.a)(l.a,{backend:!0,tooling:!0,mdxType:"EnvBadges"}),Object(r.a)("p",null,"Pipe an input through a series of type-safe routines and tasks to produce an output, or simply, run\nlogic in a series of stages."),Object(r.a)("h2",{id:"installation"},"Installation"),Object(r.a)(o.a,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},Object(r.a)(c.a,{value:"yarn",mdxType:"TabItem"},Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @boost/pipeline\n"))),Object(r.a)(c.a,{value:"npm",mdxType:"TabItem"},Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install @boost/pipeline\n")))),Object(r.a)("h2",{id:"events"},"Events"),Object(r.a)("table",null,Object(r.a)("thead",{parentName:"table"},Object(r.a)("tr",{parentName:"thead"},Object(r.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Event"),Object(r.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.a)("tbody",{parentName:"table"},Object(r.a)("tr",{parentName:"tbody"},Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"Pipeline#onAfterRun")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called after the pipeline executes work units.")),Object(r.a)("tr",{parentName:"tbody"},Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"Pipeline#onBeforeRun")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"input: Input")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called before the pipeline executes work units.")),Object(r.a)("tr",{parentName:"tbody"},Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"Pipeline#onRunWorkUnit")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"work: WorkUnit, input: Input")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called before a single work unit is executed.")),Object(r.a)("tr",{parentName:"tbody"},Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"Routine#onCommand")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"command: string, args: string[]")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called after ",Object(r.a)("inlineCode",{parentName:"td"},"execa")," was executed.")),Object(r.a)("tr",{parentName:"tbody"},Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"Routine#onCommandData")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"command: string, line: string")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called while a command is being executed.")),Object(r.a)("tr",{parentName:"tbody"},Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"WorkUnit#onFail")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"error: Error")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called when an execution fails.")),Object(r.a)("tr",{parentName:"tbody"},Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"WorkUnit#onPass")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"output: Output")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called when an execution succeeds.")),Object(r.a)("tr",{parentName:"tbody"},Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"WorkUnit#onRun")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"input: Input")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called before a work unit is executed. Can return ",Object(r.a)("inlineCode",{parentName:"td"},"true")," to skip the work unit.")),Object(r.a)("tr",{parentName:"tbody"},Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"WorkUnit#onSkip")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.a)("inlineCode",{parentName:"td"},"input: Input")),Object(r.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called when an execution is skipped.")))),Object(r.a)("h2",{id:"pipelines"},"Pipelines"),Object(r.a)("p",null,"A pipeline can be used to process an input, either in parallel or serial, through a series of\nactions known as work units, to produce an output. If you don't need an input, but merely need to\nprocess work in stages, the pipeline supports that as well. There are multiple types of\n",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"#work-types"}),"work units")," and ",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"#pipeline-types"}),"pipelines"),", so choose the best one for each use\ncase."),Object(r.a)("p",null,"To begin, instantiate a pipeline with a ",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"#contexts"}),"context"),", and an ",Object(r.a)("em",{parentName:"p"},"optional")," input value."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Context, ConcurrentPipeline } from '@boost/pipeline';\nimport { referenceFunction } from './example';\n\nconst input = 123;\nconst pipeline = new ConcurrentPipeline(new Context(), input);\n")),Object(r.a)("p",null,"Once instantiated, we must register work units (either a ",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"#task"}),"task")," or ",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"#routine"}),"routine"),") that\nwill process the input value, either with ",Object(r.a)("inlineCode",{parentName:"p"},"ParallelPipeline#add()")," or ",Object(r.a)("inlineCode",{parentName:"p"},"SerialPipeline#pipe()"),". All\nwork units require a descriptive title, and are passed the context and current value when being\nexecuted."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Tasks\npipeline.add('Task using an anonymous function', (context, value) => value);\npipeline.add('Task using a function reference', referenceFunction);\npipeline.add(new Task('Task using a class instance', referenceFunction));\n\n// Routines\npipeline.add(new ExampleRoutine('key', 'Explicit routine using a class instance'));\n")),Object(r.a)("p",null,"And to finish, we can execute our pipeline to process each work unit and produce the final output\nvalue."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const output = await pipeline.run();\n")),Object(r.a)("h3",{id:"contexts"},"Contexts"),Object(r.a)("p",null,"A ",Object(r.a)("inlineCode",{parentName:"p"},"Context")," is merely a plain class that provides contextual information to all work units, and is\npassed as the 1st argument when executing. It's highly encouraged to create custom contexts with\ntyped properties, helper methods, and more."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Context } from '@boost/pipeline';\n\nexport default class ProcessContext extends Context {\n  readonly cwd: string;\n\n  readonly root: string;\n\n  constructor(root: string, cwd?: string) {\n    this.cwd = cwd || process.cwd();\n    this.root = root;\n  }\n}\n")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"A good example of context usage can be found in the\n",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/beemojs/beemo/tree/master/packages/core/src/contexts"}),"Beemo project"),".")),Object(r.a)("p",null,"A unique feature of contexts is the ability to deep clone itself using ",Object(r.a)("inlineCode",{parentName:"p"},"Context#clone()"),". This\nmethod is extremely useful when a context of the same shape must be passed to another pipeline\nwithout collisions or mutations occurring."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const newContext = context.clone();\n")),Object(r.a)("h3",{id:"input--output-types"},"Input & output types"),Object(r.a)("p",null,"The input type is inferred from the 2nd constructor argument, while the output type defaults to the\ninput type. If you need to customize either the input or output type manually, the pipeline generics\ncan be customized upon instantiation."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const pipeline = new ConcurrentPipeline<Context, number, string[]>(new Context(), 123);\n")),Object(r.a)("h2",{id:"work-types"},"Work types"),Object(r.a)("p",null,"There are 2 types of work units that can be registered in a pipeline."),Object(r.a)("h3",{id:"task"},Object(r.a)("inlineCode",{parentName:"h3"},"Task")),Object(r.a)("p",null,"A task is simply a function/method (in any form) that accepts an input and returns an output. It can\nbe represented by a standard function or a ",Object(r.a)("inlineCode",{parentName:"p"},"Task")," instance."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Context } from '@boost/pipeline';\n\nfunction task(context: Context, value: number): string {\n  return value.toLocaleString();\n}\n\nparallelPipeline.add('A title for this task', task);\n")),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Context, Task } from '@boost/pipeline';\n\nconst task = new Task('A title for this task', (context: Context, value: number) =>\n  value.toLocaleString(),\n);\n\nserialPipeline.pipe(task);\n")),Object(r.a)("h3",{id:"routine"},Object(r.a)("inlineCode",{parentName:"h3"},"Routine")),Object(r.a)("p",null,"A ",Object(r.a)("inlineCode",{parentName:"p"},"Routine")," is a specialized work unit implemented with a class. It provides helper methods, the\nability to create nested hierarchical pipelines, and an implicit encapsulation of similar logic and\ntasks."),Object(r.a)("p",null,"To begin, import the ",Object(r.a)("inlineCode",{parentName:"p"},"Routine")," class and implement the ",Object(r.a)("inlineCode",{parentName:"p"},"Routine#blueprint()")," and ",Object(r.a)("inlineCode",{parentName:"p"},"Routine#execute()"),"\nmethods. The class requires 3 generics to be defined, starting with an output type (defaults to\n",Object(r.a)("inlineCode",{parentName:"p"},"unknown"),"), an input type (defaults to ",Object(r.a)("inlineCode",{parentName:"p"},"unknown"),"), and an options interface (defaults to an empty\nobject)."),Object(r.a)("p",null,"The ",Object(r.a)("inlineCode",{parentName:"p"},"Routine#blueprint()")," method is inherited from ",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"/docs/common#contract"}),Object(r.a)("inlineCode",{parentName:"a"},"Contract")),", and should\nreturn an object that matches the structure of the generic options interface. The\n",Object(r.a)("inlineCode",{parentName:"p"},"Routine#execute()")," method should accept the input type and return the expected output type."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Blueprint, Predicates, Bind } from '@boost/common';\nimport { Routine } from '@boost/pipeline';\n\ninterface ExampleOptions {\n  limit?: number;\n}\n\ntype Input = number;\ntype Output = string;\n\nexport default class ExampleRoutine extends Routine<Output, Input, ExampleOptions> {\n  blueprint({ number }: Predicates): Blueprint<ExampleOptions> {\n    return {\n      limit: number(10),\n    };\n  }\n\n  async execute(context: Context, value: Input): Promise<Output> {\n    return this.createWaterfallPipeline(context, value)\n      .pipe('Rounding to cents', this.roundToCents)\n      .pipe('Converting to readable format', this.makeReadable)\n      .pipe('Adding currency', this.addCurrency)\n      .run();\n  }\n\n  @Bind\n  roundToCents(context: Context, value: number): number {\n    return Number(value.toFixed(2));\n  }\n\n  @Bind\n  makeReadable(context: Context, value: number): string {\n    return value.toLocaleString();\n  }\n\n  @Bind\n  addCurrency(context: Context, value: string): string {\n    return `$${value}`;\n  }\n}\n")),Object(r.a)("p",null,"When instantiating a routine, a unique key and title must be provided, both of which are primarily\nused for streaming to a console. An options object can be passed as the 3rd argument."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"new ExampleRoutine('key', 'Custom title here', { limit: 5 });\n")),Object(r.a)("h4",{id:"creating-hierarchical-pipelines"},"Creating hierarchical pipelines"),Object(r.a)("p",null,"The most prominent feature of ",Object(r.a)("inlineCode",{parentName:"p"},"Routine")," is the ability to create hierarchical pipelines that can be\nnested or executed in any fashion. This can be achieved with the\n",Object(r.a)("inlineCode",{parentName:"p"},"Routine#createAggregatedPipeline()"),", ",Object(r.a)("inlineCode",{parentName:"p"},"createConcurrentPipeline()"),", ",Object(r.a)("inlineCode",{parentName:"p"},"createPooledPipeline()"),", and\n",Object(r.a)("inlineCode",{parentName:"p"},"createWaterfallPipeline()")," methods, all of which require a ",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"#contexts"}),"context")," and an initial\nvalue."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class ExampleRoutine extends Routine<Item[]> {\n  async execute(context: Context, items: Item[]): Promise<Item[]> {\n    return this.createConcurrentPipeline(context, [])\n      .add('Load items from cache', this.loadItemsFromCache)\n      .add('Fetch remote items', this.fetchItems)\n      .add('Sort and enqueue items', () => {\n        return this.createWaterfallPipeline(context, items)\n          .pipe(new SortRoutine('sort', 'Sorting items'))\n          .pipe(new QueueRoutine('queue', 'Enqueueing items'))\n          .run(),\n      })\n      .run();\n  }\n}\n")),Object(r.a)("p",null,"The ",Object(r.a)("inlineCode",{parentName:"p"},"Routine#depth")," property denotes the current depth within the hierarchy tree, while\n",Object(r.a)("inlineCode",{parentName:"p"},"Routine#index")," is the current index amongst all work at the same depth."),Object(r.a)("h4",{id:"executing-local-binaries"},"Executing local binaries"),Object(r.a)("p",null,"The ",Object(r.a)("inlineCode",{parentName:"p"},"Routine#executeCommand()")," method can be used to execute binaries and commands on the host\nmachine (it uses ",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/sindresorhus/execa"}),"execa")," under the hood). This is extremely\nuseful for executing locally installed NPM/Yarn binaries."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class ExampleRoutine extends Routine<string> {\n  async execute(context: Context): Promise<string> {\n    return this.executeCommand('babel', ['./src', '--out-dir', './lib'], {\n      preferLocal: true,\n    }).then((result) => result.stdout);\n  }\n}\n")),Object(r.a)("h2",{id:"pipeline-types"},"Pipeline types"),Object(r.a)("p",null,"There are 4 types of pipelines, grouped into parallel and serial based patterns."),Object(r.a)("h3",{id:"parallel"},"Parallel"),Object(r.a)("p",null,"Parallel pipelines register work units with ",Object(r.a)("inlineCode",{parentName:"p"},"ParallelPipeline#add()"),", and process the work units in\nparallel when executing ",Object(r.a)("inlineCode",{parentName:"p"},"ParallelPipeline#run()"),"."),Object(r.a)("h3",{id:"concurrentpipeline"},Object(r.a)("inlineCode",{parentName:"h3"},"ConcurrentPipeline")),Object(r.a)("p",null,"Executes all work units in parallel, and returns a list of values once all resolve. If an error\noccurs, the pipeline will be interrupted."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Context, ConcurrentPipeline } from '@boost/pipeline';\n\nconst pipeline = new ConcurrentPipeline(new Context(), initialValue)\n  .add('First task', doSomething)\n  .add('Second task', anotherSomething)\n  .add('Final task', finalSomething);\n\nconst values = await pipeline.run();\n")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"This pipeline will run ",Object(r.a)("em",{parentName:"p"},"all")," work units at once. If there are far too many work units, it may\ndegrade performance. In that case, use ",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"#pooledpipeline"}),"PooledPipeline")," instead.")),Object(r.a)("h3",{id:"aggregatedpipeline"},Object(r.a)("inlineCode",{parentName:"h3"},"AggregatedPipeline")),Object(r.a)("p",null,"Executes all work units in parallel ",Object(r.a)("em",{parentName:"p"},"without")," interruption, and returns an object with a list of\n",Object(r.a)("inlineCode",{parentName:"p"},"errors")," and ",Object(r.a)("inlineCode",{parentName:"p"},"results")," once all resolve."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Context, AggregatedPipeline } from '@boost/pipeline';\n\nconst pipeline = new AggregatedPipeline(new Context(), initialValue)\n  .add('First task', doSomething)\n  .add('Second task', anotherSomething)\n  .add('Final task', finalSomething);\n\nconst { errors, results } = await pipeline.run();\n")),Object(r.a)("blockquote",null,Object(r.a)("p",{parentName:"blockquote"},"Like ",Object(r.a)("inlineCode",{parentName:"p"},"ConcurrentPipeline"),", all work units are ran at once. For performance improvements, use\n",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"#pooledpipeline"}),"PooledPipeline")," when dealing with a large number of work units.")),Object(r.a)("h3",{id:"pooledpipeline"},Object(r.a)("inlineCode",{parentName:"h3"},"PooledPipeline")),Object(r.a)("p",null,"Executes a distinct set of work units in parallel ",Object(r.a)("em",{parentName:"p"},"without")," interruption, based on a max concurrency\nlimit, until all work units have ran. Returns an object with a list of ",Object(r.a)("inlineCode",{parentName:"p"},"errors")," and ",Object(r.a)("inlineCode",{parentName:"p"},"results")," once\nall resolve."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Context, PooledPipeline } from '@boost/pipeline';\n\nconst pipeline = new PooledPipeline(new Context(), initialValue)\n  .add('First task', doSomething)\n  .add('Second task', anotherSomething)\n  .add('Final task', finalSomething);\n\nconst { errors, results } = await pipeline.run();\n")),Object(r.a)("h4",{id:"options"},"Options"),Object(r.a)("p",null,"The following options can be passed as a 3rd argument to ",Object(r.a)("inlineCode",{parentName:"p"},"PooledPipeline"),"."),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("inlineCode",{parentName:"li"},"concurrency")," (",Object(r.a)("inlineCode",{parentName:"li"},"number"),") - How many work units to process in parallel. Defaults to the number of\nCPUs."),Object(r.a)("li",{parentName:"ul"},Object(r.a)("inlineCode",{parentName:"li"},"filo")," (",Object(r.a)("inlineCode",{parentName:"li"},"boolean"),") - Process with first-in-last-out (FILO) order, instead of first-in-first-out\n(FIFO). Defaults to ",Object(r.a)("inlineCode",{parentName:"li"},"false"),"."),Object(r.a)("li",{parentName:"ul"},Object(r.a)("inlineCode",{parentName:"li"},"timeout")," (",Object(r.a)("inlineCode",{parentName:"li"},"number"),") - Timeout in milliseconds that each work unit may run, or ",Object(r.a)("inlineCode",{parentName:"li"},"0")," to avoid a\ntimeout. Defaults to ",Object(r.a)("inlineCode",{parentName:"li"},"0"),".")),Object(r.a)("h3",{id:"serial"},"Serial"),Object(r.a)("p",null,"Serial pipelines register work units in a sequence with ",Object(r.a)("inlineCode",{parentName:"p"},"SerialPipeline#pipe()"),", and process the\nwork units one by one when executing ",Object(r.a)("inlineCode",{parentName:"p"},"SerialPipeline#run()"),"."),Object(r.a)("h3",{id:"waterfallpipeline"},Object(r.a)("inlineCode",{parentName:"h3"},"WaterfallPipeline")),Object(r.a)("p",null,"Executes each work unit one by one, with the return value of the previous work unit being passed as\na value argument to the next work unit. Returns the final value once all resolve."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Context, WaterfallPipeline } from '@boost/pipeline';\n\nconst pipeline = new WaterfallPipeline(new Context(), 1000)\n  .pipe('Multiply initial value', (ctx, value) => value * 3)\n  .pipe('Convert to a readable string', (ctx, value) => value.toLocaleString())\n  .pipe('Convert to an array for reasons unknown', (ctx, value) => [value]);\n\nconst finalValue = await pipeline.run(); // ['3,000']\n")),Object(r.a)("h2",{id:"caveats"},"Caveats"),Object(r.a)("h3",{id:"serial-pipelines"},"Serial pipelines"),Object(r.a)("p",null,Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"#serial"}),"Serial pipelines")," are designed using a linked list, with each call to\n",Object(r.a)("inlineCode",{parentName:"p"},"SerialPipeline#pipe()")," returning a new instance. It was designed this way so that input and output\ntypes would cascade correctly down the chain. However, this pattern causes issues where pipes are\ncalled within conditionals, resulting in new pipes to be lost. For example, this is ",Object(r.a)("em",{parentName:"p"},"invalid"),"."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const pipeline = new WaterfallPipeline(new Context());\n\nif (condition) {\n  pipeline.pipe('Do this', thisAction);\n} else {\n  pipeline.pipe('Do that', thatAction);\n}\n\nawait pipeline\n  .pipe('Then finish', finishAction)\n  .run();\n")),Object(r.a)("p",null,"While this is technically valid (note the ",Object(r.a)("inlineCode",{parentName:"p"},"let")," and ",Object(r.a)("inlineCode",{parentName:"p"},"pipeline")," assignment), but will break down if\ntypes conflict."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"let pipeline = new WaterfallPipeline(new Context());\n\nif (condition) {\n  pipeline = pipeline.pipe('Do this', thisAction);\n} else {\n  pipeline = pipeline.pipe('Do that', thatAction);\n}\n\nawait pipeline\n  .pipe('Then finish', finishAction)\n  .run();\n")),Object(r.a)("p",null,"Instead, it's suggested to use separate pipelines within each conditional block. This approach\nrequires a bit of duplication, but avoids all other issues."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"if (condition) {\n  await new WaterfallPipeline(new Context())\n    .pipe('Do this', thisAction)\n    .pipe('Then finish', finishAction)\n    .run()\n} else {\n  await new WaterfallPipeline(new Context())\n    .pipe('Do that', thatAction)\n    .pipe('Then finish', finishAction)\n    .run()\n}\n")))}b.isMDXComponent=!0},86:function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),s=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),b=a,m=d["".concat(l,".").concat(b)]||d[b]||u[b]||r;return n?i.a.createElement(m,o(o({ref:t},p),{},{components:n})):i.a.createElement(m,o({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87:function(e,t,n){"use strict";function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}},88:function(e,t,n){"use strict";var a=n(0),i=Object(a.createContext)(void 0);t.a=i},89:function(e,t,n){"use strict";var a=n(0),i=n(88);t.a=function(){var e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},90:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n(0),i=n.n(a);function r(e){var t=e.children,n=e.type;return i.a.createElement("span",{className:"badge badge--"+n},t)}},91:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=n(89),l=n(87),o=n(48),c=n.n(o),p=37,s=39;t.a=function(e){var t=e.block,n=e.children,o=e.defaultValue,u=e.values,d=e.groupId,b=Object(r.a)(),m=b.tabGroupChoices,O=b.setTabGroupChoices,j=Object(a.useState)(o),h=j[0],f=j[1],g=Object(a.useState)(!1),N=g[0],w=g[1];if(null!=d){var C=m[d];null!=C&&C!==h&&u.some((function(e){return e.value===C}))&&f(C)}var y=function(e){f(e),null!=d&&O(d,e)},x=[],v=function(e){e.metaKey||e.altKey||e.ctrlKey||w(!0)},k=function(){w(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",v),window.addEventListener("mousedown",k)}),[]),i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t})},u.map((function(e){var t=e.value,n=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===t,className:Object(l.a)("tabs__item",c.a.tabItem,{"tabs__item--active":h===t}),style:N?{}:{outline:"none"},key:t,ref:function(e){return x.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case s:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case p:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(x,e.target,e),v(e)},onFocus:function(){return y(t)},onClick:function(){y(t),w(!1)},onPointerDown:function(){return w(!1)}},n)}))),i.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter((function(e){return e.props.value===h}))[0]))}},92:function(e,t,n){"use strict";var a=n(0),i=n.n(a);t.a=function(e){return i.a.createElement("div",null,e.children)}},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n(0),i=n.n(a),r=n(90),l=n(47),o=n.n(l);function c(e){var t=e.children;return i.a.createElement("span",{className:o.a.badgeGroup},t)}function p(e){var t=e.backend,n=e.frontend,a=e.tooling;return i.a.createElement(c,null,t&&i.a.createElement(r.a,{type:"warning"},"Backend"),n&&i.a.createElement(r.a,{type:"success"},"Frontend"),a&&i.a.createElement(r.a,{type:"primary"},"Tooling"))}}}]);