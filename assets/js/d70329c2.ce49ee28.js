(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[494],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},517:function(e,t,n){"use strict";var a=n(7378);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},4535:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(7378),r=n(4956);var o=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(8944),i="tabItem_c0e5",s="tabItemActive_28AG";var p=37,c=39;var u=function(e){var t=e.lazy,n=e.block,r=e.defaultValue,u=e.values,m=e.groupId,d=e.className,k=o(),f=k.tabGroupChoices,b=k.setTabGroupChoices,h=(0,a.useState)(r),y=h[0],g=h[1],N=a.Children.toArray(e.children),v=[];if(null!=m){var j=f[m];null!=j&&j!==y&&u.some((function(e){return e.value===j}))&&g(j)}var C=function(e){var t=e.currentTarget,n=v.indexOf(t),a=u[n].value;g(a),null!=m&&(b(m,a),setTimeout((function(){var e,n,a,r,o,l,i,p;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,o=e.right,l=window,i=l.innerHeight,p=l.innerWidth,n>=0&&o<=p&&r<=i&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},w=function(e){var t,n;switch(e.keyCode){case c:var a=v.indexOf(e.target)+1;n=v[a]||v[0];break;case p:var r=v.indexOf(e.target)-1;n=v[r]||v[v.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},d)},u.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,className:(0,l.Z)("tabs__item",i,{"tabs__item--active":y===t}),key:t,ref:function(e){return v.push(e)},onKeyDown:w,onFocus:C,onClick:C},n)}))),t?(0,a.cloneElement)(N.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},N.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==y})}))))}},4956:function(e,t,n){"use strict";var a=(0,n(7378).createContext)(void 0);t.Z=a},297:function(e,t,n){"use strict";n.d(t,{Z:function(){return r}});var a=n(7378);function r(e){var t=e.children,n=e.type;return a.createElement("span",{className:"badge badge--"+n},t)}},7586:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var a=n(7378),r=n(297),o="badgeGroup_2HOO";function l(e){var t=e.children;return a.createElement("span",{className:o},t)}function i(e){var t=e.backend,n=e.frontend,o=e.tooling;return a.createElement(l,null,t&&a.createElement(r.Z,{type:"warning"},"Backend"),n&&a.createElement(r.Z,{type:"success"},"Frontend"),o&&a.createElement(r.Z,{type:"primary"},"Tooling"))}},2208:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return m},toc:function(){return d},default:function(){return f}});var a=n(9603),r=n(120),o=(n(7378),n(5318)),l=n(7586),i=n(4535),s=n(517),p=["components"],c={title:"Common utilities",sidebar_label:"Overview"},u=void 0,m={unversionedId:"common",id:"common",isDocsHomePage:!1,title:"Common utilities",description:"A collection of common utilities, classes, and helpers.",source:"@site/docs/common.mdx",sourceDirName:".",slug:"/common",permalink:"/docs/common",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/common.mdx",version:"current",frontMatter:{title:"Common utilities",sidebar_label:"Overview"},sidebar:"docs",previous:{title:"Testing",permalink:"/docs/cli/testing"},next:{title:"Contract",permalink:"/docs/common/contract"}},d=[{value:"Installation",id:"installation",children:[]},{value:"Helpers",id:"helpers",children:[{value:"<code>createBlueprint</code>",id:"createblueprint",children:[]},{value:"<code>deepFreeze</code>",id:"deepfreeze",children:[]},{value:"<code>deepMerge</code>",id:"deepmerge",children:[]},{value:"<code>formatMs</code>",id:"formatms",children:[]},{value:"<code>instanceOf</code>",id:"instanceof",children:[]},{value:"<code>isEmpty</code>",id:"isempty",children:[]},{value:"<code>isFilePath</code>",id:"isfilepath",children:[]},{value:"<code>isModuleName</code>",id:"ismodulename",children:[]},{value:"<code>isObject</code>",id:"isobject",children:[]},{value:"<code>isPlainObject</code>",id:"isplainobject",children:[]},{value:"<code>parseFile</code>",id:"parsefile",children:[]},{value:"<code>requireModule</code>",id:"requiremodule",children:[]},{value:"<code>requireTypedModule</code>",id:"requiretypedmodule",children:[]},{value:"<code>toArray</code>",id:"toarray",children:[]}]},{value:"Serializers",id:"serializers",children:[{value:"JSON",id:"json",children:[]},{value:"YAML",id:"yaml",children:[]}]}],k={toc:d};function f(e){var t=e.components,n=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(l.Z,{backend:!0,tooling:!0,mdxType:"EnvBadges"}),(0,o.kt)("p",null,"A collection of common utilities, classes, and helpers."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)(i.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/common\n"))),(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/common\n")))),(0,o.kt)("h2",{id:"helpers"},"Helpers"),(0,o.kt)("h3",{id:"createblueprint"},(0,o.kt)("inlineCode",{parentName:"h3"},"createBlueprint")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"createBlueprint<T",">","(factory: BlueprintFactory<T",">","): Blueprint<T",">")),(0,o.kt)("p",null,"Can be used to generate a blueprint object for use within\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/milesj/optimal"},"optimal")," checks. All supported optimal predicates are passed as\nan object to the factory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { optimal, createBlueprint } from '@boost/common';\n\nconst blueprint = createBlueprint(({ string, number }) => ({\n    name: string().required(),\n    age: number().gt(0),\n}));\n\nconst data = optimal({}, blueprint);\n")),(0,o.kt)("h3",{id:"deepfreeze"},(0,o.kt)("inlineCode",{parentName:"h3"},"deepFreeze")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"deepFreeze<T extends object",">","(obj: T): T")),(0,o.kt)("p",null,"Can be used to recursively freeze plain objects with ",(0,o.kt)("inlineCode",{parentName:"p"},"Object.freeze"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { deepFreeze } from '@boost/common';\n\nconst obj = deepFreeze({ foo: 123 });\n\n// Errors!\nobj.foo = 456;\n")),(0,o.kt)("h3",{id:"deepmerge"},(0,o.kt)("inlineCode",{parentName:"h3"},"deepMerge")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"deepMerge<T extends object | unknown[]",">","(base: T, other?: T): T")),(0,o.kt)("p",null,"Can be used to recursively merge objects and arrays, where values on the right-hand side will\noverwrite values on the left-hand based on the key or index respectively. Furthermore, if the 2nd\nargument is not provided, it will simply clone the base value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { deepMerge } from '@boost/common';\n\nconst obj = deepMerge({ foo: 123, bar: 'abc' }, { foo: 456, baz: true });\n\n// -> { foo: 456, bar: 'abc', baz: true }\n")),(0,o.kt)("h3",{id:"formatms"},(0,o.kt)("inlineCode",{parentName:"h3"},"formatMs")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"formatMs(time: number, options?: Options): string")),(0,o.kt)("p",null,"Can be used to format a UNIX timestamp in milliseconds into a shorthand human readable format. Wraps\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/pretty-ms"},"pretty-ms")," package to handle infinite numbers, zeros,\nand more."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { formatMs } from '@boost/common';\n\nformatMs(1337000000); // 15d 11h 23m 20s\n")),(0,o.kt)("h3",{id:"instanceof"},(0,o.kt)("inlineCode",{parentName:"h3"},"instanceOf")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"instanceOf(object: unknown, declaration: Constructor, loose?: boolean): boolean")),(0,o.kt)("p",null,"Performs a loose instance check by comparing class names up the prototype chain if ",(0,o.kt)("inlineCode",{parentName:"p"},"instanceof"),"\ninitially fails. To disable this loose check, pass ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," as the 3rd argument."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { instanceOf } from '@boost/common';\n\nif (instanceOf(error, Error)) {\n    console.log(error.stack);\n}\n")),(0,o.kt)("p",null,"Generics can be used to type the object being checked. This will default to the declaration passed\nto the 2nd argument."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"instanceOf<ParseError>(error, Error);\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Loose checks can be useful if multiple copies of the same class declaration exists in the module\ntree. For example, multiple versions of the same package are imported.")),(0,o.kt)("h3",{id:"isempty"},(0,o.kt)("inlineCode",{parentName:"h3"},"isEmpty")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"isEmpty(value: unknown): boolean")),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if an object has no properties, an array has no items, or the value is falsy,\notherwise, it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { isEmpty } from '@boost/common';\n\nisEmpty({}); // true\nisEmpty({ name: 'Boost' }); // false\n\nisEmpty([]); // true\nisEmpty(['Boost']); // false\n")),(0,o.kt)("h3",{id:"isfilepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"isFilePath")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"isFilePath(path: PortablePath): boolean")),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if a string or ",(0,o.kt)("inlineCode",{parentName:"p"},"Path")," instance looks like a file system path, by checking for\nabsolute or relative path markers, or the existence of path separating slashes. Will return ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"\nfor values that are only the file or folder name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { isFilePath } from '@boost/common';\n\nisFilePath('./path/to/file.ts'); // true\nisFilePath(new Path('/path/to/folder')); // true\nisFilePath('file.ts'); // false\n")),(0,o.kt)("h3",{id:"ismodulename"},(0,o.kt)("inlineCode",{parentName:"h3"},"isModuleName")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"isModuleName(name: ModuleName): boolean")),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if a string is a valid Node module package name, according to the rules defined in\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/npm/validate-npm-package-name"},"validate-npm-package-name"),". Will ",(0,o.kt)("inlineCode",{parentName:"p"},"return")," false\nfor native builtin modules, like ",(0,o.kt)("inlineCode",{parentName:"p"},"fs"),", and for the old name format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { isModuleName } from '@boost/common';\n\nisModuleName('boost'); // true\nisModuleName('@boost/common'); // true\nisModuleName('fs'); // false\n")),(0,o.kt)("h3",{id:"isobject"},(0,o.kt)("inlineCode",{parentName:"h3"},"isObject")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"isObject<T",">","(value: unknown): value is T")),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the value is an object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { isObject } from '@boost/common';\n\nisObject({}); // true\nisObject(new Foo()); // true\nisObject([]); // false\n")),(0,o.kt)("p",null,"Generics can be used to type the return value of the object (when necessary)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Person {\n    name: string;\n}\n\nif (isObject<Person>(person)) {\n    console.log(person.name);\n}\n")),(0,o.kt)("h3",{id:"isplainobject"},(0,o.kt)("inlineCode",{parentName:"h3"},"isPlainObject")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"isPlainObject<T",">","(value: unknown, loose?: boolean): value is T")),(0,o.kt)("p",null,"Like ",(0,o.kt)("inlineCode",{parentName:"p"},"isObject")," but only returns true if the value is a plain object (no class instances, built-ins,\netc). It achieves this by comparing the value's prototype to the built-in ",(0,o.kt)("inlineCode",{parentName:"p"},"Object")," types. If you\nneed to run these checks for cross-realm objects, pass true to the ",(0,o.kt)("inlineCode",{parentName:"p"},"loose")," argument."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { isPlainObject } from '@boost/common';\n\nisPlainObject({}); // true\nisPlainObject(new Foo()); // false\nisPlainObject([]); // false\n")),(0,o.kt)("h3",{id:"parsefile"},(0,o.kt)("inlineCode",{parentName:"h3"},"parseFile")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"parseFile<T",">","(path: string): T")),(0,o.kt)("p",null,"Can be used to ",(0,o.kt)("em",{parentName:"p"},"sync"),"hronously parse and return an object for the following file types & extensions:\n",(0,o.kt)("inlineCode",{parentName:"p"},"js"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ts"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"tsx"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"json"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"json5"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"yaml"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"yml"),". The function requires an absolute file path, and\nany unsupported file type will throw an error."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { parseFile } from '@boost/common';\n\nconst data: ReturnShape = parseFile('/absolute/file/path');\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"TypeScript files require the ",(0,o.kt)("inlineCode",{parentName:"p"},"typescript")," package to be installed.")),(0,o.kt)("h3",{id:"requiremodule"},(0,o.kt)("inlineCode",{parentName:"h3"},"requireModule")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"requireModule<T",">","(path: string): T")),(0,o.kt)("p",null,"Works in a similar fashion to the native NodeJS ",(0,o.kt)("inlineCode",{parentName:"p"},"require()"),", but also handles files built with Babel\nor TypeScript by properly returning the ",(0,o.kt)("inlineCode",{parentName:"p"},"default"),' export if an "ES module", and also allowing the\nexpected type to be defined.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { requireModule } from '@boost/common';\n\nconst result: ReturnShape = requireModule('../../some/module');\n")),(0,o.kt)("p",null,"There are some caveats to be aware of in regards to default and named exports in the file being\nrequired, they are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When only a default export, the exported value is returned directly instead of on an object with a\n",(0,o.kt)("inlineCode",{parentName:"li"},"default")," property."),(0,o.kt)("li",{parentName:"ul"},"When only named exports, the returned value is an object with all the named exports as properties\non the object."),(0,o.kt)("li",{parentName:"ul"},"When a default export and named exports together, the returned value is an object with a ",(0,o.kt)("inlineCode",{parentName:"li"},"default"),"\nproperty, and an additional property for every named export. It's best to stay away from this\npattern.")),(0,o.kt)("h3",{id:"requiretypedmodule"},(0,o.kt)("inlineCode",{parentName:"h3"},"requireTypedModule")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"requireTypedModule<T",">","(path: string): T")),(0,o.kt)("p",null,"Like ",(0,o.kt)("inlineCode",{parentName:"p"},"requireModule")," but for importing TypeScript files ending in ",(0,o.kt)("inlineCode",{parentName:"p"},"ts")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"tsx"),". When imported, will\ntransform the file using the ",(0,o.kt)("inlineCode",{parentName:"p"},"typescript")," package (must be installed), evaluate the code in the\ncurrent module context, and apply the same process to all child imports."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { requireTypedModule } from '@boost/common';\n\nconst result: ReturnShape = requireTypedModule('../../some/module.ts');\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This helper rarely needs to be used directly as ",(0,o.kt)("inlineCode",{parentName:"p"},"parseFile")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"requireModule")," will call it under\nthe hood based on the file extension.")),(0,o.kt)("h3",{id:"toarray"},(0,o.kt)("inlineCode",{parentName:"h3"},"toArray")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"toArray<T",">","(value?: T | T[]): T[]")),(0,o.kt)("p",null,"Converts a non-array to an array. If the provided value is falsy, an empty array is returned. If the\nprovided value is truthy and a non-array, an array of 1 item is returned."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { toArray } from '@boost/common';\n\ntoArray(123); // [123]\ntoArray('abc'); // ['abc']\ntoArray(['a', 'b', 'c']); // ['a', 'b', 'c']\n")),(0,o.kt)("h2",{id:"serializers"},"Serializers"),(0,o.kt)("h3",{id:"json"},"JSON"),(0,o.kt)("p",null,"Powered by the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/json5"},"JSON5")," package, the ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," serializer can be\nused to parse and stringify JSON data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { json } from '@boost/common';\n\njson.parse(data);\njson.stringify(data);\n")),(0,o.kt)("h3",{id:"yaml"},"YAML"),(0,o.kt)("p",null,"Powered by the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/yaml"},"YAML")," package, the ",(0,o.kt)("inlineCode",{parentName:"p"},"yaml")," serializer can be used\nto parse and stringify YAML data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { yaml } from '@boost/common';\n\nyaml.parse(data);\nyaml.stringify(data);\n")))}f.isMDXComponent=!0},8944:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);