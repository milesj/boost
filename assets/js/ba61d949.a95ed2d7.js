"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2197],{6032:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var r=a(1948),s=a(3460),o=a(302),t=a(240),i=a(2548);const l={title:"CLIs",sidebar_label:"Overview"},c=void 0,d={id:"cli",title:"CLIs",description:"A type-safe and interactive command line program, powered by React and Ink. We also",source:"@site/docs/cli.mdx",sourceDirName:".",slug:"/cli",permalink:"/docs/cli",draft:!1,unlisted:!1,editUrl:"https://github.com/milesj/boost/edit/master/website/docs/cli.mdx",tags:[],version:"current",frontMatter:{title:"CLIs",sidebar_label:"Overview"},sidebar:"docs",previous:{title:"Arguments",permalink:"/docs/args"},next:{title:"Components",permalink:"/docs/cli/components"}},m={},h=[{value:"Installation",id:"installation",level:2},{value:"Environment variables",id:"environment-variables",level:2},{value:"Program",id:"program",level:2},{value:"Package integration",id:"package-integration",level:3},{value:"Stand-alone",id:"stand-alone",level:3},{value:"Multi-command",id:"multi-command",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Built-in",id:"built-in",level:4},{value:"Commands",id:"commands",level:2},{value:"Config",id:"config",level:3},{value:"Options",id:"options",level:3},{value:"Unknown options",id:"unknown-options",level:4},{value:"Global options",id:"global-options",level:4},{value:"Params",id:"params",level:3},{value:"Variadic params",id:"variadic-params",level:4},{value:"Rest args",id:"rest-args",level:3},{value:"Sub-commands",id:"sub-commands",level:3},{value:"Rendering components",id:"rendering-components",level:3},{value:"Tasks",id:"tasks",level:2},{value:"Categories",id:"categories",level:2},{value:"Logging",id:"logging",level:2},{value:"Themes",id:"themes",level:2},{value:"Performance improvements",id:"performance-improvements",level:2},{value:"Defer React imports",id:"defer-react-imports",level:3},{value:"Test utilities",id:"test-utilities",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.c,{tooling:!0,api:"/api/cli"}),"\n",(0,r.jsxs)(n.p,{children:["A type-safe and interactive command line program, powered by ",(0,r.jsx)(n.a,{href:"https://reactjs.org/",children:"React"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/vadimdemedes/ink",children:"Ink"}),". We also\nencourage the ",(0,r.jsx)(n.a,{href:"https://clig.dev",children:"Command Line Interface Guidelines"})," for building better programs."]}),"\n",(0,r.jsxs)(n.p,{children:["The CLI provides a simple object oriented framework for building and managing command line programs,\nwith clear separation of commands, middleware, args, a program instance, and more. It further\nstreamlines the development process by utilizing ",(0,r.jsx)(n.a,{href:"https://github.com/vadimdemedes/ink",children:"Ink"})," for terminal rendering, as manually\nhandling ANSI escape sequences and terminal widths can be tedious and complicated."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["The CLI makes heavy usage of the ",(0,r.jsx)(n.a,{href:"/docs/args",children:"@boost/args"})," package, which will be continually\nreferenced throughout this documentation. It's encouraged to read and understand it first."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(t.c,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"pnpm",value:"pnpm"},{label:"npm",value:"npm"}],children:[(0,r.jsx)(i.c,{value:"yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add @boost/cli react ink\n"})})}),(0,r.jsx)(i.c,{value:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add @boost/cli react ink\n"})})}),(0,r.jsx)(i.c,{value:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @boost/cli react ink\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"environment-variables",children:"Environment variables"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"BOOSTJS_CLI_THEME"})," (",(0,r.jsx)(n.code,{children:"string"}),") - Name of the theme module (without ",(0,r.jsx)(n.code,{children:"@boost"})," or ",(0,r.jsx)(n.code,{children:"boost"})," prefixes)\nto load for terminal style/color changes."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"program",children:"Program"}),"\n",(0,r.jsxs)(n.p,{children:["The entry point of the command line is commonly referred to as the binary, or script, and is managed\nby the ",(0,r.jsx)(n.a,{href:"/api/cli/class/Program",children:(0,r.jsx)(n.code,{children:"Program"})})," class. This class handles the registration of commands,\napplying ",(0,r.jsx)(n.a,{href:"#middleware",children:"middleware"})," to argv (",(0,r.jsx)(n.code,{children:"process.argv"}),"), parsing argv into\n",(0,r.jsx)(n.a,{href:"/docs/args",children:"arguments"})," (options, flags, etc), running the found command with these argument,\noutputing to the terminal, and finally cleaning up or handling failures."]}),"\n",(0,r.jsxs)(n.p,{children:["Begin by importing and instantiating the ",(0,r.jsx)(n.code,{children:"Program"})," class, while passing required and optional\n",(0,r.jsx)(n.a,{href:"/api/cli/interface/ProgramOptions",children:(0,r.jsx)(n.code,{children:"ProgramOptions"})}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Program } from '@boost/cli';\nimport pkg from './package.json';\n\nconst program = new Program({\n  bin: 'boost',\n  footer: 'Documentation: https://boostlib.dev',\n  name: 'Boost Examples',\n  version: pkg.version,\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Program example",src:a(8224).c+"",width:"1700",height:"400"})}),"\n",(0,r.jsxs)(n.p,{children:["Once ",(0,r.jsx)(n.a,{href:"#commands",children:"commands"})," and optional ",(0,r.jsx)(n.a,{href:"#middleware",children:"middleware"})," have been registered, you must run\nthe program with ",(0,r.jsx)(n.a,{href:"/api/cli/class/Program#run",children:(0,r.jsx)(n.code,{children:"Program#run()"})})," or\n",(0,r.jsx)(n.a,{href:"/api/cli/class/Program#runAndExit",children:(0,r.jsx)(n.code,{children:"Program#runAndExit()"})}),", with the latter automatically passing\nthe exit code to ",(0,r.jsx)(n.code,{children:"process.exitCode"}),". Both methods require an argv list to run."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"program.runAndExit(process.argv);\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you have any logic that should be bootstrapped before the program runs, and you would like to\ninherit the error handling of the CLI, you may pass an async-aware function as a 2nd argument when\nrunning."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"program.runAndExit(process.argv, async () => {\n  // CLI code to bootstrap before running\n  await bootstrapCli();\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"package-integration",children:"Package integration"}),"\n",(0,r.jsxs)(n.p,{children:["Now that you have the basics of a program, you can set the\n",(0,r.jsx)(n.a,{href:"https://docs.npmjs.com/files/package.json#bin",children:"bin"})," field in your ",(0,r.jsx)(n.code,{children:"package.json"}),". This should point\nto the program-aware file you have defined previously. For example, if my program will be called\n",(0,r.jsx)(n.code,{children:"boost"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "bin": {\n    "boost": "./bin/boost.js"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"If you're writing your program in TypeScript, or non-Node compatible JavaScript, you'll need to\ndown-level compile before releasing your package. A simple alternative approach is to point your\nbinary file to where the compiled program would be found."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="bin/boost.js"',children:"#!/usr/bin/env node\n\nrequire('../lib/program.js');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"stand-alone",children:"Stand-alone"}),"\n",(0,r.jsxs)(n.p,{children:["Boost offers 2 implementations for how the binary can be executed, the 1st is known as a stand-alone\nprogram. This implementation only supports 1 ",(0,r.jsx)(n.a,{href:"#commands",children:"command"})," known as the default command,\nwhich is immediately executed when the binary is ran. It does not support sub-commands."]}),"\n",(0,r.jsxs)(n.p,{children:["To create a stand-alone binary, create and instantiate a command, then pass it to\n",(0,r.jsx)(n.a,{href:"/api/cli/class/Program#default",children:(0,r.jsx)(n.code,{children:"Program#default()"})}),". The command's ",(0,r.jsx)(n.code,{children:"path"})," is ignored for this\nsituation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Program } from '@boost/cli';\nimport StandAloneCommand from './commands/StandAloneCommand';\n\nconst program = new Program({\n  // ...\n});\n\nprogram.default(new StandAloneCommand()).runAndExit(process.argv);\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Some good examples of stand-alone binaries are ",(0,r.jsx)(n.code,{children:"babel"}),", ",(0,r.jsx)(n.code,{children:"webpack"}),", and ",(0,r.jsx)(n.code,{children:"tsc"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"multi-command",children:"Multi-command"}),"\n",(0,r.jsxs)(n.p,{children:["The 2nd implementation is opposite the stand-alone program, and is known as a multi-command program.\nWhen the binary is ran, and no arguments are passed, a help menu is displayed instead of executing\nthe default command. Otherwise, if arguments ",(0,r.jsx)(n.em,{children:"are"})," passed, a registered command will be ran based on\nmatching path name."]}),"\n",(0,r.jsxs)(n.p,{children:["To create a multi-command binary, create and instantiate multiple commands, and pass them all to\n",(0,r.jsx)(n.a,{href:"/api/cli/class/Program#register",children:(0,r.jsx)(n.code,{children:"Program#register()"})}),". In the example below, the ",(0,r.jsx)(n.code,{children:"boost"})," binary\nwould support the ",(0,r.jsx)(n.code,{children:"boost install"}),", ",(0,r.jsx)(n.code,{children:"boost uninstall"}),", and ",(0,r.jsx)(n.code,{children:"boost build"})," commands."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Program } from '@boost/cli';\nimport InstallCommand from './commands/InstallCommand';\nimport UninstallCommand from './commands/UninstallCommand';\nimport BuildCommand from './commands/BuildCommand';\n\nconst program = new Program({\n  // ...\n});\n\nprogram\n  .register(new InstallCommand())\n  .register(new UninstallCommand())\n  .register(new BuildCommand())\n  .runAndExit(process.argv);\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Some good examples of stand-alone binaries are ",(0,r.jsx)(n.code,{children:"npm"}),", ",(0,r.jsx)(n.code,{children:"yarn"}),", and ",(0,r.jsx)(n.code,{children:"docker"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"middleware",children:"Middleware"}),"\n",(0,r.jsxs)(n.p,{children:["Boost will parse provided argv (a list of string arguments, typically from ",(0,r.jsx)(n.code,{children:"process.argv"}),") into\n",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/@boost/args",children:"args"})," (an object of options, flags, params, etc) for easier consumption. This process can be\nintercepted with ",(0,r.jsx)(n.a,{href:"/api/cli/class/Program#middleware",children:(0,r.jsx)(n.code,{children:"Program#middleware()"})}),", which allows both argv\nand args to be read and mutated."]}),"\n",(0,r.jsxs)(n.p,{children:["Middleware is a function, that receives the argv list as the 1st argument, and a parse callback as\nthe 2nd argument. It ",(0,r.jsx)(n.em,{children:"must"})," return an args object, which can be built by executing the parse\ncallback. This allows both before, middle, and after implementations to be possible, as demonstrated\nbelow."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Program, Middleware } from '@boost/cli';\n\nconst example: Middleware = (argv, parse) => {\n  if (argv.includes('--help')) {\n    argv.push('--all');\n  }\n\n  return parse();\n};\n\nconst program = new Program({\n  // ...\n});\n\nprogram\n  // Function reference\n  .middleware(example)\n  // Inline async function\n  .middleware(async (argv, parse) => {\n    const args = await parse();\n\n    args.options.flag = true;\n\n    return args;\n  })\n  .runAndExit(process.argv);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Middleware is async, so the parse callback ",(0,r.jsx)(n.em,{children:"must be"})," awaited! This also means you can implement your\nown async functionality, like file system access, or network requests."]}),"\n",(0,r.jsx)(n.h4,{id:"built-in",children:"Built-in"}),"\n",(0,r.jsxs)(n.p,{children:["Boost provides the following built-in middleware for common scenarios:\n",(0,r.jsx)(n.a,{href:"/api/cli/function/checkNodeRequirement",children:(0,r.jsx)(n.code,{children:"checkNodeRequirement"})})," and\n",(0,r.jsx)(n.a,{href:"/api/cli/function/checkPackageOutdated",children:(0,r.jsx)(n.code,{children:"checkPackageOutdated"})}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { checkNodeRequirement, checkPackageOutdated } from '@boost/cli';\n\nprogram\n  // Log a message\n  .middleware(checkPackageOutdated('@boost/cli', require('@boost/cli/package.json').version))\n  // Log an error\n  .middleware(checkNodeRequirement('>=12.10.0'))\n  // Throw an error\n  .middleware(checkNodeRequirement('>=12.10.0', true));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,r.jsxs)(n.p,{children:["Commands are self-encapsulated pieces of business logic that are ran when a matching path (a unique\nargument) is found on the command line. To create a command, import and extend the abstract\n",(0,r.jsx)(n.a,{href:"/api/cli/class/Command",children:(0,r.jsx)(n.code,{children:"Command"})})," class, and implement a\n",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#run",children:(0,r.jsx)(n.code,{children:"Command#run()"})})," method. This method can be async and even render\n",(0,r.jsx)(n.a,{href:"#rendering-components",children:"React components"}),"!"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command } from '@boost/cli';\n\nexport default class BuildCommand extends Command {\n  async run() {\n    this.log('Starting process...');\n\n    await runHeavyAsyncProcess();\n\n    this.log('Process finished!');\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"However, that's not all required, as a command and it's features must be configured! Features may be\ndefined using TypeScript decorators, static class properties, or property initializers. All formats\nwill be demonstrated in the examples below."}),"\n",(0,r.jsx)(n.h3,{id:"config",children:"Config"}),"\n",(0,r.jsxs)(n.p,{children:["All commands support the metadata configuration defined in\n",(0,r.jsx)(n.a,{href:"/api/cli/interface/CommandConfig",children:(0,r.jsx)(n.code,{children:"CommandConfig"})}),", with ",(0,r.jsx)(n.code,{children:"path"})," and ",(0,r.jsx)(n.code,{children:"description"})," being mandatory."]}),"\n",(0,r.jsxs)(n.p,{children:["When using decorators, import the ",(0,r.jsx)(n.a,{href:"/api/cli/function/Config",children:(0,r.jsx)(n.code,{children:"Config"})})," decorator and apply it to the\n",(0,r.jsx)(n.code,{children:"Command"})," class. The path and description are required, while all other metadata can be passed as an\nobject. Otherwise, just define static class properties of the same name!"]}),"\n",(0,r.jsxs)(t.c,{groupId:"command-format",defaultValue:"decorators",values:[{label:"Decorators",value:"decorators"},{label:"Initializers",value:"initializers"},{label:"Static properties",value:"props"}],children:[(0,r.jsx)(i.c,{value:"decorators",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Config } from '@boost/cli';\n\n@Config('build', 'Build a project', {\n  aliases: ['make'],\n  deprecated: true,\n})\nexport default class BuildCommand extends Command {}\n"})})}),(0,r.jsx)(i.c,{value:"initializers",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command } from '@boost/cli';\n\nexport default class BuildCommand extends Command {\n  static path: string = 'build';\n\n  static aliases: string[] = ['make'];\n\n  static description: string = 'Build a project';\n\n  static deprecated: boolean = true;\n}\n"})})}),(0,r.jsx)(i.c,{value:"props",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command } from '@boost/cli';\n\nexport default class BuildCommand extends Command {\n  static path: string = 'build';\n\n  static aliases: string[] = ['make'];\n\n  static description: string = 'Build a project';\n\n  static deprecated: boolean = true;\n}\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Command example",src:a(4008).c+"",width:"1700",height:"300"})}),"\n",(0,r.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/args#options",children:"Options"})," are optional arguments that accept a value on the command line. When a\ncommand is ran, each option is set as a class property based on the matching command line value, or\nthe provided default value. Like configuration above, options can be defined in many formats\n(below), with option types being passed to the 1st ",(0,r.jsx)(n.a,{href:"/api/cli/class/Command",children:(0,r.jsx)(n.code,{children:"Command"})})," generic slot."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Decorators"}),": There are 5 ",(0,r.jsx)(n.a,{href:"/api/cli/namespace/Arg",children:(0,r.jsx)(n.code,{children:"Arg"})})," decorators (uppercased names) to choose\nfrom when defining options, all of which are defined ",(0,r.jsx)(n.em,{children:"on"})," a class property, where the property\nname becomes the option name. For example, a property of ",(0,r.jsx)(n.code,{children:"save"})," would become the ",(0,r.jsx)(n.code,{children:"--save"})," option.\nDepending on the decorator, they support many ",(0,r.jsx)(n.a,{href:"/docs/args#options",children:"option settings"}),", excluding\n",(0,r.jsx)(n.code,{children:"type"})," and ",(0,r.jsx)(n.code,{children:"description"}),", which are inferred, and ",(0,r.jsx)(n.code,{children:"default"})," which comes from the property value."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Initializers"}),": There are 5 ",(0,r.jsx)(n.a,{href:"/api/cli/namespace/Arg",children:(0,r.jsx)(n.code,{children:"Arg"})})," initializers (lowercased names) to\nchoose from when defining options, all of which are defined ",(0,r.jsx)(n.em,{children:"as"})," a class property, where the\nproperty name becomes the option name. Configuration works exactly the same as decorators."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Properties"}),": If you prefer to use static properties, all options are defined through the single\nstatic ",(0,r.jsx)(n.code,{children:"options"})," property, which requires a mapping of option names to\n",(0,r.jsx)(n.a,{href:"/docs/args#options",children:"option settings"}),". With this approach, ",(0,r.jsx)(n.code,{children:"type"})," and ",(0,r.jsx)(n.code,{children:"description"})," are required,\nwith ",(0,r.jsx)(n.code,{children:"default"})," either being configured with a setting, or coming from the class property value.\nFor easier type safety, the ",(0,r.jsx)(n.a,{href:"/api/cli#Options",children:(0,r.jsx)(n.code,{children:"Options"})})," collection type can be used to type the\nstatic property."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.c,{groupId:"command-format",defaultValue:"decorators",values:[{label:"Decorators",value:"decorators"},{label:"Initializers",value:"initializers"},{label:"Properties",value:"props"}],children:[(0,r.jsx)(i.c,{value:"decorators",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Arg, GlobalOptions } from '@boost/cli';\n\ninterface CustomOptions extends GlobalOptions {\n  flag: boolean;\n  number: number;\n  numbers: number[];\n  string: string;\n  strings: string[];\n}\n\nexport default class CustomCommand extends Command<CustomOptions> {\n  // --flag\n  @Arg.Flag('Boolean flag')\n  flag: boolean = false;\n\n  // --number\n  @Arg.Number('Single number', { count: true, short: 'N' })\n  number: number = 0;\n\n  // --numbers\n  @Arg.Numbers('List of numbers', { deprecated: true })\n  numbers: number[] = [];\n\n  // --string\n  @Arg.String('Single string', { choices: ['a', 'b', 'c'], hidden: true })\n  string: string = '';\n\n  // --strings\n  @Arg.Strings('List of strings', { arity: 5, short: 'S' })\n  strings: string[] = [];\n\n  run() {\n    const { flag, strings } = this;\n\n    // ...\n  }\n}\n"})})}),(0,r.jsx)(i.c,{value:"initializers",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Arg, GlobalOptions } from '@boost/cli';\n\ninterface CustomOptions extends GlobalOptions {\n  flag: boolean;\n  number: number;\n  numbers: number[];\n  string: string;\n  strings: string[];\n}\n\nexport default class CustomCommand extends Command<CustomOptions> {\n  // --flag\n  flag = Arg.flag('Boolean flag');\n\n  // --number\n  number = Arg.number('Single number', { count: true, short: 'N' });\n\n  // --numbers\n  numbers = Arg.numbers('List of numbers', { deprecated: true });\n\n  // --string\n  string = Arg.string('Single string', { choices: ['a', 'b', 'c'], hidden: true });\n\n  // --strings\n  strings = Arg.strings('List of strings', { arity: 5, short: 'S' });\n\n  run() {\n    const { flag, strings } = this;\n\n    // ...\n  }\n}\n"})})}),(0,r.jsx)(i.c,{value:"props",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, GlobalOptions, Options } from '@boost/cli';\n\ninterface CustomOptions extends GlobalOptions {\n  flag: boolean;\n  number: number;\n  numbers: number[];\n  string: string;\n  strings: string[];\n}\n\nexport default class CustomCommand extends Command<CustomOptions> {\n  static options: Options<CustomOptions> = {\n    // --flag\n    flag: {\n      description: 'Boolean flag',\n      type: 'boolean',\n    },\n    // --number\n    number: {\n      count: true,\n      description: 'Single number',\n      short: 'N',\n      type: 'number',\n    },\n    // --numbers\n    numbers: {\n      deprecated: true,\n      description: 'List of numbers',\n      multiple: true,\n      type: 'number',\n    },\n    // --string\n    string: {\n      choices: ['a', 'b', 'c'],\n      description: 'Single string',\n      hidden: true,\n      type: 'string',\n    },\n    // --strings\n    strings: {\n      arity: 5,\n      description: 'List of strings',\n      multiple: true,\n      short: 'S',\n      type: 'string',\n    },\n  };\n\n  flag: boolean = false;\n\n  number: number = 0;\n\n  numbers: number[] = [];\n\n  string: string = '';\n\n  strings: string[] = [];\n\n  run() {\n    const { flag, strings } = this;\n\n    // ...\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Options example",src:a(1548).c+"",width:"1700",height:"485"})}),"\n",(0,r.jsx)(n.h4,{id:"unknown-options",children:"Unknown options"}),"\n",(0,r.jsxs)(n.p,{children:["By default, unknown options are not allowed and will throw an error. To allow, set the\n",(0,r.jsx)(n.code,{children:"allowUnknownOptions"})," ",(0,r.jsx)(n.a,{href:"#config",children:"configuration setting"})," to true. When enabled, all unknown options\nwill be set as a string object to the ",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#unknown",children:(0,r.jsx)(n.code,{children:"Command#unknown"})})," class\nproperty."]}),"\n",(0,r.jsxs)(t.c,{groupId:"command-format",defaultValue:"decorators",values:[{label:"Decorators",value:"decorators"},{label:"Initializers",value:"initializers"},{label:"Properties",value:"props"}],children:[(0,r.jsx)(i.c,{value:"decorators",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, GlobalOptions, Config } from '@boost/cli';\n\n@Config('custom', 'Example', { allowUnknownOptions: true })\nexport default class CustomCommand extends Command<GlobalOptions> {\n  run() {\n    const { foo, bar } = this.unknown;\n    // ...\n  }\n}\n"})})}),(0,r.jsx)(i.c,{value:"initializers",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, GlobalOptions } from '@boost/cli';\n\nexport default class CustomCommand extends Command<GlobalOptions> {\n  static path: string = 'custom';\n\n  static description: string = 'Example';\n\n  static allowUnknownOptions: boolean = true;\n\n  run() {\n    const { foo, bar } = this.unknown;\n    // ...\n  }\n}\n"})})}),(0,r.jsx)(i.c,{value:"props",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, GlobalOptions } from '@boost/cli';\n\nexport default class CustomCommand extends Command<GlobalOptions> {\n  static path: string = 'custom';\n\n  static description: string = 'Example';\n\n  static allowUnknownOptions: boolean = true;\n\n  run() {\n    const { foo, bar } = this.unknown;\n    // ...\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Unknown option example",src:a(2488).c+"",width:"1700",height:"200"})}),"\n",(0,r.jsx)(n.h4,{id:"global-options",children:"Global options"}),"\n",(0,r.jsx)(n.p,{children:"Boost provides the follow options that are always available to all commands."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--help"}),", ",(0,r.jsx)(n.code,{children:"-h"})," (",(0,r.jsx)(n.code,{children:"boolean"}),") - Displays a help menu for the chosen command or the program itself.\nAvailable under the ",(0,r.jsx)(n.code,{children:"help"})," class property."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--locale"})," (",(0,r.jsx)(n.code,{children:"string"}),') - Display errors, messages, and the interface in the chosen locale (if\nsupported). Locale must be in the format of "en" or "en-US". Available under the ',(0,r.jsx)(n.code,{children:"locale"})," class\nproperty."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--version"}),", ",(0,r.jsx)(n.code,{children:"-v"})," (",(0,r.jsx)(n.code,{children:"boolean"}),") - Display the current program version and exit. Available under the\n",(0,r.jsx)(n.code,{children:"version"})," class property."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"params",children:"Params"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/args#params",children:"Params"})," are command line values that will be passed to ",(0,r.jsx)(n.code,{children:"Command#run()"})," as\narguments. When defining params, all ",(0,r.jsx)(n.a,{href:"/docs/args#params",children:"param settings"})," are supported, and required\nare mandatory. Param types are passed to the 2nd ",(0,r.jsx)(n.code,{children:"Command"})," generic slot."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Decorators"}),": When using decorators, the ",(0,r.jsx)(n.a,{href:"/api/cli/namespace/Arg#Params",children:(0,r.jsx)(n.code,{children:"Arg.Params"})})," decorator\nmust be defined on the ",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#run",children:(0,r.jsx)(n.code,{children:"Command#run()"})})," method. It accepts an\nargument for each param you want to configure, in the order they should be expected."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Initializers"}),": For initializers, the ",(0,r.jsx)(n.a,{href:"/api/cli/namespace/Arg#params",children:(0,r.jsx)(n.code,{children:"Arg.params"})})," initializer\nmust be defined on the static ",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#params",children:(0,r.jsx)(n.code,{children:"params"})})," property, which requires\nan array of ",(0,r.jsx)(n.a,{href:"/docs/args#params",children:"param settings"}),". This is mix between decorators (above) and static\nproperties (below)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Properties"}),": If you prefer to use static properties, all params are defined through the single\nstatic ",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#params",children:(0,r.jsx)(n.code,{children:"params"})})," property, which requires an array of\n",(0,r.jsx)(n.a,{href:"/docs/args#params",children:"param settings"}),". For easier type safety, the ",(0,r.jsx)(n.a,{href:"/api/cli#Params",children:(0,r.jsx)(n.code,{children:"Params"})}),"\ncollection type can be used to type the static property."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.c,{groupId:"command-format",defaultValue:"decorators",values:[{label:"Decorators",value:"decorators"},{label:"Initializers",value:"initializers"},{label:"Properties",value:"props"}],children:[(0,r.jsx)(i.c,{value:"decorators",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Arg, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number, boolean];\n\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  @Arg.Params<CustomParams>(\n    {\n      description: 'String',\n      label: 'name',\n      required: true,\n      type: 'string',\n    },\n    {\n      default: 18,\n      description: 'Number',\n      label: 'age',\n      type: 'number',\n    },\n    {\n      description: 'Boolean',\n      label: 'active',\n      type: 'boolean',\n    },\n  )\n  run(name: string, age: number, active: boolean) {\n    // ...\n  }\n}\n"})})}),(0,r.jsx)(i.c,{value:"initializers",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Arg, Command, Params, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number, boolean];\n\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  static params = Arg.params<CustomParams>(\n    {\n      description: 'String',\n      label: 'name',\n      required: true,\n      type: 'string',\n    },\n    {\n      default: 18,\n      description: 'Number',\n      label: 'age',\n      type: 'number',\n    },\n    {\n      description: 'Boolean',\n      label: 'active',\n      type: 'boolean',\n    },\n  );\n\n  run(name: string, age: number, active: boolean) {\n    // ...\n  }\n}\n"})})}),(0,r.jsx)(i.c,{value:"props",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Params, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number, boolean];\n\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  static params: Params<CustomParams> = [\n    {\n      description: 'String',\n      label: 'name',\n      required: true,\n      type: 'string',\n    },\n    {\n      default: 18,\n      description: 'Number',\n      label: 'age',\n      type: 'number',\n    },\n    {\n      description: 'Boolean',\n      label: 'active',\n      type: 'boolean',\n    },\n  ];\n\n  run(name: string, age: number, active: boolean) {\n    // ...\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Params example",src:a(2292).c+"",width:"1700",height:"485"})}),"\n",(0,r.jsx)(n.h4,{id:"variadic-params",children:"Variadic params"}),"\n",(0,r.jsxs)(n.p,{children:["By default, variadic params are not enabled and will throw an error when an unconfigured param is\nfound. To allow, set the ",(0,r.jsx)(n.code,{children:"allowVariadicParams"})," ",(0,r.jsx)(n.a,{href:"#config",children:"configuration setting"})," to true. When\nenabled, all extra params will spread onto the end of the\n",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#run",children:(0,r.jsx)(n.code,{children:"Command#run()"})})," method as strings."]}),"\n",(0,r.jsx)(n.p,{children:"Using the example above, it would look like the following."}),"\n",(0,r.jsxs)(t.c,{groupId:"command-format",defaultValue:"decorators",values:[{label:"Decorators",value:"decorators"},{label:"Initializers",value:"initializers"},{label:"Properties",value:"props"}],children:[(0,r.jsx)(i.c,{value:"decorators",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Config, Arg, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number];\n\n@Config('custom', 'Example', { allowVariadicParams: true })\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  @Arg.Params<CustomParams>([\n    // ...\n  ])\n  run(name: string, age: number, ...params: string[]) {\n    // ...\n  }\n}\n"})})}),(0,r.jsx)(i.c,{value:"initializers",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Arg, Command, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number];\n\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  static path: string = 'custom';\n\n  static description: string = 'Example';\n\n  static allowVariadicParams: boolean = true;\n\n  static params = Arg.params<CustomParams>(/* ... */);\n\n  run(name: string, age: number, ...params: string[]) {\n    // ...\n  }\n}\n"})})}),(0,r.jsx)(i.c,{value:"props",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Params, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number];\n\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  static path: string = 'custom';\n\n  static description: string = 'Example';\n\n  static allowVariadicParams: boolean = true;\n\n  static params: Params<CustomParams> = [\n    // ...\n  ];\n\n  run(name: string, age: number, ...params: string[]) {\n    // ...\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Variadic params example",src:a(7612).c+"",width:"1700",height:"190"})}),"\n",(0,r.jsx)(n.h3,{id:"rest-args",children:"Rest args"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/args#rest-args",children:"Rest arguments"})," are all arguments that come after a standalone ",(0,r.jsx)(n.code,{children:"--"}),"\ndelimiter, and can be accessed using the ",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#rest",children:(0,r.jsx)(n.code,{children:"Command#rest"})})," property,\nwhich is an array of strings."]}),"\n",(0,r.jsx)(n.h3,{id:"sub-commands",children:"Sub-commands"}),"\n",(0,r.jsx)(n.p,{children:"Of course commands can register their own commands, known as sub-commands -- it's commands all the\nway down! Sub-commands are configured exactly the same, with the key difference being that their\npath must be prefixed with their parent command's path, separated by a colon."}),"\n",(0,r.jsxs)(n.p,{children:["For example, say we have a scaffolding command, where each sub-command is the specific template to\ngenerate. The parent path would be ",(0,r.jsx)(n.code,{children:"scaffold"}),", where a child would be ",(0,r.jsx)(n.code,{children:"scaffold:model"}),",\n",(0,r.jsx)(n.code,{children:"scaffond:controller"}),", so on and so forth. You can see this in action below."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Config } from '@boost/cli';\n\n@Config('scaffold:controller', 'Scaffold a controller')\nclass ScaffoldControllerCommand extends Command {}\n\n@Config('scaffold:model', 'Scaffold a model')\nclass ScaffoldModelCommand extends Command {}\n\n@Config('scaffold', 'Scaffold a template')\nclass ScaffoldCommand extends Command {\n  constructor() {\n    super();\n\n    this.register(new ScaffoldControllerCommand());\n    this.register(new ScaffoldModelCommand());\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Sub-commands can now be executed on the command line by passing their full path, like so:\n",(0,r.jsx)(n.code,{children:"boost scaffold:model --name User"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Sub-commands example",src:a(5224).c+"",width:"1701",height:"485"})}),"\n",(0,r.jsx)(n.h3,{id:"rendering-components",children:"Rendering components"}),"\n",(0,r.jsxs)(n.p,{children:["This chapter assumes you have knowledge of ",(0,r.jsx)(n.a,{href:"https://reactjs.org/",children:"React"}),", JSX/TSX, and ",(0,r.jsx)(n.a,{href:"https://github.com/vadimdemedes/ink",children:"Ink"}),". If you do not,\nit's highly encouraged to study those topics, but building CLIs with React is not necessarily a\nrequirement as you can use ",(0,r.jsx)(n.a,{href:"#logging",children:"logging"})," instead."]}),"\n",(0,r.jsxs)(n.p,{children:["With that being said, components can be rendered from a command by returning a React element from\n",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#run",children:(0,r.jsx)(n.code,{children:"Command#run()"})}),", or by calling the\n",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#render",children:(0,r.jsx)(n.code,{children:"Command#render()"})})," method. For a quick demonstration, let's\nimplement a component that writes to a file asynchronously."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Components and hooks provided by Boost can be imported from ",(0,r.jsx)(n.code,{children:"@boost/cli/react"}),"!"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import fs from 'fs';\nimport { useState, useEffect } from 'react';\nimport { Box, Text } from 'ink';\nimport { Style, useProgram } from '@boost/cli/react';\n\ninterface WriteConfigProps {\n  data: object;\n  path: string;\n}\n\nexport default function WriteConfig({ data, path }: WriteConfigProps) {\n  const { exit } = useProgram();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fs.promises\n      .writeFile(path, JSON.stringify(data), 'utf8')\n      .then(() => {\n        setLoading(false);\n      })\n      .catch((error) => {\n        exit(error);\n      });\n  }, [path]);\n\n  if (loading) {\n    return (\n      <Box>\n        <Text>Writing config file...</Text>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Text>\n        Wrote config to file <Style type=\"success\">{path}</Style>\n      </Text>\n    </Box>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then we implement the command that returns and renders the component."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Command, Config, Arg } from '@boost/cli';\nimport WriteConfig from './components/WriteConfig';\n\n@Config('config', 'Manage configuration files')\nexport default class ConfigCommand extends Command {\n  @Arg.Params({\n    description: 'Path to file',\n    type: 'string',\n    required: true,\n  })\n  async run(path: string) {\n    const data = await loadConfigFromSomeSource();\n\n    await this.render(<WriteConfig data={data} path={path} />);\n\n    // Or...\n    return <WriteConfig data={data} path={path} />;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Using the ",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#render",children:(0,r.jsx)(n.code,{children:"Command#render()"})})," method allows for multiple and or\ndifferent components to be rendered within the same run cycle. Returning a component will only\nuse 1. However, both can be used together!"]}),"\n",(0,r.jsx)(n.h2,{id:"tasks",children:"Tasks"}),"\n",(0,r.jsx)(n.p,{children:"Tasks are reusable functions that can be executed within any command, while gaining contextual and\nlimited access to that command's instance. This promotes reusability and composition while avoiding\ninheritance related issues."}),"\n",(0,r.jsxs)(n.p,{children:["To use a task, create a function with any arguments and function body that you'd like. The function\nbody has access to the parent command's ",(0,r.jsx)(n.a,{href:"#options",children:"options"}),", ",(0,r.jsx)(n.a,{href:"#logging",children:"logger"}),", and\n",(0,r.jsx)(n.a,{href:"#rest-args",children:"rest arguments"})," through ",(0,r.jsx)(n.code,{children:"this"}),". If using TypeScript, the ",(0,r.jsx)(n.code,{children:"this"})," special argument should\nbe typed."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import fs from 'fs';\nimport { TaskContext } from '@boost/cli';\n\n// Write a JSON blob to a file defined by a --path option\nexport default async function writeJson(\n  this: TaskContext<{ path: string }>,\n  data: unknown,\n  pretty: boolean = false,\n) {\n  await fs.promises.writeFile(\n    this.path,\n    pretty ? JSON.stringify(data, null, 2) : JSON.stringify(data),\n    'utf8',\n  );\n\n  this.log('Wrote file to %s', this.path);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now that are task is created, we can now execute it within a command using\n",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#runTask",children:(0,r.jsx)(n.code,{children:"Command#runTask()"})}),". This method requires the task as a function\nreference, and all it's required arguments."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Config, Arg } from '@boost/cli';\nimport writeJson from './tasks/writeJson';\n\n@Config('init', 'Initialize project')\nexport default class InitCommand extends Command {\n  @Arg.String('Path to config file')\n  path: string;\n\n  async run() {\n    const data = await loadConfigFromSomeSource();\n\n    await this.runTask(writeJson, data);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Tasks are a command only feature and cannot be executed from within a React component."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"categories",children:"Categories"}),"\n",(0,r.jsxs)(n.p,{children:["Categories are a mechanism for grouping commands and options in the help menu for easier\nreadability. They're shared between both commands and options for interoperability purposes, and can\nbe defined globally with ",(0,r.jsx)(n.a,{href:"/api/cli/class/Program#categories",children:(0,r.jsx)(n.code,{children:"Program#categories()"})}),", or per command\nthrough ",(0,r.jsxs)(n.a,{href:"#config",children:[(0,r.jsx)(n.code,{children:"categories"})," configuration"]}),". To make use of categories, define a mapping of keys\nto category names and optional weights, like so."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"program.categories({\n  // Explicit weight\n  cache: {\n    name: 'Caching',\n    weight: 60,\n  },\n\n  // Automatic weight\n  error: 'Error handling',\n});\n"})}),"\n",(0,r.jsxs)(t.c,{groupId:"command-format",defaultValue:"decorators",values:[{label:"Decorators",value:"decorators"},{label:"Initializers",value:"initializers"},{label:"Properties",value:"props"}],children:[(0,r.jsx)(i.c,{value:"decorators",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Config } from '@boost/cli';\n\n@Config('custom', 'Example', {\n  categories: {\n    cache: {\n      name: 'Caching',\n      weight: 60,\n    },\n    error: 'Error handling',\n  },\n})\nexport default class CustomCommand extends Command {\n  // ...\n}\n"})})}),(0,r.jsx)(i.c,{value:"initializers",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Categories } from '@boost/cli';\n\nexport default class CustomCommand extends Command {\n  static path: string = 'custom';\n\n  static description: string = 'Example';\n\n  static categories: Categories = {\n    cache: {\n      name: 'Caching',\n      weight: 60,\n    },\n    error: 'Error handling',\n  };\n\n  // ...\n}\n"})})}),(0,r.jsx)(i.c,{value:"props",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Categories } from '@boost/cli';\n\nexport default class CustomCommand extends Command {\n  static path: string = 'custom';\n\n  static description: string = 'Example';\n\n  static categories: Categories = {\n    cache: {\n      name: 'Caching',\n      weight: 60,\n    },\n    error: 'Error handling',\n  };\n\n  // ...\n}\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Categories are sorted by weight first, then alphabetical second, so define ",(0,r.jsx)(n.code,{children:"weight"})," when you want\nstrict control of the category order. Uncategorized items have a weight of ",(0,r.jsx)(n.code,{children:"0"}),", and the built-in\nglobals have a weight of ",(0,r.jsx)(n.code,{children:"100"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Now that categories have been defined, be sure to set the category on your commands and options\nusing the ",(0,r.jsx)(n.code,{children:"category"})," setting! Here's an example using decorators."]}),"\n",(0,r.jsxs)(t.c,{groupId:"command-format",defaultValue:"decorators",values:[{label:"Decorators",value:"decorators"},{label:"Initializers",value:"initializers"},{label:"Properties",value:"props"}],children:[(0,r.jsx)(i.c,{value:"decorators",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Config, Arg, GlobalOptions } from '@boost/cli';\n\ninterface BuildOptions extends GlobalOptions {\n  cache: boolean;\n}\n\n@Config('build', 'Build a project', { category: 'build' })\nexport default class BuildCommand extends Command<BuildOptions> {\n  @Arg.Flag('Write output to cache', { category: 'cache' })\n  cache: boolean = false;\n\n  // ...\n}\n"})})}),(0,r.jsx)(i.c,{value:"initializers",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Arg, Command, Options, GlobalOptions } from '@boost/cli';\n\ninterface BuildOptions extends GlobalOptions {\n  cache: boolean;\n}\n\nexport default class BuildCommand extends Command<BuildOptions> {\n  static path: string = 'build';\n\n  static description: string = 'Build a project';\n\n  static category: string = 'build';\n\n  cache = Arg.flag('Write output to cache', { category: 'cache' });\n\n  // ...\n}\n"})})}),(0,r.jsx)(i.c,{value:"props",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command, Options, GlobalOptions } from '@boost/cli';\n\ninterface BuildOptions extends GlobalOptions {\n  cache: boolean;\n}\n\nexport default class BuildCommand extends Command<BuildOptions> {\n  static path: string = 'build';\n\n  static description: string = 'Build a project';\n\n  static category: string = 'build';\n\n  static options: Options<BuildOptions> = {\n    cache: {\n      category: 'cache',\n      description: 'Write output to cache',\n      type: 'boolean',\n    },\n  };\n\n  cache: boolean = false;\n\n  // ...\n}\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"logging",children:"Logging"}),"\n",(0,r.jsxs)(n.p,{children:["Boost integrates its very own ",(0,r.jsx)(n.a,{href:"/docs/log",children:"logger"})," so that logs can easily be sent to the configured\n",(0,r.jsx)(n.code,{children:"stdout"})," and ",(0,r.jsx)(n.code,{children:"stderr"}),". The logger is accessible using ",(0,r.jsx)(n.a,{href:"/api/cli/class/Command#log",children:(0,r.jsx)(n.code,{children:"Command#log()"})}),"\nand associated methods."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command } from '@boost/cli';\n\nclass CustomCommand extends Command {\n  run() {\n    this.log('Normal log');\n    this.log.error('Failed log');\n    this.log.debug('Debug log');\n    // ...\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The logger is also accessible within a component by using the\n",(0,r.jsx)(n.a,{href:"/api/cli-react/function/useProgram",children:(0,r.jsx)(n.code,{children:"useProgram()"})})," hook, like so."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useContext } from 'react';\nimport { Box } from 'ink';\nimport { useProgram } from '@boost/cli/react';\n\nfunction CustomComponent() {\n  const { log } = useProgram();\n\n  log('Normal log');\n  log.error('Failed log');\n  log.debug('Debug log');\n  // ...\n\n  return <Box>Loading...</Box>;\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"It's highly encouraged to use the logger instead of the native console, so that logged messages do\nnot interrupt the React rendering process and write to the configured streams!"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"themes",children:"Themes"}),"\n",(0,r.jsxs)(n.p,{children:["Themes allow consumers to alter the color of text and backgrounds for elements rendered with the\n",(0,r.jsx)(n.code,{children:"Style"})," component. Themes are simply npm modules that return an object of hexcodes or ANSI colors,\nand can be enabled by defining the ",(0,r.jsx)(n.code,{children:"BOOSTJS_CLI_THEME"})," environment variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"BOOSTJS_CLI_THEME=nyan <program>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When defining a theme, we'll attempt to load from ",(0,r.jsx)(n.code,{children:"@boost/theme-<name>"})," or ",(0,r.jsx)(n.code,{children:"boost-theme-<name>"}),",\notherwise we throw an error. Third-party modules are currently not supported."]}),"\n",(0,r.jsx)(n.h2,{id:"performance-improvements",children:"Performance improvements"}),"\n",(0,r.jsx)(n.p,{children:"If your program feels sluggish, or startup cost is high, or time-to-first-render lagging, please try\none of the following performance improvements."}),"\n",(0,r.jsx)(n.h3,{id:"defer-react-imports",children:"Defer React imports"}),"\n",(0,r.jsxs)(n.p,{children:["To reduce startup costs, you can defer Ink, React, any React components or hooks, and any non-Boost\nrelated imports by utilizing ",(0,r.jsx)(n.code,{children:"import()"})," (Boost also does this internally). By using this approach,\nyou defer evaluation of these modules ",(0,r.jsx)(n.em,{children:"until"})," they are needed."]}),"\n",(0,r.jsxs)(n.p,{children:["The downside of this approach is that you ",(0,r.jsx)(n.em,{children:"cannot"})," use JSX syntax. However, this only applies\n",(0,r.jsx)(n.em,{children:"within"})," commands, as standard components can import React and use JSX as normal."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Command } from '@boost/cli';\n\nexport default class ExampleCommand extends Command {\n  async run() {\n    const { createElement } = await import('react');\n    const { ExampleComponent } = await import('./components/ExampleComponent');\n\n    const data = await loadDataFromSomeSource();\n\n    return createElement(ExampleComponent, { data });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"test-utilities",children:"Test utilities"}),"\n",(0,r.jsxs)(n.p,{children:["A handful of ",(0,r.jsx)(n.a,{href:"https://vitest.dev/",children:"Vitest"})," utilities are available in the ",(0,r.jsx)(n.code,{children:"@boost/cli/test"})," module.\n",(0,r.jsx)(n.a,{href:"/api/cli-test",children:"View the API for a full list"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},2548:(e,n,a)=>{a.d(n,{c:()=>t});a(6952);var r=a(8112);const s={tabItem:"tabItem_wHwb"};var o=a(1948);function t(e){let{children:n,hidden:a,className:t}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.c)(s.tabItem,t),hidden:a,children:n})}},240:(e,n,a)=>{a.d(n,{c:()=>p});var r=a(6952),s=a(8112),o=a(320),t=a(500),i=a(6576);const l={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var c=a(1948);function d(e){let{className:n,block:a,selectedValue:r,selectValue:t,tabValues:i}=e;const d=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.MV)(),h=e=>{const n=e.currentTarget,a=d.indexOf(n),s=i[a].value;s!==r&&(m(n),t(s))},p=e=>{var n;let a=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{var r;const n=d.indexOf(e.currentTarget)+1;a=null!=(r=d[n])?r:d[0];break}case"ArrowLeft":{var s;const n=d.indexOf(e.currentTarget)-1;a=null!=(s=d[n])?s:d[d.length-1];break}}null==(n=a)||n.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.c)("tabs",{"tabs--block":a},n),children:i.map((e=>{let{value:n,label:a,attributes:o}=e;return(0,c.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>d.push(e),onKeyDown:p,onClick:h,...o,className:(0,s.c)("tabs__item",l.tabItem,null==o?void 0:o.className,{"tabs__item--active":r===n}),children:null!=a?a:n},n)}))})}function m(e){let{lazy:n,children:a,selectedValue:s}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function h(e){const n=(0,t.a)(e);return(0,c.jsxs)("div",{className:(0,s.c)("tabs-container",l.tabList),children:[(0,c.jsx)(d,{...e,...n}),(0,c.jsx)(m,{...e,...n})]})}function p(e){const n=(0,i.c)();return(0,c.jsx)(h,{...e,children:(0,t.A)(e.children)},String(n))}},500:(e,n,a)=>{a.d(n,{A:()=>c,a:()=>p});var r=a(6952),s=a(7976),o=a(2508),t=a(440),i=a(2484),l=a(900);function c(e){var n,a;return null!=(n=null==(a=r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:a.filter(Boolean))?n:[]}function d(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=null!=n?n:function(e){return c(e).map((e=>{let{props:{value:n,label:a,attributes:r,default:s}}=e;return{value:n,label:a,attributes:r,default:s}}))}(a);return function(e){const n=(0,i.w)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,a])}function m(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:a}=e;const o=(0,s.Uz)(),i=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,t._M)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(o.location.search);n.set(i,e),o.replace({...o.location,search:n.toString()})}),[i,o])]}function p(e){const{defaultValue:n,queryString:a=!1,groupId:s}=e,t=d(e),[i,c]=(0,r.useState)((()=>function(e){var n;let{defaultValue:a,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+r.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}const s=null!=(n=r.find((e=>e.default)))?n:r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:t}))),[p,u]=h({queryString:a,groupId:s}),[g,x]=function(e){let{groupId:n}=e;const a=function(e){return e?"docusaurus.tab."+e:null}(n),[s,o]=(0,l.IN)(a);return[s,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:s}),f=(()=>{const e=null!=p?p:g;return m({value:e,tabValues:t})?e:null})();(0,o.c)((()=>{f&&c(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:t}))throw new Error("Can't select invalid tab value="+e);c(e),u(e),x(e)}),[u,x,t]),tabValues:t}}},5392:(e,n,a)=>{a.d(n,{c:()=>s});var r=a(1948);function s(e){let{children:n,type:a}=e;return(0,r.jsx)("span",{className:"badge badge--"+a,children:n})}},302:(e,n,a)=>{a.d(n,{c:()=>c});var r=a(4308),s=a(3752),o=a(5392);const t={badgeGroup:"badgeGroup_syf7",apiLink:"apiLink_JWAN"};var i=a(1948);function l(e){let{children:n}=e;return(0,i.jsx)("span",{className:t.badgeGroup,children:n})}function c(e){let{api:n,backend:a,frontend:c,tooling:d}=e;return(0,i.jsxs)(i.Fragment,{children:[n&&(0,i.jsxs)(r.default,{className:t.apiLink,to:n,children:["API ",(0,i.jsx)(s.c,{})]}),(0,i.jsxs)(l,{children:[a&&(0,i.jsx)(o.c,{type:"warning",children:"Backend"}),c&&(0,i.jsx)(o.c,{type:"success",children:"Frontend"}),d&&(0,i.jsx)(o.c,{type:"primary",children:"Tooling"})]})]})}},4008:(e,n,a)=>{a.d(n,{c:()=>r});const r=a.p+"assets/images/command-a48cc120cfb60e1492d3ce9ad6915909.png"},1548:(e,n,a)=>{a.d(n,{c:()=>r});const r=a.p+"assets/images/options-6bdfd8c724ac6edc617388246ccad48b.png"},2292:(e,n,a)=>{a.d(n,{c:()=>r});const r=a.p+"assets/images/params-656c1710ddbe411e6fc7851a1ac2630b.png"},8224:(e,n,a)=>{a.d(n,{c:()=>r});const r=a.p+"assets/images/program-009fb9f110627dae066bbe6d43fe19fe.png"},5224:(e,n,a)=>{a.d(n,{c:()=>r});const r=a.p+"assets/images/subcommands-292639c856ef1ee95f1a5a849b9b2c58.png"},2488:(e,n,a)=>{a.d(n,{c:()=>r});const r=a.p+"assets/images/unknown-option-c38449a72c1b6205d54817265c084afc.png"},7612:(e,n,a)=>{a.d(n,{c:()=>r});const r=a.p+"assets/images/variadic-params-0c7270791d792ad80223d084b397c511.png"},3460:(e,n,a)=>{a.d(n,{I:()=>i,M:()=>t});var r=a(6952);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);