(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[452],{5318:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},v=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),v=u(t),m=r,d=v["".concat(o,".").concat(m)]||v[m]||p[m]||l;return t?a.createElement(d,i(i({ref:n},c),{},{components:t})):a.createElement(d,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=v;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},1554:function(e,n,t){"use strict";t.d(n,{Z:function(){return l}});var a=t(7378),r="iconExternalLink_pqex",l=function(e){var n=e.width,t=void 0===n?13.5:n,l=e.height,i=void 0===l?13.5:l;return a.createElement("svg",{width:t,height:i,"aria-hidden":"true",viewBox:"0 0 24 24",className:r},a.createElement("path",{fill:"currentColor",d:"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"}))}},517:function(e,n,t){"use strict";var a=t(7378);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},4535:function(e,n,t){"use strict";t.d(n,{Z:function(){return v}});var a=t(9603),r=t(7378),l=t(6457),i=t(4956);var s=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=t(6792),u=t(8944),c="tabItem_c0e5";function p(e){var n,t,a,l=e.lazy,i=e.block,p=e.defaultValue,v=e.values,m=e.groupId,d=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"string"==typeof e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=v?v:f.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),g=(0,o.duplicates)(h,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===p?p:null!=(n=null!=p?p:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(a=f[0])?void 0:a.props.value;if(null!==k&&!h.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=s(),y=b.tabGroupChoices,E=b.setTabGroupChoices,N=(0,r.useState)(k),w=N[0],T=N[1],x=[],C=(0,o.useScrollPositionBlocker)().blockElementScrollPositionUntilNextRender;if(null!=m){var O=y[m];null!=O&&O!==w&&h.some((function(e){return e.value===O}))&&T(O)}var Z=function(e){var n=e.currentTarget,t=x.indexOf(n),a=h[t].value;a!==w&&(C(n),T(a),null!=m&&E(m,a))},j=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=x.indexOf(e.currentTarget)+1;t=x[a]||x[0];break;case"ArrowLeft":var r=x.indexOf(e.currentTarget)-1;t=x[r]||x[x.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":i},d)},h.map((function(e){var n=e.value,t=e.label;return r.createElement("li",{role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,className:(0,u.Z)("tabs__item",c,{"tabs__item--active":w===n}),key:n,ref:function(e){return x.push(e)},onKeyDown:j,onFocus:Z,onClick:Z},null!=t?t:n)}))),l?(0,r.cloneElement)(f.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})}))))}function v(e){var n=(0,l.Z)();return r.createElement(p,(0,a.Z)({key:String(n)},e))}},4956:function(e,n,t){"use strict";var a=(0,t(7378).createContext)(void 0);n.Z=a},297:function(e,n,t){"use strict";t.d(n,{Z:function(){return r}});var a=t(7378);function r(e){var n=e.children,t=e.type;return a.createElement("span",{className:"badge badge--"+t},n)}},7586:function(e,n,t){"use strict";t.d(n,{Z:function(){return c}});var a=t(7378),r=t(4142),l=t(1554),i=t(297),s="badgeGroup_2HOO",o="apiLink_32Vk";function u(e){var n=e.children;return a.createElement("span",{className:s},n)}function c(e){var n=e.api,t=e.backend,s=e.frontend,c=e.tooling;return a.createElement(a.Fragment,null,n&&a.createElement(r.default,{className:o,to:n},"API ",a.createElement(l.Z,null)),a.createElement(u,null,t&&a.createElement(i.Z,{type:"warning"},"Backend"),s&&a.createElement(i.Z,{type:"success"},"Frontend"),c&&a.createElement(i.Z,{type:"primary"},"Tooling")))}},2521:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return v},toc:function(){return m},default:function(){return f}});var a=t(9603),r=t(120),l=(t(7378),t(5318)),i=t(7586),s=t(4535),o=t(517),u=["components"],c={title:"Events"},p=void 0,v={unversionedId:"event",id:"event",isDocsHomePage:!1,title:"Events",description:"A type-safe event system with multiple emitter patterns.",source:"@site/docs/event.mdx",sourceDirName:".",slug:"/event",permalink:"/docs/event",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/event.mdx",tags:[],version:"current",frontMatter:{title:"Events"},sidebar:"docs",previous:{title:"Decorators",permalink:"/docs/decorators"},next:{title:"Logging",permalink:"/docs/log"}},m=[{value:"Installation",id:"installation",children:[],level:2},{value:"Events",id:"events",children:[{value:"Registering listeners",id:"registering-listeners",children:[],level:3},{value:"Unregistering listeners",id:"unregistering-listeners",children:[],level:3},{value:"Emitting events",id:"emitting-events",children:[],level:3}],level:2},{value:"Scopes",id:"scopes",children:[],level:2},{value:"Event types",id:"event-types",children:[{value:"Event",id:"event",children:[],level:3},{value:"BailEvent",id:"bailevent",children:[],level:3},{value:"ConcurrentEvent",id:"concurrentevent",children:[],level:3},{value:"WaterfallEvent",id:"waterfallevent",children:[],level:3}],level:2}],d={toc:m};function f(e){var n=e.components,t=(0,r.Z)(e,u);return(0,l.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(i.Z,{backend:!0,frontend:!0,tooling:!0,api:"/api/event",mdxType:"EnvBadges"}),(0,l.kt)("p",null,"A type-safe event system with multiple emitter patterns."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)(s.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/event\n"))),(0,l.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/event\n")))),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("p",null,"The event system is built around individual ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,l.kt)("inlineCode",{parentName:"a"},"Event"))," classes that can be instantiated in\nisolation, register and unregister their own listeners, and emit values by executing each listener\nwith arguments. There are multiple ",(0,l.kt)("a",{parentName:"p",href:"#types"},"types of events"),", so choose the best one for each use\ncase."),(0,l.kt)("p",null,"To begin using events, instantiate an ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,l.kt)("inlineCode",{parentName:"a"},"Event"))," with a unique name -- the name is purely for\ndebugging purposes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Event } from '@boost/event';\n\nconst event = new Event<[string]>('example');\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,l.kt)("inlineCode",{parentName:"a"},"Event")),"s utilize TypeScript generics for typing the arguments passed to listener functions.\nThis can be defined using a tuple or an array in the 1st generic slot. The 2nd slot is reserved for\n",(0,l.kt)("a",{parentName:"p",href:"#scopes"},"scopes"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// One argument of type number\nnew Event<[number]>('foo');\n\n// Two arguments of type number and string\nnew Event<[number, string]>('bar');\n\n// Three arguments with the last item being optional\nnew Event<[object, boolean, string?]>('baz');\n\n// Array of any type or size\nnew Event<unknown[]>('foo');\n")),(0,l.kt)("h3",{id:"registering-listeners"},"Registering listeners"),(0,l.kt)("p",null,"Listeners are simply functions that can be registered to an event using ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event#listen"},(0,l.kt)("inlineCode",{parentName:"a"},"Event#listen()")),".\nThe same listener function reference will only be registered once."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"event.listen(listener);\n")),(0,l.kt)("p",null,"A listener can also be registered to execute only once, using ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event#once"},(0,l.kt)("inlineCode",{parentName:"a"},"Event#once()")),", regardless of\nhow many times the event has been emitted."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"event.once(listener);\n")),(0,l.kt)("h3",{id:"unregistering-listeners"},"Unregistering listeners"),(0,l.kt)("p",null,"A listener can be unregistered from an event using ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event#unlisten"},(0,l.kt)("inlineCode",{parentName:"a"},"Event#unlisten()")),". The same listener\nreference used to register must also be used for unregistering."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"event.unlisten(listener);\n")),(0,l.kt)("p",null,"To make this flow easier, a pre-configured unlistener is returned from ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event#listen"},(0,l.kt)("inlineCode",{parentName:"a"},"Event#listen()")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const unlisten = event.listen(listener);\nunlisten();\n")),(0,l.kt)("h3",{id:"emitting-events"},"Emitting events"),(0,l.kt)("p",null,"Emitting is the concept of executing all registered listeners with a set of arguments. This can be\nachieved through the ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event#emit"},(0,l.kt)("inlineCode",{parentName:"a"},"Event#emit()"))," method, which requires an array of values to pass to\neach listener as arguments."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"event.emit(['abc']);\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The array values and its types should match the ",(0,l.kt)("a",{parentName:"p",href:"#events"},"generics defined")," on the constructor.")),(0,l.kt)("h2",{id:"scopes"},"Scopes"),(0,l.kt)("p",null,"Scopes are a mechanism for restricting listeners to a unique subset. Scopes are defined as the 2nd\nargument to ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event#listen"},(0,l.kt)("inlineCode",{parentName:"a"},"Event#listen()")),", ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event#unlisten"},(0,l.kt)("inlineCode",{parentName:"a"},"#unlisten()")),", ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event#once"},(0,l.kt)("inlineCode",{parentName:"a"},"#once()")),", and\n",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event#emit"},(0,l.kt)("inlineCode",{parentName:"a"},"#emit()")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"event.listen(listener);\nevent.listen(listener, 'foo');\nevent.listen(listener, 'bar');\n\n// Will only execute the 1st listener\nevent.emit([]);\n\n// Will only execute the 2nd listener\nevent.emit([], 'foo');\n")),(0,l.kt)("p",null,"A list of acceptable scope names can be passed as the 2nd generic slot to ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,l.kt)("inlineCode",{parentName:"a"},"Event")),",\notherwise all strings are allowed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Event<[number], 'foo' | 'bar' | 'baz'>('event');\n")),(0,l.kt)("h2",{id:"event-types"},"Event types"),(0,l.kt)("p",null,"There are 4 types of events that can be instantiated and emitted."),(0,l.kt)("h3",{id:"event"},"Event"),(0,l.kt)("p",null,"Standard ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,l.kt)("inlineCode",{parentName:"a"},"Event"))," that executes listeners in the order they were registered."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Event } from '@boost/event';\n\nconst event = new Event<[string, number]>('standard');\n\nevent.listen(listener);\n\nevent.emit(['abc', 123]);\n")),(0,l.kt)("h3",{id:"bailevent"},"BailEvent"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/BailEvent"},(0,l.kt)("inlineCode",{parentName:"a"},"BailEvent"))," is like ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,l.kt)("inlineCode",{parentName:"a"},"Event"))," but can bail the execution\nloop early if a listener returns ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". The emit method will return ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if a bail occurs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { BailEvent } from '@boost/event';\n\nconst event = new BailEvent<[object]>('bail');\n\n// Will execute\nevent.listen(() => {});\n\n// Will execute and bail\nevent.listen(() => false);\n\n// Will not execute\nevent.listen(() => {});\n\nconst bailed = event.emit([{ example: true }]);\n")),(0,l.kt)("h3",{id:"concurrentevent"},"ConcurrentEvent"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/ConcurrentEvent"},(0,l.kt)("inlineCode",{parentName:"a"},"ConcurrentEvent"))," executes listeners in parallel and returns\na promise with the result of all listeners."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { ConcurrentEvent } from '@boost/event';\n\nconst event = new ConcurrentEvent<[]>('parallel');\n\nevent.listen(doHeavyProcess);\nevent.listen(doBackgroundJob);\n\n// Async/await\nconst result = await event.emit([]);\n\n// Promise\nevent.emit([]).then((results) => {});\n")),(0,l.kt)("h3",{id:"waterfallevent"},"WaterfallEvent"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"/api/event/class/WaterfallEvent"},(0,l.kt)("inlineCode",{parentName:"a"},"WaterfallEvent"))," executes each listener in order, passing the\nprevious listeners return value as an argument to the next listener. The final value is then\nreturned as a result."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { WaterfallEvent } from '@boost/event';\n\nconst event = new WaterfallEvent<number>('waterfall');\n\nevent.listen((num) => num * 2);\nevent.listen((num) => num * 3);\n\nconst result = event.emit(10); // 60\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"This event only accepts a single argument. The generic type should not be an array, as it types\nthe only argument and the return type.")))}f.isMDXComponent=!0}}]);