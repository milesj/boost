(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[788],{5318:function(e,n,a){"use strict";a.d(n,{Zo:function(){return s},kt:function(){return u}});var t=a(7378);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function c(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),i=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):c(c({},n),e)),a},s=function(e){var n=i(e.components);return t.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},k=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),k=i(a),u=r,m=k["".concat(l,".").concat(u)]||k[u]||d[u]||o;return a?t.createElement(m,c(c({ref:n},s),{},{components:a})):t.createElement(m,c({ref:n},s))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=k;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,c[1]=p;for(var i=2;i<o;i++)c[i]=a[i];return t.createElement.apply(null,c)}return t.createElement.apply(null,a)}k.displayName="MDXCreateElement"},6029:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return i},toc:function(){return s},default:function(){return k}});var t=a(9603),r=a(120),o=(a(7378),a(5318)),c=["components"],p={title:"PackageGraph"},l=void 0,i={unversionedId:"common/package-graph",id:"common/package-graph",isDocsHomePage:!1,title:"PackageGraph",description:"Generate a dependency graph for a list of packages, based on their defined dependencies and",source:"@site/docs/common/package-graph.md",sourceDirName:"common",slug:"/common/package-graph",permalink:"/docs/common/package-graph",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/common/package-graph.md",version:"current",frontMatter:{title:"PackageGraph"},sidebar:"docs",previous:{title:"Contract",permalink:"/docs/common/contract"},next:{title:"Path",permalink:"/docs/common/path"}},s=[{value:"API",id:"api",children:[{value:"<code>addPackage</code>",id:"addpackage",children:[]},{value:"<code>addPackages</code>",id:"addpackages",children:[]},{value:"<code>resolveBatchList</code>",id:"resolvebatchlist",children:[]},{value:"<code>resolveList</code>",id:"resolvelist",children:[]},{value:"<code>resolveTree</code>",id:"resolvetree",children:[]}]}],d={toc:s};function k(e){var n=e.components,a=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Generate a dependency graph for a list of packages, based on their defined ",(0,o.kt)("inlineCode",{parentName:"p"},"dependencies")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"peerDependencies"),". To begin, instantiate an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"PackageGraph"),", which accepts a list of\noptional ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," objects as the first argument."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { PackageGraph } from '@boost/common';\n\nconst graph = new PackageGraph([\n    {\n        name: '@boost/common',\n        version: '1.2.3',\n    },\n    {\n        name: '@boost/cli',\n        version: '1.0.0',\n        dependencies: {\n            '@boost/common': '^1.0.0',\n        },\n    },\n]);\n")),(0,o.kt)("p",null,"Once all packages have been defined, we can resolve our graph into 1 of 3 formats."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const batch = graph.resolveBatchList();\nconst list = graph.resolveList();\nconst tree = graph.resolveTree();\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Will only resolve and return packages that have been defined. Will ",(0,o.kt)("em",{parentName:"p"},"not")," return non-defined\npackages found in ",(0,o.kt)("inlineCode",{parentName:"p"},"dependencies")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"peerDependencies"),".")),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"addpackage"},(0,o.kt)("inlineCode",{parentName:"h3"},"addPackage")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"PackageGraph#addPackage(package: T): this")),(0,o.kt)("p",null,"Add a package by name with an associated ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," object. Will map a dependency between the\npackage and its dependees found in ",(0,o.kt)("inlineCode",{parentName:"p"},"dependencies")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"peerDependencies"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"graph.addPackage({\n    name: '@boost/plugin',\n    version: '1.6.0',\n    peerDependencies: {\n        '@boost/common': '^1.0.0',\n        '@boost/debug': '^1.0.0',\n    },\n});\n")),(0,o.kt)("h3",{id:"addpackages"},(0,o.kt)("inlineCode",{parentName:"h3"},"addPackages")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"PackageGraph#addPackages(packages: T[]): this")),(0,o.kt)("p",null,"Add multiple packages and map their dependencies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"graph.addPackages([\n    {\n        name: '@boost/plugin',\n        version: '1.6.0',\n    },\n    {\n        name: '@boost/debug',\n        version: '1.2.0',\n    },\n]);\n")),(0,o.kt)("h3",{id:"resolvebatchlist"},(0,o.kt)("inlineCode",{parentName:"h3"},"resolveBatchList")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"PackageGraph#resolveBatchList(): T","[][]")),(0,o.kt)("p",null,"Resolve the dependency graph and return a list of batched ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," objects (array of arrays)\nin the order they are depended on."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"graph.resolveBatchList().forEach((pkgs) => {\n    pkgs.forEach((pkg) => {\n        console.log(pkg.name);\n    });\n});\n")),(0,o.kt)("h3",{id:"resolvelist"},(0,o.kt)("inlineCode",{parentName:"h3"},"resolveList")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"PackageGraph#resolveList(): T[]")),(0,o.kt)("p",null,"Resolve the dependency graph and return a list of all ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," objects in the order they are\ndepended on."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"graph.resolveList().forEach((pkg) => {\n    console.log(pkg.name);\n});\n")),(0,o.kt)("h3",{id:"resolvetree"},(0,o.kt)("inlineCode",{parentName:"h3"},"resolveTree")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"PackageGraph#resolveTree(): PackageGraphTree<T",">")),(0,o.kt)("p",null,"Resolve the dependency graph and return a tree of nodes for all ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," objects and their\ndependency mappings."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"graph.resolveTree().nodes.forEach((node) => {\n    console.log(node.package.name);\n\n    if (node.nodes) {\n        // Dependents\n    }\n});\n")))}k.isMDXComponent=!0}}]);