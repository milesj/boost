(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[493],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return c}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,g=d["".concat(s,".").concat(c)]||d[c]||u[c]||o;return n?a.createElement(g,l(l({ref:t},m),{},{components:n})):a.createElement(g,l({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},517:function(e,t,n){"use strict";var a=n(7378);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},4535:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(7378),r=n(4956);var o=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(8944),i="tabItem_c0e5",s="tabItemActive_28AG";var p=37,m=39;var u=function(e){var t=e.lazy,n=e.block,r=e.defaultValue,u=e.values,d=e.groupId,c=e.className,g=o(),h=g.tabGroupChoices,k=g.setTabGroupChoices,f=(0,a.useState)(r),b=f[0],N=f[1],v=a.Children.toArray(e.children),y=[];if(null!=d){var C=h[d];null!=C&&C!==b&&u.some((function(e){return e.value===C}))&&N(C)}var w=function(e){var t=e.currentTarget,n=y.indexOf(t),a=u[n].value;N(a),null!=d&&(k(d,a),setTimeout((function(){var e,n,a,r,o,l,i,p;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,o=e.right,l=window,i=l.innerHeight,p=l.innerWidth,n>=0&&o<=p&&r<=i&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},T=function(e){var t,n;switch(e.keyCode){case m:var a=y.indexOf(e.target)+1;n=y[a]||y[0];break;case p:var r=y.indexOf(e.target)-1;n=y[r]||y[y.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},c)},u.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,className:(0,l.Z)("tabs__item",i,{"tabs__item--active":b===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:T,onFocus:w,onClick:w},n)}))),t?(0,a.cloneElement)(v.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==b})}))))}},4956:function(e,t,n){"use strict";var a=(0,n(7378).createContext)(void 0);t.Z=a},297:function(e,t,n){"use strict";n.d(t,{Z:function(){return r}});var a=n(7378);function r(e){var t=e.children,n=e.type;return a.createElement("span",{className:"badge badge--"+n},t)}},7586:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var a=n(7378),r=n(297),o="badgeGroup_2HOO";function l(e){var t=e.children;return a.createElement("span",{className:o},t)}function i(e){var t=e.backend,n=e.frontend,o=e.tooling;return a.createElement(l,null,t&&a.createElement(r.Z,{type:"warning"},"Backend"),n&&a.createElement(r.Z,{type:"success"},"Frontend"),o&&a.createElement(r.Z,{type:"primary"},"Tooling"))}},5047:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return c},default:function(){return h}});var a=n(9603),r=n(120),o=(n(7378),n(5318)),l=n(7586),i=n(4535),s=n(517),p=["components"],m={title:"Logging"},u=void 0,d={unversionedId:"log",id:"log",isDocsHomePage:!1,title:"Logging",description:"Lightweight level based logging system.",source:"@site/docs/log.mdx",sourceDirName:".",slug:"/log",permalink:"/docs/log",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/log.mdx",version:"current",frontMatter:{title:"Logging"},sidebar:"docs",previous:{title:"Events",permalink:"/docs/event"},next:{title:"Pipelines",permalink:"/docs/pipeline"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Environment variables",id:"environment-variables",children:[]},{value:"Logging",id:"logging",children:[{value:"Options",id:"options",children:[]},{value:"Log levels",id:"log-levels",children:[]},{value:"Silencing output",id:"silencing-output",children:[]}]},{value:"Formats",id:"formats",children:[]},{value:"Metadata",id:"metadata",children:[]},{value:"Transport types",id:"transport-types",children:[{value:"<code>ConsoleTransport</code>",id:"consoletransport",children:[]},{value:"<code>StreamTransport</code>",id:"streamtransport",children:[]},{value:"<code>FileTransport</code>",id:"filetransport",children:[]},{value:"<code>RotatingFileTransport</code>",id:"rotatingfiletransport",children:[]}]},{value:"Test utilities",id:"test-utilities",children:[{value:"<code>mockLogger</code>",id:"mocklogger",children:[]}]}],g={toc:c};function h(e){var t=e.components,n=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(l.Z,{backend:!0,tooling:!0,mdxType:"EnvBadges"}),(0,o.kt)("p",null,"Lightweight level based logging system."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)(i.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/log\n"))),(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/log\n")))),(0,o.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"BOOSTJS_LOG_DEFAULT_LEVEL")," (",(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel"),") - The default log level to use when calling the logger\nfunction stand alone (the usage examples below). Defaults to the lowest level, ",(0,o.kt)("inlineCode",{parentName:"li"},"log"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"BOOSTJS_LOG_MAX_LEVEL")," (",(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel"),") - The maximum level, based on priority, to write to a stream.\nAll levels higher than the maximum will be ignored. Defaults to allowing all levels.")),(0,o.kt)("h2",{id:"logging"},"Logging"),(0,o.kt)("p",null,'Logging is based around the concept of a "logger", which provides a set of functions of severity\nlevels to log with. Logs are written to one or many provided transports -- or ',(0,o.kt)("inlineCode",{parentName:"p"},"console")," if not\ndefined. To begin, instantiate a logger with ",(0,o.kt)("inlineCode",{parentName:"p"},"createLogger"),", which returns a function that can be\nused for standard level logging."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createLogger } from '@boost/log';\n\nconst log = createLogger({ name: 'boost' });\n\nlog('Something has happened\u2026');\n")),(0,o.kt)("p",null,"Each logging function requires a message string as the 1st argument, and an optional rest of\narguments to interpolate into the message using\n",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/util.html#util_util_format_format_args"},"util.format()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"log('Name: %s %s', user.first_name, user.last_name);\nlog('Object: %O', data);\n")),(0,o.kt)("p",null,"If you would prefer to interact with a class instance, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")," class. The major\ndifference between the class and the function, is that the class only has 1 logging method, ",(0,o.kt)("inlineCode",{parentName:"p"},"log()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Logger } from '@boost/log';\n\nconst logger = new Logger({ name: 'boost' });\n\nlogger.log({\n    level: 'info',\n    message: 'Something else has happened\u2026',\n});\n")),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("p",null,"The following options can be defined when creating a logger. They ",(0,o.kt)("em",{parentName:"p"},"cannot")," be customized after the\nfact."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"labels")," (",(0,o.kt)("inlineCode",{parentName:"li"},"object"),") - A mapping of localized log level names. Can be used with\n",(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/chalk"},"chalk"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name")," (",(0,o.kt)("inlineCode",{parentName:"li"},"string"),") - Unique name of this logger instance, for debugging purposes. ",(0,o.kt)("em",{parentName:"li"},"(Required)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transports")," (",(0,o.kt)("inlineCode",{parentName:"li"},"Transportable[]"),") - List of transports in which to write formatted log messages to.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import chalk from 'chalk';\nimport { createLogger, StreamTransport } from '@boost/log';\n\nconst log = createLogger({\n    name: 'boost',\n    labels: {\n        error: chalk.bgRed.black.bold(' FAIL '),\n    },\n    transports: [new StreamTransport({ levels: ['error'], stream: process.stderr })],\n});\n")),(0,o.kt)("h3",{id:"log-levels"},"Log levels"),(0,o.kt)("p",null,"There are 5 distinct logging levels outside the standard level, each represented as a unique\nfunction on the logger instance. The levels in order of ",(0,o.kt)("strong",{parentName:"p"},"priority")," are ",(0,o.kt)("inlineCode",{parentName:"p"},"trace"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"info"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"warn"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),". Each function requires a message as the 1st argument, and an optional rest of\narguments to interpolate into the message."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"log.trace('Code path hit?');\nlog.debug('What is going on here?');\nlog.info('Systems are stable');\nlog.warn('Something is definitely going on\u2026');\nlog.error('Systems are down! %s', error.message);\n")),(0,o.kt)("h3",{id:"silencing-output"},"Silencing output"),(0,o.kt)("p",null,"By default, all logged messages are immediately written to the configured transports. To silence\noutput and disable writes, call the ",(0,o.kt)("inlineCode",{parentName:"p"},"logger.disable()")," function, and to re-enable, call\n",(0,o.kt)("inlineCode",{parentName:"p"},"logger.enable()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"log.disable();\n\n// Will not write!\nlog.debug('Something is broken!');\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Messages that are logged while silenced are ",(0,o.kt)("em",{parentName:"p"},"lost")," and are ",(0,o.kt)("em",{parentName:"p"},"not")," buffered.")),(0,o.kt)("h2",{id:"formats"},"Formats"),(0,o.kt)("p",null,"All logs are represented as an object, known as a log item. These items contain the following\nmetadata about the environment, the logger, and the current log message."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"host")," (",(0,o.kt)("inlineCode",{parentName:"li"},"string"),") - The host name of the machine."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"label")," (",(0,o.kt)("inlineCode",{parentName:"li"},"string"),") - The log level as a localized or customized label."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"level")," (",(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel"),") - The log level as a string."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"message")," (",(0,o.kt)("inlineCode",{parentName:"li"},"string"),") - The log message with interpolated arguments applied."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"metadata")," (",(0,o.kt)("inlineCode",{parentName:"li"},"object"),") - ",(0,o.kt)("a",{parentName:"li",href:"#metadata"},"Additional data")," to include with a log item."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name")," (",(0,o.kt)("inlineCode",{parentName:"li"},"string"),") - Name of the logger."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pid")," (",(0,o.kt)("inlineCode",{parentName:"li"},"number"),") - Current process ID."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"time")," (",(0,o.kt)("inlineCode",{parentName:"li"},"string"),") - Timestamp of the log, native to the host machine.")),(0,o.kt)("p",null,"Before an item is written to a transport, it must be formatted from an object into a string. This\ncan be done on a per transport basis using the ",(0,o.kt)("inlineCode",{parentName:"p"},"format")," option, like so."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ConsoleTransport, formats } from '@boost/log';\n\nconst transport = new ConsoleTransport({\n    format: (item) => `${item.level} ${item.message}`,\n    // Or a pre-built format\n    format: formats.json,\n});\n")),(0,o.kt)("p",null,"Boost provides formats by default, all of which are pre-configured into each built-in transport.\nFeel free to use the following built-in formats, or customize your own!"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"formats.console")," - Formats the item as if it's being logged to ",(0,o.kt)("inlineCode",{parentName:"li"},"console"),". Only inclues the label\nand message."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"formats.debug")," - Formats the item into a human-readable message with all item fields included.\nThis is the default format for most transports."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"formats.json")," - Formats the entire item into JSON."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"formats.message")," - Formats the item using only the message.")),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("p",null,"Sometimes additional metadata may be required that is not found within the pre-defined log item\nfields. Metadata can be defined on the logger using an object, which is then passed to all log\nitems."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const log = createLogger({\n    name: 'boost',\n    metadata: {\n        locale: 'en',\n        region: 'eu',\n    },\n});\n")),(0,o.kt)("p",null,"It can also be defined per log by passing an object as the 1st argument. Metadata defined at this\nlevel will override the logger metadata."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"log({ locale: 'de' }, \"What's going on?\");\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Fields ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"host"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"pid")," are reserved names and cannot be used.")),(0,o.kt)("h2",{id:"transport-types"},"Transport types"),(0,o.kt)("p",null,"There are multiple types of transports that can be used within a logger, all of which support the\nfollowing shared options."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"eol")," (",(0,o.kt)("inlineCode",{parentName:"li"},"string"),") - End of line character to append to a message. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"os.EOL"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"format")," (",(0,o.kt)("inlineCode",{parentName:"li"},"Formatter"),") - Function to format a log item into a message string. Default is transport\ndependent."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"levels")," (",(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel[]"),") - List of log levels to only write messages for. ",(0,o.kt)("em",{parentName:"li"},"(Required)"))),(0,o.kt)("h3",{id:"consoletransport"},(0,o.kt)("inlineCode",{parentName:"h3"},"ConsoleTransport")),(0,o.kt)("p",null,"Logs messages to the native ",(0,o.kt)("inlineCode",{parentName:"p"},"console")," and its corresponding level. This is the default transport\nwhen no transports are defined."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ConsoleTransport } from '@boost/log';\n\nconst transport = new ConsoleTransport();\n")),(0,o.kt)("h3",{id:"streamtransport"},(0,o.kt)("inlineCode",{parentName:"h3"},"StreamTransport")),(0,o.kt)("p",null,"Logs messages to any writeable stream or an object that defines a ",(0,o.kt)("inlineCode",{parentName:"p"},"write(message: string)")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { StreamTransport } from '@boost/log';\n\nconst transport = new StreamTransport({\n    levels: ['error', 'warn'],\n    stream: process.stderr,\n});\n")),(0,o.kt)("h3",{id:"filetransport"},(0,o.kt)("inlineCode",{parentName:"h3"},"FileTransport")),(0,o.kt)("p",null,"Appends and logs messages to a file at the defined path. Will automatically rotate files when a max\nfile size is met."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { FileTransport } from '@boost/log';\n\nconst transport = new FileTransport({\n    levels: ['error'],\n    path: '/var/log/error.log',\n});\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"gzip")," (",(0,o.kt)("inlineCode",{parentName:"li"},"boolean"),") - Apply gzip compression to the write stream."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"maxSize")," (",(0,o.kt)("inlineCode",{parentName:"li"},"number"),") - Maximum file size before rotating file. Will create a backup and truncate\nthe current file. Defaults to 10mb."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"path")," (",(0,o.kt)("inlineCode",{parentName:"li"},"string | Path"),") - Absolute file system path for the intended log file. ",(0,o.kt)("em",{parentName:"li"},"(Required)"))),(0,o.kt)("h3",{id:"rotatingfiletransport"},(0,o.kt)("inlineCode",{parentName:"h3"},"RotatingFileTransport")),(0,o.kt)("p",null,"Like ",(0,o.kt)("inlineCode",{parentName:"p"},"FileTransport"),", but also rotates files based on timestamps and a chosen periodic interval."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { RotatingFileTransport } from '@boost/log';\n\nconst transport = new RotatingFileTransport({\n    levels: ['error'],\n    path: '/var/log/error.log',\n    rotation: 'daily',\n});\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rotation")," (",(0,o.kt)("inlineCode",{parentName:"li"},"hourly | daily | weekly | monthly"),") - Period in which to rotate files. Will append a\ntimestamp to the rotated log file.")),(0,o.kt)("h2",{id:"test-utilities"},"Test utilities"),(0,o.kt)("p",null,"The following ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest"},"Jest")," utilities are available in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"@boost/log/test")," module."),(0,o.kt)("h3",{id:"mocklogger"},(0,o.kt)("inlineCode",{parentName:"h3"},"mockLogger")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"mockLogger(): Logger")),(0,o.kt)("p",null,"Returns a Jest spy that matches the return value shape of ",(0,o.kt)("inlineCode",{parentName:"p"},"createLogger"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { mockLogger } from '@boost/log/test';\n\nit('calls the logger', () => {\n    const log = mockLogger();\n\n    log('Something has happened');\n\n    expect(log).toHaveBeenCalled();\n});\n")))}h.isMDXComponent=!0},8944:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);