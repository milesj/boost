"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7002],{3210:function(e){e.exports=JSON.parse('[{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":1,"name":"@boost/args","kind":2,"kindString":"Module","flags":{},"children":[{"id":139,"name":"ParseError","kind":128,"kindString":"Class","flags":{},"children":[{"id":140,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":6,"character":1}],"signatures":[{"id":141,"name":"new ParseError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":142,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":143,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":144,"name":"index","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":139,"name":"ParseError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":145,"name":"arg","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":146,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[140]},{"title":"Properties","kind":1024,"children":[145,146]}],"sources":[{"fileName":"packages/args/src/ParseError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/args/class/ParseError","nextId":317},{"id":317,"name":"ValidationError","kind":128,"kindString":"Class","flags":{},"children":[{"id":318,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":6,"character":1}],"signatures":[{"id":319,"name":"new ValidationError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":320,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":321,"name":"option","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"}],"type":{"type":"reference","id":317,"name":"ValidationError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":322,"name":"option","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Constructors","kind":512,"children":[318]},{"title":"Properties","kind":1024,"children":[322]}],"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":3,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/args/class/ValidationError","previousId":139,"nextId":129},{"id":217,"name":"Arg","kind":256,"kindString":"Interface","flags":{},"children":[{"id":218,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","id":229,"name":"T"}},{"id":226,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":206,"name":"Config.deprecated"}},{"id":227,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":207,"name":"Config.description"}},{"id":228,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":208,"name":"Config.hidden"}},{"id":222,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":215,"typeArguments":[{"type":"reference","id":229,"name":"T"}],"name":"InferArgType"}},{"id":219,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":220,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":221,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"reference","id":229,"name":"T"}}]},{"id":223,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":224,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":225,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[218,226,227,228,222]},{"title":"Methods","kind":2048,"children":[219,223]}],"sources":[{"fileName":"packages/args/src/types.ts","line":150,"character":17}],"typeParameter":[{"id":229,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":205,"name":"Config"}],"extendedBy":[{"type":"reference","id":230,"name":"Option"},{"type":"reference","id":287,"name":"Param"}],"permalink":"/api/args/interface/Arg","previousId":147,"nextId":183},{"id":183,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":184,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":92,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":185,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":94,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":186,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/src/types.ts","line":96,"character":1}],"type":{"type":"reference","id":190,"name":"O"}},{"id":187,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":98,"character":1}],"type":{"type":"reference","id":167,"typeArguments":[{"type":"reference","id":191,"name":"P"}],"name":"MapParamType"}},{"id":188,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":100,"character":1}],"type":{"type":"reference","id":155,"name":"ArgList"}},{"id":189,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/src/types.ts","line":102,"character":1}],"type":{"type":"reference","id":161,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[184,185,186,187,188,189]}],"sources":[{"fileName":"packages/args/src/types.ts","line":90,"character":17}],"typeParameter":[{"id":190,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":191,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":158,"name":"PrimitiveType"}},"default":{"type":"reference","id":155,"name":"ArgList"}}],"permalink":"/api/args/interface/Arguments","previousId":217,"nextId":302},{"id":302,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":303,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":205,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":304,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":206,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[303,304]}],"sources":[{"fileName":"packages/args/src/types.ts","line":204,"character":17}],"permalink":"/api/args/interface/Category","previousId":183,"nextId":209},{"id":209,"name":"Command","kind":256,"kindString":"Interface","flags":{},"children":[{"id":210,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/src/types.ts","line":137,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":212,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":206,"name":"Config.deprecated"}},{"id":213,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":207,"name":"Config.description"}},{"id":214,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":208,"name":"Config.hidden"}},{"id":211,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/src/types.ts","line":139,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[210,212,213,214,211]}],"sources":[{"fileName":"packages/args/src/types.ts","line":135,"character":17}],"extendedTypes":[{"type":"reference","id":205,"name":"Config"}],"permalink":"/api/args/interface/Command","previousId":302,"nextId":205},{"id":205,"name":"Config","kind":256,"kindString":"Interface","flags":{},"children":[{"id":206,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":207,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":208,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[206,207,208]}],"sources":[{"fileName":"packages/args/src/types.ts","line":126,"character":17}],"extendedBy":[{"type":"reference","id":209,"name":"Command"},{"type":"reference","id":217,"name":"Arg"}],"permalink":"/api/args/interface/Config","previousId":209,"nextId":279},{"id":279,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":281,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":280,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":193,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":284,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":285,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":286,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":282,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":316,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":283,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[281,280,284,285,286,282,283]}],"sources":[{"fileName":"packages/args/src/types.ts","line":192,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":230,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"name":"Omit"}],"permalink":"/api/args/interface/Flag","previousId":205,"nextId":262},{"id":262,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":263,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/src/types.ts","line":186,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":266,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":231,"name":"Option.category"}},{"id":264,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":187,"character":1}],"type":{"type":"reference","id":278,"name":"T"},"overwrites":{"type":"reference","id":233,"name":"Option.default"}},{"id":275,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":241,"name":"Option.deprecated"}},{"id":276,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":242,"name":"Option.description"}},{"id":277,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":243,"name":"Option.hidden"}},{"id":265,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/src/types.ts","line":189,"character":1}],"type":{"type":"literal","value":true}},{"id":267,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":316,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":232,"name":"Option.short"}},{"id":271,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":215,"typeArguments":[{"type":"reference","id":278,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":237,"name":"Option.type"}},{"id":268,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":269,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":270,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"reference","id":229,"name":"T"},"inheritedFrom":{"type":"reference","id":235,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":234,"name":"Option.format"}},{"id":272,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":273,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":274,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":239,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":238,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[263,266,264,275,276,277,265,267,271]},{"title":"Methods","kind":2048,"children":[268,272]}],"sources":[{"fileName":"packages/args/src/types.ts","line":184,"character":17}],"typeParameter":[{"id":278,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":156,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":230,"typeArguments":[{"type":"reference","id":278,"name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/MultipleOption","previousId":279,"nextId":230},{"id":230,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":231,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":233,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","id":244,"name":"T"},"inheritedFrom":{"type":"reference","id":218,"name":"Arg.default"}},{"id":241,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":226,"name":"Arg.deprecated"}},{"id":242,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":227,"name":"Arg.description"}},{"id":243,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":228,"name":"Arg.hidden"}},{"id":232,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":316,"name":"ShortOptionName"}},{"id":237,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":215,"typeArguments":[{"type":"reference","id":244,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":222,"name":"Arg.type"}},{"id":234,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":235,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":236,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"reference","id":229,"name":"T"},"inheritedFrom":{"type":"reference","id":220,"name":"Arg.format"}}],"inheritedFrom":{"type":"reference","id":219,"name":"Arg.format"}},{"id":238,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":239,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":240,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":224,"name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","id":223,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[231,233,241,242,243,232,237]},{"title":"Methods","kind":2048,"children":[234,238]}],"sources":[{"fileName":"packages/args/src/types.ts","line":169,"character":17}],"typeParameter":[{"id":244,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":159,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","id":217,"typeArguments":[{"type":"reference","id":244,"name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":245,"name":"SingleOption"},{"type":"reference","id":262,"name":"MultipleOption"}],"permalink":"/api/args/interface/Option","previousId":262,"nextId":287},{"id":287,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":290,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","id":301,"name":"T"},"inheritedFrom":{"type":"reference","id":218,"name":"Arg.default"}},{"id":298,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":226,"name":"Arg.deprecated"}},{"id":299,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":227,"name":"Arg.description"}},{"id":300,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":228,"name":"Arg.hidden"}},{"id":288,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/src/types.ts","line":198,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":289,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":201,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":294,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":215,"typeArguments":[{"type":"reference","id":301,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":222,"name":"Arg.type"}},{"id":291,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":292,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":293,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"reference","id":229,"name":"T"},"inheritedFrom":{"type":"reference","id":220,"name":"Arg.format"}}],"inheritedFrom":{"type":"reference","id":219,"name":"Arg.format"}},{"id":295,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":296,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":297,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":224,"name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","id":223,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[290,298,299,300,288,289,294]},{"title":"Methods","kind":2048,"children":[291,295]}],"sources":[{"fileName":"packages/args/src/types.ts","line":196,"character":17}],"typeParameter":[{"id":301,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":158,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","id":217,"typeArguments":[{"type":"reference","id":301,"name":"T"}],"name":"Arg"}],"permalink":"/api/args/interface/Param","previousId":230,"nextId":196},{"id":196,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":197,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":173,"name":"CommandChecker"}]}},{"id":200,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":193,"name":"ParserSettings.loose"}},{"id":198,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/src/types.ts","line":119,"character":1}],"type":{"type":"reference","id":171,"typeArguments":[{"type":"reference","id":203,"name":"O"}],"name":"MapOptionConfig"}},{"id":199,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":165,"typeArguments":[{"type":"reference","id":204,"name":"P"}],"name":"MapParamConfig"}},{"id":201,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":194,"name":"ParserSettings.unknown"}},{"id":202,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":195,"name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[197,200,198,199,201,202]}],"sources":[{"fileName":"packages/args/src/types.ts","line":114,"character":17}],"typeParameter":[{"id":203,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":204,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":158,"name":"PrimitiveType"}},"default":{"type":"reference","id":155,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","id":192,"name":"ParserSettings"}],"permalink":"/api/args/interface/ParserOptions","previousId":287,"nextId":192},{"id":192,"name":"ParserSettings","kind":256,"kindString":"Interface","flags":{},"children":[{"id":193,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":194,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":195,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[193,194,195]}],"sources":[{"fileName":"packages/args/src/types.ts","line":105,"character":17}],"extendedBy":[{"type":"reference","id":196,"name":"ParserOptions"}],"permalink":"/api/args/interface/ParserSettings","previousId":196,"nextId":245},{"id":245,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":249,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":231,"name":"Option.category"}},{"id":246,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/src/types.ts","line":178,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":261,"name":"T"}}},{"id":247,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/src/types.ts","line":180,"character":1}],"type":{"type":"conditional","checkType":{"type":"reference","id":261,"name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":248,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":181,"character":1}],"type":{"type":"reference","id":261,"name":"T"},"overwrites":{"type":"reference","id":233,"name":"Option.default"}},{"id":258,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":241,"name":"Option.deprecated"}},{"id":259,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":242,"name":"Option.description"}},{"id":260,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":243,"name":"Option.hidden"}},{"id":250,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":316,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":232,"name":"Option.short"}},{"id":254,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":215,"typeArguments":[{"type":"reference","id":261,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":237,"name":"Option.type"}},{"id":251,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":252,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":253,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"reference","id":229,"name":"T"},"inheritedFrom":{"type":"reference","id":235,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":234,"name":"Option.format"}},{"id":255,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":256,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":257,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":229,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":239,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":238,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[249,246,247,248,258,259,260,250,254]},{"title":"Methods","kind":2048,"children":[251,255]}],"sources":[{"fileName":"packages/args/src/types.ts","line":176,"character":17}],"typeParameter":[{"id":261,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":157,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":230,"typeArguments":[{"type":"reference","id":261,"name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/SingleOption","previousId":192,"nextId":162},{"id":162,"name":"AliasMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":19,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/args#AliasMap","previousId":245,"nextId":155},{"id":155,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":5,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#ArgList","previousId":162,"nextId":115},{"id":115,"name":"ArgsErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":35,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/args#ArgsErrorCode","previousId":155,"nextId":154},{"id":154,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#Argv","previousId":115,"nextId":173},{"id":173,"name":"CommandChecker","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":12}],"type":{"type":"reflection","declaration":{"id":174,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":29}],"signatures":[{"id":175,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":176,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"permalink":"/api/args#CommandChecker","previousId":154,"nextId":177},{"id":177,"name":"ContextFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":12}],"type":{"type":"reflection","declaration":{"id":178,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":29}],"signatures":[{"id":179,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":181,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":182,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":154,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":196,"typeArguments":[{"type":"reflection","declaration":{"id":180,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":72}]}}],"name":"ParserOptions"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/args#ContextFactory","previousId":173,"nextId":215},{"id":215,"name":"InferArgType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":144,"character":12}],"typeParameter":[{"id":216,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":216,"name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"literal","value":"boolean"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":216,"name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"intrinsic","name":"number"}]},"trueType":{"type":"literal","value":"number"},"falseType":{"type":"literal","value":"string"}}},"permalink":"/api/args#InferArgType","previousId":177,"nextId":169},{"id":169,"name":"InferOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type."},"sources":[{"fileName":"packages/args/src/types.ts","line":75,"character":12}],"typeParameter":[{"id":170,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":170,"name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"reference","id":279,"name":"Flag"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":170,"name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"trueType":{"type":"reference","id":262,"typeArguments":[{"type":"reference","id":170,"name":"T"}],"name":"MultipleOption"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":170,"name":"T"},"extendsType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"trueType":{"type":"reference","id":245,"typeArguments":[{"type":"reference","id":170,"name":"T"}],"name":"SingleOption"},"falseType":{"type":"intrinsic","name":"never"}}}},"permalink":"/api/args#InferOptionConfig","previousId":215,"nextId":163},{"id":163,"name":"InferParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type. Only primitives are allowed."},"sources":[{"fileName":"packages/args/src/types.ts","line":22,"character":12}],"typeParameter":[{"id":164,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":164,"name":"T"},"extendsType":{"type":"reference","id":158,"name":"PrimitiveType"},"trueType":{"type":"reference","id":287,"typeArguments":[{"type":"reference","id":164,"name":"T"}],"name":"Param"},"falseType":{"type":"intrinsic","name":"never"}},"permalink":"/api/args#InferParamConfig","previousId":169,"nextId":156},{"id":156,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":7,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/args#ListType","previousId":163,"nextId":315},{"id":315,"name":"LongOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Option name without leading \\"--\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":226,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/args#LongOptionName","previousId":156,"nextId":171},{"id":171,"name":"MapOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":84,"character":12}],"typeParameter":[{"id":172,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"mapped","parameter":"K","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":172,"name":"T"}},"templateType":{"type":"reference","id":169,"typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","name":"K"},"objectType":{"type":"reference","id":172,"name":"T"}}],"name":"InferOptionConfig"}},"permalink":"/api/args#MapOptionConfig","previousId":315,"nextId":165},{"id":165,"name":"MapParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":166,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":158,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","id":166,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"E"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":166,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":166,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":166,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":166,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":166,"name":"T"},"extendsType":{"type":"reference","id":155,"name":"ArgList"},"trueType":{"type":"array","elementType":{"type":"reference","id":287,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Param"}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamConfig","previousId":171,"nextId":167},{"id":167,"name":"MapParamType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":54,"character":12}],"typeParameter":[{"id":168,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":158,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","id":168,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"reference","name":"E"},{"type":"rest","elementType":{"type":"reference","id":155,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":168,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"rest","elementType":{"type":"reference","id":155,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":168,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"rest","elementType":{"type":"reference","id":155,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":168,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"rest","elementType":{"type":"reference","id":155,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":168,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"rest","elementType":{"type":"reference","id":155,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":168,"name":"T"},"extendsType":{"type":"reference","id":155,"name":"ArgList"},"trueType":{"type":"reference","id":155,"name":"ArgList"},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamType","previousId":165,"nextId":305},{"id":305,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":12}],"type":{"type":"intersection","types":[{"type":"reference","id":230,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":306,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":307,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":211,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":308,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":212,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":158,"name":"PrimitiveType"}}},{"id":309,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":213,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":310,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":214,"character":1}],"type":{"type":"reference","id":159,"name":"ValueType"}},{"id":311,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":215,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[307,308,309,310,311]}],"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":41}]}}]},"permalink":"/api/args#OptionConfig","previousId":167,"nextId":312},{"id":312,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":218,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":305,"name":"OptionConfig"}],"name":"Record"},"permalink":"/api/args#OptionConfigMap","previousId":305,"nextId":160},{"id":160,"name":"OptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":15,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":159,"name":"ValueType"}],"name":"Record"},"permalink":"/api/args#OptionMap","previousId":312,"nextId":313},{"id":313,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":221,"character":12}],"type":{"type":"reference","id":287,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/args#ParamConfig","previousId":160,"nextId":314},{"id":314,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":223,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":313,"name":"ParamConfig"}},"permalink":"/api/args#ParamConfigList","previousId":313,"nextId":158},{"id":158,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":157,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/args#PrimitiveType","previousId":314,"nextId":157},{"id":157,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":9,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/args#ScalarType","previousId":158,"nextId":316},{"id":316,"name":"ShortOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Short option name without leading \\"-\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":229,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"A"},{"type":"literal","value":"a"},{"type":"literal","value":"B"},{"type":"literal","value":"b"},{"type":"literal","value":"C"},{"type":"literal","value":"c"},{"type":"literal","value":"D"},{"type":"literal","value":"d"},{"type":"literal","value":"E"},{"type":"literal","value":"e"},{"type":"literal","value":"F"},{"type":"literal","value":"f"},{"type":"literal","value":"G"},{"type":"literal","value":"g"},{"type":"literal","value":"H"},{"type":"literal","value":"h"},{"type":"literal","value":"I"},{"type":"literal","value":"i"},{"type":"literal","value":"J"},{"type":"literal","value":"j"},{"type":"literal","value":"K"},{"type":"literal","value":"k"},{"type":"literal","value":"L"},{"type":"literal","value":"l"},{"type":"literal","value":"M"},{"type":"literal","value":"m"},{"type":"literal","value":"N"},{"type":"literal","value":"n"},{"type":"literal","value":"O"},{"type":"literal","value":"o"},{"type":"literal","value":"P"},{"type":"literal","value":"p"},{"type":"literal","value":"Q"},{"type":"literal","value":"q"},{"type":"literal","value":"R"},{"type":"literal","value":"r"},{"type":"literal","value":"S"},{"type":"literal","value":"s"},{"type":"literal","value":"T"},{"type":"literal","value":"t"},{"type":"literal","value":"U"},{"type":"literal","value":"u"},{"type":"literal","value":"V"},{"type":"literal","value":"v"},{"type":"literal","value":"W"},{"type":"literal","value":"w"},{"type":"literal","value":"X"},{"type":"literal","value":"x"},{"type":"literal","value":"Y"},{"type":"literal","value":"y"},{"type":"literal","value":"Z"},{"type":"literal","value":"z"}]},"permalink":"/api/args#ShortOptionName","previousId":157,"nextId":161},{"id":161,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":17,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/args#UnknownOptionMap","previousId":316,"nextId":159},{"id":159,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":13,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":156,"name":"ListType"},{"type":"reference","id":158,"name":"PrimitiveType"}]},"permalink":"/api/args#ValueType","previousId":161,"nextId":116},{"id":116,"name":"ArgsError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":37,"character":13}],"type":{"type":"reflection","declaration":{"id":117,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":118,"name":"new ArgsError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":119,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}},{"id":120,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/args#ArgsError","previousId":159,"nextId":124},{"id":124,"name":"COMMAND_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#COMMAND_FORMAT","previousId":116,"nextId":121},{"id":121,"name":"DEFAULT_BOOLEAN_VALUE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":2,"character":13}],"type":{"type":"literal","value":false},"defaultValue":"false","permalink":"/api/args#DEFAULT_BOOLEAN_VALUE","previousId":124,"nextId":122},{"id":122,"name":"DEFAULT_NUMBER_VALUE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":3,"character":13}],"type":{"type":"literal","value":0},"defaultValue":"0","permalink":"/api/args#DEFAULT_NUMBER_VALUE","previousId":121,"nextId":123},{"id":123,"name":"DEFAULT_STRING_VALUE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":4,"character":13}],"type":{"type":"literal","value":""},"defaultValue":"\'\'","permalink":"/api/args#DEFAULT_STRING_VALUE","previousId":122,"nextId":125},{"id":125,"name":"LONG_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":13,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#LONG_OPTION_FORMAT","previousId":123,"nextId":128},{"id":128,"name":"OPTION_LIKE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":25,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#OPTION_LIKE","previousId":125,"nextId":126},{"id":126,"name":"SHORT_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":17,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_FORMAT","previousId":128,"nextId":127},{"id":127,"name":"SHORT_OPTION_GROUP_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":21,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_GROUP_FORMAT","previousId":126},{"id":129,"name":"format","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/format.ts","line":14,"character":16}],"signatures":[{"id":130,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a parsed arguments object back into a command line list of arguments."},"parameters":[{"id":131,"name":"argument","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":183,"typeArguments":[{"type":"reference","id":160,"name":"OptionMap"},{"type":"reference","id":155,"name":"ArgList"}],"name":"Arguments"}],"name":"Partial"}}],"type":{"type":"reference","id":154,"name":"Argv"}}],"permalink":"/api/args/function/format","previousId":317,"nextId":132},{"id":132,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parse.ts","line":59,"character":16}],"signatures":[{"id":133,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject. Will extract commands, options, flags, and params based on the defined parser options."},"typeParameter":[{"id":135,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":134,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":136,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":158,"name":"PrimitiveType"}},"default":{"type":"reference","id":155,"name":"ArgList"}}],"parameters":[{"id":137,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":154,"name":"Argv"}},{"id":138,"name":"parserOptions","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":196,"typeArguments":[{"type":"reference","id":135,"name":"O"},{"type":"reference","id":136,"name":"P"}],"name":"ParserOptions"}}],"type":{"type":"reference","id":183,"typeArguments":[{"type":"reference","id":135,"name":"O"},{"type":"reference","id":136,"name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parse","previousId":129,"nextId":147},{"id":147,"name":"parseInContext","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parseInContext.ts","line":10,"character":16}],"signatures":[{"id":148,"name":"parseInContext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject using a context factory. The factory can customize the parser options based on the\\narguments being parsed."},"typeParameter":[{"id":150,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":149,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":151,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":158,"name":"PrimitiveType"}},"default":{"type":"reference","id":155,"name":"ArgList"}}],"parameters":[{"id":152,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":154,"name":"Argv"}},{"id":153,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":177,"name":"ContextFactory"}}],"type":{"type":"reference","id":183,"typeArguments":[{"type":"reference","id":150,"name":"O"},{"type":"reference","id":151,"name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parseInContext","previousId":132,"nextId":217}],"groups":[{"title":"Classes","kind":128,"children":[139,317]},{"title":"Functions","kind":64,"children":[129,132,147]},{"title":"Interfaces","kind":256,"children":[217,183,302,209,205,279,262,230,287,196,192,245]},{"title":"Type aliases","kind":4194304,"children":[162,155,115,154,173,177,215,169,163,156,315,171,165,167,305,312,160,313,314,158,157,316,161,159]},{"title":"Variables","kind":32,"children":[116,124,121,122,123,125,128,126,127]}],"sources":[{"fileName":"packages/args/src/index.ts","line":6,"character":0}],"permalink":"/api/args"},"urlSlug":"args"}],"packageName":"@boost/args","packageVersion":"3.0.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":9,"name":"@boost/cli","kind":2,"kindString":"Module","flags":{},"children":[{"id":1754,"name":"Arg","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":1755,"name":"Flag","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Flag.ts","line":8,"character":16}],"signatures":[{"id":1756,"name":"Flag","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line flag (boolean value)."},"parameters":[{"id":1757,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1758,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2109,"name":"Flag"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1759,"name":"Number","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Number.ts","line":8,"character":16}],"signatures":[{"id":1760,"name":"Number","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a numeric value."},"parameters":[{"id":1761,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1762,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2186,"typeArguments":[{"type":"intrinsic","name":"number"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1763,"name":"Numbers","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Numbers.ts","line":8,"character":16}],"signatures":[{"id":1764,"name":"Numbers","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple numeric values."},"parameters":[{"id":1765,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1766,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2118,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1767,"name":"Params","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Params.ts","line":7,"character":16}],"signatures":[{"id":1768,"name":"Params","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator for declaring command line parameters (positional arguments)."},"typeParameter":[{"id":1769,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":1770,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1769,"name":"T"}],"name":"MapParamConfig"}}],"type":{"type":"reference","name":"MethodDecorator"}}]},{"id":1771,"name":"String","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/String.ts","line":8,"character":16}],"signatures":[{"id":1772,"name":"String","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a string value."},"parameters":[{"id":1773,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1774,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2186,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1775,"name":"Strings","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Strings.ts","line":8,"character":16}],"signatures":[{"id":1776,"name":"Strings","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple string values."},"parameters":[{"id":1777,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1778,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2118,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1779,"name":"flag","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/flag.ts","line":8,"character":16}],"signatures":[{"id":1780,"name":"flag","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line flag (boolean value)."},"parameters":[{"id":1781,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1782,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2109,"name":"Flag"}],"name":"PartialConfig"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1783,"name":"number","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/number.ts","line":8,"character":16}],"signatures":[{"id":1784,"name":"number","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with a numeric value."},"typeParameter":[{"id":1785,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"number"},"default":{"type":"intrinsic","name":"number"}}],"parameters":[{"id":1786,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1787,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2186,"typeArguments":[{"type":"intrinsic","name":"number"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1785,"name":"T"}}]},{"id":1788,"name":"numbers","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/numbers.ts","line":8,"character":16}],"signatures":[{"id":1789,"name":"numbers","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with multiple numeric values."},"typeParameter":[{"id":1790,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"number"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"number"}}}],"parameters":[{"id":1791,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1792,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2118,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1790,"name":"T"}}]},{"id":1793,"name":"params","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/params.ts","line":6,"character":16}],"signatures":[{"id":1794,"name":"params","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring command line parameters (positional arguments)."},"typeParameter":[{"id":1795,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":1796,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1795,"name":"T"}],"name":"MapParamConfig"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1795,"name":"T"}],"name":"MapParamConfig"}}]},{"id":1797,"name":"string","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/string.ts","line":8,"character":16}],"signatures":[{"id":1798,"name":"string","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with a string value."},"typeParameter":[{"id":1799,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1800,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1801,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2186,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1799,"name":"T"}}]},{"id":1802,"name":"strings","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/strings.ts","line":8,"character":16}],"signatures":[{"id":1803,"name":"strings","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with multiple string values."},"typeParameter":[{"id":1804,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":1805,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1806,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2118,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1804,"name":"T"}}]}],"groups":[{"title":"Functions","kind":64,"children":[1755,1759,1763,1767,1771,1775,1779,1783,1788,1793,1797,1802]}],"sources":[{"fileName":"packages/cli/src/metadata/args.ts","line":1,"character":0}],"permalink":"/api/cli/namespace/Arg","previousId":2186,"nextId":2095},{"id":1813,"name":"Command","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1826,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":116,"character":1}],"signatures":[{"id":1827,"name":"new Command","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1828,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2209,"name":"GlobalOptions"},"default":{"type":"reference","id":2209,"name":"GlobalOptions"}},{"id":1829,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"reference","id":2095,"name":"ArgList"}},{"id":1831,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1830,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1832,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1831,"name":"Options"}}],"type":{"type":"reference","id":1813,"typeArguments":[{"type":"reference","id":1828,"name":"O"},{"type":"reference","id":1829,"name":"P"},{"type":"reference","id":1831,"name":"Options"}],"name":"Command"},"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}},{"id":1838,"name":"exit","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to exit the current program, with an optional error code."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":100,"character":1}],"type":{"type":"reference","id":2219,"name":"ExitHandler"}},{"id":1833,"name":"help","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--help`, `-h` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":83,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1834,"name":"locale","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--locale` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'en\'"},{"id":1839,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to log to the console using a log level."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":103,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":1886,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":1887,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":1904,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1831,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":1835,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional arguments passed after `--` on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":89,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":1836,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unknown options passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":92,"character":1}],"type":{"type":"reference","id":2203,"name":"UnknownOptionMap"},"defaultValue":"{}"},{"id":1837,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--version`, `-v` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1814,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":56,"character":8}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":1815,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":58,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1816,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":60,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"defaultValue":"false"},{"id":1817,"name":"categories","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":62,"character":8}],"type":{"type":"reference","id":2217,"name":"Categories"},"defaultValue":"{}"},{"id":1818,"name":"category","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":64,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1820,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":68,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1819,"name":"description","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":66,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1821,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":70,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1822,"name":"options","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":72,"character":8}],"type":{"type":"reference","id":2157,"name":"OptionConfigMap"},"defaultValue":"globalOptions"},{"id":1823,"name":"params","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":74,"character":8}],"type":{"type":"reference","id":2174,"name":"ParamConfigList"},"defaultValue":"[]"},{"id":1824,"name":"path","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":76,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1825,"name":"usage","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":78,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"defaultValue":"\'\'"},{"id":1840,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":126,"character":1}],"signatures":[{"id":1841,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate options passed to the constructor."},"parameters":[{"id":1842,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":1905,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1906,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1907,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1831,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1908,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1909,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1910,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1831,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1831,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1831,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":1843,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":133,"character":7}],"signatures":[{"id":1844,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a React element based on the Help component."},"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}],"name":"Promise"},"implementationOf":{"type":"reference","id":2298,"name":"Commandable.createHelp"}}],"implementationOf":{"type":"reference","id":2297,"name":"Commandable.createHelp"}},{"id":1845,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":154,"character":1}],"signatures":[{"id":1846,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a system native command with the given arguments\\nand pass the results through a promise. This does *not* execute Boost CLI\\ncommands, use `runProgram()` instead."},"parameters":[{"id":1847,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1848,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":1849,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Options"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaChildProcess"}}]},{"id":1850,"name":"getArguments","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":167,"character":1}],"signatures":[{"id":1851,"name":"getArguments","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current command class as an arguments object.\\nOptions and params must be parsed first to operate correctly."},"type":{"type":"reference","id":2096,"typeArguments":[{"type":"reference","id":1828,"name":"O"},{"type":"reference","id":1829,"name":"P"}],"name":"Arguments"}}]},{"id":1890,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":27,"character":1}],"signatures":[{"id":1891,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":1893,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1892,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":1894,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"reference","id":2095,"name":"ArgList"}}],"parameters":[{"id":1895,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2296,"typeArguments":[{"type":"reference","id":1893,"name":"O"},{"type":"reference","id":1894,"name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":1896,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":42,"character":1}],"signatures":[{"id":1897,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":1852,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":181,"character":1}],"signatures":[{"id":1853,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate and return all metadata registered to this command instance."},"type":{"type":"reference","id":2280,"name":"CommandMetadata"},"implementationOf":{"type":"reference","id":2300,"name":"Commandable.getMetadata"}}],"implementationOf":{"type":"reference","id":2299,"name":"Commandable.getMetadata"}},{"id":1854,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":218,"character":1}],"signatures":[{"id":1855,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return metadata as options for argument parsing."},"type":{"type":"reference","id":2175,"typeArguments":[{"type":"reference","id":1828,"name":"O"},{"type":"reference","id":1829,"name":"P"}],"name":"ParserOptions"},"implementationOf":{"type":"reference","id":2302,"name":"Commandable.getParserOptions"}}],"implementationOf":{"type":"reference","id":2301,"name":"Commandable.getParserOptions"}},{"id":1856,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":234,"character":1}],"signatures":[{"id":1857,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the command path (canonical name on the command line)."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2304,"name":"Commandable.getPath"}}],"implementationOf":{"type":"reference","id":2303,"name":"Commandable.getPath"}},{"id":1898,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":50,"character":1}],"signatures":[{"id":1899,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":1900,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":1813,"typeArguments":[{"type":"reference","id":1828,"name":"O"},{"type":"reference","id":1829,"name":"P"},{"type":"reference","id":1831,"name":"Options"}],"name":"Command"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":1858,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":241,"character":7}],"signatures":[{"id":1859,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":1860,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},"implementationOf":{"type":"reference","id":2306,"name":"Commandable.render"}}],"implementationOf":{"type":"reference","id":2305,"name":"Commandable.render"}},{"id":1880,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":336,"character":10}],"signatures":[{"id":1881,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Executed when the command is being ran."},"parameters":[{"id":1882,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":1829,"name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2243,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2243,"name":"RunResult"}],"name":"Promise"}]},"implementationOf":{"type":"reference","id":2309,"name":"Commandable.run"}}],"implementationOf":{"type":"reference","id":2308,"name":"Commandable.run"}},{"id":1861,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":248,"character":1}],"signatures":[{"id":1862,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program within itself, by passing a custom command and argv list."},"parameters":[{"id":1863,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2105,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":1864,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":254,"character":1}],"signatures":[{"id":1865,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run a task (function) with the defined arguments and\\nthe current command instance bound to the task\'s context."},"typeParameter":[{"id":1866,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1867,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1868,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1869,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1870,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1871,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":1866,"name":"A"}}],"type":{"type":"reference","id":1867,"name":"R"}}]}}},{"id":1872,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":1866,"name":"A"}}],"type":{"type":"reference","id":1867,"name":"R"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1826]},{"title":"Properties","kind":1024,"children":[1838,1833,1834,1839,1886,1887,1904,1835,1836,1837,1814,1815,1816,1817,1818,1820,1819,1821,1822,1823,1824,1825],"categories":[{"title":"CATEGORY","children":[1838,1833,1834,1839,1904,1835,1836,1837,1814,1815,1816,1817,1818,1820,1819,1821,1822,1823,1824,1825]},{"title":"Events","children":[1886,1887]}]},{"title":"Methods","kind":2048,"children":[1840,1905,1843,1845,1850,1890,1896,1852,1854,1856,1898,1858,1880,1861,1864]}],"sources":[{"fileName":"packages/cli/src/Command.ts","line":48,"character":22}],"typeParameter":[{"id":1911,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2209,"name":"GlobalOptions"},"default":{"type":"reference","id":2209,"name":"GlobalOptions"}},{"id":1912,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"reference","id":2095,"name":"ArgList"}},{"id":1914,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1913,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":51,"character":27}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1831,"name":"Options"}],"name":"CommandManager"}],"implementedTypes":[{"type":"reference","id":2296,"typeArguments":[{"type":"reference","id":1828,"name":"O"},{"type":"reference","id":1829,"name":"P"}],"name":"Commandable"}],"permalink":"/api/cli/class/Command","nextId":1994},{"id":1994,"name":"Program","kind":128,"kindString":"Class","flags":{},"children":[{"id":1995,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":127,"character":1}],"signatures":[{"id":1996,"name":"new Program","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1997,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2224,"name":"ProgramOptions"}},{"id":1998,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2232,"name":"ProgramStreams"}}],"type":{"type":"reference","id":1994,"name":"Program"},"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}},{"id":2070,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":1999,"name":"onAfterRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a component has rendered."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":56,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2000,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the program and command have been ran."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":62,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"reference","name":"Error"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2071,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":2001,"name":"onBeforeRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has run but before a component will render."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":68,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2243,"name":"RunResult"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2002,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the program and command will run."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":74,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2105,"name":"Argv"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2003,"name":"onCommandFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command has been found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":80,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2105,"name":"Argv"},{"type":"intrinsic","name":"string"},{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2004,"name":"onCommandNotFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command wasn\'t found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":86,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2105,"name":"Argv"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2005,"name":"onExit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the exit() handler is executed but before the process exits."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":92,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2006,"name":"onHelp","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the help menu is rendered."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":98,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2088,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2224,"name":"ProgramOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":2007,"name":"streams","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/cli/src/Program.ts","line":100,"character":10}],"type":{"type":"reference","id":2232,"name":"ProgramStreams"},"defaultValue":"..."},{"id":2016,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":157,"character":1}],"signatures":[{"id":2017,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2018,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2224,"name":"ProgramOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":2019,"name":"categories","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":175,"character":1}],"signatures":[{"id":2020,"name":"categories","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define option and command categories to supply to the running command,\\nor the program itself."},"parameters":[{"id":2021,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2217,"name":"Categories"}}],"type":{"type":"reference","id":1994,"name":"Program"}}]},{"id":2089,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":2090,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2091,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2224,"name":"ProgramOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2092,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2093,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2094,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2224,"name":"ProgramOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2224,"name":"ProgramOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2224,"name":"ProgramOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":2022,"name":"default","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":185,"character":1}],"signatures":[{"id":2023,"name":"default","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path as the default command.\\nA default command should be used when stand-alone binary is required."},"parameters":[{"id":2024,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":1994,"name":"Program"}}]},{"id":2025,"name":"exit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":200,"character":1}],"signatures":[{"id":2026,"name":"exit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Exit the program with an error code.\\nShould be called within a command or component."},"parameters":[{"id":2027,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"Error"}]}},{"id":2028,"name":"errorCode","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"never"}}]},{"id":2074,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":27,"character":1}],"signatures":[{"id":2075,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":2077,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2076,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":2078,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"reference","id":2095,"name":"ArgList"}}],"parameters":[{"id":2079,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2296,"typeArguments":[{"type":"reference","id":1893,"name":"O"},{"type":"reference","id":1894,"name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":2080,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":42,"character":1}],"signatures":[{"id":2081,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":2029,"name":"middleware","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":224,"character":1}],"signatures":[{"id":2030,"name":"middleware","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define a middleware function to apply to the argv list or args object."},"parameters":[{"id":2031,"name":"middleware","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2337,"name":"Middleware"}}],"type":{"type":"reference","id":1994,"name":"Program"}}]},{"id":2032,"name":"parse","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":237,"character":1}],"signatures":[{"id":2033,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse the arguments list according to the number of commands that have been registered."},"typeParameter":[{"id":2034,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2209,"name":"GlobalOptions"}},{"id":2035,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"reference","id":2095,"name":"ArgList"}}],"parameters":[{"id":2036,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2105,"name":"Argv"}}],"type":{"type":"reference","id":2096,"typeArguments":[{"type":"reference","id":2034,"name":"O"},{"type":"reference","id":2035,"name":"P"}],"name":"Arguments"}}]},{"id":2082,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":50,"character":1}],"signatures":[{"id":2083,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":2084,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":1994,"name":"Program"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2037,"name":"renderElement","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":266,"character":7}],"signatures":[{"id":2038,"name":"renderElement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":2039,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"id":2040,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":333,"character":7}],"signatures":[{"id":2041,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program in the following steps:\\n- Apply middleware to argv list.\\n- Parse argv into an args object (of options, params, etc).\\n- Determine command to run, or fail.\\n- Run command and render output.\\n- Return exit code."},"parameters":[{"id":2042,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2105,"name":"Argv"}},{"id":2043,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2240,"name":"ProgramBootstrap"}},{"id":2044,"name":"rethrow","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2045,"name":"runAndExit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":365,"character":7}],"signatures":[{"id":2046,"name":"runAndExit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program and also set the process exit code."},"parameters":[{"id":2047,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2105,"name":"Argv"}},{"id":2048,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2240,"name":"ProgramBootstrap"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1995]},{"title":"Properties","kind":1024,"children":[2070,1999,2000,2071,2001,2002,2003,2004,2005,2006,2088,2007],"categories":[{"title":"CATEGORY","children":[2088,2007]},{"title":"Events","children":[2070,1999,2000,2071,2001,2002,2003,2004,2005,2006]}]},{"title":"Methods","kind":2048,"children":[2016,2019,2089,2022,2025,2074,2080,2029,2032,2082,2037,2040,2045]}],"sources":[{"fileName":"packages/cli/src/Program.ts","line":51,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2224,"name":"ProgramOptions"}],"name":"CommandManager"}],"permalink":"/api/cli/class/Program","previousId":1813,"nextId":1749},{"id":2096,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2097,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":41,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2098,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":43,"character":4}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":2099,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":45,"character":4}],"type":{"type":"reference","id":2103,"name":"O"}},{"id":2100,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":47,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2104,"name":"P"}],"name":"MapParamType"}},{"id":2101,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":49,"character":4}],"type":{"type":"reference","id":2095,"name":"ArgList"}},{"id":2102,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":51,"character":4}],"type":{"type":"reference","id":2203,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[2097,2098,2099,2100,2101,2102]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":39,"character":17}],"typeParameter":[{"id":2103,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2104,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"reference","id":2095,"name":"ArgList"}}],"permalink":"/api/cli/interface/Arguments","previousId":1983,"nextId":2106},{"id":2106,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2107,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":133,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2108,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":134,"character":4}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[2107,2108]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":132,"character":17}],"permalink":"/api/cli/interface/Category","previousId":2096,"nextId":2245},{"id":2245,"name":"CommandConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2246,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2247,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":117,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2248,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":119,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]}},{"id":2249,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2217,"name":"Categories"}},{"id":2253,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.category"}},{"id":2255,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.deprecated"}},{"id":2256,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.description"}},{"id":2257,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.hidden"}},{"id":2250,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of options to their configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":123,"character":1}],"type":{"type":"reference","id":2157,"name":"OptionConfigMap"}},{"id":2251,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of param (positional args) configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2174,"name":"ParamConfigList"}},{"id":2252,"name":"path","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2254,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2246,2247,2248,2249,2253,2255,2256,2257,2250,2251,2252,2254]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":113,"character":17}],"extendedTypes":[{"type":"reference","name":"BaseCommandConfig"}],"permalink":"/api/cli/interface/CommandConfig","previousId":2106,"nextId":2280},{"id":2280,"name":"CommandMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2283,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","id":2268,"name":"CommandStaticConfig.aliases"}},{"id":2284,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":117,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2269,"name":"CommandStaticConfig.allowUnknownOptions"}},{"id":2285,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":119,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","id":2270,"name":"CommandStaticConfig.allowVariadicParams"}},{"id":2286,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2217,"name":"Categories"},"inheritedFrom":{"type":"reference","id":2271,"name":"CommandStaticConfig.categories"}},{"id":2290,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2275,"name":"CommandStaticConfig.category"}},{"id":2281,"name":"commands","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":144,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}],"name":"Record"}},{"id":2292,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2277,"name":"CommandStaticConfig.deprecated"}},{"id":2293,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2278,"name":"CommandStaticConfig.description"}},{"id":2282,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":140,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2267,"name":"CommandStaticConfig.hasRegisteredOptions"}},{"id":2294,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2279,"name":"CommandStaticConfig.hidden"}},{"id":2287,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of options to their configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":123,"character":1}],"type":{"type":"reference","id":2157,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","id":2272,"name":"CommandStaticConfig.options"}},{"id":2288,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of param (positional args) configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2174,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","id":2273,"name":"CommandStaticConfig.params"}},{"id":2289,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2274,"name":"CommandStaticConfig.path"}},{"id":2291,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","id":2276,"name":"CommandStaticConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2283,2284,2285,2286,2290,2281,2292,2293,2282,2294,2287,2288,2289,2291]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":143,"character":17}],"extendedTypes":[{"type":"reference","id":2266,"name":"CommandStaticConfig"}],"permalink":"/api/cli/interface/CommandMetadata","previousId":2245,"nextId":2266},{"id":2266,"name":"CommandStaticConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2268,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"Required.aliases"}},{"id":2269,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":117,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.allowUnknownOptions"}},{"id":2270,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":119,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","name":"Required.allowVariadicParams"}},{"id":2271,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2217,"name":"Categories"},"inheritedFrom":{"type":"reference","name":"Required.categories"}},{"id":2275,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.category"}},{"id":2277,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.deprecated"}},{"id":2278,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.description"}},{"id":2267,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":140,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2279,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.hidden"}},{"id":2272,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of options to their configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":123,"character":1}],"type":{"type":"reference","id":2157,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","name":"Required.options"}},{"id":2273,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of param (positional args) configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2174,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","name":"Required.params"}},{"id":2274,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.path"}},{"id":2276,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Required.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2268,2269,2270,2271,2275,2277,2278,2267,2279,2272,2273,2274,2276]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":139,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2245,"name":"CommandConfig"}],"name":"Required"}],"extendedBy":[{"type":"reference","id":2280,"name":"CommandMetadata"}],"permalink":"/api/cli/interface/CommandStaticConfig","previousId":2280,"nextId":2296},{"id":2296,"name":"Commandable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2297,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":150,"character":1}],"signatures":[{"id":2298,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}]}],"name":"Promise"}}]},{"id":2299,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":151,"character":1}],"signatures":[{"id":2300,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2280,"name":"CommandMetadata"}}]},{"id":2301,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":152,"character":1}],"signatures":[{"id":2302,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2175,"typeArguments":[{"type":"reference","id":2311,"name":"O"},{"type":"reference","id":2312,"name":"P"}],"name":"ParserOptions"}}]},{"id":2303,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":153,"character":1}],"signatures":[{"id":2304,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2305,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":154,"character":1}],"signatures":[{"id":2306,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2307,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"id":2308,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":155,"character":1}],"signatures":[{"id":2309,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2310,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":2312,"name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2243,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2243,"name":"RunResult"}],"name":"Promise"}]}}]}],"groups":[{"title":"Methods","kind":2048,"children":[2297,2299,2301,2303,2305,2308]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":149,"character":17}],"typeParameter":[{"id":2311,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"any"}},{"id":2312,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"implementedBy":[{"type":"reference","id":1813,"name":"Command"}],"permalink":"/api/cli/interface/Commandable","previousId":2266,"nextId":2109},{"id":2109,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2111,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":2110,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":123,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":2114,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":2115,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":2116,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":2112,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":2113,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2111,2110,2114,2115,2116,2112,2113]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":122,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2135,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"name":"Omit"}],"permalink":"/api/cli/interface/Flag","previousId":2296,"nextId":2209},{"id":2209,"name":"GlobalOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2210,"name":"help","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":59,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2211,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":60,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2212,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":61,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2210,2211,2212]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":58,"character":17}],"permalink":"/api/cli/interface/GlobalOptions","previousId":2109,"nextId":2118},{"id":2118,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2119,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":117,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2122,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2136,"name":"Option.category"}},{"id":2120,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":118,"character":4}],"type":{"type":"reference","id":2134,"name":"T"},"overwrites":{"type":"reference","id":2138,"name":"Option.default"}},{"id":2131,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2146,"name":"Option.deprecated"}},{"id":2132,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2147,"name":"Option.description"}},{"id":2133,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2148,"name":"Option.hidden"}},{"id":2121,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":120,"character":4}],"type":{"type":"literal","value":true}},{"id":2123,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2137,"name":"Option.short"}},{"id":2127,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2134,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2142,"name":"Option.type"}},{"id":2124,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2125,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2126,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":2140,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":2139,"name":"Option.format"}},{"id":2128,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2129,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2130,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2144,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":2143,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2119,2122,2120,2131,2132,2133,2121,2123,2127]},{"title":"Methods","kind":2048,"children":[2124,2128]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":115,"character":17}],"typeParameter":[{"id":2134,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2117,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":2135,"typeArguments":[{"type":"reference","id":2134,"name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/MultipleOption","previousId":2209,"nextId":2135},{"id":2135,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2136,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2138,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","id":2149,"name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2146,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2147,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2148,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2137,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"}},{"id":2142,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2149,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2139,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2140,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2141,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.format"}}],"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2143,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2144,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2145,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2136,2138,2146,2147,2148,2137,2142]},{"title":"Methods","kind":2048,"children":[2139,2143]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":102,"character":17}],"typeParameter":[{"id":2149,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2204,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2149,"name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":2118,"name":"MultipleOption"},{"type":"reference","id":2186,"name":"SingleOption"}],"permalink":"/api/cli/interface/Option","previousId":2118,"nextId":2259},{"id":2259,"name":"OptionInitializer","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2265,"name":"[INTERNAL_INITIALIZER]","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":133,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2264,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":135,"character":1}],"type":{"type":"intrinsic","name":"unknown"}},{"id":2260,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":134,"character":1}],"signatures":[{"id":2261,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2262,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}},{"id":2263,"name":"property","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2265,2264]},{"title":"Methods","kind":2048,"children":[2260]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":132,"character":17}],"permalink":"/api/cli/interface/OptionInitializer","previousId":2135,"nextId":2158},{"id":2158,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2161,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","id":2172,"name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2169,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2170,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2171,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2159,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":127,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2160,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":130,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2165,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2172,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2162,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2163,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2164,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.format"}}],"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2166,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2167,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2168,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2161,2169,2170,2171,2159,2160,2165]},{"title":"Methods","kind":2048,"children":[2162,2166]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":125,"character":17}],"typeParameter":[{"id":2172,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2184,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2172,"name":"T"}],"name":"Arg"}],"permalink":"/api/cli/interface/Param","previousId":2259,"nextId":2175},{"id":2175,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2176,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":63,"character":4}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"CommandChecker"}]}},{"id":2179,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":55,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.loose"}},{"id":2177,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2182,"name":"O"}],"name":"MapOptionConfig"}},{"id":2178,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":67,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2183,"name":"P"}],"name":"MapParamConfig"}},{"id":2180,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":57,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.unknown"}},{"id":2181,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":59,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[2176,2179,2177,2178,2180,2181]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":61,"character":17}],"typeParameter":[{"id":2182,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2183,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}},"default":{"type":"reference","id":2095,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","name":"ParserSettings"}],"permalink":"/api/cli/interface/ParserOptions","previousId":2158,"nextId":2236},{"id":2236,"name":"ProgramContextType","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2237,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":100,"character":1}],"type":{"type":"reference","id":2219,"name":"ExitHandler"}},{"id":2238,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":101,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2239,"name":"program","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":102,"character":1}],"type":{"type":"reference","id":2224,"name":"ProgramOptions"}}],"groups":[{"title":"Properties","kind":1024,"children":[2237,2238,2239]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":99,"character":17}],"permalink":"/api/cli/interface/ProgramContextType","previousId":2175,"nextId":2224},{"id":2224,"name":"ProgramOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2225,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2226,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":80,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2227,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":82,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2228,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2229,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2230,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":88,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2231,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2225,2226,2227,2228,2229,2230,2231]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":76,"character":17}],"extendedBy":[{"type":"reference","id":2407,"name":"IndexHelpProps"}],"permalink":"/api/cli/interface/ProgramOptions","previousId":2236,"nextId":2232},{"id":2232,"name":"ProgramStreams","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2233,"name":"stderr","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":94,"character":1}],"type":{"type":"reference","name":"WriteStream"}},{"id":2234,"name":"stdin","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":95,"character":1}],"type":{"type":"reference","name":"ReadStream"}},{"id":2235,"name":"stdout","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":96,"character":1}],"type":{"type":"reference","name":"WriteStream"}}],"groups":[{"title":"Properties","kind":1024,"children":[2233,2234,2235]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":93,"character":17}],"permalink":"/api/cli/interface/ProgramStreams","previousId":2224,"nextId":2186},{"id":2186,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2190,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2136,"name":"Option.category"}},{"id":2187,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":110,"character":4}],"type":{"type":"array","elementType":{"type":"reference","id":2202,"name":"T"}}},{"id":2188,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":112,"character":4}],"type":{"type":"conditional","checkType":{"type":"reference","id":2202,"name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":2189,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":113,"character":4}],"type":{"type":"reference","id":2202,"name":"T"},"overwrites":{"type":"reference","id":2138,"name":"Option.default"}},{"id":2199,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2146,"name":"Option.deprecated"}},{"id":2200,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2147,"name":"Option.description"}},{"id":2201,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2148,"name":"Option.hidden"}},{"id":2191,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2137,"name":"Option.short"}},{"id":2195,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2202,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2142,"name":"Option.type"}},{"id":2192,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2193,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2194,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":2140,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":2139,"name":"Option.format"}},{"id":2196,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2197,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2198,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2144,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":2143,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2190,2187,2188,2189,2199,2200,2201,2191,2195]},{"title":"Methods","kind":2048,"children":[2192,2196]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":108,"character":17}],"typeParameter":[{"id":2202,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2185,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":2135,"typeArguments":[{"type":"reference","id":2202,"name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/SingleOption","previousId":2232,"nextId":1754},{"id":2095,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":2,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ArgList","previousId":1754,"nextId":2105},{"id":2105,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":1,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#Argv","previousId":2095,"nextId":1807},{"id":1807,"name":"CLIErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":24,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/cli#CLIErrorCode","previousId":2105,"nextId":2217},{"id":2217,"name":"Categories","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":68,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"reference","id":2106,"name":"Category"},{"type":"intrinsic","name":"string"}]}],"name":"Record"},"permalink":"/api/cli#Categories","previousId":1807,"nextId":1972},{"id":1972,"name":"CategoryItemMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":3,"character":12}],"typeParameter":[{"id":1976,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":1973,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1974,"name":"items","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":6,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":1976,"name":"T"}}},{"id":1975,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1974,1975]}],"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":5,"character":1}]}}],"name":"Record"},"permalink":"/api/cli#CategoryItemMap","previousId":2217,"nextId":2258},{"id":2258,"name":"CommandConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":130,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2245,"name":"CommandConfig"}],"name":"Record"},"permalink":"/api/cli#CommandConfigMap","previousId":1972,"nextId":2295},{"id":2295,"name":"CommandMetadataMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":147,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2280,"name":"CommandMetadata"}],"name":"Record"},"permalink":"/api/cli#CommandMetadataMap","previousId":2258,"nextId":2244},{"id":2244,"name":"CommandPath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":111,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/cli#CommandPath","previousId":2295,"nextId":2218},{"id":2218,"name":"ExitCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":72,"character":12}],"type":{"type":"intrinsic","name":"number"},"permalink":"/api/cli#ExitCode","previousId":2244,"nextId":2219},{"id":2219,"name":"ExitHandler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":74,"character":12}],"type":{"type":"reflection","declaration":{"id":2220,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":74,"character":26}],"signatures":[{"id":2221,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2222,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"Error"},{"type":"intrinsic","name":"string"}]}},{"id":2223,"name":"code","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2218,"name":"ExitCode"}}],"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/cli#ExitHandler","previousId":2218,"nextId":2117},{"id":2117,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":3,"character":20}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/cli#ListType","previousId":2219,"nextId":2337},{"id":2337,"name":"Middleware","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":176,"character":12}],"type":{"type":"reflection","declaration":{"id":2338,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":176,"character":25}],"signatures":[{"id":2339,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2340,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2105,"name":"Argv"}},{"id":2341,"name":"parse","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2333,"name":"MiddlewareCallback"}},{"id":2342,"name":"logger","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Loggable"}}],"type":{"type":"union","types":[{"type":"reference","id":2332,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2332,"name":"MiddlewareArguments"}],"name":"Promise"}]}}]}},"permalink":"/api/cli#Middleware","previousId":2117,"nextId":2332},{"id":2332,"name":"MiddlewareArguments","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":172,"character":12}],"type":{"type":"reference","id":2096,"typeArguments":[{"type":"reference","id":2209,"name":"GlobalOptions"},{"type":"reference","id":2095,"name":"ArgList"}],"name":"Arguments"},"permalink":"/api/cli#MiddlewareArguments","previousId":2337,"nextId":2333},{"id":2333,"name":"MiddlewareCallback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":174,"character":12}],"type":{"type":"reflection","declaration":{"id":2334,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":174,"character":33}],"signatures":[{"id":2335,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2336,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2105,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":2332,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2332,"name":"MiddlewareArguments"}],"name":"Promise"}]}}]}},"permalink":"/api/cli#MiddlewareCallback","previousId":2332,"nextId":2150},{"id":2150,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":20}],"type":{"type":"intersection","types":[{"type":"reference","id":2135,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":2151,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2152,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":138,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2153,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":139,"character":4}],"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}}},{"id":2154,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":140,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2155,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":141,"character":4}],"type":{"type":"reference","id":2204,"name":"ValueType"}},{"id":2156,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":142,"character":4}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2152,2153,2154,2155,2156]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":49}]}}]},"permalink":"/api/cli#OptionConfig","previousId":2333,"nextId":2157},{"id":2157,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":144,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2150,"name":"OptionConfig"}],"name":"Record"},"permalink":"/api/cli#OptionConfigMap","previousId":2150,"nextId":2213},{"id":2213,"name":"Options","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":64,"character":12}],"typeParameter":[{"id":2214,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2214,"name":"T"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":2209,"name":"GlobalOptions"}}],"name":"Omit"}],"name":"MapOptionConfig"},"permalink":"/api/cli#Options","previousId":2157,"nextId":2173},{"id":2173,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":146,"character":20}],"type":{"type":"reference","id":2158,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/cli#ParamConfig","previousId":2213,"nextId":2174},{"id":2174,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":147,"character":20}],"type":{"type":"array","elementType":{"type":"reference","id":2173,"name":"ParamConfig"}},"permalink":"/api/cli#ParamConfigList","previousId":2173,"nextId":2215},{"id":2215,"name":"Params","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":66,"character":12}],"typeParameter":[{"id":2216,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2216,"name":"T"}],"name":"MapParamConfig"},"permalink":"/api/cli#Params","previousId":2174,"nextId":2205},{"id":2205,"name":"PartialConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":54,"character":12}],"typeParameter":[{"id":2206,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2206,"name":"T"},{"type":"union","types":[{"type":"literal","value":"description"},{"type":"literal","value":"multiple"},{"type":"literal","value":"path"},{"type":"literal","value":"type"}]}],"name":"Omit"},"permalink":"/api/cli#PartialConfig","previousId":2215,"nextId":2184},{"id":2184,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":5,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2185,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/cli#PrimitiveType","previousId":2205,"nextId":2240},{"id":2240,"name":"ProgramBootstrap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":105,"character":12}],"type":{"type":"reflection","declaration":{"id":2241,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":105,"character":31}],"signatures":[{"id":2242,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/cli#ProgramBootstrap","previousId":2184,"nextId":2243},{"id":2243,"name":"RunResult","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":109,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactElement"},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"void"}]},"permalink":"/api/cli#RunResult","previousId":2240,"nextId":2185},{"id":2185,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":4,"character":20}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/cli#ScalarType","previousId":2243,"nextId":2343},{"id":2343,"name":"StyleType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":184,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"failure"},{"type":"literal","value":"info"},{"type":"literal","value":"inverted"},{"type":"literal","value":"muted"},{"type":"literal","value":"notice"},{"type":"literal","value":"success"},{"type":"literal","value":"warning"}]},"permalink":"/api/cli#StyleType","previousId":2185,"nextId":2313},{"id":2313,"name":"TaskContext","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":160,"character":12}],"typeParameter":[{"id":2331,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2209,"name":"GlobalOptions"},"default":{"type":"reference","id":2209,"name":"GlobalOptions"}}],"type":{"type":"intersection","types":[{"type":"reference","id":2331,"name":"O"},{"type":"reflection","declaration":{"id":2314,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2315,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":161,"character":1}],"type":{"type":"reference","id":2219,"name":"ExitHandler"}},{"id":2316,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":162,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2317,"name":"rest","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":163,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2318,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":2203,"name":"UnknownOptionMap"}},{"id":2319,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":166,"character":1}],"signatures":[{"id":2320,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2321,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2105,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2322,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":167,"character":1}],"signatures":[{"id":2323,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2324,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":2325,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2326,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2327,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2328,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2329,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":2324,"name":"A"}}],"type":{"type":"reference","id":2325,"name":"R"}}]}}},{"id":2330,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":2324,"name":"A"}}],"type":{"type":"reference","id":2325,"name":"R"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2315,2316,2317,2318]},{"title":"Methods","kind":2048,"children":[2319,2322]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":160,"character":71}]}}]},"permalink":"/api/cli#TaskContext","previousId":2343,"nextId":2344},{"id":2344,"name":"ThemePalette","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":194,"character":12}],"type":{"type":"mapped","parameter":"T","parameterType":{"type":"reference","id":2343,"name":"StyleType"},"templateType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ThemePalette","previousId":2313,"nextId":2203},{"id":2203,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":8,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/cli#UnknownOptionMap","previousId":2344,"nextId":2204},{"id":2204,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":6,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2117,"name":"ListType"},{"type":"reference","id":2184,"name":"PrimitiveType"}]},"permalink":"/api/cli#ValueType","previousId":2203,"nextId":2207},{"id":2207,"name":"Writeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":56,"character":12}],"typeParameter":[{"id":2208,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"mapped","parameter":"P","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":2208,"name":"T"}},"templateType":{"type":"indexedAccess","indexType":{"type":"reference","name":"P"},"objectType":{"type":"reference","id":2208,"name":"T"}},"readonlyModifier":"-"},"permalink":"/api/cli#Writeable","previousId":2204,"nextId":1808},{"id":1808,"name":"CLIError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":26,"character":13}],"type":{"type":"reflection","declaration":{"id":1809,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1810,"name":"new CLIError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1811,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}},{"id":1812,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/cli#CLIError","previousId":2207,"nextId":1927},{"id":1927,"name":"DELIMITER","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":39,"character":13}],"type":{"type":"literal","value":"$ "},"defaultValue":"\'$ \'","permalink":"/api/cli#DELIMITER","previousId":1808,"nextId":1918},{"id":1918,"name":"EXIT_FAIL","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":11,"character":13}],"type":{"type":"reference","id":2218,"name":"ExitCode"},"defaultValue":"1","permalink":"/api/cli#EXIT_FAIL","previousId":1927,"nextId":1917},{"id":1917,"name":"EXIT_PASS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":10,"character":13}],"type":{"type":"reference","id":2218,"name":"ExitCode"},"defaultValue":"0","permalink":"/api/cli#EXIT_PASS","previousId":1918,"nextId":1922},{"id":1922,"name":"INTERNAL_INITIALIZER","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":16,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1922,"name":"INTERNAL_INITIALIZER"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_INITIALIZER","previousId":1917,"nextId":1919},{"id":1919,"name":"INTERNAL_OPTIONS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":13,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1919,"name":"INTERNAL_OPTIONS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_OPTIONS","previousId":1922,"nextId":1920},{"id":1920,"name":"INTERNAL_PARAMS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":14,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1920,"name":"INTERNAL_PARAMS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PARAMS","previousId":1919,"nextId":1921},{"id":1921,"name":"INTERNAL_PROGRAM","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":15,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1921,"name":"INTERNAL_PROGRAM"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PROGRAM","previousId":1920,"nextId":1916},{"id":1916,"name":"LOCALE_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#LOCALE_FORMAT","previousId":1921,"nextId":1923},{"id":1923,"name":"RESERVED_OPTIONS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":18,"character":13}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"...","permalink":"/api/cli#RESERVED_OPTIONS","previousId":1916,"nextId":1924},{"id":1924,"name":"SPACING_COL","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":35,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_COL","previousId":1923,"nextId":1925},{"id":1925,"name":"SPACING_COL_WIDE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":36,"character":13}],"type":{"type":"literal","value":2},"defaultValue":"2","permalink":"/api/cli#SPACING_COL_WIDE","previousId":1924,"nextId":1926},{"id":1926,"name":"SPACING_ROW","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":37,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_ROW","previousId":1925,"nextId":1915},{"id":1915,"name":"VERSION_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#VERSION_FORMAT","previousId":1926},{"id":1749,"name":"Config","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Config.ts","line":16,"character":16}],"signatures":[{"id":1750,"name":"Config","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A class decorator for defining the following metadata on a `Command`.\\n- path\\n- description\\n- aliases\\n- allowUnknownOptions\\n- allowVariadicParams\\n- categories\\n- category\\n- deprecated\\n- hidden\\n- usage"},"parameters":[{"id":1751,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1752,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1753,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2205,"typeArguments":[{"type":"reference","id":2266,"name":"CommandStaticConfig"}],"name":"PartialConfig"}],"name":"Partial"},"defaultValue":"{}"}],"type":{"type":"reference","name":"ClassDecorator"}}],"permalink":"/api/cli/function/Config","previousId":1994,"nextId":1928},{"id":1928,"name":"applyMarkdown","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyMarkdown.ts","line":3,"character":16}],"signatures":[{"id":1929,"name":"applyMarkdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1930,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyMarkdown","previousId":1749,"nextId":1931},{"id":1931,"name":"applyStyle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyStyle.ts","line":5,"character":16}],"signatures":[{"id":1932,"name":"applyStyle","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1933,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1934,"name":"type","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2343,"name":"StyleType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyStyle","previousId":1928,"nextId":1986},{"id":1986,"name":"checkNodeRequirement","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkNodeRequirement.ts","line":8,"character":16}],"signatures":[{"id":1987,"name":"checkNodeRequirement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that the currently running Node.js process.version satisfies the given semver range.\\nIf not, a console error will be logged, or an error will be thrown."},"parameters":[{"id":1988,"name":"range","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1989,"name":"throws","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":2337,"name":"Middleware"}}],"permalink":"/api/cli/function/checkNodeRequirement","previousId":1931,"nextId":1990},{"id":1990,"name":"checkPackageOutdated","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkPackageOutdated.ts","line":37,"character":16}],"signatures":[{"id":1991,"name":"checkPackageOutdated","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that a package and its provided version is using the latest distribution\\nversion by checking against the npm registry. If not, a console message will be logged."},"parameters":[{"id":1992,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1993,"name":"version","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2337,"name":"Middleware"}}],"permalink":"/api/cli/function/checkPackageOutdated","previousId":1986,"nextId":1935},{"id":1935,"name":"formatCommandCall","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatCommandCall.ts","line":4,"character":16}],"signatures":[{"id":1936,"name":"formatCommandCall","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1937,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1938,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2245,"name":"CommandConfig"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatCommandCall","previousId":1990,"nextId":1939},{"id":1939,"name":"formatDescription","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":7,"character":16}],"signatures":[{"id":1940,"name":"formatDescription","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1941,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1942,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1943,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":9,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}}},{"id":1944,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":10,"character":2}],"type":{"type":"reference","id":2184,"name":"PrimitiveType"}},{"id":1946,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":12,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1945,"name":"description","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":11,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1943,1944,1946,1945]}]}}},{"id":1947,"name":"tags","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatDescription","previousId":1935,"nextId":1948},{"id":1948,"name":"formatType","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":3,"character":16}],"signatures":[{"id":1949,"name":"formatType","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1950,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1951,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1952,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":5,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":1953,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":6,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1954,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1955,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":8,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1952,1953,1954,1955]}]}}},{"id":1956,"name":"inline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatType","previousId":1939,"nextId":1957},{"id":1957,"name":"formatValue","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatValue.ts","line":3,"character":16}],"signatures":[{"id":1958,"name":"formatValue","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1959,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2184,"name":"PrimitiveType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatValue","previousId":1948,"nextId":1960},{"id":1960,"name":"getLongestWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/getLongestWidth.ts","line":3,"character":16}],"signatures":[{"id":1961,"name":"getLongestWidth","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1962,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/cli/function/getLongestWidth","previousId":1957,"nextId":1963},{"id":1963,"name":"groupByCategory","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":16}],"signatures":[{"id":1964,"name":"groupByCategory","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1969,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1965,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1966,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":44}],"type":{"type":"intrinsic","name":"string"}},{"id":1967,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":63}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1968,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":81}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1966,1967,1968]}]}}}],"parameters":[{"id":1970,"name":"items","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":1969,"name":"T"}}},{"id":1971,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2217,"name":"Categories"}}],"type":{"type":"reference","id":1972,"typeArguments":[{"type":"reference","id":1969,"name":"T"}],"name":"CategoryItemMap"}}],"permalink":"/api/cli/function/groupByCategory","previousId":1960,"nextId":1977},{"id":1977,"name":"isArgvSize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/isArgvSize.ts","line":4,"character":16}],"signatures":[{"id":1978,"name":"isArgvSize","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1979,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2105,"name":"Argv"}},{"id":1980,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/cli/function/isArgvSize","previousId":1963,"nextId":1981},{"id":1981,"name":"loadTheme","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/loadTheme.ts","line":8,"character":16}],"signatures":[{"id":1982,"name":"loadTheme","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2344,"name":"ThemePalette"}}],"permalink":"/api/cli/function/loadTheme","previousId":1977,"nextId":1983},{"id":1983,"name":"mapCommandMetadata","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/mapCommandMetadata.ts","line":3,"character":16}],"signatures":[{"id":1984,"name":"mapCommandMetadata","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1985,"name":"commands","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2296,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}],"name":"Record"}}],"type":{"type":"reference","id":2295,"name":"CommandMetadataMap"}}],"permalink":"/api/cli/function/mapCommandMetadata","previousId":1981,"nextId":2096}],"groups":[{"title":"Classes","kind":128,"children":[1813,1994]},{"title":"Functions","kind":64,"children":[1749,1928,1931,1986,1990,1935,1939,1948,1957,1960,1963,1977,1981,1983]},{"title":"Interfaces","kind":256,"children":[2096,2106,2245,2280,2266,2296,2109,2209,2118,2135,2259,2158,2175,2236,2224,2232,2186]},{"title":"Namespaces","kind":4,"children":[1754]},{"title":"Type aliases","kind":4194304,"children":[2095,2105,1807,2217,1972,2258,2295,2244,2218,2219,2117,2337,2332,2333,2150,2157,2213,2173,2174,2215,2205,2184,2240,2243,2185,2343,2313,2344,2203,2204,2207]},{"title":"Variables","kind":32,"children":[1808,1927,1918,1917,1922,1919,1920,1921,1916,1923,1924,1925,1926,1915]}],"sources":[{"fileName":"packages/cli/src/index.ts","line":6,"character":0}],"permalink":"/api/cli"},"urlSlug":"cli"},{"index":false,"label":"Components & hooks","reflection":{"id":10,"name":"@boost/cli/react","kind":2,"kindString":"Module","flags":{},"children":[{"id":2364,"name":"Failure","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A React component that renders a failure state for errors and warnings."},"children":[{"id":2365,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2366,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2367,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2357,"name":"FailureProps"},{"type":"reference","typeArguments":[{"type":"reference","id":2357,"name":"FailureProps"}],"name":"Readonly"}]}}],"type":{"type":"reference","id":2364,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2368,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"comment":{"tags":[{"tag":"deprecated","text":""},{"tag":"see","text":"https://reactjs.org/docs/legacy-context.html\\n"}]},"parameters":[{"id":2369,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2357,"name":"FailureProps"}},{"id":2370,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","id":2364,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2379,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":152,"character":10}],"signatures":[{"id":2380,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","name":"Element"},"overwrites":{"type":"reference","name":"React.Component.render"}}],"overwrites":{"type":"reference","name":"React.Component.render"}},{"id":2373,"name":"renderCodeFrame","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":50,"character":1}],"signatures":[{"id":2374,"name":"renderCodeFrame","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2375,"name":"renderStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":105,"character":1}],"signatures":[{"id":2376,"name":"renderStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2377,"name":"renderWarnings","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":127,"character":1}],"signatures":[{"id":2378,"name":"renderWarnings","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2371,"name":"shouldHideStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":36,"character":1}],"signatures":[{"id":2372,"name":"shouldHideStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"boolean"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2365]},{"title":"Methods","kind":2048,"children":[2379,2373,2375,2377,2371]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":35,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2357,"name":"FailureProps"}],"name":"Component"}],"permalink":"/api/cli-react/class/Failure","nextId":2345},{"id":2348,"name":"ConfirmProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2349,"name":"invalidError","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Error message to display when an invalid character is pressed. Defaults to a custom message."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":12,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2352,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"Omit.label"}},{"id":2350,"name":"no","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a falsy state when pressed. Defaults to \\"N\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2353,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.prefix"}},{"id":2351,"name":"yes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a truthy state when pressed. Defaults to \\"y\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2354,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2355,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2356,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"groups":[{"title":"Properties","kind":1024,"children":[2349,2352,2350,2353,2351]},{"title":"Methods","kind":2048,"children":[2354]}],"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":10,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"PromptProps"},{"type":"literal","value":"validate"}],"name":"Omit"}],"permalink":"/api/cli-react/interface/ConfirmProps","previousId":2538,"nextId":2357},{"id":2357,"name":"FailureProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2358,"name":"binName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the binary being executed."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2359,"name":"commandLine","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Full length command line being ran."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2360,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":23,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2361,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The primary error to display in red."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":25,"character":1}],"type":{"type":"reference","name":"Error"}},{"id":2362,"name":"hideStackTrace","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the primary error stack trace. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":27,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2363,"name":"warnings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Optional errors as warnings to display in yellow."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":29,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}}],"groups":[{"title":"Properties","kind":1024,"children":[2358,2359,2360,2361,2362,2363]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":17,"character":17}],"permalink":"/api/cli-react/interface/FailureProps","previousId":2348,"nextId":2384},{"id":2384,"name":"HeaderProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2385,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Text to display for the label."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2387,"name":"marginBottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The top margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2386,"name":"marginTop","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The bottom margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2388,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Customize the background color using Style. Defaults to normal text."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":15,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2343,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2385,2387,2386,2388]}],"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":7,"character":17}],"permalink":"/api/cli-react/interface/HeaderProps","previousId":2357,"nextId":2392},{"id":2392,"name":"HelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2393,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of categories to use for command and option grouping."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":33,"character":1}],"type":{"type":"reference","id":2217,"name":"Categories"}},{"id":2395,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of commands, typically sub-commands."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":37,"character":1}],"type":{"type":"reference","id":2258,"name":"CommandConfigMap"}},{"id":2394,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Configuration metadata about the current command."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":35,"character":1}],"type":{"type":"reference","id":2245,"name":"CommandConfig"}},{"id":2396,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2397,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A header to display at the top of the output."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":41,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2398,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of command options."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":43,"character":1}],"type":{"type":"reference","id":2157,"name":"OptionConfigMap"}},{"id":2399,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of command params."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":45,"character":1}],"type":{"type":"reference","id":2174,"name":"ParamConfigList"}}],"groups":[{"title":"Properties","kind":1024,"children":[2393,2395,2394,2396,2397,2398,2399]}],"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":31,"character":17}],"permalink":"/api/cli-react/interface/HelpProps","previousId":2384,"nextId":2407},{"id":2407,"name":"IndexHelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2409,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2225,"name":"ProgramOptions.banner"}},{"id":2410,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":80,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2226,"name":"ProgramOptions.bin"}},{"id":2408,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":8,"character":1}],"type":{"type":"reference","name":"ReactNode"}},{"id":2411,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":82,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2227,"name":"ProgramOptions.delimiter"}},{"id":2412,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2228,"name":"ProgramOptions.footer"}},{"id":2413,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2229,"name":"ProgramOptions.header"}},{"id":2414,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":88,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2230,"name":"ProgramOptions.name"}},{"id":2415,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2231,"name":"ProgramOptions.version"}}],"groups":[{"title":"Properties","kind":1024,"children":[2409,2410,2408,2411,2412,2413,2414,2415]}],"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":2224,"name":"ProgramOptions"}],"permalink":"/api/cli-react/interface/IndexHelpProps","previousId":2392,"nextId":2419},{"id":2419,"name":"InputProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2420,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A default value. If none provided, will use an empty state."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2421,"name":"hideCursor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the cursor in the terminal. Will remove the background color, but still functions."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2427,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2422,"name":"mask","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mask to replace every inputted character with."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2426,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom string to display when the value is empty and non-dirty."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2428,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2423,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":15,"character":1}],"signatures":[{"id":2424,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value changes."},"parameters":[{"id":2425,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2429,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2430,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2431,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2432,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2433,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2434,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2420,2421,2427,2422,2426,2428]},{"title":"Methods","kind":2048,"children":[2423,2429,2432]}],"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"PromptProps"}],"permalink":"/api/cli-react/interface/InputProps","previousId":2407,"nextId":2439},{"id":2439,"name":"MultiSelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2440,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of option values selected by default."},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":2457,"name":"T"}},"overwrites":{"type":"reference","id":2485,"name":"SelectProps.defaultSelected"}},{"id":2445,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","id":2487,"name":"SelectProps.label"}},{"id":2453,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":2495,"name":"SelectProps.limit"}},{"id":2444,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":2457,"name":"T"},{"type":"reference","id":2470,"typeArguments":[{"type":"reference","id":2457,"name":"T"}],"name":"SelectOptionLike"}]}},"inheritedFrom":{"type":"reference","id":2486,"name":"SelectProps.options"}},{"id":2454,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2496,"name":"SelectProps.overflowAfterLabel"}},{"id":2455,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2497,"name":"SelectProps.overflowBeforeLabel"}},{"id":2446,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2488,"name":"SelectProps.prefix"}},{"id":2456,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","id":2498,"name":"SelectProps.scrollType"}},{"id":2441,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":17,"character":1}],"signatures":[{"id":2442,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when a value is selected or unselected."},"parameters":[{"id":2443,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2457,"name":"T"}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2447,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2448,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2449,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2490,"name":"SelectProps.onSubmit"}}],"inheritedFrom":{"type":"reference","id":2489,"name":"SelectProps.onSubmit"}},{"id":2450,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2451,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2452,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2493,"name":"SelectProps.validate"}}],"inheritedFrom":{"type":"reference","id":2492,"name":"SelectProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2440,2445,2453,2444,2454,2455,2446,2456]},{"title":"Methods","kind":2048,"children":[2441,2447,2450]}],"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":13,"character":17}],"typeParameter":[{"id":2457,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":2484,"typeArguments":[{"type":"array","elementType":{"type":"reference","id":2457,"name":"T"}},{"type":"reference","id":2457,"name":"T"}],"name":"SelectProps"}],"permalink":"/api/cli-react/interface/MultiSelectProps","previousId":2419,"nextId":2478},{"id":2478,"name":"SelectOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2479,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2480,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2481,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":19,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]}},{"id":2482,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":20,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2483,"name":"T"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2479,2480,2481,2482]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":16,"character":17}],"typeParameter":[{"id":2483,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/cli-react/interface/SelectOption","previousId":2439,"nextId":2484},{"id":2484,"name":"SelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2485,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Option value selected by default."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":25,"character":1}],"type":{"type":"reference","id":2499,"name":"T"}},{"id":2487,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2495,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.limit"}},{"id":2486,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":2500,"name":"V"},{"type":"reference","id":2470,"typeArguments":[{"type":"reference","id":2500,"name":"V"}],"name":"SelectOptionLike"}]}}},{"id":2496,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowAfterLabel"}},{"id":2497,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowBeforeLabel"}},{"id":2488,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2498,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.scrollType"}},{"id":2489,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2490,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2491,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2492,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2493,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2494,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2485,2487,2495,2486,2496,2497,2488,2498]},{"title":"Methods","kind":2048,"children":[2489,2492]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":23,"character":17}],"typeParameter":[{"id":2499,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}},{"id":2500,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":2499,"name":"T"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2499,"name":"T"}],"name":"PromptProps"},{"type":"reference","name":"ScrollableListProps"}],"extendedBy":[{"type":"reference","id":2439,"name":"MultiSelectProps"}],"permalink":"/api/cli-react/interface/SelectProps","previousId":2478,"nextId":2504},{"id":2504,"name":"StyleProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2505,"name":"children","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":7,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]}},{"id":2506,"name":"inverted","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Invert the colors to style the background instead of foreground. Defaults\\nto `false`."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":10,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2507,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Theme palette name to style with. Defaults to \\"none\\"."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2343,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2505,2506,2507]}],"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":6,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"TextProps"},{"type":"union","types":[{"type":"literal","value":"bold"},{"type":"literal","value":"italic"},{"type":"literal","value":"underline"},{"type":"literal","value":"wrap"}]}],"name":"Pick"}],"permalink":"/api/cli-react/interface/StyleProps","previousId":2484,"nextId":2403},{"id":2403,"name":"HiddenInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2419,"name":"InputProps"},{"type":"union","types":[{"type":"literal","value":"hideCursor"},{"type":"literal","value":"mask"}]}],"name":"Omit"},"permalink":"/api/cli-react#HiddenInputProps","previousId":2504,"nextId":2461},{"id":2461,"name":"PasswordInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2419,"name":"InputProps"},{"type":"literal","value":"mask"}],"name":"Omit"},"permalink":"/api/cli-react#PasswordInputProps","previousId":2403,"nextId":2470},{"id":2470,"name":"SelectOptionLike","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":12,"character":12}],"typeParameter":[{"id":2477,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2471,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2472,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":5}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2473,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":23}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"React.ReactNode"}],"name":"NonNullable"}}],"groups":[{"title":"Properties","kind":1024,"children":[2472,2473]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":3}]}},{"type":"reflection","declaration":{"id":2474,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2475,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":5}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"React.ReactNode"}],"name":"NonNullable"}},{"id":2476,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":42}],"type":{"type":"reference","id":2477,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2475,2476]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":3}]}}]},"permalink":"/api/cli-react#SelectOptionLike","previousId":2461,"nextId":2543},{"id":2543,"name":"ProgramContext","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/ProgramContext.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2236,"name":"ProgramContextType"}],"name":"Context"},"defaultValue":"...","permalink":"/api/cli-react#ProgramContext","previousId":2470},{"id":2345,"name":"Confirm","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":22,"character":16}],"signatures":[{"id":2346,"name":"Confirm","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a yes/no confirmation prompt."},"parameters":[{"id":2347,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2348,"name":"ConfirmProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Confirm","previousId":2364,"nextId":2381},{"id":2381,"name":"Header","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":21,"character":16}],"signatures":[{"id":2382,"name":"Header","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a header/title within a terminal menu."},"parameters":[{"id":2383,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2384,"name":"HeaderProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Header","previousId":2345,"nextId":2389},{"id":2389,"name":"Help","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":53,"character":16}],"signatures":[{"id":2390,"name":"Help","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for a command.\\nIncludes all sub-commands, options, params, and more."},"parameters":[{"id":2391,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2392,"name":"HelpProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Help","previousId":2381,"nextId":2400},{"id":2400,"name":"HiddenInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":9,"character":16}],"signatures":[{"id":2401,"name":"HiddenInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field that hides its content from the terminal."},"parameters":[{"id":2402,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2403,"name":"HiddenInputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/HiddenInput","previousId":2389,"nextId":2404},{"id":2404,"name":"IndexHelp","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":14,"character":16}],"signatures":[{"id":2405,"name":"IndexHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for the entire program."},"parameters":[{"id":2406,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2407,"name":"IndexHelpProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/IndexHelp","previousId":2400,"nextId":2416},{"id":2416,"name":"Input","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":23,"character":16}],"signatures":[{"id":2417,"name":"Input","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field, allowing the user to enter information."},"parameters":[{"id":2418,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2419,"name":"InputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Input","previousId":2404,"nextId":2435},{"id":2435,"name":"MultiSelect","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":24,"character":16}],"signatures":[{"id":2436,"name":"MultiSelect","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where multiple options can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2437,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2438,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2439,"typeArguments":[{"type":"reference","id":2437,"name":"T"}],"name":"MultiSelectProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/MultiSelect","previousId":2416,"nextId":2458},{"id":2458,"name":"PasswordInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":9,"character":16}],"signatures":[{"id":2459,"name":"PasswordInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field with characters masked with \\"*\\"."},"parameters":[{"id":2460,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2461,"name":"PasswordInputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/PasswordInput","previousId":2435,"nextId":2466},{"id":2466,"name":"Select","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":55,"character":16}],"signatures":[{"id":2467,"name":"Select","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where a single option can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2468,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":2469,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2484,"typeArguments":[{"type":"reference","id":2468,"name":"T"},{"type":"reference","id":2468,"name":"T"}],"name":"SelectProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Select","previousId":2458,"nextId":2501},{"id":2501,"name":"Style","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":18,"character":16}],"signatures":[{"id":2502,"name":"Style","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that styles text and backgrounds based on the current Boost theme."},"parameters":[{"id":2503,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2504,"name":"StyleProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Style","previousId":2466,"nextId":2462},{"id":2462,"name":"normalizeOptions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":30,"character":16}],"signatures":[{"id":2463,"name":"normalizeOptions","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2464,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2465,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"array","elementType":{"type":"reference","id":2478,"typeArguments":[{"type":"reference","id":2464,"name":"T"}],"name":"SelectOption"}}}],"permalink":"/api/cli-react/function/normalizeOptions","previousId":2501,"nextId":2508},{"id":2508,"name":"useDimensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":16}],"signatures":[{"id":2509,"name":"useDimensions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reflection","declaration":{"id":2510,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2511,"name":"height","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":35}],"type":{"type":"intrinsic","name":"number"}},{"id":2512,"name":"width","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":51}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[2511,2512]}],"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":33}]}}}],"permalink":"/api/cli-react/function/useDimensions","previousId":2462,"nextId":2513},{"id":2513,"name":"useIsMounted","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useIsMounted.ts","line":3,"character":16}],"signatures":[{"id":2514,"name":"useIsMounted","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"MutableRefObject"}}],"permalink":"/api/cli-react/function/useIsMounted","previousId":2508,"nextId":2515},{"id":2515,"name":"useListNavigation","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":3,"character":16}],"signatures":[{"id":2516,"name":"useListNavigation","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2517,"name":"list","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":2518,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2519,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":9}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2520,"name":"divider","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":29}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2519,2520]}]}}}},{"id":2521,"name":"defaultIndex","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reflection","declaration":{"id":2522,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2523,"name":"highlightedIndex","kind":1024,"kindString":"Property","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2524,"name":"onKeyDown","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2525,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2526,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":2527,"name":"onKeyLeft","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2528,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2529,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":2530,"name":"onKeyRight","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2531,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2532,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":2533,"name":"onKeyUp","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2534,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2535,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"groups":[{"title":"Properties","kind":1024,"children":[2523,2524,2527,2530,2533]}]}}}],"permalink":"/api/cli-react/function/useListNavigation","previousId":2513,"nextId":2536},{"id":2536,"name":"useProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useProgram.ts","line":8,"character":16}],"signatures":[{"id":2537,"name":"useProgram","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2236,"name":"ProgramContextType"}}],"permalink":"/api/cli-react/function/useProgram","previousId":2515,"nextId":2538},{"id":2538,"name":"useRenderLoop","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":5,"character":16}],"signatures":[{"id":2539,"name":"useRenderLoop","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2540,"name":"fps","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"},"defaultValue":"30"}],"type":{"type":"reflection","declaration":{"id":2541,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":5,"character":49}],"signatures":[{"id":2542,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/cli-react/function/useRenderLoop","previousId":2536,"nextId":2348}],"groups":[{"title":"Classes","kind":128,"children":[2364]},{"title":"Functions","kind":64,"children":[2345,2381,2389,2400,2404,2416,2435,2458,2466,2501,2462,2508,2513,2515,2536,2538]},{"title":"Interfaces","kind":256,"children":[2348,2357,2384,2392,2407,2419,2439,2478,2484,2504]},{"title":"Type aliases","kind":4194304,"children":[2403,2461,2470]},{"title":"Variables","kind":32,"children":[2543]}],"sources":[{"fileName":"packages/cli/src/react.ts","line":1,"character":0}],"permalink":"/api/cli-react"},"urlSlug":"cli-react"},{"index":false,"label":"Test utilities","reflection":{"id":11,"name":"@boost/cli/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":53,"name":"MockReadStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":54,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":55,"name":"new MockReadStream","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":53,"name":"MockReadStream"}}]},{"id":56,"name":"isTTY","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"groups":[{"title":"Constructors","kind":512,"children":[54]},{"title":"Properties","kind":1024,"children":[56]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":19,"character":13}],"permalink":"/api/cli-test/class/MockReadStream","nextId":57},{"id":57,"name":"MockWriteStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":58,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":30,"character":1}],"signatures":[{"id":59,"name":"new MockWriteStream","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":60,"name":"append","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":57,"name":"MockWriteStream"}}]},{"id":61,"name":"append","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":62,"name":"columns","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"80"},{"id":63,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":67,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":43,"character":1}],"signatures":[{"id":68,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":71,"name":"off","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":49,"character":1}],"signatures":[{"id":72,"name":"off","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":69,"name":"on","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":47,"character":1}],"signatures":[{"id":70,"name":"on","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":64,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":35,"character":1}],"signatures":[{"id":65,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":66,"name":"string","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[58]},{"title":"Properties","kind":1024,"children":[61,62,63]},{"title":"Methods","kind":2048,"children":[67,71,69,64]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":23,"character":13}],"permalink":"/api/cli-test/class/MockWriteStream","previousId":53,"nextId":15},{"id":15,"name":"mockProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":80,"character":16}],"signatures":[{"id":16,"name":"mockProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a `Program` instance with required options pre-filled and streams mocked\\n(unless manually provided).","text":"```ts\\nimport { mockProgram } from \'@boost/cli/test\';\\n\\nconst program = mockProgram({ name: \'Example\' });\\n```\\n"},"parameters":[{"id":17,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2224,"name":"ProgramOptions"}],"name":"Partial"}},{"id":18,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2232,"name":"ProgramStreams"}}],"type":{"type":"reference","id":1994,"name":"Program"}}],"permalink":"/api/cli-test/function/mockProgram","previousId":57,"nextId":12},{"id":12,"name":"mockStreams","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":62,"character":16}],"signatures":[{"id":13,"name":"mockStreams","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns mocked `stderr`, `stdout`, and `stdin` streams that can be passed to a `Program`.\\nThis does not mock all stream functionality, only those required by Boost and Ink.","text":"```ts\\nimport { mockStreams } from \'@boost/cli/test\';\\n\\nconst streams = mockStreams();\\n```\\n"},"parameters":[{"id":14,"name":"append","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","id":2232,"name":"ProgramStreams"}}],"permalink":"/api/cli-test/function/mockStreams","previousId":15,"nextId":19},{"id":19,"name":"renderComponent","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":109,"character":22}],"signatures":[{"id":20,"name":"renderComponent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to render a React component with Ink and return the rendered result\\nas a terminal compatible string. If `stripped` is true, it will strip ANSI\\nescape escape sequences.","text":"```tsx\\nimport { renderComponent } from \'@boost/cli/test\';\\nimport TestComponent from \'../src/components/TestComponent\';\\n\\nit(\'renders a component\', async () => {\\n\\texpect(await renderComponent(<TestComponent />)).toMatchSnapshot();\\n});\\n```\\n\\n> As an alternative, we also suggest using the official\\n> [ink-testing-library](https://github.com/vadimdemedes/ink-testing-library).\\n"},"parameters":[{"id":21,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}},{"id":22,"name":"stripped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}],"permalink":"/api/cli-test/function/renderComponent","previousId":12,"nextId":23},{"id":23,"name":"runCommand","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":156,"character":22}],"signatures":[{"id":24,"name":"runCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Command` outside the context of a `Program`, but mimics similar functionality,\\nincluding React component rendering. Params are required as they\'re passed to the run method,\\nwhile options are optional and assume class properties have been defined. Also, the `exit`\\nand `log` methods have been mocked with Jest spies so that they can be asserted.","text":"```ts\\nimport { runCommand } from \'@boost/cli/test\';\\nimport TestCommand from \'../src/commands/TestCommand\';\\n\\nit(\'runs a command\', async () => {\\n\\tconst command = new TestCommand();\\n\\n\\texpect(await runCommand(command, [\'foo\', \'bar\', \'baz\'])).toMatchSnapshot();\\n\\texpect(command.log).toHaveBeenCalled();\\n});\\n```\\n\\n> Since there is no `Program` context, any functionality that requires a program will fail. If\\n> needed, use `runProgram()` instead.\\n"},"typeParameter":[{"id":25,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2209,"name":"GlobalOptions"}},{"id":26,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2184,"name":"PrimitiveType"}}}],"parameters":[{"id":27,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1813,"typeArguments":[{"type":"reference","id":25,"name":"O"},{"type":"reference","id":26,"name":"P"},{"type":"reflection","declaration":{"id":28,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Command"}},{"id":29,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":26,"name":"P"}},{"id":30,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":25,"name":"O"}],"name":"Partial"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}],"permalink":"/api/cli-test/function/runCommand","previousId":19,"nextId":42},{"id":42,"name":"runProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":257,"character":22}],"signatures":[{"id":43,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Program` as if it were ran on the command line, including middleware,\\ncommands, success and failure states, and more. Utilizes mocked streams to capture\\nand return standard output and ANSI stripped output. Failed runs will not throw\\nand instead will render a failure output.","text":"```ts\\nimport { runProgram } from \'@boost/cli/test\';\\nimport Program from \'../src/program\';\\n\\nit(\'runs a program\', async () => {\\n\\tconst program = new Program();\\n\\n\\tconst { code, output } = await runProgram(program, [\'cmd\', \'--foo\', \'123\', \'bar\']);\\n\\n\\texpect(output).toMatchSnapshot();\\n\\texpect(code).toBe(0);\\n});\\n```\\n"},"parameters":[{"id":44,"name":"program","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1994,"name":"Program"}},{"id":45,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":46,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":47,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":48,"name":"append","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/test.ts","line":260,"character":12}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[48]}]}},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":49,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":50,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":13}],"type":{"type":"reference","id":2218,"name":"ExitCode"}},{"id":51,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":29}],"type":{"type":"intrinsic","name":"string"}},{"id":52,"name":"outputStripped","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":45}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[50,51,52]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":11}]}}],"name":"Promise"}}],"permalink":"/api/cli-test/function/runProgram","previousId":23,"nextId":31},{"id":31,"name":"runTask","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":205,"character":16}],"signatures":[{"id":32,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a task function outside the context of a `Command`, in complete isolation.\\nA mock command context is provided with standard defaults, and can be customized\\nthrough the 3rd argument.","text":"```ts\\nimport { runTask } from \'@boost/cli/test\';\\nimport testTask from \'../src/tasks/testTask\';\\n\\nit(\'runs a task\', async () => {\\n\\tconst context = {\\n\\t\\tlog: jest.fn(),\\n\\t};\\n\\n\\texpect(await runTask(testTask, [\'foo\', \'bar\', \'baz\'], context)).toMatchSnapshot();\\n\\texpect(context.log).toHaveBeenCalled();\\n});\\n```\\n"},"typeParameter":[{"id":33,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":34,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}},{"id":35,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2313,"typeArguments":[{"type":"reference","id":2209,"name":"GlobalOptions"}],"name":"TaskContext"}}],"parameters":[{"id":36,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":37,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":38,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":39,"name":"argz","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":33,"name":"A"}}],"type":{"type":"reference","id":34,"name":"R"}}]}}},{"id":40,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":33,"name":"A"}},{"id":41,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":35,"name":"T"}],"name":"Partial"}}],"type":{"type":"reference","id":34,"name":"R"}}],"permalink":"/api/cli-test/function/runTask","previousId":42}],"groups":[{"title":"Classes","kind":128,"children":[53,57]},{"title":"Functions","kind":64,"children":[15,12,19,23,42,31]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":3,"character":0}],"permalink":"/api/cli-test"},"urlSlug":"cli-test"}],"packageName":"@boost/cli","packageVersion":"3.0.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":73,"name":"@boost/common","kind":2,"kindString":"Module","flags":{},"children":[{"id":2544,"name":"json","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":2563,"name":"JSONStringifyOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2565,"name":"quote","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":9,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":2566,"name":"replacer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":10,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},{"type":"reflection","declaration":{"id":2567,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2568,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2569,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2570,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]}},{"id":2564,"name":"space","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":8,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2565,2566,2564]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":7,"character":17}]},{"id":2558,"name":"JSONReviver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":5,"character":12}],"type":{"type":"reflection","declaration":{"id":2559,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":5,"character":26}],"signatures":[{"id":2560,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2561,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2562,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}},{"id":2554,"name":"load","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":21,"character":16}],"signatures":[{"id":2555,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2556,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2557,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2556,"name":"T"}}]},{"id":2545,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":13,"character":16}],"signatures":[{"id":2546,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2547,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2548,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2549,"name":"reviver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2558,"name":"JSONReviver"}}],"type":{"type":"reference","id":2547,"name":"T"}}]},{"id":2550,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":17,"character":16}],"signatures":[{"id":2551,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2552,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2553,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2563,"name":"JSONStringifyOptions"},"defaultValue":"{}"}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[2563]},{"title":"Type aliases","kind":4194304,"children":[2558]},{"title":"Functions","kind":64,"children":[2554,2545,2550]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":1,"character":0}],"permalink":"/api/common/namespace/json","previousId":2983,"nextId":2571},{"id":2571,"name":"yaml","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":2581,"name":"load","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":13,"character":16}],"signatures":[{"id":2582,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2583,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2584,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2583,"name":"T"}}]},{"id":2572,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":5,"character":16}],"signatures":[{"id":2573,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2574,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2575,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2576,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":2574,"name":"T"}}]},{"id":2577,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":9,"character":16}],"signatures":[{"id":2578,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2579,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2580,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Functions","kind":64,"children":[2581,2572,2577]}],"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":1,"character":0}],"permalink":"/api/common/namespace/yaml","previousId":2544,"nextId":2869},{"id":2593,"name":"Contract","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":2594,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":8,"character":1}],"signatures":[{"id":2595,"name":"new Contract","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":2597,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2596,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":2598,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2597,"name":"T"}}],"type":{"type":"reference","id":2593,"typeArguments":[{"type":"reference","id":2597,"name":"T"}],"name":"Contract"}}]},{"id":2599,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":6,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2597,"name":"T"}],"name":"Required"}],"name":"Readonly"},"implementationOf":{"type":"reference","id":2888,"name":"Optionable.options"}},{"id":2606,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":51,"character":10}],"signatures":[{"id":2607,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":2608,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":2609,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"implementationOf":{"type":"reference","name":"Optionable.blueprint"}}],"implementationOf":{"type":"reference","id":2889,"name":"Optionable.blueprint"}},{"id":2600,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":28,"character":1}],"signatures":[{"id":2601,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2602,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2597,"name":"T"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2603,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2604,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2605,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2597,"name":"T"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2597,"name":"T"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2597,"name":"T"}],"name":"Required"}],"name":"Readonly"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2594]},{"title":"Properties","kind":1024,"children":[2599]},{"title":"Methods","kind":2048,"children":[2606,2600]}],"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":22}],"typeParameter":[{"id":2611,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2610,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":50}]}}}],"implementedTypes":[{"type":"reference","id":2887,"typeArguments":[{"type":"reference","id":2597,"name":"T"}],"name":"Optionable"}],"permalink":"/api/common/class/Contract","nextId":2612},{"id":2612,"name":"ExitError","kind":128,"kindString":"Class","flags":{},"children":[{"id":2613,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":4,"character":1}],"signatures":[{"id":2614,"name":"new ExitError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2615,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2616,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":2612,"name":"ExitError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":2617,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[2613]},{"title":"Properties","kind":1024,"children":[2617]}],"sources":[{"fileName":"packages/common/src/ExitError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/common/class/ExitError","previousId":2593,"nextId":2669},{"id":2669,"name":"ModulePath","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"An immutable class for operating on Node.js module IDs, names, and paths."},"children":[{"id":2676,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":12,"character":1}],"signatures":[{"id":2677,"name":"new ModulePath","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2678,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2669,"name":"ModulePath"}}]},{"id":2681,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":34,"character":1}],"signatures":[{"id":2682,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `ModulePath` instance."},"parameters":[{"id":2683,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2669,"name":"ModulePath"}}]},{"id":2684,"name":"hasScope","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":43,"character":1}],"signatures":[{"id":2685,"name":"hasScope","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the module is scoped within a private namespace\\n(starts with @)."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2686,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":51,"character":1}],"signatures":[{"id":2687,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the module name without any trailing import paths,\\nor optionally without the private scope."},"parameters":[{"id":2688,"name":"withoutScope","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2689,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":64,"character":1}],"signatures":[{"id":2690,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current module path as a normalized string."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2849,"name":"Pathable.path"}}],"implementationOf":{"type":"reference","id":2848,"name":"Pathable.path"}},{"id":2691,"name":"scope","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":79,"character":1}],"signatures":[{"id":2692,"name":"scope","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the private scope with leading @, or null if not defined."},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}]},{"id":2693,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":87,"character":1}],"signatures":[{"id":2694,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2695,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":91,"character":1}],"signatures":[{"id":2696,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2851,"name":"Pathable.toString"}}],"implementationOf":{"type":"reference","id":2850,"name":"Pathable.toString"}},{"id":2670,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":19,"character":8}],"signatures":[{"id":2671,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `ModulePath` instance."},"parameters":[{"id":2672,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2669,"name":"ModulePath"}}]},{"id":2673,"name":"path","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":26,"character":8}],"signatures":[{"id":2674,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a module path-like value to a formatted module path string."},"parameters":[{"id":2675,"name":"part","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2676]},{"title":"Methods","kind":2048,"children":[2681,2684,2686,2689,2691,2693,2695,2670,2673]}],"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":7,"character":13}],"implementedTypes":[{"type":"reference","id":2847,"name":"Pathable"}],"permalink":"/api/common/class/ModulePath","previousId":2612,"nextId":2697},{"id":2697,"name":"PackageGraph","kind":128,"kindString":"Class","flags":{},"children":[{"id":2698,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":24,"character":1}],"signatures":[{"id":2699,"name":"new PackageGraph","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":2700,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2918,"name":"PackageStructure"},"default":{"type":"reference","id":2918,"name":"PackageStructure"}}],"parameters":[{"id":2701,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2700,"name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":2697,"typeArguments":[{"type":"reference","id":2700,"name":"T"}],"name":"PackageGraph"}}]},{"id":2705,"name":"addPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":33,"character":1}],"signatures":[{"id":2706,"name":"addPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a package by name with an associated `package.json` object.\\nWill map a dependency between the package and its dependees\\nfound in `dependencies` and `peerDependencies`."},"parameters":[{"id":2707,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2700,"name":"T"}}],"type":{"type":"reference","id":2697,"typeArguments":[{"type":"reference","id":2700,"name":"T"}],"name":"PackageGraph"}}]},{"id":2708,"name":"addPackages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":50,"character":1}],"signatures":[{"id":2709,"name":"addPackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add multiple packages."},"parameters":[{"id":2710,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2700,"name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":2697,"typeArguments":[{"type":"reference","id":2700,"name":"T"}],"name":"PackageGraph"}}]},{"id":2715,"name":"resolveBatchList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":153,"character":1}],"signatures":[{"id":2716,"name":"resolveBatchList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of batched `package.json` objects\\n(array of arrays) in the order they are depended on.","text":"```ts\\ngraph.resolveBatchList().forEach((pkgs) => {\\n\\tpkgs.forEach((pkg) => {\\n\\t\\tconsole.log(pkg.name);\\n\\t});\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"array","elementType":{"type":"reference","id":2700,"name":"T"}}}}]},{"id":2711,"name":"resolveList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":68,"character":1}],"signatures":[{"id":2712,"name":"resolveList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of all\\n`package.json` objects in the order they are depended on.","text":"```ts\\ngraph.resolveList().forEach((pkg) => {\\n\\tconsole.log(pkg.name);\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"reference","id":2700,"name":"T"}}}]},{"id":2713,"name":"resolveTree","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":90,"character":1}],"signatures":[{"id":2714,"name":"resolveTree","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a tree of nodes for all\\n`package.json` objects and their dependency mappings.","text":"```ts\\ngraph.resolveTree().nodes.forEach((node) => {\\n\\tconsole.log(node.package.name);\\n\\n\\tif (node.nodes) {\\n\\t\\t// Dependents\\n\\t}\\n});\\n```\\n"},"type":{"type":"reference","id":2973,"typeArguments":[{"type":"reference","id":2700,"name":"T"}],"name":"PackageGraphTree"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2698]},{"title":"Methods","kind":2048,"children":[2705,2708,2715,2711,2713]}],"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":17,"character":13}],"typeParameter":[{"id":2735,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2918,"name":"PackageStructure"},"default":{"type":"reference","id":2918,"name":"PackageStructure"}}],"permalink":"/api/common/class/PackageGraph","previousId":2669,"nextId":2736},{"id":2736,"name":"Path","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"An immutable class for operating on file system paths.\\nWill normalize path separators based on the operating system,\\n\\"/\\" on Linux/MacOS, and \\"\\\\\\\\\\" on Windows."},"children":[{"id":2749,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":19,"character":1}],"signatures":[{"id":2750,"name":"new Path","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2751,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2736,"name":"Path"}}]},{"id":2737,"name":"DELIMITER","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":11,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.delimiter"},{"id":2738,"name":"SEP","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":13,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.sep"},{"id":2754,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":48,"character":1}],"signatures":[{"id":2755,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `Path` instance."},"parameters":[{"id":2756,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2736,"name":"Path"}}]},{"id":2757,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":55,"character":1}],"signatures":[{"id":2758,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if both paths are equal using strict equality."},"parameters":[{"id":2759,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2763,"name":"exists","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":71,"character":1}],"signatures":[{"id":2764,"name":"exists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path exists."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2760,"name":"ext","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":62,"character":1}],"signatures":[{"id":2761,"name":"ext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the extension (if applicable) with or without leading period."},"parameters":[{"id":2762,"name":"withoutPeriod","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2765,"name":"isAbsolute","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":78,"character":1}],"signatures":[{"id":2766,"name":"isAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is absolute."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2767,"name":"isDirectory","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":85,"character":1}],"signatures":[{"id":2768,"name":"isDirectory","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a folder."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2769,"name":"isFile","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":92,"character":1}],"signatures":[{"id":2770,"name":"isFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a file."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2771,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":99,"character":1}],"signatures":[{"id":2772,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the file name (with optional extension) or folder name."},"parameters":[{"id":2773,"name":"withoutExtension","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2774,"name":"parent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":112,"character":1}],"signatures":[{"id":2775,"name":"parent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the parent folder as a new `Path` instance."},"type":{"type":"reference","id":2736,"name":"Path"}}]},{"id":2776,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":119,"character":1}],"signatures":[{"id":2777,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current path as a normalized string."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2849,"name":"Pathable.path"}}],"implementationOf":{"type":"reference","id":2848,"name":"Pathable.path"}},{"id":2778,"name":"prepend","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":132,"character":1}],"signatures":[{"id":2779,"name":"prepend","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Prepend path parts to the beginning of the current path\\nand return a new `Path` instance."},"parameters":[{"id":2780,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2736,"name":"Path"}}]},{"id":2781,"name":"realPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":140,"character":1}],"signatures":[{"id":2782,"name":"realPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a canonical path by resolving directories and symlinks."},"type":{"type":"intrinsic","name":"string"}}]},{"id":2783,"name":"relativeTo","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":148,"character":1}],"signatures":[{"id":2784,"name":"relativeTo","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new relative `Path` instance from the current\\n\\"from\\" path to the defined \\"to\\" path."},"parameters":[{"id":2785,"name":"to","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2736,"name":"Path"}}]},{"id":2786,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":156,"character":1}],"signatures":[{"id":2787,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new `Path` instance where the current path is accurately\\nresolved against the defined working directory."},"parameters":[{"id":2788,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2736,"name":"Path"}}]},{"id":2789,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":160,"character":1}],"signatures":[{"id":2790,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2791,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":164,"character":1}],"signatures":[{"id":2792,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2851,"name":"Pathable.toString"}}],"implementationOf":{"type":"reference","id":2850,"name":"Pathable.toString"}},{"id":2739,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":26,"character":8}],"signatures":[{"id":2740,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `Path` instance."},"parameters":[{"id":2741,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2736,"name":"Path"}}]},{"id":2742,"name":"path","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":33,"character":8}],"signatures":[{"id":2743,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a path-like value to a formatted path string."},"parameters":[{"id":2744,"name":"part","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2745,"name":"resolve","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":40,"character":8}],"signatures":[{"id":2746,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `create()` but also resolves the path against a working directory."},"parameters":[{"id":2747,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}},{"id":2748,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2736,"name":"Path"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2749]},{"title":"Properties","kind":1024,"children":[2737,2738]},{"title":"Methods","kind":2048,"children":[2754,2757,2763,2760,2765,2767,2769,2771,2774,2776,2778,2781,2783,2786,2789,2791,2739,2742,2745]}],"sources":[{"fileName":"packages/common/src/Path.ts","line":10,"character":13}],"extendedBy":[{"type":"reference","id":2987,"name":"VirtualPath"}],"implementedTypes":[{"type":"reference","id":2847,"name":"Pathable"}],"permalink":"/api/common/class/Path","previousId":2697,"nextId":2793},{"id":2793,"name":"PathResolver","kind":128,"kindString":"Class","flags":{},"children":[{"id":2798,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":12,"character":1}],"signatures":[{"id":2799,"name":"new PathResolver","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2800,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2854,"name":"ModuleResolver"}}],"type":{"type":"reference","id":2793,"name":"PathResolver"}}]},{"id":2803,"name":"getLookupPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":32,"character":1}],"signatures":[{"id":2804,"name":"getLookupPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all lookup paths."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":2805,"name":"lookupFilePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":40,"character":1}],"signatures":[{"id":2806,"name":"lookupFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a file system path to look for, resolved against the defined current\\nworking directory (or `process.cwd()` otherwise)."},"parameters":[{"id":2807,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}},{"id":2808,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2793,"name":"PathResolver"}}]},{"id":2809,"name":"lookupFilePathWithExts","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":54,"character":1}],"signatures":[{"id":2810,"name":"lookupFilePathWithExts","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a file system path with a list of possible extensions to look for,\\nresolved against the defined current working directory (or `process.cwd()` otherwise)."},"parameters":[{"id":2811,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}},{"id":2812,"name":"exts","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2813,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2793,"name":"PathResolver"}}]},{"id":2814,"name":"lookupNodeModule","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":67,"character":1}],"signatures":[{"id":2815,"name":"lookupNodeModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a Node.js module, either by name or relative path, to look for."},"parameters":[{"id":2816,"name":"moduleId","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2793,"name":"PathResolver"}}]},{"id":2817,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":82,"character":7}],"signatures":[{"id":2818,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a list of lookups, attempt to find the first real/existing path and\\nreturn a resolved absolute path. If a file system path, will check using `fs.exists`.\\nIf a node module path, will check using the provided resolver."},"parameters":[{"id":2819,"name":"startDir","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2865,"name":"ResolvedLookup"}],"name":"Promise"}}]},{"id":2820,"name":"resolvePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":130,"character":7}],"signatures":[{"id":2821,"name":"resolvePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `resolve()` but only returns the resolved file path."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2847,"name":"Pathable"}],"name":"Promise"}}]},{"id":2794,"name":"defaultResolver","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":16,"character":14}],"signatures":[{"id":2795,"name":"defaultResolver","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2796,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2797,"name":"startDir","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2798]},{"title":"Methods","kind":2048,"children":[2803,2805,2809,2814,2817,2820,2794]}],"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":7,"character":13}],"permalink":"/api/common/class/PathResolver","previousId":2736,"nextId":2824},{"id":2824,"name":"Project","kind":128,"kindString":"Class","flags":{},"children":[{"id":2828,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":18,"character":1}],"signatures":[{"id":2829,"name":"new Project","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2830,"name":"root","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","id":2824,"name":"Project"}}]},{"id":2831,"name":"root","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":16,"character":10}],"type":{"type":"reference","id":2736,"name":"Path"}},{"id":2832,"name":"createWorkspaceMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":33,"character":1}],"signatures":[{"id":2833,"name":"createWorkspaceMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a workspace metadata object composed of absolute file paths."},"parameters":[{"id":2834,"name":"jsonPath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2977,"name":"WorkspaceMetadata"}}]},{"id":2835,"name":"getPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":51,"character":1}],"signatures":[{"id":2836,"name":"getPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the contents of the root `package.json`."},"typeParameter":[{"id":2837,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2918,"name":"PackageStructure"}}],"type":{"type":"reference","id":2837,"name":"T"}}]},{"id":2838,"name":"getWorkspaceGlobs","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":3057,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":67,"character":1}],"signatures":[{"id":2839,"name":"getWorkspaceGlobs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace globs as they are configured\\nin `package.json` or `lerna.json`. Glob patterns will _always_\\nuse forward slashes, regardless of OS."},"parameters":[{"id":2840,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2822,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":2844,"name":"getWorkspacePackagePaths","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":3057,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":140,"character":1}],"signatures":[{"id":2845,"name":"getWorkspacePackagePaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace package paths, resolved against the file system.\\nAbsolute file paths are returned unless the `relative` option is true."},"parameters":[{"id":2846,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2822,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"reference","id":2736,"name":"Path"}}}]},{"id":2841,"name":"getWorkspacePackages","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":3057,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":118,"character":1}],"signatures":[{"id":2842,"name":"getWorkspacePackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all `package.json`s across all workspaces and their packages.\\nOnce loaded, append workspace path metadata."},"typeParameter":[{"id":2843,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2918,"name":"PackageStructure"}}],"type":{"type":"array","elementType":{"type":"reference","id":2983,"typeArguments":[{"type":"reference","id":2843,"name":"T"}],"name":"WorkspacePackage"}}}]},{"id":2825,"name":"normalizeGlob","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":26,"character":8}],"signatures":[{"id":2826,"name":"normalizeGlob","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Normalize a glob pattern or path for use on POSIX and Windows machines.","tags":[{"tag":"link","text":"https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows\\n"}]},"parameters":[{"id":2827,"name":"pattern","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2828]},{"title":"Properties","kind":1024,"children":[2831]},{"title":"Methods","kind":2048,"children":[2832,2835,2838,2844,2841,2825]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":15,"character":13}],"permalink":"/api/common/class/Project","previousId":2793,"nextId":2987},{"id":2987,"name":"VirtualPath","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"An immutable class for operating on file system paths,\\nthat always normalize using a forward slash (\\"/\\") for path separators.\\nUseful for paths found in configurations, globs, etc."},"children":[{"id":3000,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3001,"name":"new VirtualPath","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3002,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2987,"name":"VirtualPath"},"inheritedFrom":{"type":"reference","id":2750,"name":"Path.constructor"}}],"inheritedFrom":{"type":"reference","id":2749,"name":"Path.constructor"}},{"id":2991,"name":"DELIMITER","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":11,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.delimiter","inheritedFrom":{"type":"reference","id":2737,"name":"Path.DELIMITER"}},{"id":2992,"name":"SEP","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":13,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.sep","inheritedFrom":{"type":"reference","id":2738,"name":"Path.SEP"}},{"id":3007,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":48,"character":1}],"signatures":[{"id":3008,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `Path` instance."},"parameters":[{"id":3009,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2736,"name":"Path"},"inheritedFrom":{"type":"reference","id":2755,"name":"Path.append"}}],"inheritedFrom":{"type":"reference","id":2754,"name":"Path.append"}},{"id":3010,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":55,"character":1}],"signatures":[{"id":3011,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if both paths are equal using strict equality."},"parameters":[{"id":3012,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2758,"name":"Path.equals"}}],"inheritedFrom":{"type":"reference","id":2757,"name":"Path.equals"}},{"id":3016,"name":"exists","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":71,"character":1}],"signatures":[{"id":3017,"name":"exists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path exists."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2764,"name":"Path.exists"}}],"inheritedFrom":{"type":"reference","id":2763,"name":"Path.exists"}},{"id":3013,"name":"ext","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":62,"character":1}],"signatures":[{"id":3014,"name":"ext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the extension (if applicable) with or without leading period."},"parameters":[{"id":3015,"name":"withoutPeriod","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2761,"name":"Path.ext"}}],"inheritedFrom":{"type":"reference","id":2760,"name":"Path.ext"}},{"id":3018,"name":"isAbsolute","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":78,"character":1}],"signatures":[{"id":3019,"name":"isAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is absolute."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2766,"name":"Path.isAbsolute"}}],"inheritedFrom":{"type":"reference","id":2765,"name":"Path.isAbsolute"}},{"id":3020,"name":"isDirectory","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":85,"character":1}],"signatures":[{"id":3021,"name":"isDirectory","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a folder."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2768,"name":"Path.isDirectory"}}],"inheritedFrom":{"type":"reference","id":2767,"name":"Path.isDirectory"}},{"id":3022,"name":"isFile","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":92,"character":1}],"signatures":[{"id":3023,"name":"isFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a file."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2770,"name":"Path.isFile"}}],"inheritedFrom":{"type":"reference","id":2769,"name":"Path.isFile"}},{"id":3024,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":99,"character":1}],"signatures":[{"id":3025,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the file name (with optional extension) or folder name."},"parameters":[{"id":3026,"name":"withoutExtension","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2772,"name":"Path.name"}}],"inheritedFrom":{"type":"reference","id":2771,"name":"Path.name"}},{"id":3027,"name":"parent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":112,"character":1}],"signatures":[{"id":3028,"name":"parent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the parent folder as a new `Path` instance."},"type":{"type":"reference","id":2736,"name":"Path"},"inheritedFrom":{"type":"reference","id":2775,"name":"Path.parent"}}],"inheritedFrom":{"type":"reference","id":2774,"name":"Path.parent"}},{"id":3003,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/VirtualPath.ts","line":22,"character":10}],"signatures":[{"id":3004,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current module path as a normalized string,\\nconverting all path separators to \\"/\\"."},"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","id":2777,"name":"Path.path"}}],"overwrites":{"type":"reference","id":2776,"name":"Path.path"}},{"id":3029,"name":"prepend","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":132,"character":1}],"signatures":[{"id":3030,"name":"prepend","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Prepend path parts to the beginning of the current path\\nand return a new `Path` instance."},"parameters":[{"id":3031,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2736,"name":"Path"},"inheritedFrom":{"type":"reference","id":2779,"name":"Path.prepend"}}],"inheritedFrom":{"type":"reference","id":2778,"name":"Path.prepend"}},{"id":3032,"name":"realPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":140,"character":1}],"signatures":[{"id":3033,"name":"realPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a canonical path by resolving directories and symlinks."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2782,"name":"Path.realPath"}}],"inheritedFrom":{"type":"reference","id":2781,"name":"Path.realPath"}},{"id":3034,"name":"relativeTo","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":148,"character":1}],"signatures":[{"id":3035,"name":"relativeTo","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new relative `Path` instance from the current\\n\\"from\\" path to the defined \\"to\\" path."},"parameters":[{"id":3036,"name":"to","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2736,"name":"Path"},"inheritedFrom":{"type":"reference","id":2784,"name":"Path.relativeTo"}}],"inheritedFrom":{"type":"reference","id":2783,"name":"Path.relativeTo"}},{"id":3037,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":156,"character":1}],"signatures":[{"id":3038,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new `Path` instance where the current path is accurately\\nresolved against the defined working directory."},"parameters":[{"id":3039,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2736,"name":"Path"},"inheritedFrom":{"type":"reference","id":2787,"name":"Path.resolve"}}],"inheritedFrom":{"type":"reference","id":2786,"name":"Path.resolve"}},{"id":3040,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":160,"character":1}],"signatures":[{"id":3041,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2790,"name":"Path.toJSON"}}],"inheritedFrom":{"type":"reference","id":2789,"name":"Path.toJSON"}},{"id":3042,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":164,"character":1}],"signatures":[{"id":3043,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2792,"name":"Path.toString"}}],"inheritedFrom":{"type":"reference","id":2791,"name":"Path.toString"}},{"id":2993,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":26,"character":8}],"signatures":[{"id":2994,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `Path` instance."},"parameters":[{"id":2995,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2736,"name":"Path"},"inheritedFrom":{"type":"reference","id":2740,"name":"Path.create"}}],"inheritedFrom":{"type":"reference","id":2739,"name":"Path.create"}},{"id":2988,"name":"path","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/VirtualPath.ts","line":14,"character":17}],"signatures":[{"id":2989,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a path-like value to a formatted virtual path string."},"parameters":[{"id":2990,"name":"part","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","id":2743,"name":"Path.path"}}],"overwrites":{"type":"reference","id":2742,"name":"Path.path"}},{"id":2996,"name":"resolve","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":40,"character":8}],"signatures":[{"id":2997,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `create()` but also resolves the path against a working directory."},"parameters":[{"id":2998,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}},{"id":2999,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"reference","id":2736,"name":"Path"},"inheritedFrom":{"type":"reference","id":2746,"name":"Path.resolve"}}],"inheritedFrom":{"type":"reference","id":2745,"name":"Path.resolve"}}],"groups":[{"title":"Constructors","kind":512,"children":[3000]},{"title":"Properties","kind":1024,"children":[2991,2992]},{"title":"Methods","kind":2048,"children":[3007,3010,3016,3013,3018,3020,3022,3024,3027,3003,3029,3032,3034,3037,3040,3042,2993,2988,2996]}],"sources":[{"fileName":"packages/common/src/VirtualPath.ts","line":10,"character":13}],"extendedTypes":[{"type":"reference","id":2736,"name":"Path"}],"permalink":"/api/common/class/VirtualPath","previousId":2824,"nextId":3044},{"id":2897,"name":"BugSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2899,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2898,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2899,2898]}],"sources":[{"fileName":"packages/common/src/types.ts","line":76,"character":17}],"permalink":"/api/common/interface/BugSetting","previousId":2665,"nextId":2901},{"id":2901,"name":"DependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2902,"name":"built","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2903,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":85,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2904,"name":"unplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2902,2903,2904]}],"sources":[{"fileName":"packages/common/src/types.ts","line":83,"character":17}],"permalink":"/api/common/interface/DependencyMetaSetting","previousId":2897,"nextId":2861},{"id":2861,"name":"Lookup","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2862,"name":"path","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":26,"character":1}],"type":{"type":"reference","id":2847,"name":"Pathable"}},{"id":2863,"name":"raw","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":27,"character":1}],"type":{"type":"reference","id":2847,"name":"Pathable"}},{"id":2864,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":28,"character":1}],"type":{"type":"reference","id":2860,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[2862,2863,2864]}],"sources":[{"fileName":"packages/common/src/types.ts","line":25,"character":17}],"permalink":"/api/common/interface/Lookup","previousId":2901,"nextId":3075},{"id":3075,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3076,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":9,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3070,"typeArguments":[{"type":"reference","id":3079,"name":"T"}],"name":"MemoizeCache"}]}},{"id":3077,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":14,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":3078,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":19,"character":4}],"type":{"type":"reference","id":3066,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[3076,3077,3078]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":7,"character":17}],"typeParameter":[{"id":3079,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/common/interface/MemoizeOptions","previousId":2861,"nextId":2887},{"id":2887,"name":"Optionable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2889,"name":"blueprint","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":2881,"typeArguments":[{"type":"intrinsic","name":"object"}],"name":"BlueprintFactory"}},{"id":2888,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/types.ts","line":57,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2891,"name":"T"}],"name":"Required"}],"name":"Readonly"}}],"groups":[{"title":"Properties","kind":1024,"children":[2889,2888]}],"sources":[{"fileName":"packages/common/src/types.ts","line":55,"character":17}],"typeParameter":[{"id":2891,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2890,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":55,"character":47}]}}}],"implementedBy":[{"type":"reference","id":2593,"name":"Contract"}],"permalink":"/api/common/interface/Optionable","previousId":3075,"nextId":2973},{"id":2973,"name":"PackageGraphTree","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2974,"name":"nodes","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":176,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":2969,"typeArguments":[{"type":"reference","id":2976,"name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":2975,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":177,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2974,2975]}],"sources":[{"fileName":"packages/common/src/types.ts","line":175,"character":17}],"typeParameter":[{"id":2976,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2918,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTree","previousId":2887,"nextId":2969},{"id":2969,"name":"PackageGraphTreeNode","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2970,"name":"nodes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":171,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":2969,"typeArguments":[{"type":"reference","id":2972,"name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":2971,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":172,"character":1}],"type":{"type":"reference","id":2972,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2970,2971]}],"sources":[{"fileName":"packages/common/src/types.ts","line":170,"character":17}],"typeParameter":[{"id":2972,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2918,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTreeNode","previousId":2973,"nextId":2918},{"id":2918,"name":"PackageStructure","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Shape of `package.json`, with support for third-party properties\\nlike Yarn, Webpack, and TypeScript."},"children":[{"id":2919,"name":"author","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":113,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2910,"name":"PeopleSetting"}]}},{"id":2920,"name":"bin","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":114,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2894,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}},{"id":2921,"name":"browser","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":115,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2922,"name":"browserslist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":116,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2923,"name":"bugs","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2897,"name":"BugSetting"}]}},{"id":2924,"name":"bundledDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":118,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2925,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":119,"character":1}],"type":{"type":"reference","id":2896,"name":"ConfigSetting"}},{"id":2926,"name":"contributors","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":120,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"array","elementType":{"type":"reference","id":2910,"name":"PeopleSetting"}}]}},{"id":2927,"name":"cpu","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":121,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2928,"name":"dependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":122,"character":1}],"type":{"type":"reference","id":2900,"name":"DependencyMap"}},{"id":2929,"name":"dependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":123,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2901,"name":"DependencyMetaSetting"}],"name":"Record"}},{"id":2930,"name":"description","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2931,"name":"devDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2900,"name":"DependencyMap"}},{"id":2932,"name":"directories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":126,"character":1}],"type":{"type":"reference","id":2894,"typeArguments":[{"type":"union","types":[{"type":"literal","value":"test"},{"type":"literal","value":"bin"},{"type":"literal","value":"doc"},{"type":"literal","value":"example"},{"type":"literal","value":"lib"},{"type":"literal","value":"man"}]}],"name":"SettingMap"}},{"id":2933,"name":"engines","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":127,"character":1}],"type":{"type":"reference","id":2894,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":2934,"name":"exports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":128,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":2894,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}],"name":"Record"}]}},{"id":2935,"name":"files","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":129,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2936,"name":"funding","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":130,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2905,"name":"TypeSetting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2905,"name":"TypeSetting"}]}}]}},{"id":2937,"name":"homepage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":131,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2938,"name":"imports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":132,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2894,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}],"name":"Record"}},{"id":2959,"name":"installConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":156,"character":1}],"type":{"type":"reflection","declaration":{"id":2960,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2961,"name":"hoistingLimits","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":157,"character":2}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2961]}]}}},{"id":2939,"name":"keywords","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":133,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2962,"name":"languageName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":159,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2940,"name":"license","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":134,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2905,"name":"TypeSetting"},{"type":"array","elementType":{"type":"reference","id":2905,"name":"TypeSetting"}}]}},{"id":2941,"name":"main","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":135,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2942,"name":"man","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":136,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2957,"name":"module","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":153,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2943,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":137,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2944,"name":"optionalDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":138,"character":1}],"type":{"type":"reference","id":2900,"name":"DependencyMap"}},{"id":2945,"name":"os","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":139,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2946,"name":"peerDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":140,"character":1}],"type":{"type":"reference","id":2900,"name":"DependencyMap"}},{"id":2947,"name":"peerDependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":141,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2908,"name":"PeerDependencyMetaSetting"}],"name":"Record"}},{"id":2963,"name":"preferUnplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":160,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2948,"name":"private","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":142,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2949,"name":"publishConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":143,"character":1}],"type":{"type":"reference","id":2896,"name":"ConfigSetting"}},{"id":2950,"name":"repository","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":144,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2914,"name":"RepositorySetting"}]}},{"id":2964,"name":"resolutions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":161,"character":1}],"type":{"type":"reference","id":2900,"name":"DependencyMap"}},{"id":2951,"name":"scripts","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":145,"character":1}],"type":{"type":"reference","id":2894,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":2958,"name":"sideEffects","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":154,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2952,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":146,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"commonjs"},{"type":"literal","value":"module"}]}},{"id":2954,"name":"types","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":149,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2955,"name":"typesVersions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":150,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"Record"}],"name":"Record"}},{"id":2956,"name":"typings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":151,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2953,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":147,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2965,"name":"workspaces","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reflection","declaration":{"id":2966,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2968,"name":"nohoist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":166,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2967,"name":"packages","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":165,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"groups":[{"title":"Properties","kind":1024,"children":[2968,2967]}]}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2959,2939,2962,2940,2941,2942,2957,2943,2944,2945,2946,2947,2963,2948,2949,2950,2964,2951,2958,2952,2954,2955,2956,2953,2965]}],"sources":[{"fileName":"packages/common/src/types.ts","line":112,"character":17}],"permalink":"/api/common/interface/PackageStructure","previousId":2969,"nextId":2847},{"id":2847,"name":"Pathable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2848,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":7,"character":1}],"signatures":[{"id":2849,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2850,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":8,"character":1}],"signatures":[{"id":2851,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[2848,2850]}],"sources":[{"fileName":"packages/common/src/types.ts","line":6,"character":17}],"implementedBy":[{"type":"reference","id":2669,"name":"ModulePath"},{"type":"reference","id":2736,"name":"Path"}],"permalink":"/api/common/interface/Pathable","previousId":2918,"nextId":2908},{"id":2908,"name":"PeerDependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2909,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2909]}],"sources":[{"fileName":"packages/common/src/types.ts","line":94,"character":17}],"permalink":"/api/common/interface/PeerDependencyMetaSetting","previousId":2847,"nextId":2910},{"id":2910,"name":"PeopleSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2912,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":100,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2911,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":99,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2913,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":101,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2912,2911,2913]}],"sources":[{"fileName":"packages/common/src/types.ts","line":98,"character":17}],"permalink":"/api/common/interface/PeopleSetting","previousId":2908,"nextId":2822},{"id":2822,"name":"ProjectSearchOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2823,"name":"relative","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":12,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2823]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":11,"character":17}],"permalink":"/api/common/interface/ProjectSearchOptions","previousId":2910,"nextId":2914},{"id":2914,"name":"RepositorySetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2915,"name":"directory","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":105,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2916,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2906,"name":"TypeSetting.type"}},{"id":2917,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":91,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2907,"name":"TypeSetting.url"}}],"groups":[{"title":"Properties","kind":1024,"children":[2915,2916,2917]}],"sources":[{"fileName":"packages/common/src/types.ts","line":104,"character":17}],"extendedTypes":[{"type":"reference","id":2905,"name":"TypeSetting"}],"permalink":"/api/common/interface/RepositorySetting","previousId":2822,"nextId":2865},{"id":2865,"name":"ResolvedLookup","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2866,"name":"originalSource","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Original file path or module ID of the lookup."},"sources":[{"fileName":"packages/common/src/types.ts","line":33,"character":1}],"type":{"type":"reference","id":2847,"name":"Pathable"}},{"id":2867,"name":"resolvedPath","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Resolved absolute *file* path for the found lookup."},"sources":[{"fileName":"packages/common/src/types.ts","line":35,"character":1}],"type":{"type":"reference","id":2736,"name":"Path"}},{"id":2868,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The type of lookup that was found."},"sources":[{"fileName":"packages/common/src/types.ts","line":37,"character":1}],"type":{"type":"reference","id":2860,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[2866,2867,2868]}],"sources":[{"fileName":"packages/common/src/types.ts","line":31,"character":17}],"permalink":"/api/common/interface/ResolvedLookup","previousId":2914,"nextId":2892},{"id":2892,"name":"Toolable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2893,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":67,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2893]}],"sources":[{"fileName":"packages/common/src/types.ts","line":66,"character":17}],"permalink":"/api/common/interface/Toolable","previousId":2865,"nextId":2905},{"id":2905,"name":"TypeSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2906,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2907,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":91,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2906,2907]}],"sources":[{"fileName":"packages/common/src/types.ts","line":89,"character":17}],"extendedBy":[{"type":"reference","id":2914,"name":"RepositorySetting"}],"permalink":"/api/common/interface/TypeSetting","previousId":2892,"nextId":2977},{"id":2977,"name":"WorkspaceMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2978,"name":"jsonPath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":183,"character":1}],"type":{"type":"reference","id":2736,"name":"Path"}},{"id":2980,"name":"packageName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":185,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2979,"name":"packagePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":184,"character":1}],"type":{"type":"reference","id":2736,"name":"Path"}},{"id":2982,"name":"workspaceName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":187,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2981,"name":"workspacePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":186,"character":1}],"type":{"type":"reference","id":2736,"name":"Path"}}],"groups":[{"title":"Properties","kind":1024,"children":[2978,2980,2979,2982,2981]}],"sources":[{"fileName":"packages/common/src/types.ts","line":182,"character":17}],"permalink":"/api/common/interface/WorkspaceMetadata","previousId":2905,"nextId":2983},{"id":2983,"name":"WorkspacePackage","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2984,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":191,"character":1}],"type":{"type":"reference","id":2977,"name":"WorkspaceMetadata"}},{"id":2985,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":192,"character":1}],"type":{"type":"reference","id":2986,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2984,2985]}],"sources":[{"fileName":"packages/common/src/types.ts","line":190,"character":17}],"typeParameter":[{"id":2986,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2918,"name":"PackageStructure"},"default":{"type":"reference","id":2918,"name":"PackageStructure"}}],"permalink":"/api/common/interface/WorkspacePackage","previousId":2977,"nextId":2544},{"id":2869,"name":"AbstractConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":12}],"typeParameter":[{"id":2873,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":2870,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":37}],"signatures":[{"id":2871,"name":"__type","kind":16384,"kindString":"Constructor signature","flags":{"isAbstract":true},"parameters":[{"id":2872,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":2873,"name":"T"}}]}},"permalink":"/api/common#AbstractConstructor","previousId":2571,"nextId":2881},{"id":2881,"name":"BlueprintFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":50,"character":12}],"typeParameter":[{"id":2886,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":2882,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":50,"character":49}],"signatures":[{"id":2883,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2884,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Schemas"}},{"id":2885,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2886,"name":"T"}],"name":"Blueprint"}}]}},"permalink":"/api/common#BlueprintFactory","previousId":2869,"nextId":2585},{"id":2585,"name":"CommonErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/common#CommonErrorCode","previousId":2881,"nextId":2874},{"id":2874,"name":"ConcreteConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":44,"character":12}],"typeParameter":[{"id":2878,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":2875,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":44,"character":37}],"signatures":[{"id":2876,"name":"__type","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2877,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":2878,"name":"T"}}]}},"permalink":"/api/common#ConcreteConstructor","previousId":2585,"nextId":2896},{"id":2896,"name":"ConfigSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":74,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Record"},"permalink":"/api/common#ConfigSetting","previousId":2874,"nextId":2879},{"id":2879,"name":"Constructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":46,"character":12}],"typeParameter":[{"id":2880,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reference","id":2869,"typeArguments":[{"type":"reference","id":2880,"name":"T"}],"name":"AbstractConstructor"},{"type":"reference","id":2874,"typeArguments":[{"type":"reference","id":2880,"name":"T"}],"name":"ConcreteConstructor"}]},"permalink":"/api/common#Constructor","previousId":2896,"nextId":2900},{"id":2900,"name":"DependencyMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":81,"character":12}],"type":{"type":"reference","id":2894,"name":"SettingMap"},"permalink":"/api/common#DependencyMap","previousId":2879,"nextId":2859},{"id":2859,"name":"FilePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":21,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#FilePath","previousId":2900,"nextId":2635},{"id":2635,"name":"InferMergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":6,"character":12}],"typeParameter":[{"id":2636,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":2636,"name":"T"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reference","id":2632,"name":"MergableArray"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":2636,"name":"T"},"extendsType":{"type":"intrinsic","name":"object"},"trueType":{"type":"reference","id":2633,"name":"MergableObject"},"falseType":{"type":"intrinsic","name":"never"}}},"permalink":"/api/common#InferMergeable","previousId":2859,"nextId":2860},{"id":2860,"name":"LookupType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":23,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"file-system"},{"type":"literal","value":"node-module"}]},"permalink":"/api/common#LookupType","previousId":2635,"nextId":3070},{"id":3070,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":20}],"typeParameter":[{"id":3074,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":3071,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3072,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":4,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":3073,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":5,"character":4}],"type":{"type":"reference","id":3074,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[3072,3073]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":50}]}}],"name":"Map"},"permalink":"/api/common#MemoizeCache","previousId":2860,"nextId":3066},{"id":3066,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":20}],"type":{"type":"reflection","declaration":{"id":3067,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":36}],"signatures":[{"id":3068,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3069,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/common#MemoizeHasher","previousId":3070,"nextId":3061},{"id":3061,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":20}],"typeParameter":[{"id":3065,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":3062,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":42}],"signatures":[{"id":3063,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3064,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","id":3065,"name":"T"}}]}},"permalink":"/api/common#MemoizedFunction","previousId":3066,"nextId":2632},{"id":2632,"name":"MergableArray","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"permalink":"/api/common#MergableArray","previousId":3061,"nextId":2633},{"id":2633,"name":"MergableObject","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/common#MergableObject","previousId":2632,"nextId":2634},{"id":2634,"name":"Mergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":2632,"name":"MergableArray"},{"type":"reference","id":2633,"name":"MergableObject"}]},"permalink":"/api/common#Mergeable","previousId":2633,"nextId":2853},{"id":2853,"name":"ModuleID","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":15,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#ModuleID","previousId":2634,"nextId":2854},{"id":2854,"name":"ModuleResolver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":17,"character":12}],"type":{"type":"reflection","declaration":{"id":2855,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":17,"character":29}],"signatures":[{"id":2856,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2857,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2853,"name":"ModuleID"}},{"id":2858,"name":"startDir","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2859,"name":"FilePath"}}],"type":{"type":"union","types":[{"type":"reference","id":2859,"name":"FilePath"},{"type":"reference","typeArguments":[{"type":"reference","id":2859,"name":"FilePath"}],"name":"Promise"}]}}]}},"permalink":"/api/common#ModuleResolver","previousId":2853,"nextId":2852},{"id":2852,"name":"PortablePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":2859,"name":"FilePath"},{"type":"reference","id":2853,"name":"ModuleID"},{"type":"reference","id":2847,"name":"Pathable"}]},"permalink":"/api/common#PortablePath","previousId":2854,"nextId":2894},{"id":2894,"name":"SettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":72,"character":12}],"typeParameter":[{"id":2895,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2895,"name":"T"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/common#SettingMap","previousId":2852,"nextId":2586},{"id":2586,"name":"CommonError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":2587,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2588,"name":"new CommonError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2589,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}},{"id":2590,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/common#CommonError","previousId":2894,"nextId":2591},{"id":2591,"name":"MODULE_NAME_PART","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/common/src/constants.ts","line":2,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PART","previousId":2586,"nextId":2592},{"id":2592,"name":"MODULE_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/common/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PATTERN","previousId":2591},{"id":3044,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Bind.d.ts","line":5,"character":24}],"signatures":[{"id":3045,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Bind","previousId":2987,"nextId":3046},{"id":3046,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Debounce.d.ts","line":5,"character":24}],"signatures":[{"id":3047,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":3048,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Debounce","previousId":3044,"nextId":3049},{"id":3049,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":24}],"signatures":[{"id":3050,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":3051,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":3052,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":53}],"signatures":[{"id":3053,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":3054,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Function"},{"type":"reference","name":"Object"}]}},{"id":3055,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":3056,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/common/function/Deprecate","previousId":3046,"nextId":3057},{"id":3057,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"decorates":[{"type":"reference","name":"initializeAndValidate"},{"type":"reference","id":2838,"name":"getWorkspaceGlobs"},{"type":"reference","id":2841,"name":"getWorkspacePackages"},{"type":"reference","id":2844,"name":"getWorkspacePackagePaths"}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":25,"character":24}],"signatures":[{"id":3058,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":3059,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":3060,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":3066,"name":"MemoizeHasher"},{"type":"reference","id":3075,"typeArguments":[{"type":"reference","id":3059,"name":"T"}],"name":"MemoizeOptions"}]}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Memoize","previousId":3049,"nextId":3080},{"id":3080,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Throttle.d.ts","line":5,"character":24}],"signatures":[{"id":3081,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":3082,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Throttle","previousId":3057,"nextId":2618},{"id":2618,"name":"createBlueprint","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/createBlueprint.ts","line":21,"character":16}],"signatures":[{"id":2619,"name":"createBlueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to generate a blueprint object for use within\\n[optimal](https://github.com/milesj/optimal) checks. All supported optimal\\nschemas are passed as an object to the factory.","text":"```ts\\nimport { createBlueprint } from \'@boost/common\';\\nimport { optimal } from \'@boost/common/optimal\';\\n\\nconst blueprint = createBlueprint(({ string, number }) => ({\\n\\tname: string().required(),\\n\\tage: number().gt(0),\\n}));\\n\\nconst object = optimal(blueprint).validate({});\\n```\\n"},"typeParameter":[{"id":2620,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2621,"name":"factory","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2881,"typeArguments":[{"type":"reference","id":2620,"name":"T"}],"name":"BlueprintFactory"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2620,"name":"T"}],"name":"Blueprint"}}],"permalink":"/api/common/function/createBlueprint","previousId":3080,"nextId":2622},{"id":2622,"name":"deepFreeze","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepFreeze.ts","line":15,"character":16}],"signatures":[{"id":2623,"name":"deepFreeze","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively freeze plain objects with `Object.freeze`.","text":"```ts\\nimport { deepFreeze } from \'@boost/common\';\\n\\nconst obj = deepFreeze({ foo: 123 });\\n\\n// Errors!\\nobj.foo = 456;\\n```\\n"},"typeParameter":[{"id":2624,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2625,"name":"obj","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2624,"name":"T"}}],"type":{"type":"reference","id":2624,"name":"T"}}],"permalink":"/api/common/function/deepFreeze","previousId":2618,"nextId":2626},{"id":2626,"name":"deepMerge","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":44,"character":16}],"signatures":[{"id":2627,"name":"deepMerge","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively merge objects and arrays, where values on the\\nright-hand side will overwrite values on the left-hand based on the key\\nor index respectively. Furthermore, if the 2nd argument is not provided,\\nit will simply clone the base value.","text":"```ts\\nimport { deepMerge } from \'@boost/common\';\\n\\nconst obj = deepMerge({ foo: 123, bar: \'abc\' }, { foo: 456, baz: true });\\n\\n// -> { foo: 456, bar: \'abc\', baz: true }\\n```\\n"},"typeParameter":[{"id":2628,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2634,"name":"Mergeable"}},{"id":2629,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2634,"name":"Mergeable"}}],"parameters":[{"id":2630,"name":"base","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2628,"name":"T"}},{"id":2631,"name":"other","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2629,"name":"V"}}],"type":{"type":"reference","id":2628,"name":"T"}}],"permalink":"/api/common/function/deepMerge","previousId":2622,"nextId":2637},{"id":2637,"name":"formatMs","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/formatMs.ts","line":14,"character":16}],"signatures":[{"id":2638,"name":"formatMs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to format a UNIX timestamp in milliseconds into a shorthand human readable format.\\nWraps the [pretty-ms](https://www.npmjs.com/package/pretty-ms) package to handle infinite\\nnumbers, zeros, and more.","text":"```ts\\nimport { formatMs } from \'@boost/common\';\\n\\nformatMs(1337000000); // 15d 11h 23m 20s\\n```\\n"},"parameters":[{"id":2639,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2640,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/common/function/formatMs","previousId":2626,"nextId":2641},{"id":2641,"name":"instanceOf","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/instanceOf.ts","line":32,"character":16}],"signatures":[{"id":2642,"name":"instanceOf","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Performs a loose instance check by comparing class names up the prototype\\nchain if `instanceof` initially fails. To disable this loose check,\\npass `false` as the 3rd argument.","text":"```ts\\nimport { instanceOf } from \'@boost/common\';\\n\\nif (instanceOf(error, Error)) {\\n\\tconsole.log(error.stack);\\n}\\n```\\n\\nGenerics can be used to type the object being checked. This will default\\nto the declaration passed to the 2nd argument.\\n\\n```ts\\ninstanceOf<ParseError>(error, Error);\\n```\\n\\n> Loose checks can be useful if multiple copies of the same class declaration\\n> exists in the module tree. For example, multiple versions of the same package are imported.\\n"},"typeParameter":[{"id":2643,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":2644,"name":"object","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2645,"name":"declaration","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2879,"typeArguments":[{"type":"reference","id":2643,"name":"T"}],"name":"Constructor"}},{"id":2646,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"predicate","name":"object","asserts":false,"targetType":{"type":"reference","id":2643,"name":"T"}}}],"permalink":"/api/common/function/instanceOf","previousId":2637,"nextId":2647},{"id":2647,"name":"isEmpty","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isEmpty.ts","line":17,"character":16}],"signatures":[{"id":2648,"name":"isEmpty","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if an object has no properties, an array has no items,\\nor the value is falsy, otherwise, it returns `false`.","text":"```ts\\nimport { isEmpty } from \'@boost/common\';\\n\\nisEmpty({}); // true\\nisEmpty({ name: \'Boost\' }); // false\\n\\nisEmpty([]); // true\\nisEmpty([\'Boost\']); // false\\n```\\n"},"parameters":[{"id":2649,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isEmpty","previousId":2641,"nextId":2650},{"id":2650,"name":"isFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isFilePath.ts","line":20,"character":16}],"signatures":[{"id":2651,"name":"isFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string or `Path` instance looks like a file system path,\\nby checking for absolute or relative path markers, or the existence of\\npath separating slashes. Will return `false` for values that are only\\nthe file or folder name.","text":"```ts\\nimport { isFilePath } from \'@boost/common\';\\n\\nisFilePath(\'./path/to/file.ts\'); // true\\nisFilePath(new Path(\'/path/to/folder\')); // true\\nisFilePath(\'file.ts\'); // false\\n```\\n"},"parameters":[{"id":2652,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2852,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isFilePath","previousId":2647,"nextId":2653},{"id":2653,"name":"isModuleName","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isModuleName.ts","line":21,"character":16}],"signatures":[{"id":2654,"name":"isModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string is a valid Node module package name,\\naccording to the rules defined in\\n[validate-npm-package-name](https://github.com/npm/validate-npm-package-name).\\nWill `return` false for native builtin modules, like `fs`, and for the old name format.","text":"```ts\\nimport { isModuleName } from \'@boost/common\';\\n\\nisModuleName(\'boost\'); // true\\nisModuleName(\'@boost/common\'); // true\\nisModuleName(\'fs\'); // false\\n```\\n"},"parameters":[{"id":2655,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isModuleName","previousId":2650,"nextId":2656},{"id":2656,"name":"isObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isObject.ts","line":24,"character":16}],"signatures":[{"id":2657,"name":"isObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if the value is an object.","text":"```ts\\nimport { isObject } from \'@boost/common\';\\n\\nisObject({}); // true\\nisObject(new Foo()); // true\\nisObject([]); // false\\n```\\n\\nGenerics can be used to type the return value of the object (when necessary).\\n\\n```ts\\ninterface Person {\\n\\tname: string;\\n}\\n\\nif (isObject<Person>(person)) {\\n\\tconsole.log(person.name);\\n}\\n```\\n"},"typeParameter":[{"id":2658,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2659,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","id":2658,"name":"T"}}}],"permalink":"/api/common/function/isObject","previousId":2653,"nextId":2660},{"id":2660,"name":"isPlainObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isPlainObject.ts","line":17,"character":16}],"signatures":[{"id":2661,"name":"isPlainObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `isObject` but only returns true if the value is a plain object\\n(no class instances, built-ins, etc). It achieves this by comparing\\nthe value\'s prototype to the built-in `Object` types. If you need to\\nrun these checks for cross-realm objects, pass true to the `loose` argument.","text":"```ts\\nimport { isPlainObject } from \'@boost/common\';\\n\\nisPlainObject({}); // true\\nisPlainObject(new Foo()); // false\\nisPlainObject([]); // false\\n```\\n"},"typeParameter":[{"id":2662,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2663,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2664,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","id":2662,"name":"T"}}}],"permalink":"/api/common/function/isPlainObject","previousId":2656,"nextId":2665},{"id":2665,"name":"toArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/toArray.ts","line":14,"character":16}],"signatures":[{"id":2666,"name":"toArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts a non-array to an array. If the provided value is falsy,\\nan empty array is returned. If the provided value is truthy and a\\nnon-array, an array of 1 item is returned.","text":"```ts\\nimport { toArray } from \'@boost/common\';\\n\\ntoArray(123); // [123]\\ntoArray(\'abc\'); // [\'abc\']\\ntoArray([\'a\', \'b\', \'c\']); // [\'a\', \'b\', \'c\']\\n```\\n"},"typeParameter":[{"id":2667,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":2668,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":2667,"name":"T"},{"type":"array","elementType":{"type":"reference","id":2667,"name":"T"}}]}}],"type":{"type":"array","elementType":{"type":"reference","id":2667,"name":"T"}}}],"permalink":"/api/common/function/toArray","previousId":2660,"nextId":2897}],"groups":[{"title":"Classes","kind":128,"children":[2593,2612,2669,2697,2736,2793,2824,2987]},{"title":"Functions","kind":64,"children":[3044,3046,3049,3057,3080,2618,2622,2626,2637,2641,2647,2650,2653,2656,2660,2665]},{"title":"Interfaces","kind":256,"children":[2897,2901,2861,3075,2887,2973,2969,2918,2847,2908,2910,2822,2914,2865,2892,2905,2977,2983]},{"title":"Namespaces","kind":4,"children":[2544,2571]},{"title":"Type aliases","kind":4194304,"children":[2869,2881,2585,2874,2896,2879,2900,2859,2635,2860,3070,3066,3061,2632,2633,2634,2853,2854,2852,2894]},{"title":"Variables","kind":32,"children":[2586,2591,2592]}],"sources":[{"fileName":"packages/common/src/index.ts","line":6,"character":0}],"permalink":"/api/common"},"urlSlug":"common"},{"index":false,"label":"Optimal","reflection":{"id":88,"name":"@boost/common/optimal","kind":2,"kindString":"Module","flags":{},"children":[{"id":89,"name":"portablePathSchema","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"A schema for validating a value is a `PortablePath`.\\nChecks for a string, `Path`, or `Pathable`."},"sources":[{"fileName":"packages/common/src/optimal.ts","line":11,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2852,"name":"PortablePath"}],"name":"UnionSchema"},"defaultValue":"...","permalink":"/api/common-optimal#portablePathSchema"}],"groups":[{"title":"Variables","kind":32,"children":[89]}],"sources":[{"fileName":"packages/common/src/optimal.ts","line":1,"character":0}],"permalink":"/api/common-optimal"},"urlSlug":"common-optimal"},{"index":false,"label":"Test utilities","reflection":{"id":74,"name":"@boost/common/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":79,"name":"mockFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":19,"character":16}],"signatures":[{"id":80,"name":"mockFilePath","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":81,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2736,"name":"Path"}}],"permalink":"/api/common-test/function/mockFilePath","nextId":85},{"id":85,"name":"mockModulePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":30,"character":16}],"signatures":[{"id":86,"name":"mockModulePath","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":87,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2669,"name":"ModulePath"}}],"permalink":"/api/common-test/function/mockModulePath","previousId":79,"nextId":82},{"id":82,"name":"mockNormalizedFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":23,"character":16}],"signatures":[{"id":83,"name":"mockNormalizedFilePath","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":84,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}}],"type":{"type":"reference","id":2736,"name":"Path"}}],"permalink":"/api/common-test/function/mockNormalizedFilePath","previousId":85,"nextId":75},{"id":75,"name":"normalizeSeparators","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":7,"character":16}],"signatures":[{"id":76,"name":"normalizeSeparators","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Normalize a path or its parts by ensuring all path separators match\\nthe operating systems default character."},"typeParameter":[{"id":77,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2852,"name":"PortablePath"},{"type":"array","elementType":{"type":"reference","id":2852,"name":"PortablePath"}}]}}],"parameters":[{"id":78,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":77,"name":"T"}}],"type":{"type":"reference","id":77,"name":"T"}}],"permalink":"/api/common-test/function/normalizeSeparators","previousId":82}],"groups":[{"title":"Functions","kind":64,"children":[79,85,82,75]}],"sources":[{"fileName":"packages/common/src/test.ts","line":1,"character":0}],"permalink":"/api/common-test"},"urlSlug":"common-test"}],"packageName":"@boost/common","packageVersion":"3.1.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":2,"name":"@boost/config","kind":2,"kindString":"Module","flags":{},"children":[{"id":329,"name":"Configuration","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":330,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":44,"character":1}],"signatures":[{"id":331,"name":"new Configuration","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":332,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":333,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":334,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"ModuleResolver"}}],"type":{"type":"reference","id":329,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Configuration"},"overwrites":{"type":"reference","name":"Contract<T>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<T>.constructor"}},{"id":335,"name":"onLoadedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded but before processed. Can modify config file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":22,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":450,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"ConfigFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":336,"name":"onLoadedIgnore","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after ignore files are loaded. Can modify ignore file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":28,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":455,"name":"IgnoreFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":337,"name":"onProcessedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded and processed."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":34,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Required"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":383,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":360,"name":"addProcessHandler","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":129,"character":11}],"signatures":[{"id":361,"name":"addProcessHandler","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Add a process handler to customize the processing of key-value setting pairs.\\nMay only run a processor on settings found in the root of the configuration object."},"typeParameter":[{"id":362,"name":"K","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"symbol"}]}},{"id":363,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"indexedAccess","indexType":{"type":"reference","id":362,"name":"K"},"objectType":{"type":"reference","id":332,"name":"T"}}}],"parameters":[{"id":364,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":362,"name":"K"}},{"id":365,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":440,"typeArguments":[{"type":"reference","id":363,"name":"V"}],"name":"Handler"}}],"type":{"type":"reference","id":329,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Configuration"}}]},{"id":390,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":391,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":392,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":393,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":366,"name":"bootstrap","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":139,"character":11}],"signatures":[{"id":367,"name":"bootstrap","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Life cycle called on initialization."},"type":{"type":"intrinsic","name":"void"}}]},{"id":342,"name":"clearCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":57,"character":1}],"signatures":[{"id":343,"name":"clearCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cache."},"type":{"type":"reference","id":329,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Configuration"}}]},{"id":344,"name":"clearFileCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":67,"character":1}],"signatures":[{"id":345,"name":"clearFileCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached file contents."},"type":{"type":"reference","id":329,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Configuration"}}]},{"id":346,"name":"clearFinderCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":76,"character":1}],"signatures":[{"id":347,"name":"clearFinderCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached directory and file path information."},"type":{"type":"reference","id":329,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Configuration"}}]},{"id":384,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":385,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":386,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Partial"},{"type":"reflection","declaration":{"id":387,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":388,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":389,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":368,"name":"configureFinder","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":145,"character":11}],"signatures":[{"id":369,"name":"configureFinder","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the finder instance."},"parameters":[{"id":370,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":463,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"ConfigFinderOptions"},{"type":"literal","value":"name"}],"name":"Omit"}}],"type":{"type":"reference","id":329,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Configuration"}}]},{"id":371,"name":"configureProcessor","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":155,"character":11}],"signatures":[{"id":372,"name":"configureProcessor","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the processor instance."},"parameters":[{"id":373,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":482,"name":"ProcessorOptions"},{"type":"literal","value":"name"}],"name":"Omit"}}],"type":{"type":"reference","id":329,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Configuration"}}]},{"id":348,"name":"loadConfigFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":87,"character":7}],"signatures":[{"id":349,"name":"loadConfigFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all config files\\nwithin each branch directory, and the root."},"parameters":[{"id":350,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":459,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"ProcessedConfig"}],"name":"Promise"}}]},{"id":351,"name":"loadConfigFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":97,"character":7}],"signatures":[{"id":352,"name":"loadConfigFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load config files from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":353,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":459,"typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"ProcessedConfig"}],"name":"Promise"}}]},{"id":354,"name":"loadIgnoreFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":108,"character":7}],"signatures":[{"id":355,"name":"loadIgnoreFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all ignore files\\nwithin each branch directory, and the root."},"parameters":[{"id":356,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":455,"name":"IgnoreFile"}}],"name":"Promise"}}]},{"id":357,"name":"loadIgnoreFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":118,"character":7}],"signatures":[{"id":358,"name":"loadIgnoreFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load ignore file from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":359,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":455,"name":"IgnoreFile"}}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[330]},{"title":"Properties","kind":1024,"children":[335,336,337,383],"categories":[{"title":"CATEGORY","children":[383]},{"title":"Events","children":[335,336,337]}]},{"title":"Methods","kind":2048,"children":[360,390,366,342,344,346,384,368,371,348,351,354,357]}],"sources":[{"fileName":"packages/config/src/Configuration.ts","line":17,"character":22}],"typeParameter":[{"id":394,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":332,"name":"T"}],"name":"Contract"}],"permalink":"/api/config/class/Configuration","nextId":421},{"id":450,"name":"ConfigFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":451,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Config content of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":23,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":454,"name":"T"}],"name":"DeepPartial"}},{"id":452,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":16,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":448,"name":"File.path"}},{"id":453,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":18,"character":1}],"type":{"type":"reference","id":446,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":449,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[451,452,453]}],"sources":[{"fileName":"packages/config/src/types.ts","line":21,"character":17}],"typeParameter":[{"id":454,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":447,"name":"File"}],"permalink":"/api/config/interface/ConfigFile","previousId":416,"nextId":463},{"id":463,"name":"ConfigFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":464,"name":"extendsSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config extending\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":41,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":465,"name":"extensions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of extensions, in order, to find config files within each folder. Defaults to built-in file format list."},"sources":[{"fileName":"packages/config/src/types.ts","line":43,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":432,"name":"ExtType"}}},{"id":466,"name":"includeEnv","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Find and load environment based config files (using `NODE_ENV`). Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":45,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":467,"name":"loaders","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of loader functions by type. Defaults to built-in file type loaders."},"sources":[{"fileName":"packages/config/src/types.ts","line":47,"character":1}],"type":{"type":"reflection","declaration":{"id":468,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":469,"name":"cjs","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":434,"typeArguments":[{"type":"reference","id":479,"name":"T"}],"name":"Loader"}},{"id":470,"name":"js","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":434,"typeArguments":[{"type":"reference","id":479,"name":"T"}],"name":"Loader"}},{"id":471,"name":"json","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":434,"typeArguments":[{"type":"reference","id":479,"name":"T"}],"name":"Loader"}},{"id":472,"name":"json5","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":434,"typeArguments":[{"type":"reference","id":479,"name":"T"}],"name":"Loader"}},{"id":473,"name":"mjs","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":434,"typeArguments":[{"type":"reference","id":479,"name":"T"}],"name":"Loader"}},{"id":474,"name":"ts","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":434,"typeArguments":[{"type":"reference","id":479,"name":"T"}],"name":"Loader"}},{"id":475,"name":"yaml","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":434,"typeArguments":[{"type":"reference","id":479,"name":"T"}],"name":"Loader"}}],"groups":[{"title":"Properties","kind":1024,"children":[469,470,471,472,473,474,475]}]}}},{"id":476,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of config files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":49,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":477,"name":"overridesSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config overriding\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":51,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":478,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver."},"sources":[{"fileName":"packages/config/src/types.ts","line":53,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}}],"groups":[{"title":"Properties","kind":1024,"children":[464,465,466,467,476,477,478]}],"sources":[{"fileName":"packages/config/src/types.ts","line":39,"character":17}],"typeParameter":[{"id":479,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/ConfigFinderOptions","previousId":450,"nextId":447},{"id":447,"name":"File","kind":256,"kindString":"Interface","flags":{},"children":[{"id":448,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":16,"character":1}],"type":{"type":"reference","name":"Path"}},{"id":449,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":18,"character":1}],"type":{"type":"reference","id":446,"name":"FileSource"}}],"groups":[{"title":"Properties","kind":1024,"children":[448,449]}],"sources":[{"fileName":"packages/config/src/types.ts","line":14,"character":17}],"extendedBy":[{"type":"reference","id":450,"name":"ConfigFile"},{"type":"reference","id":455,"name":"IgnoreFile"}],"permalink":"/api/config/interface/File","previousId":463,"nextId":455},{"id":455,"name":"IgnoreFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":456,"name":"ignore","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Ignored content of the file, split on new lines."},"sources":[{"fileName":"packages/config/src/types.ts","line":28,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":457,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":16,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":448,"name":"File.path"}},{"id":458,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":18,"character":1}],"type":{"type":"reference","id":446,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":449,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[456,457,458]}],"sources":[{"fileName":"packages/config/src/types.ts","line":26,"character":17}],"extendedTypes":[{"type":"reference","id":447,"name":"File"}],"permalink":"/api/config/interface/IgnoreFile","previousId":447,"nextId":480},{"id":480,"name":"IgnoreFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":481,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of ignore files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":58,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[481]}],"sources":[{"fileName":"packages/config/src/types.ts","line":56,"character":17}],"permalink":"/api/config/interface/IgnoreFinderOptions","previousId":455,"nextId":488},{"id":488,"name":"OverridesSettingItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":489,"name":"exclude","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File path patterns/globs to ignore."},"sources":[{"fileName":"packages/config/src/types.ts","line":80,"character":1}],"type":{"type":"reference","id":486,"name":"FileGlob"}},{"id":490,"name":"include","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"File path patterns/globs to match against."},"sources":[{"fileName":"packages/config/src/types.ts","line":82,"character":1}],"type":{"type":"reference","id":486,"name":"FileGlob"}},{"id":491,"name":"settings","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Settings configured for this specific override."},"sources":[{"fileName":"packages/config/src/types.ts","line":84,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":492,"name":"T"}],"name":"DeepPartial"}}],"groups":[{"title":"Properties","kind":1024,"children":[489,490,491]}],"sources":[{"fileName":"packages/config/src/types.ts","line":78,"character":17}],"typeParameter":[{"id":492,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/OverridesSettingItem","previousId":480,"nextId":459},{"id":459,"name":"ProcessedConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":460,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"All found and loaded config file contents merged and processed into a\\nsingle config object."},"sources":[{"fileName":"packages/config/src/types.ts","line":34,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":462,"name":"T"}],"name":"Required"}},{"id":461,"name":"files","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of config files found and loaded."},"sources":[{"fileName":"packages/config/src/types.ts","line":36,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":450,"typeArguments":[{"type":"reference","id":462,"name":"T"}],"name":"ConfigFile"}}}],"groups":[{"title":"Properties","kind":1024,"children":[460,461]}],"sources":[{"fileName":"packages/config/src/types.ts","line":31,"character":17}],"typeParameter":[{"id":462,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/ProcessedConfig","previousId":488,"nextId":482},{"id":482,"name":"ProcessorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":483,"name":"defaultWhenUndefined","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When a setting has a value of `undefined`, fallback to the\\ndefault/initial value for that setting. Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":66,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":484,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of config files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":68,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":485,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Validate all settings within a config file before processing. Defaults to\\n`true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":71,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[483,484,485]}],"sources":[{"fileName":"packages/config/src/types.ts","line":61,"character":17}],"permalink":"/api/config/interface/ProcessorOptions","previousId":459,"nextId":323},{"id":323,"name":"ConfigErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":14,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/config#ConfigErrorCode","previousId":482,"nextId":432},{"id":432,"name":"ExtType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":4,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"cjs"},{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"json5"},{"type":"literal","value":"mjs"},{"type":"literal","value":"ts"},{"type":"literal","value":"yaml"},{"type":"literal","value":"yml"}]},"permalink":"/api/config#ExtType","previousId":323,"nextId":487},{"id":487,"name":"ExtendsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":76,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#ExtendsSetting","previousId":432,"nextId":486},{"id":486,"name":"FileGlob","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":74,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#FileGlob","previousId":487,"nextId":446},{"id":446,"name":"FileSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":12,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"branch"},{"type":"literal","value":"extended"},{"type":"literal","value":"overridden"},{"type":"literal","value":"root"}]},"permalink":"/api/config#FileSource","previousId":486,"nextId":440},{"id":440,"name":"Handler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":10,"character":12}],"typeParameter":[{"id":445,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":441,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":10,"character":25}],"signatures":[{"id":442,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":443,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":445,"name":"T"}},{"id":444,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":445,"name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","id":445,"name":"T"},{"type":"intrinsic","name":"undefined"}]}],"name":"Promise"},{"type":"reference","id":445,"name":"T"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/config#Handler","previousId":446,"nextId":434},{"id":434,"name":"Loader","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":8,"character":12}],"typeParameter":[{"id":439,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":435,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":8,"character":24}],"signatures":[{"id":436,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":437,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":438,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":439,"name":"T"}],"name":"DeepPartial"}],"name":"Promise"}}]}},"permalink":"/api/config#Loader","previousId":440,"nextId":433},{"id":433,"name":"LoaderType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":6,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":432,"name":"ExtType"},{"type":"literal","value":"yml"}],"name":"Exclude"},"permalink":"/api/config#LoaderType","previousId":434,"nextId":493},{"id":493,"name":"OverridesSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":87,"character":12}],"typeParameter":[{"id":494,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"array","elementType":{"type":"reference","id":488,"typeArguments":[{"type":"reference","id":494,"name":"T"}],"name":"OverridesSettingItem"}},"permalink":"/api/config#OverridesSetting","previousId":433,"nextId":496},{"id":496,"name":"PluginEntry","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":93,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":495,"name":"PluginOptions"}]}]},"permalink":"/api/config#PluginEntry","previousId":493,"nextId":495},{"id":495,"name":"PluginOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":91,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/config#PluginOptions","previousId":496,"nextId":499},{"id":499,"name":"PluginsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":99,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":498,"name":"PluginsSettingList"},{"type":"reference","id":497,"name":"PluginsSettingMap"}]},"permalink":"/api/config#PluginsSetting","previousId":495,"nextId":498},{"id":498,"name":"PluginsSettingList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":97,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":496,"name":"PluginEntry"}},"permalink":"/api/config#PluginsSettingList","previousId":499,"nextId":497},{"id":497,"name":"PluginsSettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":95,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":495,"name":"PluginOptions"}],"name":"Record"},"permalink":"/api/config#PluginsSettingMap","previousId":498,"nextId":324},{"id":324,"name":"ConfigError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":16,"character":13}],"type":{"type":"reflection","declaration":{"id":325,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":326,"name":"new ConfigError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":327,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}},{"id":328,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/config#ConfigError","previousId":497},{"id":421,"name":"createExtendsSchema","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/schemas.ts","line":13,"character":16}],"signatures":[{"id":422,"name":"createExtendsSchema","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` schema for validating the structure of an \\"extends\\" setting."},"parameters":[{"id":423,"name":"schematics","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"},"defaultValue":"schemas"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":487,"name":"ExtendsSetting"}],"name":"UnionSchema"}}],"permalink":"/api/config/function/createExtendsSchema","previousId":329,"nextId":427},{"id":427,"name":"createOverridesSchema","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/schemas.ts","line":39,"character":16}],"signatures":[{"id":428,"name":"createOverridesSchema","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` schema for validating the structure of an \\"overrides\\" setting."},"typeParameter":[{"id":429,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":430,"name":"blueprint","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":429,"name":"T"}],"name":"Blueprint"}},{"id":431,"name":"schematics","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"},"defaultValue":"schemas"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"Object"}],"name":"Required"}}],"name":"ArraySchema"}}],"permalink":"/api/config/function/createOverridesSchema","previousId":421,"nextId":424},{"id":424,"name":"createPluginsSchema","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/schemas.ts","line":24,"character":16}],"signatures":[{"id":425,"name":"createPluginsSchema","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` schema for validating the structure of a \\"plugins\\" setting."},"parameters":[{"id":426,"name":"schematics","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"},"defaultValue":"schemas"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":499,"name":"PluginsSetting"}],"name":"UnionSchema"}}],"permalink":"/api/config/function/createPluginsSchema","previousId":427,"nextId":395},{"id":395,"name":"getEnv","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/getEnv.ts","line":4,"character":16}],"signatures":[{"id":396,"name":"getEnv","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Detect the current environment name from `<project>_ENV` and `NODE_ENV`."},"parameters":[{"id":397,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/config/function/getEnv","previousId":424,"nextId":398},{"id":398,"name":"mergeArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeArray.ts","line":4,"character":16}],"signatures":[{"id":399,"name":"mergeArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next arrays into a new array while removing duplicates (using `Set`)."},"typeParameter":[{"id":400,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"parameters":[{"id":401,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":400,"name":"T"}},{"id":402,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":400,"name":"T"}}],"type":{"type":"reference","id":400,"name":"T"}}],"permalink":"/api/config/function/mergeArray","previousId":395,"nextId":403},{"id":403,"name":"mergeExtends","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeExtends.ts","line":9,"character":16}],"signatures":[{"id":404,"name":"mergeExtends","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next file paths (either a string or array of strings) into a\\nnew list of file paths. This is useful if utilizing config extending."},"parameters":[{"id":405,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":487,"name":"ExtendsSetting"}},{"id":406,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":487,"name":"ExtendsSetting"}}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"permalink":"/api/config/function/mergeExtends","previousId":398,"nextId":407},{"id":407,"name":"mergeObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeObject.ts","line":4,"character":16}],"signatures":[{"id":408,"name":"mergeObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Shallow merges previous and next objects into a new object using object spread."},"typeParameter":[{"id":409,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":410,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":409,"name":"T"}},{"id":411,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":409,"name":"T"}}],"type":{"type":"reference","id":409,"name":"T"}}],"permalink":"/api/config/function/mergeObject","previousId":403,"nextId":412},{"id":412,"name":"mergePlugins","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergePlugins.ts","line":24,"character":16}],"signatures":[{"id":413,"name":"mergePlugins","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next plugin configurations into an object.\\nPlugin configs can either be a list of sources, or list of sources\\nwith flags/options (tuples), or a map of sources to flags/options.\\nThis is useful if utilizing the `@boost/plugin` package."},"parameters":[{"id":414,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":499,"name":"PluginsSetting"}},{"id":415,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":499,"name":"PluginsSetting"}}],"type":{"type":"reference","id":497,"name":"PluginsSettingMap"}}],"permalink":"/api/config/function/mergePlugins","previousId":407,"nextId":416},{"id":416,"name":"overwrite","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/overwrite.ts","line":4,"character":16}],"signatures":[{"id":417,"name":"overwrite","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Overwrite the previous value with the next value."},"typeParameter":[{"id":418,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":419,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":418,"name":"T"}},{"id":420,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":418,"name":"T"}}],"type":{"type":"reference","id":418,"name":"T"}}],"permalink":"/api/config/function/overwrite","previousId":412,"nextId":450}],"groups":[{"title":"Classes","kind":128,"children":[329]},{"title":"Functions","kind":64,"children":[421,427,424,395,398,403,407,412,416]},{"title":"Interfaces","kind":256,"children":[450,463,447,455,480,488,459,482]},{"title":"Type aliases","kind":4194304,"children":[323,432,487,486,446,440,434,433,493,496,495,499,498,497]},{"title":"Variables","kind":32,"children":[324]}],"sources":[{"fileName":"packages/config/src/index.ts","line":6,"character":0}],"permalink":"/api/config"},"urlSlug":"config"}],"packageName":"@boost/config","packageVersion":"3.0.2"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":90,"name":"@boost/debug","kind":2,"kindString":"Module","flags":{},"children":[{"id":3083,"name":"CrashReporter","kind":128,"kindString":"Class","flags":{},"children":[{"id":3084,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3085,"name":"new CrashReporter","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3086,"name":"contents","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":3087,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":37,"character":1}],"signatures":[{"id":3088,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a label with a value, or multiple values, to the last added section."},"parameters":[{"id":3089,"name":"label","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3090,"name":"messages","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"PortablePath"}]}}}],"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3091,"name":"addSection","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":47,"character":1}],"signatures":[{"id":3092,"name":"addSection","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Start a new section with a title."},"parameters":[{"id":3093,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3094,"name":"reportBinaries","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":59,"character":1}],"signatures":[{"id":3095,"name":"reportBinaries","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report Node.js related binary versions and paths."},"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3096,"name":"reportEnvVars","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":86,"character":1}],"signatures":[{"id":3097,"name":"reportEnvVars","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report all environment variables."},"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3098,"name":"reportLanguages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":101,"character":1}],"signatures":[{"id":3099,"name":"reportLanguages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report common programming language versions and paths"},"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3107,"name":"reportPackageVersions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":196,"character":1}],"signatures":[{"id":3108,"name":"reportPackageVersions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report npm package versions for all that match the defined pattern.\\nOnly searches in the root node modules folder and _will not_ work with PnP."},"parameters":[{"id":3109,"name":"patterns","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":3110,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'Packages\'"}],"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3100,"name":"reportProcess","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":147,"character":1}],"signatures":[{"id":3101,"name":"reportProcess","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the current `process`."},"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3102,"name":"reportStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":161,"character":1}],"signatures":[{"id":3103,"name":"reportStackTrace","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report the stack trace for a defined `Error`."},"parameters":[{"id":3104,"name":"error","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Error"}}],"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3105,"name":"reportSystem","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":172,"character":1}],"signatures":[{"id":3106,"name":"reportSystem","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the platform and operating system."},"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]},{"id":3111,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":226,"character":1}],"signatures":[{"id":3112,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the reported content to the defined file path."},"parameters":[{"id":3113,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","id":3083,"name":"CrashReporter"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3084]},{"title":"Properties","kind":1024,"children":[3086]},{"title":"Methods","kind":2048,"children":[3087,3091,3094,3096,3098,3107,3100,3102,3105,3111]}],"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":31,"character":13}],"permalink":"/api/debug/class/CrashReporter","nextId":3114},{"id":3117,"name":"Debugger","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3118,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":7,"character":1}],"signatures":[{"id":3119,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all debugger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3120,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":9,"character":1}],"signatures":[{"id":3121,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all debugger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3122,"name":"invariant","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":11,"character":1}],"signatures":[{"id":3123,"name":"invariant","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a pass or fail message based on a conditional."},"parameters":[{"id":3124,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"}},{"id":3125,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3126,"name":"pass","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3127,"name":"fail","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3128,"name":"verbose","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":13,"character":1}],"signatures":[{"id":3129,"name":"verbose","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log verbose messages that only appear when the `BOOSTJS_DEBUG_VERBOSE` is set."},"parameters":[{"id":3130,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3131,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3118,3120,3122,3128]}],"sources":[{"fileName":"packages/debug/src/types.ts","line":3,"character":17}],"signatures":[{"id":3132,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3133,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3134,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3135,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3136,"name":"formatter","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}},{"id":3137,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","name":"IDebugger"}],"permalink":"/api/debug/interface/Debugger","previousId":3114},{"id":3114,"name":"createDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/createDebugger.ts","line":10,"character":16}],"signatures":[{"id":3115,"name":"createDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Debugger` instance with the defined namespace."},"parameters":[{"id":3116,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"type":{"type":"reference","id":3117,"name":"Debugger"}}],"permalink":"/api/debug/function/createDebugger","previousId":3083,"nextId":3117}],"groups":[{"title":"Classes","kind":128,"children":[3083]},{"title":"Functions","kind":64,"children":[3114]},{"title":"Interfaces","kind":256,"children":[3117]}],"sources":[{"fileName":"packages/debug/src/index.ts","line":6,"character":0}],"permalink":"/api/debug"},"urlSlug":"debug"},{"index":false,"label":"Test utilities","reflection":{"id":91,"name":"@boost/debug/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":92,"name":"mockDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/test.ts","line":20,"character":16}],"signatures":[{"id":93,"name":"mockDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createDebugger`.","text":"```ts\\nimport { mockDebugger } from \'@boost/debug/test\';\\n\\nit(\'calls the debugger\', () => {\\n\\tconst debug = mockDebugger();\\n\\n\\tdebug(\'Something is broken!\');\\n\\n\\texpect(debug).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3117,"name":"Debugger"}}],"permalink":"/api/debug-test/function/mockDebugger"}],"groups":[{"title":"Functions","kind":64,"children":[92]}],"sources":[{"fileName":"packages/debug/src/test.ts","line":3,"character":0}],"permalink":"/api/debug-test"},"urlSlug":"debug-test"}],"packageName":"@boost/debug","packageVersion":"3.0.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":3,"name":"@boost/decorators","kind":2,"kindString":"Module","flags":{},"children":[{"id":531,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":532,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":17,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":526,"typeArguments":[{"type":"reference","id":535,"name":"T"}],"name":"MemoizeCache"}]}},{"id":533,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":534,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":27,"character":1}],"type":{"type":"reference","id":522,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[532,533,534]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":15,"character":17}],"typeParameter":[{"id":535,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/decorators/interface/MemoizeOptions","previousId":536,"nextId":526},{"id":526,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":7,"character":12}],"typeParameter":[{"id":530,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":527,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":528,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":10,"character":2}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":529,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":11,"character":2}],"type":{"type":"reference","id":530,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[528,529]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":9,"character":1}]}}],"name":"Map"},"permalink":"/api/decorators#MemoizeCache","previousId":531,"nextId":522},{"id":522,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":12}],"type":{"type":"reflection","declaration":{"id":523,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":28}],"signatures":[{"id":524,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":525,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/decorators#MemoizeHasher","previousId":526,"nextId":517},{"id":517,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":12}],"typeParameter":[{"id":521,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":518,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":34}],"signatures":[{"id":519,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":520,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","id":521,"name":"T"}}]}},"permalink":"/api/decorators#MemoizedFunction","previousId":522},{"id":500,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Bind.ts","line":7,"character":16}],"signatures":[{"id":501,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Bind","nextId":502},{"id":502,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Debounce.ts","line":7,"character":16}],"signatures":[{"id":503,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":504,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Debounce","previousId":500,"nextId":505},{"id":505,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Deprecate.ts","line":13,"character":16}],"signatures":[{"id":506,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":507,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":508,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":509,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":510,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Object"},{"type":"reference","name":"Function"}]}},{"id":511,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":512,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/decorators/function/Deprecate","previousId":502,"nextId":513},{"id":513,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":80,"character":16}],"signatures":[{"id":514,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":515,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":516,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":522,"name":"MemoizeHasher"},{"type":"reference","id":531,"typeArguments":[{"type":"reference","id":515,"name":"T"}],"name":"MemoizeOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Memoize","previousId":505,"nextId":536},{"id":536,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Throttle.ts","line":7,"character":16}],"signatures":[{"id":537,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":538,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Throttle","previousId":513,"nextId":531}],"groups":[{"title":"Functions","kind":64,"children":[500,502,505,513,536]},{"title":"Interfaces","kind":256,"children":[531]},{"title":"Type aliases","kind":4194304,"children":[526,522,517]}],"sources":[{"fileName":"packages/decorators/src/index.ts","line":6,"character":0}],"permalink":"/api/decorators"},"urlSlug":"decorators"}],"packageName":"@boost/decorators","packageVersion":"3.0.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":4,"name":"@boost/event","kind":2,"kindString":"Module","flags":{},"children":[{"id":539,"name":"BailEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":540,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":541,"name":"new BailEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":542,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":543,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":544,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":539,"typeArguments":[{"type":"reference","id":542,"name":"Args"},{"type":"reference","id":543,"name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":584,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":583,"name":"BaseEvent.constructor"}},{"id":549,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","id":543,"name":"Scope"},{"type":"literal","value":"*"}]},{"type":"reference","typeArguments":[{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":542,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":589,"name":"BaseEvent.listeners"}},{"id":550,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":590,"name":"BaseEvent.name"}},{"id":551,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":552,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":553,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":543,"name":"Scope"}}],"type":{"type":"reference","id":539,"typeArguments":[{"type":"reference","id":542,"name":"Args"},{"type":"reference","id":543,"name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":592,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":591,"name":"BaseEvent.clearListeners"}},{"id":545,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":14,"character":1}],"signatures":[{"id":546,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments.\\nIf a listener returns `false`, the loop with be aborted early,\\nand the emitter will return `true` (for bailed)."},"parameters":[{"id":547,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":542,"name":"Args"}},{"id":548,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":543,"name":"Scope"}}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","id":621,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":620,"name":"BaseEvent.emit"}},{"id":554,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":555,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":556,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":543,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":542,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":595,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":594,"name":"BaseEvent.getListeners"}},{"id":557,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":558,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":543,"name":"Scope"},{"type":"literal","value":"*"}]}},"inheritedFrom":{"type":"reference","id":598,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":597,"name":"BaseEvent.getScopes"}},{"id":559,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":560,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":561,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":542,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":562,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":543,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":599,"name":"BaseEvent.listen"}},{"id":563,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":564,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":565,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":542,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":566,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":543,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":604,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":603,"name":"BaseEvent.once"}},{"id":567,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":568,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":569,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":542,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":570,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":543,"name":"Scope"}}],"type":{"type":"reference","id":539,"typeArguments":[{"type":"reference","id":542,"name":"Args"},{"type":"reference","id":543,"name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[540]},{"title":"Properties","kind":1024,"children":[549,550]},{"title":"Methods","kind":2048,"children":[551,545,554,557,559,563,567]}],"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":4,"character":13}],"typeParameter":[{"id":580,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":581,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":582,"typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]},{"type":"reference","id":542,"name":"Args"},{"type":"reference","id":543,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/BailEvent","nextId":582},{"id":582,"name":"BaseEvent","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":583,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":11,"character":1}],"signatures":[{"id":584,"name":"new BaseEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":585,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":586,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":587,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":588,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":582,"typeArguments":[{"type":"reference","id":585,"name":"Return"},{"type":"reference","id":586,"name":"Args"},{"type":"reference","id":587,"name":"Scope"}],"name":"BaseEvent"}}]},{"id":589,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","id":587,"name":"Scope"},{"type":"literal","value":"*"}]},{"type":"reference","typeArguments":[{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":586,"name":"Args"},{"type":"reference","id":585,"name":"Return"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"..."},{"id":590,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":591,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":592,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":593,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":587,"name":"Scope"}}],"type":{"type":"reference","id":582,"typeArguments":[{"type":"reference","id":585,"name":"Return"},{"type":"reference","id":586,"name":"Args"},{"type":"reference","id":587,"name":"Scope"}],"name":"BaseEvent"}}]},{"id":620,"name":"emit","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":123,"character":10}],"signatures":[{"id":621,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emit the event by executing all scoped listeners with the defined arguments."},"parameters":[{"id":622,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":623,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":587,"name":"Scope"}}],"type":{"type":"intrinsic","name":"unknown"}}]},{"id":594,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":595,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":596,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":587,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":586,"name":"Args"},{"type":"reference","id":585,"name":"Return"}],"name":"Listener"}],"name":"Set"}}]},{"id":597,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":598,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":587,"name":"Scope"},{"type":"literal","value":"*"}]}}}]},{"id":599,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":600,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":601,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":586,"name":"Args"},{"type":"reference","id":585,"name":"Return"}],"name":"Listener"}},{"id":602,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":587,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"}}]},{"id":603,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":604,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":605,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":586,"name":"Args"},{"type":"reference","id":585,"name":"Return"}],"name":"Listener"}},{"id":606,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":587,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"}}]},{"id":607,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":608,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":609,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":586,"name":"Args"},{"type":"reference","id":585,"name":"Return"}],"name":"Listener"}},{"id":610,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":587,"name":"Scope"}}],"type":{"type":"reference","id":582,"typeArguments":[{"type":"reference","id":585,"name":"Return"},{"type":"reference","id":586,"name":"Args"},{"type":"reference","id":587,"name":"Scope"}],"name":"BaseEvent"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[583]},{"title":"Properties","kind":1024,"children":[589,590]},{"title":"Methods","kind":2048,"children":[591,620,594,597,599,603,607]}],"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":6,"character":22}],"typeParameter":[{"id":624,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":625,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":626,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedBy":[{"type":"reference","id":539,"name":"BailEvent"},{"type":"reference","id":627,"name":"ConcurrentEvent"},{"type":"reference","id":672,"name":"Event"},{"type":"reference","id":756,"name":"WaterfallEvent"}],"permalink":"/api/event/class/BaseEvent","previousId":539,"nextId":627},{"id":627,"name":"ConcurrentEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":628,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":629,"name":"new ConcurrentEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":630,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":631,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":632,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":627,"typeArguments":[{"type":"reference","id":630,"name":"Args"},{"type":"reference","id":631,"name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":584,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":583,"name":"BaseEvent.constructor"}},{"id":637,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":631,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":630,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":589,"name":"BaseEvent.listeners"}},{"id":638,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":590,"name":"BaseEvent.name"}},{"id":639,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":640,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":641,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":631,"name":"Scope"}}],"type":{"type":"reference","id":627,"typeArguments":[{"type":"reference","id":630,"name":"Args"},{"type":"reference","id":631,"name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":592,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":591,"name":"BaseEvent.clearListeners"}},{"id":633,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":12,"character":7}],"signatures":[{"id":634,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Asynchronously execute listeners for with the defined arguments.\\nWill return a promise with an array of each listener result."},"parameters":[{"id":635,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":630,"name":"Args"}},{"id":636,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":631,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}],"name":"Promise"},"overwrites":{"type":"reference","id":621,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":620,"name":"BaseEvent.emit"}},{"id":642,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":643,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":644,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":631,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":630,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":595,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":594,"name":"BaseEvent.getListeners"}},{"id":645,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":646,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":631,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":598,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":597,"name":"BaseEvent.getScopes"}},{"id":647,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":648,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":649,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":630,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":650,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":631,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":599,"name":"BaseEvent.listen"}},{"id":651,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":652,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":653,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":630,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":654,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":631,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":604,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":603,"name":"BaseEvent.once"}},{"id":655,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":656,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":657,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":630,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":658,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":631,"name":"Scope"}}],"type":{"type":"reference","id":627,"typeArguments":[{"type":"reference","id":630,"name":"Args"},{"type":"reference","id":631,"name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[628]},{"title":"Properties","kind":1024,"children":[637,638]},{"title":"Methods","kind":2048,"children":[639,633,642,645,647,651,655]}],"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":4,"character":13}],"typeParameter":[{"id":668,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":669,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":582,"typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"},{"type":"reference","id":630,"name":"Args"},{"type":"reference","id":631,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/ConcurrentEvent","previousId":582,"nextId":672},{"id":672,"name":"Event","kind":128,"kindString":"Class","flags":{},"children":[{"id":673,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":674,"name":"new Event","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":675,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":676,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":677,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":672,"typeArguments":[{"type":"reference","id":675,"name":"Args"},{"type":"reference","id":676,"name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":584,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":583,"name":"BaseEvent.constructor"}},{"id":682,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":676,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":675,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":589,"name":"BaseEvent.listeners"}},{"id":683,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":590,"name":"BaseEvent.name"}},{"id":684,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":685,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":686,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":676,"name":"Scope"}}],"type":{"type":"reference","id":672,"typeArguments":[{"type":"reference","id":675,"name":"Args"},{"type":"reference","id":676,"name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":592,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":591,"name":"BaseEvent.clearListeners"}},{"id":678,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/Event.ts","line":11,"character":1}],"signatures":[{"id":679,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments."},"parameters":[{"id":680,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":675,"name":"Args"}},{"id":681,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":676,"name":"Scope"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":621,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":620,"name":"BaseEvent.emit"}},{"id":687,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":688,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":689,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":676,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":675,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":595,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":594,"name":"BaseEvent.getListeners"}},{"id":690,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":691,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":676,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":598,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":597,"name":"BaseEvent.getScopes"}},{"id":692,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":693,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":694,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":675,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":695,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":676,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":599,"name":"BaseEvent.listen"}},{"id":696,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":697,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":698,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":675,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":699,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":676,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":604,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":603,"name":"BaseEvent.once"}},{"id":700,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":701,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":702,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":721,"typeArguments":[{"type":"reference","id":675,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":703,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":676,"name":"Scope"}}],"type":{"type":"reference","id":672,"typeArguments":[{"type":"reference","id":675,"name":"Args"},{"type":"reference","id":676,"name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[673]},{"title":"Properties","kind":1024,"children":[682,683]},{"title":"Methods","kind":2048,"children":[684,678,687,690,692,696,700]}],"sources":[{"fileName":"packages/event/src/Event.ts","line":3,"character":13}],"typeParameter":[{"id":713,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":714,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":582,"typeArguments":[{"type":"intrinsic","name":"void"},{"type":"reference","id":675,"name":"Args"},{"type":"reference","id":676,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/Event","previousId":627,"nextId":756},{"id":756,"name":"WaterfallEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":757,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":758,"name":"new WaterfallEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":759,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":760,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":761,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":756,"typeArguments":[{"type":"reference","id":759,"name":"Arg"},{"type":"reference","id":760,"name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":584,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":583,"name":"BaseEvent.constructor"}},{"id":766,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":760,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":767,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":768,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":769,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":759,"name":"Arg"}}],"type":{"type":"reference","id":759,"name":"Arg"}}]}}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":589,"name":"BaseEvent.listeners"}},{"id":770,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":590,"name":"BaseEvent.name"}},{"id":771,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":772,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":773,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":760,"name":"Scope"}}],"type":{"type":"reference","id":756,"typeArguments":[{"type":"reference","id":759,"name":"Arg"},{"type":"reference","id":760,"name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":592,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":591,"name":"BaseEvent.clearListeners"}},{"id":762,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":13,"character":1}],"signatures":[{"id":763,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined argument value.\\nThe return value of each listener will be passed as an argument to the next listener."},"parameters":[{"id":764,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":759,"name":"Arg"}},{"id":765,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":760,"name":"Scope"}}],"type":{"type":"reference","id":759,"name":"Arg"},"overwrites":{"type":"reference","id":621,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":620,"name":"BaseEvent.emit"}},{"id":774,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":775,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":776,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":760,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":777,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":778,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":779,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":759,"name":"Arg"}}],"type":{"type":"reference","id":759,"name":"Arg"}}]}}],"name":"Set"},"inheritedFrom":{"type":"reference","id":595,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":594,"name":"BaseEvent.getListeners"}},{"id":780,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":781,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":760,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":598,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":597,"name":"BaseEvent.getScopes"}},{"id":782,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":783,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":784,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":785,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":786,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":787,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":759,"name":"Arg"}}],"type":{"type":"reference","id":759,"name":"Arg"}}]}}},{"id":788,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":760,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":599,"name":"BaseEvent.listen"}},{"id":789,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":790,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":791,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":792,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":793,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":794,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":759,"name":"Arg"}}],"type":{"type":"reference","id":759,"name":"Arg"}}]}}},{"id":795,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":760,"name":"Scope"}}],"type":{"type":"reference","id":752,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":604,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":603,"name":"BaseEvent.once"}},{"id":796,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":797,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":798,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":799,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":800,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":801,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":759,"name":"Arg"}}],"type":{"type":"reference","id":759,"name":"Arg"}}]}}},{"id":802,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":760,"name":"Scope"}}],"type":{"type":"reference","id":756,"typeArguments":[{"type":"reference","id":759,"name":"Arg"},{"type":"reference","id":760,"name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[757]},{"title":"Properties","kind":1024,"children":[766,770]},{"title":"Methods","kind":2048,"children":[771,762,774,780,782,789,796]}],"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":4,"character":13}],"typeParameter":[{"id":812,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":813,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":582,"typeArguments":[{"type":"reference","id":759,"name":"Arg"},{"type":"tuple","elements":[{"type":"reference","id":759,"name":"Arg"}]},{"type":"reference","id":760,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/WaterfallEvent","previousId":672,"nextId":715},{"id":715,"name":"EventErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/EventError.ts","line":9,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/event#EventErrorCode","previousId":756,"nextId":721},{"id":721,"name":"Listener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":1,"character":12}],"typeParameter":[{"id":750,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":751,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":750,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"},{"type":"inferred","name":"A5"}]},"trueType":{"type":"reflection","declaration":{"id":722,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":8,"character":3}],"signatures":[{"id":723,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":724,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":725,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":726,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":727,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}},{"id":728,"name":"a5","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A5"}}],"type":{"type":"reference","id":751,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":750,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"}]},"trueType":{"type":"reflection","declaration":{"id":729,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":10,"character":3}],"signatures":[{"id":730,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":731,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":732,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":733,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":734,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}}],"type":{"type":"reference","id":751,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":750,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"}]},"trueType":{"type":"reflection","declaration":{"id":735,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":12,"character":3}],"signatures":[{"id":736,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":737,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":738,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":739,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}}],"type":{"type":"reference","id":751,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":750,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"}]},"trueType":{"type":"reflection","declaration":{"id":740,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":14,"character":3}],"signatures":[{"id":741,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":742,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":743,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}}],"type":{"type":"reference","id":751,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":750,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"}]},"trueType":{"type":"reflection","declaration":{"id":744,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":16,"character":3}],"signatures":[{"id":745,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":746,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}}],"type":{"type":"reference","id":751,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":750,"name":"A"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reflection","declaration":{"id":747,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":18,"character":3}],"signatures":[{"id":748,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":749,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":750,"name":"A"}}],"type":{"type":"reference","id":751,"name":"R"}}]}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/event#Listener","previousId":715,"nextId":752},{"id":752,"name":"Unlistener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":12}],"type":{"type":"reflection","declaration":{"id":753,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":25}],"signatures":[{"id":754,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/event#Unlistener","previousId":721,"nextId":755},{"id":755,"name":"WildstarScope","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":23,"character":12}],"type":{"type":"literal","value":"*"},"permalink":"/api/event#WildstarScope","previousId":752,"nextId":671},{"id":671,"name":"EVENT_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/event/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/event#EVENT_NAME_PATTERN","previousId":755,"nextId":716},{"id":716,"name":"EventError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/event/src/EventError.ts","line":11,"character":13}],"type":{"type":"reflection","declaration":{"id":717,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":718,"name":"new EventError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":719,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}},{"id":720,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/event#EventError","previousId":671,"nextId":670},{"id":670,"name":"WILDCARD_SCOPE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/event/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":"*"},"defaultValue":"\'*\'","permalink":"/api/event#WILDCARD_SCOPE","previousId":716}],"groups":[{"title":"Classes","kind":128,"children":[539,582,627,672,756]},{"title":"Type aliases","kind":4194304,"children":[715,721,752,755]},{"title":"Variables","kind":32,"children":[671,716,670]}],"sources":[{"fileName":"packages/event/src/index.ts","line":6,"character":0}],"permalink":"/api/event"},"urlSlug":"event"}],"packageName":"@boost/event","packageVersion":"3.0.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":94,"name":"@boost/log","kind":2,"kindString":"Module","flags":{},"children":[{"id":3138,"name":"formats","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":3139,"name":"console","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":18,"character":16}],"signatures":[{"id":3140,"name":"console","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item as if it\'s being logged to `console`.\\n_Only_ inclues the label and message."},"parameters":[{"id":3141,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3142,"name":"debug","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":32,"character":16}],"signatures":[{"id":3143,"name":"debug","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item into a human-readable message with all item fields included.\\nThis is the default format for most transports."},"parameters":[{"id":3144,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3145,"name":"json","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":46,"character":16}],"signatures":[{"id":3146,"name":"json","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the entire item into JSON."},"parameters":[{"id":3147,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3148,"name":"message","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":53,"character":16}],"signatures":[{"id":3149,"name":"message","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item using _only_ the message."},"parameters":[{"id":3150,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Functions","kind":64,"children":[3139,3142,3145,3148]}],"sources":[{"fileName":"packages/log/src/formats.ts","line":1,"character":0}],"permalink":"/api/log/namespace/formats","previousId":3434,"nextId":3438},{"id":3207,"name":"ConsoleTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3208,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":7,"character":1}],"signatures":[{"id":3209,"name":"new ConsoleTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3210,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3449,"name":"TransportOptions"}],"name":"Partial"}}],"type":{"type":"reference","id":3207,"name":"ConsoleTransport"},"overwrites":{"type":"reference","id":3185,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3184,"name":"Transport.constructor"}},{"id":3215,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3188,"name":"Transport.levels"}},{"id":3222,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3449,"name":"TransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3199,"name":"Transport.options"}},{"id":3216,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":20,"character":1}],"signatures":[{"id":3217,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3218,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3449,"name":"TransportOptions"}],"name":"Blueprint"},"inheritedFrom":{"type":"reference","id":3190,"name":"Transport.blueprint"}}],"inheritedFrom":{"type":"reference","id":3189,"name":"Transport.blueprint"}},{"id":3223,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3224,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3225,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3449,"name":"TransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3226,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3227,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3228,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3449,"name":"TransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3449,"name":"TransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3449,"name":"TransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3201,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3200,"name":"Transport.configure"}},{"id":3219,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3220,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3221,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3193,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3192,"name":"Transport.format"}},{"id":3211,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":15,"character":1}],"signatures":[{"id":3212,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3213,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3214,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3196,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3195,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3208]},{"title":"Properties","kind":1024,"children":[3215,3222]},{"title":"Methods","kind":2048,"children":[3216,3223,3219,3211]}],"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":6,"character":13}],"extendedTypes":[{"type":"reference","id":3183,"typeArguments":[{"type":"reference","id":3449,"name":"TransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/ConsoleTransport","nextId":3236},{"id":3236,"name":"FileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3237,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":36,"character":1}],"signatures":[{"id":3238,"name":"new FileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3239,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3229,"name":"FileTransportOptions"},"default":{"type":"reference","id":3229,"name":"FileTransportOptions"}}],"parameters":[{"id":3240,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3239,"name":"Options"}}],"type":{"type":"reference","id":3236,"typeArguments":[{"type":"reference","id":3239,"name":"Options"}],"name":"FileTransport"},"overwrites":{"type":"reference","id":3185,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3184,"name":"Transport.constructor"}},{"id":3275,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3188,"name":"Transport.levels"}},{"id":3279,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3239,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3199,"name":"Transport.options"}},{"id":3241,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":24,"character":10}],"type":{"type":"reference","name":"Path"}},{"id":3242,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":26,"character":1}],"type":{"type":"reference","name":"WritableStream"}},{"id":3247,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":44,"character":10}],"signatures":[{"id":3248,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3249,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3229,"name":"FileTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3190,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3189,"name":"Transport.blueprint"}},{"id":3250,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":58,"character":1}],"signatures":[{"id":3251,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3252,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3253,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3254,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3280,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3281,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3282,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3239,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3283,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3284,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3285,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3239,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3239,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3239,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3201,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3200,"name":"Transport.configure"}},{"id":3276,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3277,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3278,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3193,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3192,"name":"Transport.format"}},{"id":3255,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":74,"character":1}],"signatures":[{"id":3256,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","name":"WritableStream"}}]},{"id":3257,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":98,"character":1}],"signatures":[{"id":3258,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3259,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3196,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3195,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3237]},{"title":"Properties","kind":1024,"children":[3275,3279,3241,3242]},{"title":"Methods","kind":2048,"children":[3247,3250,3280,3276,3255,3257]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":21,"character":13}],"typeParameter":[{"id":3286,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3229,"name":"FileTransportOptions"},"default":{"type":"reference","id":3229,"name":"FileTransportOptions"}}],"extendedTypes":[{"type":"reference","id":3183,"typeArguments":[{"type":"reference","id":3239,"name":"Options"}],"name":"Transport"}],"extendedBy":[{"type":"reference","id":3295,"name":"RotatingFileTransport"}],"permalink":"/api/log/class/FileTransport","previousId":3207,"nextId":3157},{"id":3157,"name":"Logger","kind":128,"kindString":"Class","flags":{},"children":[{"id":3158,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":15,"character":1}],"signatures":[{"id":3159,"name":"new Logger","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3160,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3429,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3157,"name":"Logger"},"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}},{"id":3176,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3429,"name":"LoggerOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3162,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":29,"character":1}],"signatures":[{"id":3163,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3164,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3429,"name":"LoggerOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3177,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3178,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3179,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3429,"name":"LoggerOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3180,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3181,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3182,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3429,"name":"LoggerOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3429,"name":"LoggerOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3429,"name":"LoggerOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3165,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":45,"character":1}],"signatures":[{"id":3166,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3167,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":53,"character":1}],"signatures":[{"id":3168,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3169,"name":"isAllowed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":58,"character":1}],"signatures":[{"id":3170,"name":"isAllowed","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3171,"name":"level","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3375,"name":"LogLevel"}},{"id":3172,"name":"maxLevel","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":3375,"name":"LogLevel"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":3173,"name":"log","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":76,"character":1}],"signatures":[{"id":3174,"name":"log","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3175,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3387,"name":"LogOptions"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3158]},{"title":"Properties","kind":1024,"children":[3176]},{"title":"Methods","kind":2048,"children":[3162,3177,3165,3167,3169,3173]}],"sources":[{"fileName":"packages/log/src/Logger.ts","line":12,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":3429,"name":"LoggerOptions"}],"name":"Contract"}],"permalink":"/api/log/class/Logger","previousId":3236,"nextId":3295},{"id":3295,"name":"RotatingFileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3296,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3297,"name":"new RotatingFileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3298,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3287,"name":"RotatingFileTransportOptions"}}],"type":{"type":"reference","id":3295,"name":"RotatingFileTransport"},"inheritedFrom":{"type":"reference","id":3238,"name":"FileTransport.constructor"}}],"inheritedFrom":{"type":"reference","id":3237,"name":"FileTransport.constructor"}},{"id":3337,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3275,"name":"FileTransport.levels"}},{"id":3341,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3287,"name":"RotatingFileTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3279,"name":"FileTransport.options"}},{"id":3312,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":24,"character":10}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":3241,"name":"FileTransport.path"}},{"id":3313,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":26,"character":1}],"type":{"type":"reference","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3242,"name":"FileTransport.stream"}},{"id":3300,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":15,"character":10}],"signatures":[{"id":3301,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3302,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3287,"name":"RotatingFileTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3248,"name":"FileTransport.blueprint"}}],"overwrites":{"type":"reference","id":3247,"name":"FileTransport.blueprint"}},{"id":3318,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":58,"character":1}],"signatures":[{"id":3319,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3320,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3321,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3322,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3251,"name":"FileTransport.close"}}],"inheritedFrom":{"type":"reference","id":3250,"name":"FileTransport.close"}},{"id":3342,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3343,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3344,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3287,"name":"RotatingFileTransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3345,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3346,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3347,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3287,"name":"RotatingFileTransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3287,"name":"RotatingFileTransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3287,"name":"RotatingFileTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3281,"name":"FileTransport.configure"}}],"inheritedFrom":{"type":"reference","id":3280,"name":"FileTransport.configure"}},{"id":3338,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3339,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3340,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3277,"name":"FileTransport.format"}}],"inheritedFrom":{"type":"reference","id":3276,"name":"FileTransport.format"}},{"id":3303,"name":"formatTimestamp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":27,"character":1}],"signatures":[{"id":3304,"name":"formatTimestamp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a `Date` object into a format used within the log file name."},"parameters":[{"id":3305,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3323,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":74,"character":1}],"signatures":[{"id":3324,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3256,"name":"FileTransport.open"}}],"inheritedFrom":{"type":"reference","id":3255,"name":"FileTransport.open"}},{"id":3325,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":98,"character":1}],"signatures":[{"id":3326,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3327,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3258,"name":"FileTransport.write"}}],"inheritedFrom":{"type":"reference","id":3257,"name":"FileTransport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3296]},{"title":"Properties","kind":1024,"children":[3337,3341,3312,3313]},{"title":"Methods","kind":2048,"children":[3300,3318,3342,3338,3303,3323,3325]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":12,"character":13}],"extendedTypes":[{"type":"reference","id":3236,"typeArguments":[{"type":"reference","id":3287,"name":"RotatingFileTransportOptions"}],"name":"FileTransport"}],"permalink":"/api/log/class/RotatingFileTransport","previousId":3157,"nextId":3353},{"id":3353,"name":"StreamTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3354,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":13,"character":1}],"signatures":[{"id":3355,"name":"new StreamTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3356,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3348,"name":"StreamTransportOptions"}}],"type":{"type":"reference","id":3353,"name":"StreamTransport"},"overwrites":{"type":"reference","id":3185,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3184,"name":"Transport.constructor"}},{"id":3364,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3188,"name":"Transport.levels"}},{"id":3368,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3348,"name":"StreamTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3199,"name":"Transport.options"}},{"id":3358,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":19,"character":10}],"signatures":[{"id":3359,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3360,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3348,"name":"StreamTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3190,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3189,"name":"Transport.blueprint"}},{"id":3369,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3370,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3371,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3348,"name":"StreamTransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3372,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3373,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3374,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3348,"name":"StreamTransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3348,"name":"StreamTransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3348,"name":"StreamTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3201,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3200,"name":"Transport.configure"}},{"id":3365,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3366,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3367,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3193,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3192,"name":"Transport.format"}},{"id":3361,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":33,"character":1}],"signatures":[{"id":3362,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3363,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3196,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3195,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3354]},{"title":"Properties","kind":1024,"children":[3364,3368]},{"title":"Methods","kind":2048,"children":[3358,3369,3365,3361]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":10,"character":13}],"extendedTypes":[{"type":"reference","id":3183,"typeArguments":[{"type":"reference","id":3348,"name":"StreamTransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/StreamTransport","previousId":3295,"nextId":3183},{"id":3183,"name":"Transport","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":3184,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":14,"character":1}],"signatures":[{"id":3185,"name":"new Transport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3186,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3449,"name":"TransportOptions"}}],"parameters":[{"id":3187,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3186,"name":"Options"}}],"type":{"type":"reference","id":3183,"typeArguments":[{"type":"reference","id":3186,"name":"Options"}],"name":"Transport"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":3188,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}},"defaultValue":"[]","implementationOf":{"type":"reference","id":3443,"name":"Transportable.levels"}},{"id":3199,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3186,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3189,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":20,"character":1}],"signatures":[{"id":3190,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3191,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3449,"name":"TransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3200,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3201,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3202,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3186,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3203,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3204,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3205,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3186,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3186,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3186,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3192,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3193,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3194,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","name":"Transportable.format"}}],"implementationOf":{"type":"reference","id":3444,"name":"Transportable.format"}},{"id":3195,"name":"write","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":48,"character":10}],"signatures":[{"id":3196,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3197,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3198,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}]},"implementationOf":{"type":"reference","id":3446,"name":"Transportable.write"}}],"implementationOf":{"type":"reference","id":3445,"name":"Transportable.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3184]},{"title":"Properties","kind":1024,"children":[3188,3199]},{"title":"Methods","kind":2048,"children":[3189,3200,3192,3195]}],"sources":[{"fileName":"packages/log/src/Transport.ts","line":8,"character":22}],"typeParameter":[{"id":3206,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3449,"name":"TransportOptions"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":3186,"name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":3207,"name":"ConsoleTransport"},{"type":"reference","id":3236,"name":"FileTransport"},{"type":"reference","id":3353,"name":"StreamTransport"}],"implementedTypes":[{"type":"reference","id":3442,"name":"Transportable"}],"permalink":"/api/log/class/Transport","previousId":3353,"nextId":3154},{"id":3229,"name":"FileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3233,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3450,"name":"TransportOptions.eol"}},{"id":3234,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3438,"name":"Formatter"},"inheritedFrom":{"type":"reference","id":3451,"name":"TransportOptions.format"}},{"id":3230,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3235,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3452,"name":"TransportOptions.levels"}},{"id":3231,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3232,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":18,"character":1}],"type":{"type":"reference","name":"PortablePath"}}],"groups":[{"title":"Properties","kind":1024,"children":[3233,3234,3230,3235,3231,3232]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":9,"character":17}],"extendedTypes":[{"type":"reference","id":3449,"name":"TransportOptions"}],"extendedBy":[{"type":"reference","id":3287,"name":"RotatingFileTransportOptions"}],"permalink":"/api/log/interface/FileTransportOptions","previousId":3154,"nextId":3378},{"id":3378,"name":"LogItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3379,"name":"host","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3380,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a localized or customized label."},"sources":[{"fileName":"packages/log/src/types.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3381,"name":"level","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a string."},"sources":[{"fileName":"packages/log/src/types.ts","line":13,"character":1}],"type":{"type":"reference","id":3375,"name":"LogLevel"}},{"id":3382,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log message with interpolated arguments applied."},"sources":[{"fileName":"packages/log/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3383,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional data to include with a log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":3377,"name":"LogMetadata"}},{"id":3384,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of the logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3385,"name":"pid","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current process ID."},"sources":[{"fileName":"packages/log/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3386,"name":"time","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Timestamp of the log, native to the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":23,"character":1}],"type":{"type":"reference","name":"Date"}}],"groups":[{"title":"Properties","kind":1024,"children":[3379,3380,3381,3382,3383,3384,3385,3386]}],"sources":[{"fileName":"packages/log/src/types.ts","line":7,"character":17}],"permalink":"/api/log/interface/LogItem","previousId":3229,"nextId":3387},{"id":3387,"name":"LogOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3388,"name":"args","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Values to interpolate into the message string."},"sources":[{"fileName":"packages/log/src/types.ts","line":28,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":3389,"name":"level","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Level to log as."},"sources":[{"fileName":"packages/log/src/types.ts","line":30,"character":1}],"type":{"type":"reference","id":3375,"name":"LogLevel"}},{"id":3390,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Message to log to the transports."},"sources":[{"fileName":"packages/log/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3391,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include in the message item/string."},"sources":[{"fileName":"packages/log/src/types.ts","line":34,"character":1}],"type":{"type":"reference","id":3377,"name":"LogMetadata"}}],"groups":[{"title":"Properties","kind":1024,"children":[3388,3389,3390,3391]}],"sources":[{"fileName":"packages/log/src/types.ts","line":26,"character":17}],"permalink":"/api/log/interface/LogOptions","previousId":3378,"nextId":3400},{"id":3400,"name":"Loggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3401,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"}},{"id":3406,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"}},{"id":3408,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"}},{"id":3407,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"}},{"id":3409,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"}},{"id":3410,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"}},{"id":3402,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3403,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3404,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3405,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3401,3406,3408,3407,3409,3410]},{"title":"Methods","kind":2048,"children":[3402,3404]}],"sources":[{"fileName":"packages/log/src/types.ts","line":47,"character":17}],"extendedBy":[{"type":"reference","id":3411,"name":"LoggerFunction"}],"permalink":"/api/log/interface/Loggable","previousId":3387,"nextId":3392},{"id":3392,"name":"LoggableWriter","kind":256,"kindString":"Interface","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":37,"character":17}],"signatures":[{"id":3393,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3394,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3377,"name":"LogMetadata"}},{"id":3395,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3396,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3397,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3398,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3399,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedBy":[{"type":"reference","id":3411,"name":"LoggerFunction"}],"permalink":"/api/log/interface/LoggableWriter","previousId":3400,"nextId":3411},{"id":3411,"name":"LoggerFunction","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3412,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3401,"name":"Loggable.debug"}},{"id":3417,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3406,"name":"Loggable.error"}},{"id":3419,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3408,"name":"Loggable.info"}},{"id":3418,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3407,"name":"Loggable.log"}},{"id":3420,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3409,"name":"Loggable.trace"}},{"id":3421,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3392,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3410,"name":"Loggable.warn"}},{"id":3413,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3414,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3403,"name":"Loggable.disable"}}],"inheritedFrom":{"type":"reference","id":3402,"name":"Loggable.disable"}},{"id":3415,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3416,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3405,"name":"Loggable.enable"}}],"inheritedFrom":{"type":"reference","id":3404,"name":"Loggable.enable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3412,3417,3419,3418,3420,3421]},{"title":"Methods","kind":2048,"children":[3413,3415]}],"sources":[{"fileName":"packages/log/src/types.ts","line":66,"character":17}],"signatures":[{"id":3422,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3423,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3377,"name":"LogMetadata"}},{"id":3424,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3425,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3426,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3427,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3428,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","id":3400,"name":"Loggable"},{"type":"reference","id":3392,"name":"LoggableWriter"}],"permalink":"/api/log/interface/LoggerFunction","previousId":3392,"nextId":3429},{"id":3429,"name":"LoggerOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3430,"name":"labels","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom labels to use for each log type."},"sources":[{"fileName":"packages/log/src/types.ts","line":70,"character":1}],"type":{"type":"reference","id":3376,"name":"LogLevelLabels"}},{"id":3431,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include within each log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":72,"character":1}],"type":{"type":"reference","id":3377,"name":"LogMetadata"}},{"id":3432,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name for this logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":74,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3433,"name":"transports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of transports to write messages to."},"sources":[{"fileName":"packages/log/src/types.ts","line":76,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3442,"name":"Transportable"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3430,3431,3432,3433]}],"sources":[{"fileName":"packages/log/src/types.ts","line":68,"character":17}],"permalink":"/api/log/interface/LoggerOptions","previousId":3411,"nextId":3287},{"id":3287,"name":"RotatingFileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3292,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3233,"name":"FileTransportOptions.eol"}},{"id":3293,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3438,"name":"Formatter"},"inheritedFrom":{"type":"reference","id":3234,"name":"FileTransportOptions.format"}},{"id":3289,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":3230,"name":"FileTransportOptions.gzip"}},{"id":3294,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3235,"name":"FileTransportOptions.levels"}},{"id":3290,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":3231,"name":"FileTransportOptions.maxSize"}},{"id":3291,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":18,"character":1}],"type":{"type":"reference","name":"PortablePath"},"inheritedFrom":{"type":"reference","id":3232,"name":"FileTransportOptions.path"}},{"id":3288,"name":"rotation","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Period in which to rotate files. Will append a timestamp to the rotated log file."},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":9,"character":1}],"type":{"type":"reference","id":3453,"name":"Rotation"}}],"groups":[{"title":"Properties","kind":1024,"children":[3292,3293,3289,3294,3290,3291,3288]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":3229,"name":"FileTransportOptions"}],"permalink":"/api/log/interface/RotatingFileTransportOptions","previousId":3429,"nextId":3348},{"id":3348,"name":"StreamTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3350,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3450,"name":"TransportOptions.eol"}},{"id":3351,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3438,"name":"Formatter"},"inheritedFrom":{"type":"reference","id":3451,"name":"TransportOptions.format"}},{"id":3352,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3452,"name":"TransportOptions.levels"}},{"id":3349,"name":"stream","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The stream to pipe messages to."},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":7,"character":1}],"type":{"type":"reference","id":3434,"name":"Writable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3350,3351,3352,3349]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":5,"character":17}],"extendedTypes":[{"type":"reference","id":3449,"name":"TransportOptions"}],"permalink":"/api/log/interface/StreamTransportOptions","previousId":3287,"nextId":3449},{"id":3449,"name":"TransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3450,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3451,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3438,"name":"Formatter"}},{"id":3452,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3450,3451,3452]}],"sources":[{"fileName":"packages/log/src/types.ts","line":93,"character":17}],"extendedBy":[{"type":"reference","id":3229,"name":"FileTransportOptions"},{"type":"reference","id":3348,"name":"StreamTransportOptions"}],"permalink":"/api/log/interface/TransportOptions","previousId":3348,"nextId":3442},{"id":3442,"name":"Transportable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3444,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":88,"character":1}],"type":{"type":"reference","id":3438,"name":"Formatter"}},{"id":3443,"name":"levels","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":87,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}}},{"id":3445,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":90,"character":1}],"signatures":[{"id":3446,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message and log item to the transport."},"parameters":[{"id":3447,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3448,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}]}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3444,3443]},{"title":"Methods","kind":2048,"children":[3445]}],"sources":[{"fileName":"packages/log/src/types.ts","line":86,"character":17}],"implementedBy":[{"type":"reference","id":3183,"name":"Transport"}],"permalink":"/api/log/interface/Transportable","previousId":3449,"nextId":3434},{"id":3434,"name":"Writable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3435,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":81,"character":1}],"signatures":[{"id":3436,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3437,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3435]}],"sources":[{"fileName":"packages/log/src/types.ts","line":79,"character":17}],"permalink":"/api/log/interface/Writable","previousId":3442,"nextId":3138},{"id":3438,"name":"Formatter","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":12}],"type":{"type":"reflection","declaration":{"id":3439,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":24}],"signatures":[{"id":3440,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3441,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3378,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/log#Formatter","previousId":3138,"nextId":3375},{"id":3375,"name":"LogLevel","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":1,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"debug"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"log"},{"type":"literal","value":"trace"},{"type":"literal","value":"warn"}]},"permalink":"/api/log#LogLevel","previousId":3438,"nextId":3376},{"id":3376,"name":"LogLevelLabels","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":3,"character":12}],"type":{"type":"mapped","parameter":"L","parameterType":{"type":"reference","id":3375,"name":"LogLevel"},"templateType":{"type":"intrinsic","name":"string"},"optionalModifier":"+"},"permalink":"/api/log#LogLevelLabels","previousId":3375,"nextId":3377},{"id":3377,"name":"LogMetadata","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":5,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/log#LogMetadata","previousId":3376,"nextId":3453},{"id":3453,"name":"Rotation","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":102,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"daily"},{"type":"literal","value":"hourly"},{"type":"literal","value":"monthly"},{"type":"literal","value":"weekly"}]},"permalink":"/api/log#Rotation","previousId":3377,"nextId":3152},{"id":3152,"name":"DEFAULT_LABELS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/log/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","id":3376,"name":"LogLevelLabels"},"defaultValue":"...","permalink":"/api/log#DEFAULT_LABELS","previousId":3453,"nextId":3151},{"id":3151,"name":"LOG_LEVELS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/log/src/constants.ts","line":6,"character":13}],"type":{"type":"array","elementType":{"type":"reference","id":3375,"name":"LogLevel"}},"defaultValue":"...","permalink":"/api/log#LOG_LEVELS","previousId":3152,"nextId":3153},{"id":3153,"name":"MAX_LOG_SIZE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/log/src/constants.ts","line":17,"character":13}],"type":{"type":"literal","value":10485760},"defaultValue":"10_485_760","permalink":"/api/log#MAX_LOG_SIZE","previousId":3151},{"id":3154,"name":"createLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/createLogger.ts","line":29,"character":16}],"signatures":[{"id":3155,"name":"createLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a logger with any configured transports."},"parameters":[{"id":3156,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3429,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3411,"name":"LoggerFunction"}}],"permalink":"/api/log/function/createLogger","previousId":3183,"nextId":3229}],"groups":[{"title":"Classes","kind":128,"children":[3207,3236,3157,3295,3353,3183]},{"title":"Functions","kind":64,"children":[3154]},{"title":"Interfaces","kind":256,"children":[3229,3378,3387,3400,3392,3411,3429,3287,3348,3449,3442,3434]},{"title":"Namespaces","kind":4,"children":[3138]},{"title":"Type aliases","kind":4194304,"children":[3438,3375,3376,3377,3453]},{"title":"Variables","kind":32,"children":[3152,3151,3153]}],"sources":[{"fileName":"packages/log/src/index.ts","line":6,"character":0}],"permalink":"/api/log"},"urlSlug":"log"},{"index":false,"label":"Test utilities","reflection":{"id":95,"name":"@boost/log/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":96,"name":"mockLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/test.ts","line":20,"character":16}],"signatures":[{"id":97,"name":"mockLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createLogger`.","text":"```ts\\nimport { mockLogger } from \'@boost/log/test\';\\n\\nit(\'calls the logger\', () => {\\n\\tconst log = mockLogger();\\n\\n\\tlog(\'Something has happened\');\\n\\n\\texpect(log).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3411,"name":"LoggerFunction"}}],"permalink":"/api/log-test/function/mockLogger"}],"groups":[{"title":"Functions","kind":64,"children":[96]}],"sources":[{"fileName":"packages/log/src/test.ts","line":3,"character":0}],"permalink":"/api/log-test"},"urlSlug":"log-test"}],"packageName":"@boost/log","packageVersion":"3.0.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":98,"name":"@boost/module","kind":2,"kindString":"Module","flags":{},"children":[{"id":3507,"name":"GetFormatResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3508,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":53,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3508]}],"sources":[{"fileName":"packages/module/src/types.ts","line":52,"character":17}],"permalink":"/api/module/interface/GetFormatResult","previousId":3469,"nextId":3490},{"id":3490,"name":"ResolveContext","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3491,"name":"conditions","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":31,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":3492,"name":"parentURL","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3491,3492]}],"sources":[{"fileName":"packages/module/src/types.ts","line":30,"character":17}],"permalink":"/api/module/interface/ResolveContext","previousId":3507,"nextId":3493},{"id":3493,"name":"ResolveResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3494,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":36,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3494]}],"sources":[{"fileName":"packages/module/src/types.ts","line":35,"character":17}],"permalink":"/api/module/interface/ResolveResult","previousId":3490,"nextId":3520},{"id":3520,"name":"TransformSourceContext","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3521,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":68,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3522,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":69,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3521,3522]}],"sources":[{"fileName":"packages/module/src/types.ts","line":67,"character":17}],"permalink":"/api/module/interface/TransformSourceContext","previousId":3493,"nextId":3523},{"id":3523,"name":"TransformSourceResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3524,"name":"source","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":73,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3524]}],"sources":[{"fileName":"packages/module/src/types.ts","line":72,"character":17}],"permalink":"/api/module/interface/TransformSourceResult","previousId":3520,"nextId":3506},{"id":3506,"name":"GetFormatContext","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":50,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/module#GetFormatContext","previousId":3523,"nextId":3509},{"id":3509,"name":"LoaderDefaultGetFormat","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":56,"character":12}],"type":{"type":"reflection","declaration":{"id":3510,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":56,"character":37}],"signatures":[{"id":3511,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3512,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3513,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3506,"name":"GetFormatContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3507,"name":"GetFormatResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultGetFormat","previousId":3506,"nextId":3495},{"id":3495,"name":"LoaderDefaultResolve","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":39,"character":12}],"type":{"type":"reflection","declaration":{"id":3496,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":39,"character":35}],"signatures":[{"id":3497,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3498,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3499,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3490,"name":"ResolveContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3493,"name":"ResolveResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultResolve","previousId":3509,"nextId":3526},{"id":3526,"name":"LoaderDefaultTransformSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":78,"character":12}],"type":{"type":"reflection","declaration":{"id":3527,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":78,"character":43}],"signatures":[{"id":3528,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3529,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3525,"name":"TransformSourceType"}},{"id":3530,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3520,"name":"TransformSourceContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3523,"name":"TransformSourceResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultTransformSource","previousId":3495,"nextId":3514},{"id":3514,"name":"LoaderGetFormat","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":61,"character":12}],"type":{"type":"reflection","declaration":{"id":3515,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":61,"character":30}],"signatures":[{"id":3516,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3517,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3518,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3506,"name":"GetFormatContext"}},{"id":3519,"name":"defaultGetFormat","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3509,"name":"LoaderDefaultGetFormat"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3507,"name":"GetFormatResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderGetFormat","previousId":3526,"nextId":3500},{"id":3500,"name":"LoaderResolve","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":44,"character":12}],"type":{"type":"reflection","declaration":{"id":3501,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":44,"character":28}],"signatures":[{"id":3502,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3503,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3504,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3490,"name":"ResolveContext"}},{"id":3505,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3495,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3493,"name":"ResolveResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderResolve","previousId":3514,"nextId":3531},{"id":3531,"name":"LoaderTransformSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":83,"character":12}],"type":{"type":"reflection","declaration":{"id":3532,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":83,"character":36}],"signatures":[{"id":3533,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3534,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3525,"name":"TransformSourceType"}},{"id":3535,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3520,"name":"TransformSourceContext"}},{"id":3536,"name":"defaultTransformSource","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3526,"name":"LoaderDefaultTransformSource"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3523,"name":"TransformSourceResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderTransformSource","previousId":3500,"nextId":3479},{"id":3479,"name":"ModuleLike","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Return shape of a module. The default export can be typed with\\nthe `D` generic slot, and the named exports can be typed with\\nan object in the `N` generic slot.","text":"If there is no default export (classic Node.js `exports` pattern),\\nthen `void` can be passed to the `D` generic, which will populate\\nthe `default` property with the named exports.\\n"},"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":12}],"typeParameter":[{"id":3483,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3485,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3484,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":55}]}}}],"type":{"type":"intersection","types":[{"type":"reference","id":3485,"name":"N"},{"type":"reflection","declaration":{"id":3480,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3482,"name":"__esModule","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3481,"name":"default","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":14,"character":1}],"type":{"type":"conditional","checkType":{"type":"reference","id":3483,"name":"D"},"extendsType":{"type":"intrinsic","name":"void"},"trueType":{"type":"reference","id":3485,"name":"N"},"falseType":{"type":"reference","id":3483,"name":"D"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3482,3481]}],"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":65}]}}]},"permalink":"/api/module#ModuleLike","previousId":3531,"nextId":3486},{"id":3486,"name":"PathLike","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":3487,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3488,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":34}],"signatures":[{"id":3489,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3488]}],"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":32}]}}]},"permalink":"/api/module#PathLike","previousId":3479,"nextId":3525},{"id":3525,"name":"TransformSourceType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":76,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"SharedArrayBuffer"},{"type":"reference","name":"Uint8Array"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/module#TransformSourceType","previousId":3486},{"id":3454,"name":"interopModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/interopModule.ts","line":16,"character":16}],"signatures":[{"id":3455,"name":"interopModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Formats the shape of an imported module to align with the\\nES module specification.","text":"For ES or ES-like modules, returns the shape as-is.\\n\\nFor CommonJS modules, returns an object with the following:\\n- `module.exports` under the `default` property.\\n- `exports.<name>` under properties of the same name,\\n  and also under a `default` object.\\n"},"typeParameter":[{"id":3456,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3458,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3457,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3459,"name":"result","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":3479,"typeArguments":[{"type":"reference","id":3456,"name":"D"},{"type":"reference","id":3458,"name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/interopModule","nextId":3467},{"id":3467,"name":"registerExtensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":48,"character":16}],"signatures":[{"id":3468,"name":"registerExtensions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register `.ts` and `.tsx` file extensions into Node.js\'s resolution algorithm."},"type":{"type":"intrinsic","name":"void"}}],"permalink":"/api/module/function/registerExtensions","previousId":3454,"nextId":3460},{"id":3460,"name":"requireModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireModule.ts","line":33,"character":16}],"signatures":[{"id":3461,"name":"requireModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Works in a similar fashion to the native NodeJS `require()`, but can also\\nimport custom file types like TypeScript, and also returns a module shape\\nthat aligns with the ESM loader specification.","text":"When loading custom file types, the extension in the file path is optional,\\nas NodeJS will iterate through each extension until a file is found.\\n\\n```ts\\nimport { requireModule } from \'@boost/module\';\\n\\nconst result = requireModule(\'../../some/module\');\\n```\\n\\nCaveats and differences:\\n\\n- CommonJS files that utilize `module.exports` (default export) will have this\\n  value returned under a `default` property, instead of being returned directly.\\n- CommonJS files that utilize multiple `exports.<name>` (named exports) will\\n  have these values returned as properties on the result object, and will also\\n  be found on the `default` property.\\n- \\"ES module like\\" files will be returned as-is. These are files that are built\\n  with Babel or TypeScript and export an `__esModule` internal property.\\n\\nThese changes align with `import()` and the ES module system. We made this\\ndecision for consistency and reliability.\\n"},"typeParameter":[{"id":3462,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3464,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3463,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3465,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3486,"name":"PathLike"}},{"id":3466,"name":"requirer","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"NodeRequire"},"defaultValue":"require"}],"type":{"type":"reference","id":3479,"typeArguments":[{"type":"reference","id":3462,"name":"D"},{"type":"reference","id":3464,"name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/requireModule","previousId":3467,"nextId":3471},{"id":3471,"name":"requireTSModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":76,"character":16}],"signatures":[{"id":3472,"name":"requireTSModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `requireModule` but for loading TypeScript files ending in `ts` or `tsx`.\\nWhen imported, will transform the file using the `typescript` package,\\nevaluate the code in the current module context, and apply the same process\\nto all child imports.","text":"```ts\\nimport { requireTSModule } from \'@boost/module\';\\n\\nconst result = requireTSModule(\'../../some/module.ts\');\\n```\\n\\n> This helper rarely needs to be used directly as `requireModule` will\\n> call it under the hood based on the file extension.\\n"},"typeParameter":[{"id":3473,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3475,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3474,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3476,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3486,"name":"PathLike"}},{"id":3477,"name":"requirer","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"NodeRequire"},"defaultValue":"require"}],"type":{"type":"reference","id":3479,"typeArguments":[{"type":"reference","id":3473,"name":"D"},{"type":"reference","id":3475,"name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/requireTSModule","previousId":3460,"nextId":3469},{"id":3469,"name":"unregisterExtensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":56,"character":16}],"signatures":[{"id":3470,"name":"unregisterExtensions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister `.ts` and `.tsx` file extensions."},"type":{"type":"intrinsic","name":"void"}}],"permalink":"/api/module/function/unregisterExtensions","previousId":3471,"nextId":3507}],"groups":[{"title":"Functions","kind":64,"children":[3454,3467,3460,3471,3469]},{"title":"Interfaces","kind":256,"children":[3507,3490,3493,3520,3523]},{"title":"Type aliases","kind":4194304,"children":[3506,3509,3495,3526,3514,3500,3531,3479,3486,3525]}],"sources":[{"fileName":"packages/module/src/index.ts","line":6,"character":0}],"permalink":"/api/module"},"urlSlug":"module"},{"index":false,"label":"ESM Loaders","reflection":{"id":99,"name":"@boost/module/loader","kind":2,"kindString":"Module","flags":{},"children":[{"id":3560,"name":"GetFormatContext","kind":16777216,"kindString":"Reference","flags":{},"target":3506,"permalink":"/api/module-loader#GetFormatContext","previousId":3537,"nextId":3561},{"id":3561,"name":"GetFormatResult","kind":16777216,"kindString":"Reference","flags":{},"target":3507,"permalink":"/api/module-loader#GetFormatResult","previousId":3560,"nextId":3562},{"id":3562,"name":"LoaderDefaultGetFormat","kind":16777216,"kindString":"Reference","flags":{},"target":3509,"permalink":"/api/module-loader#LoaderDefaultGetFormat","previousId":3561,"nextId":3558},{"id":3558,"name":"LoaderDefaultResolve","kind":16777216,"kindString":"Reference","flags":{},"target":3495,"permalink":"/api/module-loader#LoaderDefaultResolve","previousId":3562,"nextId":3567},{"id":3567,"name":"LoaderDefaultTransformSource","kind":16777216,"kindString":"Reference","flags":{},"target":3526,"permalink":"/api/module-loader#LoaderDefaultTransformSource","previousId":3558,"nextId":3563},{"id":3563,"name":"LoaderGetFormat","kind":16777216,"kindString":"Reference","flags":{},"target":3514,"permalink":"/api/module-loader#LoaderGetFormat","previousId":3567,"nextId":3559},{"id":3559,"name":"LoaderResolve","kind":16777216,"kindString":"Reference","flags":{},"target":3500,"permalink":"/api/module-loader#LoaderResolve","previousId":3563,"nextId":3568},{"id":3568,"name":"LoaderTransformSource","kind":16777216,"kindString":"Reference","flags":{},"target":3531,"permalink":"/api/module-loader#LoaderTransformSource","previousId":3559,"nextId":3554},{"id":3554,"name":"ModuleLike","kind":16777216,"kindString":"Reference","flags":{},"target":3479,"permalink":"/api/module-loader#ModuleLike","previousId":3568,"nextId":3555},{"id":3555,"name":"PathLike","kind":16777216,"kindString":"Reference","flags":{},"target":3486,"permalink":"/api/module-loader#PathLike","previousId":3554,"nextId":3556},{"id":3556,"name":"ResolveContext","kind":16777216,"kindString":"Reference","flags":{},"target":3490,"permalink":"/api/module-loader#ResolveContext","previousId":3555,"nextId":3557},{"id":3557,"name":"ResolveResult","kind":16777216,"kindString":"Reference","flags":{},"target":3493,"permalink":"/api/module-loader#ResolveResult","previousId":3556,"nextId":3564},{"id":3564,"name":"TransformSourceContext","kind":16777216,"kindString":"Reference","flags":{},"target":3520,"permalink":"/api/module-loader#TransformSourceContext","previousId":3557,"nextId":3565},{"id":3565,"name":"TransformSourceResult","kind":16777216,"kindString":"Reference","flags":{},"target":3523,"permalink":"/api/module-loader#TransformSourceResult","previousId":3564,"nextId":3566},{"id":3566,"name":"TransformSourceType","kind":16777216,"kindString":"Reference","flags":{},"target":3525,"permalink":"/api/module-loader#TransformSourceType","previousId":3565},{"id":3537,"name":"typescript","kind":4,"kindString":"Namespace","flags":{},"comment":{"shortText":"Load TypeScript files based on the ESM loader specification.","tags":[{"tag":"link","text":"https://nodejs.org/api/esm.html#esm_loaders\\n"}]},"children":[{"id":3543,"name":"getFormat","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":46,"character":13}],"signatures":[{"id":3544,"name":"getFormat","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3545,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3546,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3506,"name":"GetFormatContext"}},{"id":3547,"name":"defaultGetFormat","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3509,"name":"LoaderDefaultGetFormat"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3507,"name":"GetFormatResult"}],"name":"Promise"}}]},{"id":3538,"name":"resolve","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":22,"character":13}],"signatures":[{"id":3539,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3540,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3541,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3490,"name":"ResolveContext"}},{"id":3542,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3495,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3493,"name":"ResolveResult"}],"name":"Promise"}}]},{"id":3548,"name":"transformSource","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":56,"character":13}],"signatures":[{"id":3549,"name":"transformSource","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3550,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3525,"name":"TransformSourceType"}},{"id":3551,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3520,"name":"TransformSourceContext"}},{"id":3552,"name":"defaultTransformSource","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3526,"name":"LoaderDefaultTransformSource"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3523,"name":"TransformSourceResult"}],"name":"Promise"}}]}],"groups":[{"title":"Functions","kind":64,"children":[3543,3538,3548]}],"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":3,"character":0}],"permalink":"/api/module-loader/namespace/typescript","previousId":110,"nextId":3560},{"id":105,"name":"getFormat","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":106,"name":"getFormat","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":107,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":108,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3506,"name":"GetFormatContext"}},{"id":109,"name":"defaultGetFormat","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3509,"name":"LoaderDefaultGetFormat"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3507,"name":"GetFormatResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/getFormat","nextId":100},{"id":100,"name":"resolve","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":101,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":102,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":103,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3490,"name":"ResolveContext"}},{"id":104,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3495,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3493,"name":"ResolveResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/resolve","previousId":105,"nextId":110},{"id":110,"name":"transformSource","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":111,"name":"transformSource","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":112,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3525,"name":"TransformSourceType"}},{"id":113,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3520,"name":"TransformSourceContext"}},{"id":114,"name":"defaultTransformSource","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3526,"name":"LoaderDefaultTransformSource"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3523,"name":"TransformSourceResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/transformSource","previousId":100,"nextId":3537}],"groups":[{"title":"Functions","kind":64,"children":[105,100,110]},{"title":"Namespaces","kind":4,"children":[3537]},{"title":"References","kind":16777216,"children":[3560,3561,3562,3558,3567,3563,3559,3568,3554,3555,3556,3557,3564,3565,3566]}],"sources":[{"fileName":"packages/module/src/loaders/index.ts","line":1,"character":0}],"permalink":"/api/module-loader"},"urlSlug":"module-loader"}],"packageName":"@boost/module","packageVersion":"3.0.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":5,"name":"@boost/pipeline","kind":2,"kindString":"Module","flags":{},"children":[{"id":814,"name":"AggregatedPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":816,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":817,"name":"new AggregatedPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":818,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":818,"name":"Ctx"}],"name":"Context"}},{"id":819,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":820,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":819,"name":"Input"}}],"parameters":[{"id":821,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":818,"name":"Ctx"}},{"id":822,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":819,"name":"Input"}},{"id":823,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":824,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":814,"typeArguments":[{"type":"reference","id":818,"name":"Ctx"},{"type":"reference","id":819,"name":"Input"},{"type":"reference","id":820,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":964,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":963,"name":"ParallelPipeline.constructor"}},{"id":843,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":818,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":990,"name":"ParallelPipeline.context"}},{"id":844,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":991,"name":"ParallelPipeline.debug"}},{"id":841,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":988,"name":"ParallelPipeline.depth"}},{"id":842,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":989,"name":"ParallelPipeline.index"}},{"id":846,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":993,"name":"ParallelPipeline.onAfterRun"}},{"id":847,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":819,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":994,"name":"ParallelPipeline.onBeforeRun"}},{"id":848,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":849,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":819,"name":"Input"},{"type":"reference","id":820,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":819,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":995,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":861,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":862,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1008,"name":"ParallelPipeline.options"}},{"id":845,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":819,"name":"Input"},"inheritedFrom":{"type":"reference","id":992,"name":"ParallelPipeline.value"}},{"id":853,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":854,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ParallelPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1000,"name":"ParallelPipeline.id"}},{"id":830,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":831,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":832,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":833,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1324,"typeArguments":[{"type":"reference","id":818,"name":"Ctx"},{"type":"reference","id":819,"name":"Input"},{"type":"reference","id":820,"name":"Output"}],"name":"Action"}},{"id":834,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":814,"typeArguments":[{"type":"reference","id":818,"name":"Ctx"},{"type":"reference","id":819,"name":"Input"},{"type":"reference","id":820,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":976,"name":"ParallelPipeline.add"}},{"id":835,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":836,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":837,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":819,"name":"Input"},{"type":"reference","id":820,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":814,"typeArguments":[{"type":"reference","id":818,"name":"Ctx"},{"type":"reference","id":819,"name":"Input"},{"type":"reference","id":820,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":980,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":975,"name":"ParallelPipeline.add"}},{"id":827,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":16,"character":1}],"signatures":[{"id":828,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":829,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":973,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":972,"name":"ParallelPipeline.blueprint"}},{"id":863,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":864,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":865,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":866,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":867,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":868,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":869,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":870,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":871,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":872,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1010,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1009,"name":"ParallelPipeline.configure"}},{"id":855,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":856,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":857,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":819,"name":"Input"},{"type":"reference","id":820,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1003,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1002,"name":"ParallelPipeline.getWorkUnits"}},{"id":858,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":859,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":860,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":949,"name":"Monitor"}}],"type":{"type":"reference","id":814,"typeArguments":[{"type":"reference","id":818,"name":"Ctx"},{"type":"reference","id":819,"name":"Input"},{"type":"reference","id":820,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1006,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1005,"name":"ParallelPipeline.monitor"}},{"id":825,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":15,"character":7}],"signatures":[{"id":826,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1333,"typeArguments":[{"type":"reference","id":820,"name":"Output"}],"name":"AggregatedResult"}],"name":"Promise"},"overwrites":{"type":"reference","id":987,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":986,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[816]},{"title":"Properties","kind":1024,"children":[843,844,841,842,846,847,848,861,845],"categories":[{"title":"CATEGORY","children":[843,844,841,842,861,845]},{"title":"Events","children":[846,847,848]}]},{"title":"Accessors","kind":262144,"children":[853]},{"title":"Methods","kind":2048,"children":[830,827,863,855,858,825]}],"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":6,"character":13}],"typeParameter":[{"id":873,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":874,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":875,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":819,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":962,"typeArguments":[{"type":"reflection","declaration":{"id":815,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":10,"character":27}]}},{"type":"reference","id":818,"name":"Ctx"},{"type":"reference","id":819,"name":"Input"},{"type":"reference","id":820,"name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/AggregatedPipeline","nextId":876},{"id":876,"name":"ConcurrentPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":878,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":879,"name":"new ConcurrentPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":880,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":880,"name":"Ctx"}],"name":"Context"}},{"id":881,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":882,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":881,"name":"Input"}}],"parameters":[{"id":883,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":880,"name":"Ctx"}},{"id":884,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":881,"name":"Input"}},{"id":885,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":886,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":876,"typeArguments":[{"type":"reference","id":880,"name":"Ctx"},{"type":"reference","id":881,"name":"Input"},{"type":"reference","id":882,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":964,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":963,"name":"ParallelPipeline.constructor"}},{"id":905,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":880,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":990,"name":"ParallelPipeline.context"}},{"id":906,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":991,"name":"ParallelPipeline.debug"}},{"id":903,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":988,"name":"ParallelPipeline.depth"}},{"id":904,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":989,"name":"ParallelPipeline.index"}},{"id":908,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":993,"name":"ParallelPipeline.onAfterRun"}},{"id":909,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":881,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":994,"name":"ParallelPipeline.onBeforeRun"}},{"id":910,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":911,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":881,"name":"Input"},{"type":"reference","id":882,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":881,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":995,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":923,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":924,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1008,"name":"ParallelPipeline.options"}},{"id":907,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":881,"name":"Input"},"inheritedFrom":{"type":"reference","id":992,"name":"ParallelPipeline.value"}},{"id":915,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":916,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ParallelPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1000,"name":"ParallelPipeline.id"}},{"id":892,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":893,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":894,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":895,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1324,"typeArguments":[{"type":"reference","id":880,"name":"Ctx"},{"type":"reference","id":881,"name":"Input"},{"type":"reference","id":882,"name":"Output"}],"name":"Action"}},{"id":896,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":876,"typeArguments":[{"type":"reference","id":880,"name":"Ctx"},{"type":"reference","id":881,"name":"Input"},{"type":"reference","id":882,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":976,"name":"ParallelPipeline.add"}},{"id":897,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":898,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":899,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":881,"name":"Input"},{"type":"reference","id":882,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":876,"typeArguments":[{"type":"reference","id":880,"name":"Ctx"},{"type":"reference","id":881,"name":"Input"},{"type":"reference","id":882,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":980,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":975,"name":"ParallelPipeline.add"}},{"id":889,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":16,"character":1}],"signatures":[{"id":890,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":891,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":973,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":972,"name":"ParallelPipeline.blueprint"}},{"id":925,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":926,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":927,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":928,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":929,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":930,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":931,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":932,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":933,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":934,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1010,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1009,"name":"ParallelPipeline.configure"}},{"id":917,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":918,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":919,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":881,"name":"Input"},{"type":"reference","id":882,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1003,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1002,"name":"ParallelPipeline.getWorkUnits"}},{"id":920,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":921,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":922,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":949,"name":"Monitor"}}],"type":{"type":"reference","id":876,"typeArguments":[{"type":"reference","id":880,"name":"Ctx"},{"type":"reference","id":881,"name":"Input"},{"type":"reference","id":882,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1006,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1005,"name":"ParallelPipeline.monitor"}},{"id":887,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":14,"character":7}],"signatures":[{"id":888,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nIf an error occurs, the pipeline will abort early, otherwise return a list of all results."},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":882,"name":"Output"}}],"name":"Promise"},"overwrites":{"type":"reference","id":987,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":986,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[878]},{"title":"Properties","kind":1024,"children":[905,906,903,904,908,909,910,923,907],"categories":[{"title":"CATEGORY","children":[905,906,903,904,923,907]},{"title":"Events","children":[908,909,910]}]},{"title":"Accessors","kind":262144,"children":[915]},{"title":"Methods","kind":2048,"children":[892,889,925,917,920,887]}],"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":5,"character":13}],"typeParameter":[{"id":935,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":936,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":937,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":881,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":962,"typeArguments":[{"type":"reflection","declaration":{"id":877,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":9,"character":27}]}},{"type":"reference","id":880,"name":"Ctx"},{"type":"reference","id":881,"name":"Input"},{"type":"reference","id":882,"name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/ConcurrentPipeline","previousId":814,"nextId":943},{"id":943,"name":"Context","kind":128,"kindString":"Class","flags":{},"children":[{"id":944,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":945,"name":"new Context","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":943,"name":"Context"}}]},{"id":946,"name":"clone","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":15,"character":1}],"signatures":[{"id":947,"name":"clone","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a new instance of the current context and shallow clone all properties."},"parameters":[{"id":948,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":943,"name":"Context"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[944]},{"title":"Methods","kind":2048,"children":[946]}],"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":11,"character":13}],"permalink":"/api/pipeline/class/Context","previousId":876,"nextId":949},{"id":949,"name":"Monitor","kind":128,"kindString":"Class","flags":{},"children":[{"id":950,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":951,"name":"new Monitor","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":949,"name":"Monitor"}}]},{"id":952,"name":"onPipelineAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a pipeline class has ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1349,"name":"AnyPipeline"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":953,"name":"onPipelineBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline class is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1349,"name":"AnyPipeline"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":954,"name":"onPipelineRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline\'s work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":24,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1349,"name":"AnyPipeline"},{"type":"reference","id":1351,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":955,"name":"onWorkUnitFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has failed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":30,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1351,"name":"AnyWorkUnit"},{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":956,"name":"onWorkUnitPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has passed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1351,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":957,"name":"onWorkUnitRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1351,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":958,"name":"onWorkUnitSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is skipped."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1351,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":959,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":54,"character":1}],"signatures":[{"id":960,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor events for the provided pipeline, its work units, and all other\\npipelines and work units down the hierarchical tree."},"parameters":[{"id":961,"name":"pipeline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1349,"name":"AnyPipeline"}}],"type":{"type":"reference","id":949,"name":"Monitor"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[950]},{"title":"Properties","kind":1024,"children":[952,953,954,955,956,957,958],"categories":[{"title":"Events","children":[952,953,954,955,956,957,958]}]},{"title":"Methods","kind":2048,"children":[959]}],"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":7,"character":13}],"permalink":"/api/pipeline/class/Monitor","previousId":943,"nextId":962},{"id":962,"name":"ParallelPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":963,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":964,"name":"new ParallelPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":965,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":966,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":966,"name":"Ctx"}],"name":"Context"}},{"id":967,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":968,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":967,"name":"Input"}}],"parameters":[{"id":969,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":966,"name":"Ctx"}},{"id":970,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":967,"name":"Input"}},{"id":971,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":965,"name":"Options"}}],"type":{"type":"reference","id":962,"typeArguments":[{"type":"reference","id":965,"name":"Options"},{"type":"reference","id":966,"name":"Ctx"},{"type":"reference","id":967,"name":"Input"},{"type":"reference","id":968,"name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":990,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":966,"name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":991,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":988,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":989,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":993,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":994,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":967,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":995,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":996,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":967,"name":"Input"},{"type":"reference","id":968,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":967,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1008,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":965,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":992,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":967,"name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1000,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1001,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Pipeline.id"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.id"}},{"id":975,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":976,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":977,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":978,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1324,"typeArguments":[{"type":"reference","id":966,"name":"Ctx"},{"type":"reference","id":967,"name":"Input"},{"type":"reference","id":968,"name":"Output"}],"name":"Action"}},{"id":979,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":962,"typeArguments":[{"type":"reference","id":965,"name":"Options"},{"type":"reference","id":966,"name":"Ctx"},{"type":"reference","id":967,"name":"Input"},{"type":"reference","id":968,"name":"Output"}],"name":"ParallelPipeline"}},{"id":980,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":981,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":982,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":967,"name":"Input"},{"type":"reference","id":968,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":962,"typeArguments":[{"type":"reference","id":965,"name":"Options"},{"type":"reference","id":966,"name":"Ctx"},{"type":"reference","id":967,"name":"Input"},{"type":"reference","id":968,"name":"Output"}],"name":"ParallelPipeline"}}]},{"id":972,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":16,"character":1}],"signatures":[{"id":973,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":974,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1009,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1010,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1011,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":965,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1012,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1013,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1014,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":965,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":965,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":965,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1002,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":1003,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1004,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":967,"name":"Input"},{"type":"reference","id":968,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1005,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1006,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1007,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":949,"name":"Monitor"}}],"type":{"type":"reference","id":962,"typeArguments":[{"type":"reference","id":965,"name":"Options"},{"type":"reference","id":966,"name":"Ctx"},{"type":"reference","id":967,"name":"Input"},{"type":"reference","id":968,"name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":986,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":61,"character":10}],"signatures":[{"id":987,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work unit\'s asynchronously."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[963]},{"title":"Properties","kind":1024,"children":[990,991,988,989,993,994,995,1008,992],"categories":[{"title":"CATEGORY","children":[990,991,988,989,1008,992]},{"title":"Events","children":[993,994,995]}]},{"title":"Accessors","kind":262144,"children":[1000]},{"title":"Methods","kind":2048,"children":[975,972,1009,1002,1005,986]}],"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":9,"character":22}],"typeParameter":[{"id":1015,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1016,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1017,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1018,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":967,"name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":965,"name":"Options"},{"type":"reference","id":966,"name":"Ctx"},{"type":"reference","id":967,"name":"Input"},{"type":"reference","id":968,"name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":814,"name":"AggregatedPipeline"},{"type":"reference","id":876,"name":"ConcurrentPipeline"},{"type":"reference","id":1029,"name":"PooledPipeline"}],"permalink":"/api/pipeline/class/ParallelPipeline","previousId":949,"nextId":1029},{"id":1029,"name":"PooledPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1030,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1031,"name":"new PooledPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1032,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":1032,"name":"Ctx"}],"name":"Context"}},{"id":1033,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1034,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1033,"name":"Input"}}],"parameters":[{"id":1035,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1032,"name":"Ctx"}},{"id":1036,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1033,"name":"Input"}},{"id":1037,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1025,"name":"PooledOptions"}}],"type":{"type":"reference","id":1029,"typeArguments":[{"type":"reference","id":1032,"name":"Ctx"},{"type":"reference","id":1033,"name":"Input"},{"type":"reference","id":1034,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":964,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":963,"name":"ParallelPipeline.constructor"}},{"id":1067,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":1032,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":990,"name":"ParallelPipeline.context"}},{"id":1068,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":991,"name":"ParallelPipeline.debug"}},{"id":1065,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":988,"name":"ParallelPipeline.depth"}},{"id":1066,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":989,"name":"ParallelPipeline.index"}},{"id":1070,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":993,"name":"ParallelPipeline.onAfterRun"}},{"id":1071,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1033,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":994,"name":"ParallelPipeline.onBeforeRun"}},{"id":1072,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1073,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1033,"name":"Input"},{"type":"reference","id":1034,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":1033,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":995,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":1085,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1025,"name":"PooledOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1008,"name":"ParallelPipeline.options"}},{"id":1069,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":1033,"name":"Input"},"inheritedFrom":{"type":"reference","id":992,"name":"ParallelPipeline.value"}},{"id":1077,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1078,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ParallelPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1000,"name":"ParallelPipeline.id"}},{"id":1054,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":1055,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1056,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1057,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1324,"typeArguments":[{"type":"reference","id":1032,"name":"Ctx"},{"type":"reference","id":1033,"name":"Input"},{"type":"reference","id":1034,"name":"Output"}],"name":"Action"}},{"id":1058,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1029,"typeArguments":[{"type":"reference","id":1032,"name":"Ctx"},{"type":"reference","id":1033,"name":"Input"},{"type":"reference","id":1034,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":976,"name":"ParallelPipeline.add"}},{"id":1059,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1060,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1061,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1033,"name":"Input"},{"type":"reference","id":1034,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1029,"typeArguments":[{"type":"reference","id":1032,"name":"Ctx"},{"type":"reference","id":1033,"name":"Input"},{"type":"reference","id":1034,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":980,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":975,"name":"ParallelPipeline.add"}},{"id":1045,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":34,"character":10}],"signatures":[{"id":1046,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1047,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1025,"name":"PooledOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":973,"name":"ParallelPipeline.blueprint"}}],"overwrites":{"type":"reference","id":972,"name":"ParallelPipeline.blueprint"}},{"id":1086,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1087,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1088,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1025,"name":"PooledOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1089,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1090,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1091,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1025,"name":"PooledOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1025,"name":"PooledOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1025,"name":"PooledOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1010,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1009,"name":"ParallelPipeline.configure"}},{"id":1079,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":1080,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1081,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1033,"name":"Input"},{"type":"reference","id":1034,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1003,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1002,"name":"ParallelPipeline.getWorkUnits"}},{"id":1082,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1083,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1084,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":949,"name":"Monitor"}}],"type":{"type":"reference","id":1029,"typeArguments":[{"type":"reference","id":1032,"name":"Ctx"},{"type":"reference","id":1033,"name":"Input"},{"type":"reference","id":1034,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1006,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1005,"name":"ParallelPipeline.monitor"}},{"id":1048,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":49,"character":7}],"signatures":[{"id":1049,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel, in a pool with a max concurrency,\\nwith a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1333,"typeArguments":[{"type":"reference","id":1034,"name":"Output"}],"name":"AggregatedResult"}],"name":"Promise"},"overwrites":{"type":"reference","id":987,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":986,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1030]},{"title":"Properties","kind":1024,"children":[1067,1068,1065,1066,1070,1071,1072,1085,1069],"categories":[{"title":"CATEGORY","children":[1067,1068,1065,1066,1085,1069]},{"title":"Events","children":[1070,1071,1072]}]},{"title":"Accessors","kind":262144,"children":[1077]},{"title":"Methods","kind":2048,"children":[1054,1045,1086,1079,1082,1048]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":23,"character":13}],"typeParameter":[{"id":1092,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1093,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1094,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1033,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":962,"typeArguments":[{"type":"reference","id":1025,"name":"PooledOptions"},{"type":"reference","id":1032,"name":"Ctx"},{"type":"reference","id":1033,"name":"Input"},{"type":"reference","id":1034,"name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/PooledPipeline","previousId":962,"nextId":1100},{"id":1100,"name":"Routine","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1101,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":47,"character":1}],"signatures":[{"id":1102,"name":"new Routine","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1103,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1104,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1106,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1105,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1107,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1108,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1109,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1106,"name":"Options"}}],"type":{"type":"reference","id":1100,"typeArguments":[{"type":"reference","id":1103,"name":"Output"},{"type":"reference","id":1104,"name":"Input"},{"type":"reference","id":1106,"name":"Options"}],"name":"Routine"},"overwrites":{"type":"reference","id":1418,"name":"WorkUnit.constructor"}}],"overwrites":{"type":"reference","id":1417,"name":"WorkUnit.constructor"}},{"id":1110,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":29,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1159,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1425,"name":"WorkUnit.depth"}},{"id":1160,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1426,"name":"WorkUnit.index"}},{"id":1162,"name":"input","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"reference","id":1104,"name":"Input"},"inheritedFrom":{"type":"reference","id":1428,"name":"WorkUnit.input"}},{"id":1111,"name":"key","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":31,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1112,"name":"onCommand","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after `execa` was executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":37,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1113,"name":"onCommandData","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called while a command is being executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":43,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1166,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]},{"type":"reference","id":1104,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1432,"name":"WorkUnit.onFail"}},{"id":1167,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1103,"name":"Output"},{"type":"reference","id":1104,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1433,"name":"WorkUnit.onPass"}},{"id":1168,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1104,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1434,"name":"WorkUnit.onRun"}},{"id":1169,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1104,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1435,"name":"WorkUnit.onSkip"}},{"id":1192,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1106,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1460,"name":"WorkUnit.options"}},{"id":1161,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","id":1103,"name":"Output"},"inheritedFrom":{"type":"reference","id":1427,"name":"WorkUnit.output"}},{"id":1163,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1429,"name":"WorkUnit.startTime"}},{"id":1164,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1430,"name":"WorkUnit.statusText"}},{"id":1165,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":30,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1431,"name":"WorkUnit.stopTime"}},{"id":1170,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":56,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1436,"name":"WorkUnit.title"}},{"id":1171,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":84,"character":5}],"getSignature":[{"id":1172,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WorkUnit.id"}}],"inheritedFrom":{"type":"reference","id":1439,"name":"WorkUnit.id"}},{"id":1199,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1200,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1201,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":1202,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1468,"name":"WorkUnit.blueprint"}}],"inheritedFrom":{"type":"reference","id":1467,"name":"WorkUnit.blueprint"}},{"id":1193,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1194,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1195,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1106,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1196,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1197,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1198,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1106,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1106,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1106,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1462,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1461,"name":"WorkUnit.configure"}},{"id":1120,"name":"createAggregatedPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":103,"character":1}],"signatures":[{"id":1121,"name":"createAggregatedPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `AggregatedPipeline`. This pipeline will execute all work units\\nin parallel without interruption. Returns an object with a list of errors and results\\nonce all resolve."},"typeParameter":[{"id":1122,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":1122,"name":"C"}],"name":"Context"}},{"id":1123,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1124,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1123,"name":"I"}}],"parameters":[{"id":1125,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1122,"name":"C"}},{"id":1126,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1123,"name":"I"}}],"type":{"type":"reference","id":814,"typeArguments":[{"type":"reference","id":1122,"name":"C"},{"type":"reference","id":1123,"name":"I"},{"type":"reference","id":1124,"name":"O"}],"name":"AggregatedPipeline"}}]},{"id":1127,"name":"createConcurrentPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":111,"character":1}],"signatures":[{"id":1128,"name":"createConcurrentPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `ConcurrentPipeline`. This pipeline will execute all work units\\nin parallel. Returns a list of values once all resolve."},"typeParameter":[{"id":1129,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":1129,"name":"C"}],"name":"Context"}},{"id":1130,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1131,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1130,"name":"I"}}],"parameters":[{"id":1132,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1129,"name":"C"}},{"id":1133,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1130,"name":"I"}}],"type":{"type":"reference","id":876,"typeArguments":[{"type":"reference","id":1129,"name":"C"},{"type":"reference","id":1130,"name":"I"},{"type":"reference","id":1131,"name":"O"}],"name":"ConcurrentPipeline"}}]},{"id":1134,"name":"createPooledPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":120,"character":1}],"signatures":[{"id":1135,"name":"createPooledPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `PooledPipeline`. This pipeline will execute a distinct set of work units\\nin parallel without interruption, based on a max concurrency, until all work units have ran.\\nReturns a list of errors and results once all resolve."},"typeParameter":[{"id":1136,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":1136,"name":"C"}],"name":"Context"}},{"id":1137,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1138,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1137,"name":"I"}}],"parameters":[{"id":1139,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1136,"name":"C"}},{"id":1140,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1137,"name":"I"}},{"id":1141,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1025,"name":"PooledOptions"}}],"type":{"type":"reference","id":1029,"typeArguments":[{"type":"reference","id":1136,"name":"C"},{"type":"reference","id":1137,"name":"I"},{"type":"reference","id":1138,"name":"O"}],"name":"PooledPipeline"}}]},{"id":1142,"name":"createWaterfallPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":133,"character":1}],"signatures":[{"id":1143,"name":"createWaterfallPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `WaterfallPipeline`. This pipeline will execute each work unit one by one,\\nwith the return value of the previous being passed to the next. Returns the final value once\\nall resolve."},"typeParameter":[{"id":1144,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":1144,"name":"C"}],"name":"Context"}},{"id":1145,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1146,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1144,"name":"C"}},{"id":1147,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1145,"name":"I"}}],"type":{"type":"reference","id":1353,"typeArguments":[{"type":"reference","id":1144,"name":"C"},{"type":"reference","id":1145,"name":"I"}],"name":"WaterfallPipeline"}}]},{"id":1155,"name":"execute","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":163,"character":10}],"signatures":[{"id":1156,"name":"execute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the current routine and return a new value."},"parameters":[{"id":1157,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1158,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1104,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1103,"name":"Output"}],"name":"Promise"}}]},{"id":1115,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":64,"character":7}],"signatures":[{"id":1116,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a command with the given arguments and pass the results through a promise."},"parameters":[{"id":1117,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1118,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":1119,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Options"},{"type":"reference","id":1095,"name":"ExecuteCommandOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaReturnValue"}],"name":"Promise"}}]},{"id":1173,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":91,"character":1}],"signatures":[{"id":1174,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1442,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1441,"name":"WorkUnit.hasFailed"}},{"id":1175,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":98,"character":1}],"signatures":[{"id":1176,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1444,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1443,"name":"WorkUnit.hasPassed"}},{"id":1177,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":105,"character":1}],"signatures":[{"id":1178,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1446,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1445,"name":"WorkUnit.isComplete"}},{"id":1179,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":112,"character":1}],"signatures":[{"id":1180,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1448,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1447,"name":"WorkUnit.isPending"}},{"id":1181,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":119,"character":1}],"signatures":[{"id":1182,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1450,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1449,"name":"WorkUnit.isRunning"}},{"id":1183,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":126,"character":1}],"signatures":[{"id":1184,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1452,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1451,"name":"WorkUnit.isSkipped"}},{"id":1185,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":133,"character":7}],"signatures":[{"id":1186,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1187,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1188,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1104,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1103,"name":"Output"}],"name":"Promise"},"inheritedFrom":{"type":"reference","id":1454,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1453,"name":"WorkUnit.run"}},{"id":1148,"name":"setMonitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":140,"character":1}],"signatures":[{"id":1149,"name":"setMonitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the monitor to pass to nested pipelines."},"parameters":[{"id":1150,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":949,"name":"Monitor"}}],"type":{"type":"reference","id":1100,"typeArguments":[{"type":"reference","id":1103,"name":"Output"},{"type":"reference","id":1104,"name":"Input"},{"type":"reference","id":1106,"name":"Options"}],"name":"Routine"}}]},{"id":1189,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":175,"character":1}],"signatures":[{"id":1190,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1191,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1100,"typeArguments":[{"type":"reference","id":1103,"name":"Output"},{"type":"reference","id":1104,"name":"Input"},{"type":"reference","id":1106,"name":"Options"}],"name":"Routine"},"inheritedFrom":{"type":"reference","id":1458,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1457,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1101]},{"title":"Properties","kind":1024,"children":[1110,1159,1160,1162,1111,1112,1113,1166,1167,1168,1169,1192,1161,1163,1164,1165,1170],"categories":[{"title":"CATEGORY","children":[1110,1159,1160,1162,1111,1192,1161,1163,1164,1165,1170]},{"title":"Events","children":[1112,1113,1166,1167,1168,1169]}]},{"title":"Accessors","kind":262144,"children":[1171]},{"title":"Methods","kind":2048,"children":[1199,1193,1120,1127,1134,1142,1155,1115,1173,1175,1177,1179,1181,1183,1185,1148,1189]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":24,"character":22}],"typeParameter":[{"id":1203,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1204,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1206,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1205,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":27,"character":26}]}}}],"extendedTypes":[{"type":"reference","id":1416,"typeArguments":[{"type":"reference","id":1106,"name":"Options"},{"type":"reference","id":1104,"name":"Input"},{"type":"reference","id":1103,"name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Routine","previousId":1029,"nextId":1207},{"id":1207,"name":"SerialPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1208,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1209,"name":"new SerialPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1210,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1211,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":1211,"name":"Ctx"}],"name":"Context"}},{"id":1212,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1213,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1212,"name":"Input"}}],"parameters":[{"id":1214,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1211,"name":"Ctx"}},{"id":1215,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1212,"name":"Input"}},{"id":1216,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1210,"name":"Options"}}],"type":{"type":"reference","id":1207,"typeArguments":[{"type":"reference","id":1210,"name":"Options"},{"type":"reference","id":1211,"name":"Ctx"},{"type":"reference","id":1212,"name":"Input"},{"type":"reference","id":1213,"name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":1238,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":1211,"name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":1239,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":1236,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":1237,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":1241,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":1242,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1212,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":1243,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1244,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1212,"name":"Input"},{"type":"reference","id":1213,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":1212,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1253,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1210,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":1217,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1207,"typeArguments":[{"type":"reference","id":1210,"name":"Options"},{"type":"reference","id":1211,"name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"..."},{"id":1240,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":1212,"name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1248,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1249,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Pipeline.id"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.id"}},{"id":1218,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1219,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1220,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1254,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1255,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1256,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1210,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1257,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1258,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1259,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1210,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1210,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1210,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1231,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1232,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1233,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1212,"name":"Input"},{"type":"reference","id":1213,"name":"Output"}],"name":"WorkUnit"}},"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1250,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1251,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1252,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":949,"name":"Monitor"}}],"type":{"type":"reference","id":1207,"typeArguments":[{"type":"reference","id":1210,"name":"Options"},{"type":"reference","id":1211,"name":"Ctx"},{"type":"reference","id":1212,"name":"Input"},{"type":"reference","id":1213,"name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":1221,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1222,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1223,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1224,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1225,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1324,"typeArguments":[{"type":"reference","id":1211,"name":"Ctx"},{"type":"reference","id":1212,"name":"Input"},{"type":"reference","id":1223,"name":"O"}],"name":"Action"}},{"id":1226,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1207,"typeArguments":[{"type":"reference","id":1210,"name":"Options"},{"type":"reference","id":1211,"name":"Ctx"},{"type":"reference","id":1223,"name":"O"},{"type":"reference","id":1223,"name":"O"}],"name":"SerialPipeline"}},{"id":1227,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1228,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1229,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1230,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1212,"name":"Input"},{"type":"reference","id":1228,"name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1207,"typeArguments":[{"type":"reference","id":1210,"name":"Options"},{"type":"reference","id":1211,"name":"Ctx"},{"type":"reference","id":1228,"name":"O"},{"type":"reference","id":1228,"name":"O"}],"name":"SerialPipeline"}}]},{"id":1234,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":73,"character":10}],"signatures":[{"id":1235,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work units synchronously."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1213,"name":"Output"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1208]},{"title":"Properties","kind":1024,"children":[1238,1239,1236,1237,1241,1242,1243,1253,1217,1240],"categories":[{"title":"CATEGORY","children":[1238,1239,1236,1237,1253,1217,1240]},{"title":"Events","children":[1241,1242,1243]}]},{"title":"Accessors","kind":262144,"children":[1248]},{"title":"Methods","kind":2048,"children":[1218,1254,1231,1250,1221,1234]}],"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":8,"character":22}],"typeParameter":[{"id":1260,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1261,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1262,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1263,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1212,"name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1210,"name":"Options"},{"type":"reference","id":1211,"name":"Ctx"},{"type":"reference","id":1212,"name":"Input"},{"type":"reference","id":1213,"name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":1353,"name":"WaterfallPipeline"}],"permalink":"/api/pipeline/class/SerialPipeline","previousId":1100,"nextId":1264},{"id":1264,"name":"Task","kind":128,"kindString":"Class","flags":{},"children":[{"id":1266,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1267,"name":"new Task","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1268,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1269,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1268,"name":"Input"}}],"parameters":[{"id":1270,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1271,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1324,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1268,"name":"Input"},{"type":"reference","id":1269,"name":"Output"}],"name":"Action"}},{"id":1272,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1273,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1264,"typeArguments":[{"type":"reference","id":1268,"name":"Input"},{"type":"reference","id":1269,"name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1418,"name":"WorkUnit.constructor"}}],"inheritedFrom":{"type":"reference","id":1417,"name":"WorkUnit.constructor"}},{"id":1277,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1425,"name":"WorkUnit.depth"}},{"id":1278,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1426,"name":"WorkUnit.index"}},{"id":1280,"name":"input","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"reference","id":1268,"name":"Input"},"inheritedFrom":{"type":"reference","id":1428,"name":"WorkUnit.input"}},{"id":1284,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]},{"type":"reference","id":1268,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1432,"name":"WorkUnit.onFail"}},{"id":1285,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1269,"name":"Output"},{"type":"reference","id":1268,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1433,"name":"WorkUnit.onPass"}},{"id":1286,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1268,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1434,"name":"WorkUnit.onRun"}},{"id":1287,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1268,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1435,"name":"WorkUnit.onSkip"}},{"id":1310,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1311,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1460,"name":"WorkUnit.options"}},{"id":1279,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","id":1269,"name":"Output"},"inheritedFrom":{"type":"reference","id":1427,"name":"WorkUnit.output"}},{"id":1281,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1429,"name":"WorkUnit.startTime"}},{"id":1282,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1430,"name":"WorkUnit.statusText"}},{"id":1283,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":30,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1431,"name":"WorkUnit.stopTime"}},{"id":1288,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":56,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1436,"name":"WorkUnit.title"}},{"id":1289,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":84,"character":5}],"getSignature":[{"id":1290,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WorkUnit.id"}}],"inheritedFrom":{"type":"reference","id":1439,"name":"WorkUnit.id"}},{"id":1274,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":7,"character":1}],"signatures":[{"id":1275,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1276,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","id":1468,"name":"WorkUnit.blueprint"}}],"overwrites":{"type":"reference","id":1467,"name":"WorkUnit.blueprint"}},{"id":1312,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1313,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1314,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1315,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1316,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1317,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1318,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1319,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1320,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1321,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1462,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1461,"name":"WorkUnit.configure"}},{"id":1291,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":91,"character":1}],"signatures":[{"id":1292,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1442,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1441,"name":"WorkUnit.hasFailed"}},{"id":1293,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":98,"character":1}],"signatures":[{"id":1294,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1444,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1443,"name":"WorkUnit.hasPassed"}},{"id":1295,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":105,"character":1}],"signatures":[{"id":1296,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1446,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1445,"name":"WorkUnit.isComplete"}},{"id":1297,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":112,"character":1}],"signatures":[{"id":1298,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1448,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1447,"name":"WorkUnit.isPending"}},{"id":1299,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":119,"character":1}],"signatures":[{"id":1300,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1450,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1449,"name":"WorkUnit.isRunning"}},{"id":1301,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":126,"character":1}],"signatures":[{"id":1302,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1452,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1451,"name":"WorkUnit.isSkipped"}},{"id":1303,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":133,"character":7}],"signatures":[{"id":1304,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1305,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1306,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1268,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1269,"name":"Output"}],"name":"Promise"},"inheritedFrom":{"type":"reference","id":1454,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1453,"name":"WorkUnit.run"}},{"id":1307,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":175,"character":1}],"signatures":[{"id":1308,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1309,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1264,"typeArguments":[{"type":"reference","id":1268,"name":"Input"},{"type":"reference","id":1269,"name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1458,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1457,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1266]},{"title":"Properties","kind":1024,"children":[1277,1278,1280,1284,1285,1286,1287,1310,1279,1281,1282,1283,1288],"categories":[{"title":"CATEGORY","children":[1277,1278,1280,1310,1279,1281,1282,1283,1288]},{"title":"Events","children":[1284,1285,1286,1287]}]},{"title":"Accessors","kind":262144,"children":[1289]},{"title":"Methods","kind":2048,"children":[1274,1312,1291,1293,1295,1297,1299,1301,1303,1307]}],"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":13}],"typeParameter":[{"id":1322,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1323,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1268,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1265,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":68}]}},{"type":"reference","id":1268,"name":"Input"},{"type":"reference","id":1269,"name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Task","previousId":1207,"nextId":1353},{"id":1353,"name":"WaterfallPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1355,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1356,"name":"new WaterfallPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1357,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"typeArguments":[{"type":"reference","id":1357,"name":"Ctx"}],"name":"Context"}},{"id":1358,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1359,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1357,"name":"Ctx"}},{"id":1360,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1358,"name":"Input"}},{"id":1361,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1362,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1353,"typeArguments":[{"type":"reference","id":1357,"name":"Ctx"},{"type":"reference","id":1358,"name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1209,"name":"SerialPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1208,"name":"SerialPipeline.constructor"}},{"id":1387,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":1357,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":1238,"name":"SerialPipeline.context"}},{"id":1388,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1239,"name":"SerialPipeline.debug"}},{"id":1385,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1236,"name":"SerialPipeline.depth"}},{"id":1386,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1237,"name":"SerialPipeline.index"}},{"id":1390,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1241,"name":"SerialPipeline.onAfterRun"}},{"id":1391,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1358,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1242,"name":"SerialPipeline.onBeforeRun"}},{"id":1392,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1393,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1358,"name":"Input"},{"type":"reference","id":1358,"name":"Input"}],"name":"WorkUnit"},{"type":"reference","id":1358,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1243,"name":"SerialPipeline.onRunWorkUnit"}},{"id":1402,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1403,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1253,"name":"SerialPipeline.options"}},{"id":1365,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1207,"typeArguments":[{"type":"reflection","declaration":{"id":1366,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1357,"name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1217,"name":"SerialPipeline.root"}},{"id":1389,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":1358,"name":"Input"},"inheritedFrom":{"type":"reference","id":1240,"name":"SerialPipeline.value"}},{"id":1397,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1398,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"SerialPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1248,"name":"SerialPipeline.id"}},{"id":1367,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1368,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1369,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1219,"name":"SerialPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":1218,"name":"SerialPipeline.blueprint"}},{"id":1404,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1405,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1406,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1407,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1408,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1409,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1410,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1411,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1412,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1413,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1255,"name":"SerialPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1254,"name":"SerialPipeline.configure"}},{"id":1382,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1383,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1384,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1358,"name":"Input"},{"type":"reference","id":1358,"name":"Input"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1232,"name":"SerialPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1231,"name":"SerialPipeline.getWorkUnits"}},{"id":1399,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1400,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1401,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":949,"name":"Monitor"}}],"type":{"type":"reference","id":1353,"typeArguments":[{"type":"reference","id":1357,"name":"Ctx"},{"type":"reference","id":1358,"name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1251,"name":"SerialPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1250,"name":"SerialPipeline.monitor"}},{"id":1370,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1371,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1372,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1373,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1374,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1324,"typeArguments":[{"type":"reference","id":1357,"name":"Ctx"},{"type":"reference","id":1358,"name":"Input"},{"type":"reference","id":1223,"name":"O"}],"name":"Action"}},{"id":1375,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1207,"typeArguments":[{"type":"reflection","declaration":{"id":1376,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1357,"name":"Ctx"},{"type":"reference","id":1223,"name":"O"},{"type":"reference","id":1223,"name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1222,"name":"SerialPipeline.pipe"}},{"id":1377,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1378,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1379,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1380,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1358,"name":"Input"},{"type":"reference","id":1228,"name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1207,"typeArguments":[{"type":"reflection","declaration":{"id":1381,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1357,"name":"Ctx"},{"type":"reference","id":1228,"name":"O"},{"type":"reference","id":1228,"name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1227,"name":"SerialPipeline.pipe"}}],"inheritedFrom":{"type":"reference","id":1221,"name":"SerialPipeline.pipe"}},{"id":1363,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":16,"character":7}],"signatures":[{"id":1364,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the pipeline in sequential order with the output of each\\nwork unit being passed to the next work unit in the chain."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1358,"name":"Input"}],"name":"Promise"},"overwrites":{"type":"reference","id":1235,"name":"SerialPipeline.run"}}],"overwrites":{"type":"reference","id":1234,"name":"SerialPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1355]},{"title":"Properties","kind":1024,"children":[1387,1388,1385,1386,1390,1391,1392,1402,1365,1389],"categories":[{"title":"CATEGORY","children":[1387,1388,1385,1386,1402,1365,1389]},{"title":"Events","children":[1390,1391,1392]}]},{"title":"Accessors","kind":262144,"children":[1397]},{"title":"Methods","kind":2048,"children":[1367,1404,1382,1399,1370,1363]}],"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":7,"character":13}],"typeParameter":[{"id":1414,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1415,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","id":1207,"typeArguments":[{"type":"reflection","declaration":{"id":1354,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":8,"character":1}]}},{"type":"reference","id":1357,"name":"Ctx"},{"type":"reference","id":1358,"name":"Input"}],"name":"SerialPipeline"}],"permalink":"/api/pipeline/class/WaterfallPipeline","previousId":1264,"nextId":1416},{"id":1416,"name":"WorkUnit","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1417,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":65,"character":1}],"signatures":[{"id":1418,"name":"new WorkUnit","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1419,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1420,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1421,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1420,"name":"Input"}}],"parameters":[{"id":1422,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1423,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1324,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1420,"name":"Input"},{"type":"reference","id":1421,"name":"Output"}],"name":"Action"}},{"id":1424,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1419,"name":"Options"}}],"type":{"type":"reference","id":1416,"typeArguments":[{"type":"reference","id":1419,"name":"Options"},{"type":"reference","id":1420,"name":"Input"},{"type":"reference","id":1421,"name":"Output"}],"name":"WorkUnit"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1425,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1338,"name":"Hierarchical.depth"}},{"id":1426,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1340,"name":"Hierarchical.index"}},{"id":1428,"name":"input","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"reference","id":1420,"name":"Input"}},{"id":1432,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]},{"type":"reference","id":1420,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1433,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1421,"name":"Output"},{"type":"reference","id":1420,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1434,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1420,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":1435,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1420,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1460,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1419,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1427,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","id":1421,"name":"Output"}},{"id":1429,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1430,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1431,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":30,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1436,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":56,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1439,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":84,"character":5}],"getSignature":[{"id":1440,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":1339,"name":"Hierarchical.id"}}],"implementationOf":{"type":"reference","id":1339,"name":"Hierarchical.id"}},{"id":1467,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1468,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1469,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":1470,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1461,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1462,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1463,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1419,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1464,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1465,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1466,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1419,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1419,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1419,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1441,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":91,"character":1}],"signatures":[{"id":1442,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1443,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":98,"character":1}],"signatures":[{"id":1444,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1445,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":105,"character":1}],"signatures":[{"id":1446,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1447,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":112,"character":1}],"signatures":[{"id":1448,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1449,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":119,"character":1}],"signatures":[{"id":1450,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1451,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":126,"character":1}],"signatures":[{"id":1452,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1453,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":133,"character":7}],"signatures":[{"id":1454,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1455,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1456,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1420,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1421,"name":"Output"}],"name":"Promise"},"implementationOf":{"type":"reference","id":1343,"name":"Runnable.run"}}],"implementationOf":{"type":"reference","id":1342,"name":"Runnable.run"}},{"id":1457,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":175,"character":1}],"signatures":[{"id":1458,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1459,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1416,"typeArguments":[{"type":"reference","id":1419,"name":"Options"},{"type":"reference","id":1420,"name":"Input"},{"type":"reference","id":1421,"name":"Output"}],"name":"WorkUnit"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1417]},{"title":"Properties","kind":1024,"children":[1425,1426,1428,1432,1433,1434,1435,1460,1427,1429,1430,1431,1436],"categories":[{"title":"CATEGORY","children":[1425,1426,1428,1460,1427,1429,1430,1431,1436]},{"title":"Events","children":[1432,1433,1434,1435]}]},{"title":"Accessors","kind":262144,"children":[1439]},{"title":"Methods","kind":2048,"children":[1467,1461,1441,1443,1445,1447,1449,1451,1453,1457]}],"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":14,"character":22}],"typeParameter":[{"id":1471,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1472,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1473,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1420,"name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1419,"name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":1100,"name":"Routine"},{"type":"reference","id":1264,"name":"Task"}],"implementedTypes":[{"type":"reference","id":1341,"typeArguments":[{"type":"reference","id":1420,"name":"Input"},{"type":"reference","id":1421,"name":"Output"}],"name":"Runnable"},{"type":"reference","id":1337,"name":"Hierarchical"}],"permalink":"/api/pipeline/class/WorkUnit","previousId":1353,"nextId":1333},{"id":1333,"name":"AggregatedResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1334,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of `Errors` that occurred during execution."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":13,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":1335,"name":"results","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of successful execution results."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":1336,"name":"T"}}}],"groups":[{"title":"Properties","kind":1024,"children":[1334,1335]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":11,"character":17}],"typeParameter":[{"id":1336,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/pipeline/interface/AggregatedResult","previousId":1416,"nextId":1095},{"id":1095,"name":"ExecuteCommandOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1099,"name":"workUnit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":21,"character":1}],"type":{"type":"reference","id":1351,"name":"AnyWorkUnit"}},{"id":1096,"name":"wrap","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":20,"character":1}],"signatures":[{"id":1097,"name":"wrap","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1098,"name":"process","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaChildProcess"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[1099]},{"title":"Methods","kind":2048,"children":[1096]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":19,"character":17}],"permalink":"/api/pipeline/interface/ExecuteCommandOptions","previousId":1333,"nextId":1337},{"id":1337,"name":"Hierarchical","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1338,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1339,"name":"id","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique ID of the work unit."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1340,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1338,1339,1340]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":18,"character":17}],"implementedBy":[{"type":"reference","id":1416,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Hierarchical","previousId":1095,"nextId":1025},{"id":1025,"name":"PooledOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1026,"name":"concurrency","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"How many work units to process in parallel."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1027,"name":"filo","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Process with first-in-last-out order, instead of first-in-first-out."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1028,"name":"timeout","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Timeout in milliseconds that each work unit may run, or `0` to avoid a\\ntimeout. Defaults to `0`."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1026,1027,1028]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":13,"character":17}],"permalink":"/api/pipeline/interface/PooledOptions","previousId":1337,"nextId":1341},{"id":1341,"name":"Runnable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1342,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":29,"character":1}],"signatures":[{"id":1343,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Accept an input and produce an output."},"parameters":[{"id":1344,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1345,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1346,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1347,"name":"Output"}],"name":"Promise"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[1342]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":27,"character":17}],"typeParameter":[{"id":1346,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1347,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{}}],"implementedBy":[{"type":"reference","id":1416,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Runnable","previousId":1025,"nextId":1324},{"id":1324,"name":"Action","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":12}],"typeParameter":[{"id":1330,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":943,"name":"Context"}},{"id":1331,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1332,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1331,"name":"Input"}}],"type":{"type":"reflection","declaration":{"id":1325,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":75}],"signatures":[{"id":1326,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1327,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1330,"name":"Ctx"}},{"id":1328,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1331,"name":"Input"}},{"id":1329,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1351,"name":"AnyWorkUnit"}}],"type":{"type":"union","types":[{"type":"reference","id":1332,"name":"Output"},{"type":"reference","typeArguments":[{"type":"reference","id":1332,"name":"Output"}],"name":"Promise"}]}}]}},"permalink":"/api/pipeline#Action","previousId":1341,"nextId":1349},{"id":1349,"name":"AnyPipeline","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1350,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":35}]}},{"type":"reference","id":943,"name":"Context"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"Pipeline"},"permalink":"/api/pipeline#AnyPipeline","previousId":1324,"nextId":1351},{"id":1351,"name":"AnyWorkUnit","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":12}],"type":{"type":"reference","id":1416,"typeArguments":[{"type":"reflection","declaration":{"id":1352,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":35}]}},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"WorkUnit"},"permalink":"/api/pipeline#AnyWorkUnit","previousId":1349,"nextId":1019},{"id":1019,"name":"PipelineErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":11,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/pipeline#PipelineErrorCode","previousId":1351,"nextId":1348},{"id":1348,"name":"Status","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":32,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"failed"},{"type":"literal","value":"passed"},{"type":"literal","value":"pending"},{"type":"literal","value":"running"},{"type":"literal","value":"skipped"}]},"permalink":"/api/pipeline#Status","previousId":1019,"nextId":1020},{"id":1020,"name":"PipelineError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":13,"character":13}],"type":{"type":"reflection","declaration":{"id":1021,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1022,"name":"new PipelineError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1023,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}},{"id":1024,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/pipeline#PipelineError","previousId":1348,"nextId":942},{"id":942,"name":"STATUS_FAILED","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":7,"character":13}],"type":{"type":"reference","id":1348,"name":"Status"},"defaultValue":"\'failed\'","permalink":"/api/pipeline#STATUS_FAILED","previousId":1020,"nextId":941},{"id":941,"name":"STATUS_PASSED","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","id":1348,"name":"Status"},"defaultValue":"\'passed\'","permalink":"/api/pipeline#STATUS_PASSED","previousId":942,"nextId":938},{"id":938,"name":"STATUS_PENDING","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","id":1348,"name":"Status"},"defaultValue":"\'pending\'","permalink":"/api/pipeline#STATUS_PENDING","previousId":941,"nextId":939},{"id":939,"name":"STATUS_RUNNING","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","id":1348,"name":"Status"},"defaultValue":"\'running\'","permalink":"/api/pipeline#STATUS_RUNNING","previousId":938,"nextId":940},{"id":940,"name":"STATUS_SKIPPED","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":5,"character":13}],"type":{"type":"reference","id":1348,"name":"Status"},"defaultValue":"\'skipped\'","permalink":"/api/pipeline#STATUS_SKIPPED","previousId":939}],"groups":[{"title":"Classes","kind":128,"children":[814,876,943,949,962,1029,1100,1207,1264,1353,1416]},{"title":"Interfaces","kind":256,"children":[1333,1095,1337,1025,1341]},{"title":"Type aliases","kind":4194304,"children":[1324,1349,1351,1019,1348]},{"title":"Variables","kind":32,"children":[1020,942,941,938,939,940]}],"sources":[{"fileName":"packages/pipeline/src/index.ts","line":6,"character":0}],"permalink":"/api/pipeline"},"urlSlug":"pipeline"}],"packageName":"@boost/pipeline","packageVersion":"3.2.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":6,"name":"@boost/plugin","kind":2,"kindString":"Module","flags":{},"children":[{"id":1475,"name":"Plugin","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1476,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1477,"name":"new Plugin","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1478,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1480,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1479,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1481,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1480,"name":"Options"}}],"type":{"type":"reference","id":1475,"typeArguments":[{"type":"reference","id":1478,"name":"T"},{"type":"reference","id":1480,"name":"Options"}],"name":"Plugin"},"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1482,"name":"name","kind":1024,"kindString":"Property","flags":{"isAbstract":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":8,"character":10}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":1596,"name":"Pluggable.name"}},{"id":1489,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1480,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1496,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1497,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1498,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":1499,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1490,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1491,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1492,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1480,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1493,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1494,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1495,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1480,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1480,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1480,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1486,"name":"shutdown","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":12,"character":1}],"signatures":[{"id":1487,"name":"shutdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1488,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1478,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.shutdown"}}],"implementationOf":{"type":"reference","id":1598,"name":"Pluggable.shutdown"}},{"id":1483,"name":"startup","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":10,"character":1}],"signatures":[{"id":1484,"name":"startup","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1485,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1478,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.startup"}}],"implementationOf":{"type":"reference","id":1599,"name":"Pluggable.startup"}}],"groups":[{"title":"Constructors","kind":512,"children":[1476]},{"title":"Properties","kind":1024,"children":[1482,1489]},{"title":"Methods","kind":2048,"children":[1496,1490,1486,1483]}],"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":22}],"typeParameter":[{"id":1500,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1502,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1501,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":67}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1480,"name":"Options"}],"name":"Contract"}],"implementedTypes":[{"type":"reference","id":1595,"typeArguments":[{"type":"reference","id":1478,"name":"T"}],"name":"Pluggable"}],"permalink":"/api/plugin/class/Plugin","nextId":1509},{"id":1509,"name":"Registry","kind":128,"kindString":"Class","flags":{},"children":[{"id":1510,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":76,"character":1}],"signatures":[{"id":1511,"name":"new Registry","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1512,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1595,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1512,"name":"Plugin"}],"name":"Pluggable"}},{"id":1513,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1514,"name":"projectName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1515,"name":"typeName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1516,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1618,"typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"RegistryOptions"}}],"type":{"type":"reference","id":1509,"typeArguments":[{"type":"reference","id":1512,"name":"Plugin"},{"type":"reference","id":1513,"name":"Tool"}],"name":"Registry"},"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}},{"id":1517,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":34,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1518,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1512,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1519,"name":"onAfterUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1512,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1520,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is registered and the `startup` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1512,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1521,"name":"onBeforeUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is unregistered and the `shutdown` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":58,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1512,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1522,"name":"onLoad","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is loaded but before it\'s registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":64,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1578,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1618,"typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1523,"name":"pluralName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":66,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1524,"name":"projectName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":68,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1525,"name":"singularName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":70,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1528,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":90,"character":1}],"signatures":[{"id":1529,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1530,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1618,"typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":1579,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1580,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1581,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1618,"typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1582,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1583,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1584,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1618,"typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1618,"typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1618,"typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1531,"name":"formatModuleName","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":107,"character":1}],"signatures":[{"id":1532,"name":"formatModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a name into a fully qualified and compatible Node/npm module name,\\nwith the tool and type names being used as scopes and prefixes."},"parameters":[{"id":1533,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1534,"name":"scoped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1535,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":119,"character":1}],"signatures":[{"id":1536,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a single registered plugin by module name. If the plugin cannot be found,\\nan error will be thrown."},"typeParameter":[{"id":1537,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1595,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1537,"name":"T"}],"name":"Pluggable"},"default":{"type":"reference","id":1512,"name":"Plugin"}}],"parameters":[{"id":1538,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1537,"name":"T"}}]},{"id":1539,"name":"getAll","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":132,"character":1}],"signatures":[{"id":1540,"name":"getAll","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all registered plugins."},"type":{"type":"array","elementType":{"type":"reference","id":1512,"name":"Plugin"}}}]},{"id":1541,"name":"getMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":139,"character":1}],"signatures":[{"id":1542,"name":"getMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return multiple registered plugins by module name."},"parameters":[{"id":1543,"name":"names","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"array","elementType":{"type":"reference","id":1512,"name":"Plugin"}}}]},{"id":1553,"name":"isRegistered","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":215,"character":1}],"signatures":[{"id":1554,"name":"isRegistered","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if a plugin has been registered."},"parameters":[{"id":1555,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1544,"name":"load","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":146,"character":7}],"signatures":[{"id":1545,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register a single plugin by name, or with an explicit instance."},"parameters":[{"id":1546,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":1512,"name":"Plugin"}]}},{"id":1547,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"defaultValue":"{}"},{"id":1548,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1608,"typeArguments":[{"type":"reference","id":1513,"name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"Promise"}}]},{"id":1549,"name":"loadMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":183,"character":7}],"signatures":[{"id":1550,"name":"loadMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register multiple plugins based on a list of settings."},"parameters":[{"id":1551,"name":"settings","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":1601,"name":"Setting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":1512,"name":"Plugin"},{"type":"reference","id":1589,"name":"SourceWithOptions"}]}}]}},{"id":1552,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1608,"typeArguments":[{"type":"reference","id":1513,"name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":1512,"name":"Plugin"}}],"name":"Promise"}}]},{"id":1556,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":228,"character":7}],"signatures":[{"id":1557,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a plugin and trigger startup with the provided tool."},"parameters":[{"id":1558,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1559,"name":"plugin","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1512,"name":"Plugin"}},{"id":1560,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","id":1513,"name":"Tool"}]},"defaultValue":"undefined"},{"id":1561,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1608,"typeArguments":[{"type":"reference","id":1513,"name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"Promise"}}]},{"id":1562,"name":"unregister","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":272,"character":7}],"signatures":[{"id":1563,"name":"unregister","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister a plugin by name and trigger shutdown process."},"parameters":[{"id":1564,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1565,"name":"tool","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1513,"name":"Tool"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1510]},{"title":"Properties","kind":1024,"children":[1517,1518,1519,1520,1521,1522,1578,1523,1524,1525],"categories":[{"title":"CATEGORY","children":[1517,1578,1523,1524,1525]},{"title":"Events","children":[1518,1519,1520,1521,1522]}]},{"title":"Methods","kind":2048,"children":[1528,1579,1531,1535,1539,1541,1553,1544,1549,1556,1562]}],"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":31,"character":13}],"typeParameter":[{"id":1585,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1595,"name":"Pluggable"}},{"id":1586,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1618,"typeArguments":[{"type":"reference","id":1512,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Contract"}],"permalink":"/api/plugin/class/Registry","previousId":1475,"nextId":1595},{"id":1595,"name":"Pluggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1596,"name":"name","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":15,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1597,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Priority in which to order the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1598,"name":"shutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":19,"character":1}],"type":{"type":"reference","id":1590,"typeArguments":[{"type":"reference","id":1600,"name":"T"}],"name":"Callback"}},{"id":1599,"name":"startup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":21,"character":1}],"type":{"type":"reference","id":1590,"typeArguments":[{"type":"reference","id":1600,"name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[1596,1597,1598,1599]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":13,"character":17}],"typeParameter":[{"id":1600,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"any"}}],"implementedBy":[{"type":"reference","id":1475,"name":"Plugin"}],"permalink":"/api/plugin/interface/Pluggable","previousId":1509,"nextId":1608},{"id":1608,"name":"RegisterOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1609,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1610,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"reference","id":1611,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[1609,1610]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":30,"character":17}],"typeParameter":[{"id":1611,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedBy":[{"type":"reference","id":1612,"name":"Registration"}],"permalink":"/api/plugin/interface/RegisterOptions","previousId":1595,"nextId":1612},{"id":1612,"name":"Registration","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1613,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1614,"name":"plugin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Plugin instance or object."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":41,"character":1}],"type":{"type":"reference","id":1617,"name":"T"}},{"id":1615,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":1609,"name":"RegisterOptions.priority"}},{"id":1616,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","id":1610,"name":"RegisterOptions.tool"}}],"groups":[{"title":"Properties","kind":1024,"children":[1613,1614,1615,1616]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":37,"character":17}],"typeParameter":[{"id":1617,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1595,"name":"Pluggable"}}],"extendedTypes":[{"type":"reference","id":1608,"name":"RegisterOptions"}],"permalink":"/api/plugin/interface/Registration","previousId":1608,"nextId":1618},{"id":1618,"name":"RegistryOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1619,"name":"afterShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":46,"character":1}],"type":{"type":"reference","id":1590,"typeArguments":[{"type":"reference","id":1625,"name":"T"}],"name":"Callback"}},{"id":1620,"name":"afterStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":48,"character":1}],"type":{"type":"reference","id":1590,"typeArguments":[{"type":"reference","id":1625,"name":"T"}],"name":"Callback"}},{"id":1621,"name":"beforeShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":50,"character":1}],"type":{"type":"reference","id":1590,"typeArguments":[{"type":"reference","id":1625,"name":"T"}],"name":"Callback"}},{"id":1622,"name":"beforeStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":52,"character":1}],"type":{"type":"reference","id":1590,"typeArguments":[{"type":"reference","id":1625,"name":"T"}],"name":"Callback"}},{"id":1623,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":54,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}},{"id":1624,"name":"validate","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Validate the shape of the plugin being registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":56,"character":1}],"type":{"type":"reference","id":1590,"typeArguments":[{"type":"reference","id":1625,"name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[1619,1620,1621,1622,1623,1624]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":44,"character":17}],"typeParameter":[{"id":1625,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1595,"name":"Pluggable"}}],"permalink":"/api/plugin/interface/RegistryOptions","previousId":1612,"nextId":1590},{"id":1590,"name":"Callback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":12}],"typeParameter":[{"id":1594,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reflection","declaration":{"id":1591,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":36}],"signatures":[{"id":1592,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1593,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1594,"name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/plugin#Callback","previousId":1618,"nextId":1602},{"id":1602,"name":"Factory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":1606,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1595,"name":"Pluggable"}},{"id":1607,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":1603,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":70}],"signatures":[{"id":1604,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1605,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1607,"name":"O"}],"name":"Partial"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1606,"name":"T"}],"name":"Promise"},{"type":"reference","id":1606,"name":"T"}]}}]}},"permalink":"/api/plugin#Factory","previousId":1590,"nextId":1503},{"id":1503,"name":"PluginErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":13,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/plugin#PluginErrorCode","previousId":1602,"nextId":1601},{"id":1601,"name":"Setting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":24,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":1588,"name":"SourceOptions"}],"name":"Record"},"permalink":"/api/plugin#Setting","previousId":1503,"nextId":1587},{"id":1587,"name":"Source","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"FilePath"},{"type":"reference","name":"ModuleID"}]},"permalink":"/api/plugin#Source","previousId":1601,"nextId":1588},{"id":1588,"name":"SourceOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/plugin#SourceOptions","previousId":1587,"nextId":1589},{"id":1589,"name":"SourceWithOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":7,"character":12}],"type":{"type":"tuple","elements":[{"type":"reference","id":1587,"name":"Source"},{"type":"reference","id":1588,"name":"SourceOptions"}]},"permalink":"/api/plugin#SourceWithOptions","previousId":1588,"nextId":1474},{"id":1474,"name":"DEFAULT_PRIORITY","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/plugin/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":100},"defaultValue":"100","permalink":"/api/plugin#DEFAULT_PRIORITY","previousId":1589,"nextId":1504},{"id":1504,"name":"PluginError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":15,"character":13}],"type":{"type":"reflection","declaration":{"id":1505,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1506,"name":"new PluginError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1507,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}},{"id":1508,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/plugin#PluginError","previousId":1474}],"groups":[{"title":"Classes","kind":128,"children":[1475,1509]},{"title":"Interfaces","kind":256,"children":[1595,1608,1612,1618]},{"title":"Type aliases","kind":4194304,"children":[1590,1602,1503,1601,1587,1588,1589]},{"title":"Variables","kind":32,"children":[1474,1504]}],"sources":[{"fileName":"packages/plugin/src/index.ts","line":6,"character":0}],"permalink":"/api/plugin"},"urlSlug":"plugin"}],"packageName":"@boost/plugin","packageVersion":"3.0.2"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":7,"name":"@boost/terminal","kind":2,"kindString":"Module","flags":{},"children":[{"id":1626,"name":"cursor","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":1636,"name":"hide","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Hide the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":13,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorHide"},{"id":1637,"name":"nextLine","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Move cursor to the next line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":16,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorNextLine"},{"id":1638,"name":"position","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Return the current cursur position."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":19,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorGetPosition"},{"id":1639,"name":"prevLine","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Move cursor to the previous line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":22,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorPrevLine"},{"id":1640,"name":"restorePosition","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Restores the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":25,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorRestorePosition"},{"id":1641,"name":"savePosition","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Saves the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":28,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorSavePosition"},{"id":1642,"name":"show","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Show the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":31,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorShow"},{"id":1643,"name":"startLine","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Move cursor to the start of the current line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":34,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorLeft"},{"id":1627,"name":"backward","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":4,"character":13}],"signatures":[{"id":1628,"name":"backward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move backward. Defaults to `1`."},"parameters":[{"id":1629,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1630,"name":"down","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":7,"character":13}],"signatures":[{"id":1631,"name":"down","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move down. Defaults to `1`."},"parameters":[{"id":1632,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1633,"name":"forward","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":10,"character":13}],"signatures":[{"id":1634,"name":"forward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move forward. Defaults to `1`."},"parameters":[{"id":1635,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1644,"name":"to","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":37,"character":13}],"signatures":[{"id":1645,"name":"to","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the relative position of the cursor."},"parameters":[{"id":1646,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1647,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1648,"name":"toAbsolute","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":40,"character":13}],"signatures":[{"id":1649,"name":"toAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the absolute position of the cursor, starting from the top left."},"parameters":[{"id":1650,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1651,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1652,"name":"up","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":43,"character":13}],"signatures":[{"id":1653,"name":"up","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move up. Defaults to `1`."},"parameters":[{"id":1654,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Variables","kind":32,"children":[1636,1637,1638,1639,1640,1641,1642,1643]},{"title":"Functions","kind":64,"children":[1627,1630,1633,1644,1648,1652]}],"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/cursor","previousId":1705,"nextId":1655},{"id":1655,"name":"screen","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":1656,"name":"clear","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Clear the terminal screen."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":5,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.clearScreen"},{"id":1657,"name":"clearTerminal","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1658,"name":"erase","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Erase the screen and move the cursor the top left position."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":11,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.eraseScreen"},{"id":1659,"name":"eraseDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1660,"name":"eraseEndLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1661,"name":"eraseLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1665,"name":"eraseStartLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1666,"name":"eraseUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1667,"name":"scrollDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1668,"name":"scrollUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1662,"name":"eraseLines","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":1663,"name":"eraseLines","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Erase from the current cursor position up the specified amount of rows."},"parameters":[{"id":1664,"name":"count","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Count of rows to erase.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1669,"name":"size","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":38,"character":13}],"signatures":[{"id":1670,"name":"size","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Reliably and accurately get the screen size (in `columns` and `rows`)."},"type":{"type":"reference","name":"terminalSize.Size"}}]}],"groups":[{"title":"Variables","kind":32,"children":[1656,1657,1658,1659,1660,1661,1665,1666,1667,1668]},{"title":"Functions","kind":64,"children":[1662,1669]}],"sources":[{"fileName":"packages/terminal/src/screen.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/screen","previousId":1626,"nextId":1704},{"id":1705,"name":"WrapOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1706,"name":"hard","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":123,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1707,"name":"trim","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1708,"name":"wordWrap","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":125,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[1706,1707,1708]}],"sources":[{"fileName":"packages/terminal/src/text.ts","line":122,"character":17}],"permalink":"/api/terminal/interface/WrapOptions","previousId":1698,"nextId":1626},{"id":1704,"name":"TruncateOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":105,"character":12}],"type":{"type":"reference","name":"cliTruncate.Options"},"permalink":"/api/terminal#TruncateOptions","previousId":1655,"nextId":1703},{"id":1703,"name":"ANSI_REGEX","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Regular expression for matching ANSI escape codes."},"sources":[{"fileName":"packages/terminal/src/text.ts","line":11,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/terminal#ANSI_REGEX","previousId":1704},{"id":1671,"name":"annotate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":23,"character":16}],"signatures":[{"id":1672,"name":"annotate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text with a visual annotation _(iTerm only)_. If a terminal doe\\nnot support annotations, it will pass the text through.","text":"```ts\\nimport { annotate } from \'@boost/terminal\';\\n\\nconst text = annotate(\'fileName.js\', absFilePath);\\n```\\n"},"parameters":[{"id":1673,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1674,"name":"annotation","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/annotate","nextId":1675},{"id":1675,"name":"calculateWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":41,"character":16}],"signatures":[{"id":1676,"name":"calculateWidth","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculate and return the visual width of a string (number of terminal columns required).\\nBased on [string-width](https://www.npmjs.com/package/string-width).","text":"```ts\\nimport { calculateWidth } from \'@boost/terminal\';\\n\\ncalculateWidth(\'\u53e4\'); // 2\\n```\\n"},"parameters":[{"id":1677,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/terminal/function/calculateWidth","previousId":1671,"nextId":1678},{"id":1678,"name":"hasAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":55,"character":16}],"signatures":[{"id":1679,"name":"hasAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if the string contains ANSI escape codes.\\nBased on [ansi-regex](https://www.npmjs.com/package/ansi-regex).","text":"```ts\\nimport { hasAnsi } from \'@boost/terminal\';\\n\\nhasAnsi(\'\\\\u001B[4mTest\\\\u001B[0m\'); // true\\n```\\n"},"parameters":[{"id":1680,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/terminal/function/hasAnsi","previousId":1675,"nextId":1681},{"id":1681,"name":"link","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":69,"character":16}],"signatures":[{"id":1682,"name":"link","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text in an ANSI escape code hyperlink.\\nIf a terminal does not support hyperlinks, it will pass the text through.","text":"```ts\\nimport { link } from \'@boost/terminal\';\\n\\nconst text = link(\'Read the manual\', \'https://boostlib.dev\');\\n```\\n"},"parameters":[{"id":1683,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1684,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/link","previousId":1678,"nextId":1685},{"id":1685,"name":"sliceAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":87,"character":16}],"signatures":[{"id":1686,"name":"sliceAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Slice a string while preserving ANSI escape codes.\\nBased on [slice-ansi](https://www.npmjs.com/package/slice-ansi).","text":"```ts\\nimport { sliceAnsi } from \'@boost/terminal\';\\n\\nconst text = sliceAnsi(aStringThatMayContainAnsi, 15, 25);\\n```\\n"},"parameters":[{"id":1687,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1688,"name":"start","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1689,"name":"end","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/sliceAnsi","previousId":1681,"nextId":1690},{"id":1690,"name":"stripAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":101,"character":16}],"signatures":[{"id":1691,"name":"stripAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Strip all ANSI escape codes from the provided string.\\nBased on [strip-ansi](https://www.npmjs.com/package/strip-ansi).","text":"```ts\\nimport { stripAnsi } from \'@boost/terminal\';\\n\\nconst text = stripAnsi(aStringThatContainsAnsi);\\n```\\n"},"parameters":[{"id":1692,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/stripAnsi","previousId":1685,"nextId":1693},{"id":1693,"name":"truncate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":118,"character":16}],"signatures":[{"id":1694,"name":"truncate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Truncate a string to a desired terminal width while preserving ANSI escape codes,\\nUnicode surrogate pairs, and fullwidth characters.\\nBased on [cli-truncate](https://www.npmjs.com/package/cli-truncate).","text":"```ts\\nimport { truncate } from \'@boost/terminal\';\\n\\nconst text = truncate(aStringThatMayContainAnsi, 10, { position: \'middle\' });\\n```\\n"},"parameters":[{"id":1695,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1696,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1697,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/truncate","previousId":1690,"nextId":1698},{"id":1698,"name":"wrapAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":138,"character":16}],"signatures":[{"id":1699,"name":"wrapAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Wrap a string that contains ANSI escape codes to a desired terminal width.\\nBased on [wrap-ansi](https://www.npmjs.com/package/wrap-ansi).","text":"```ts\\nimport { wrapAnsi } from \'@boost/terminal\';\\n\\nconst text = wrapAnsi(aStringThatContainsAnsi, 20);\\n```\\n"},"parameters":[{"id":1700,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1701,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1702,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1705,"name":"WrapOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/wrapAnsi","previousId":1693,"nextId":1705}],"groups":[{"title":"Functions","kind":64,"children":[1671,1675,1678,1681,1685,1690,1693,1698]},{"title":"Interfaces","kind":256,"children":[1705]},{"title":"Namespaces","kind":4,"children":[1626,1655]},{"title":"Type aliases","kind":4194304,"children":[1704]},{"title":"Variables","kind":32,"children":[1703]}],"sources":[{"fileName":"packages/terminal/src/index.ts","line":6,"character":0}],"permalink":"/api/terminal"},"urlSlug":"terminal"}],"packageName":"@boost/terminal","packageVersion":"3.0.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":8,"name":"@boost/translate","kind":2,"kindString":"Module","flags":{},"children":[{"id":1731,"name":"MessageOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1734,"name":"context","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Context used for special parsing (male, female, etc)."},"sources":[{"fileName":"packages/translate/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1733,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Count used to determine plurals."},"sources":[{"fileName":"packages/translate/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1732,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Default value to return if a translation was not found."},"sources":[{"fileName":"packages/translate/src/types.ts","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1735,"name":"interpolation","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Interpolation options to pass down."},"sources":[{"fileName":"packages/translate/src/types.ts","line":19,"character":1}],"type":{"type":"reference","name":"InterpolationOptions"}},{"id":1736,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Force translation to this locale."},"sources":[{"fileName":"packages/translate/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1737,"name":"postProcess","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Post-processors to run on the translation."},"sources":[{"fileName":"packages/translate/src/types.ts","line":23,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[1734,1733,1732,1735,1736,1737]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":11,"character":17}],"permalink":"/api/translate/interface/MessageOptions","previousId":1709,"nextId":1738},{"id":1738,"name":"Translator","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1739,"name":"direction","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":28,"character":1}],"type":{"type":"reference","id":1727,"name":"Direction"}},{"id":1740,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":29,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1741,"name":"changeLocale","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":30,"character":1}],"signatures":[{"id":1742,"name":"changeLocale","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1743,"name":"locale","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[1739,1740]},{"title":"Methods","kind":2048,"children":[1741]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":26,"character":17}],"signatures":[{"id":1745,"name":"Translator","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1746,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1747,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1730,"name":"InterpolationParams"}},{"id":1748,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1731,"name":"MessageOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/translate/interface/Translator","previousId":1731,"nextId":1714},{"id":1714,"name":"TranslatorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1715,"name":"autoDetect","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Automatically detect the locale from the environment. Defaults to `true`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1716,"name":"debug","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable debugging by logging info to the console."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1717,"name":"fallbackLocale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Fallback locale(s) to use when the detected locale isn\'t translated. Defaults to `en`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":24,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1718,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Locale to explicitly use."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1719,"name":"lookupType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Order in which to load and lookup locale translations."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":28,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"all"},{"type":"literal","value":"currentOnly"},{"type":"literal","value":"languageOnly"}]}},{"id":1720,"name":"resourceFormat","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File format resource bundles are written in. Defaults to `yaml`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":30,"character":1}],"type":{"type":"reference","id":1728,"name":"Format"}}],"groups":[{"title":"Properties","kind":1024,"children":[1715,1716,1717,1718,1719,1720]}],"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":18,"character":17}],"permalink":"/api/translate/interface/TranslatorOptions","previousId":1738,"nextId":1727},{"id":1727,"name":"Direction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"ltr"},{"type":"literal","value":"rtl"}]},"permalink":"/api/translate#Direction","previousId":1714,"nextId":1728},{"id":1728,"name":"Format","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"yaml"}]},"permalink":"/api/translate#Format","previousId":1727,"nextId":1730},{"id":1730,"name":"InterpolationParams","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":9,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/translate#InterpolationParams","previousId":1728,"nextId":1729},{"id":1729,"name":"Locale","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":7,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/translate#Locale","previousId":1730,"nextId":1721},{"id":1721,"name":"TranslateErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/translate#TranslateErrorCode","previousId":1729,"nextId":1722},{"id":1722,"name":"TranslateError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":1723,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1724,"name":"new TranslateError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1725,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}},{"id":1726,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/translate#TranslateError","previousId":1721},{"id":1709,"name":"createTranslator","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":37,"character":16}],"signatures":[{"id":1710,"name":"createTranslator","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Translator` instance with the defined namespace.\\nA list of resource paths are required for locating translation files."},"parameters":[{"id":1711,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1712,"name":"resourcePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"PortablePath"},{"type":"array","elementType":{"type":"reference","name":"PortablePath"}}]}},{"id":1713,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1714,"name":"TranslatorOptions"},"defaultValue":"{}"}],"type":{"type":"reference","id":1738,"name":"Translator"}}],"permalink":"/api/translate/function/createTranslator","nextId":1731}],"groups":[{"title":"Functions","kind":64,"children":[1709]},{"title":"Interfaces","kind":256,"children":[1731,1738,1714]},{"title":"Type aliases","kind":4194304,"children":[1727,1728,1730,1729,1721]},{"title":"Variables","kind":32,"children":[1722]}],"sources":[{"fileName":"packages/translate/src/index.ts","line":6,"character":0}],"permalink":"/api/translate"},"urlSlug":"translate"}],"packageName":"@boost/translate","packageVersion":"3.0.1"}]')}}]);