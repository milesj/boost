(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[122],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,m=d["".concat(s,".").concat(p)]||d[p]||g[p]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},517:function(e,t,n){"use strict";var a=n(7378);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},4535:function(e,t,n){"use strict";n.d(t,{Z:function(){return g}});var a=n(7378),r=n(4956);var i=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=n(8944),l="tabItem_c0e5",s="tabItemActive_28AG";var u=37,c=39;var g=function(e){var t=e.lazy,n=e.block,r=e.defaultValue,g=e.values,d=e.groupId,p=e.className,m=i(),b=m.tabGroupChoices,f=m.setTabGroupChoices,h=(0,a.useState)(r),v=h[0],k=h[1],y=a.Children.toArray(e.children),N=[];if(null!=d){var w=b[d];null!=w&&w!==v&&g.some((function(e){return e.value===w}))&&k(w)}var E=function(e){var t=e.currentTarget,n=N.indexOf(t),a=g[n].value;k(a),null!=d&&(f(d,a),setTimeout((function(){var e,n,a,r,i,o,l,u;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,i=e.right,o=window,l=o.innerHeight,u=o.innerWidth,n>=0&&i<=u&&r<=l&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},O=function(e){var t,n;switch(e.keyCode){case c:var a=N.indexOf(e.target)+1;n=N[a]||N[0];break;case u:var r=N.indexOf(e.target)-1;n=N[r]||N[N.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},p)},g.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,className:(0,o.Z)("tabs__item",l,{"tabs__item--active":v===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:O,onFocus:E,onClick:E},n)}))),t?(0,a.cloneElement)(y.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},y.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}},4956:function(e,t,n){"use strict";var a=(0,n(7378).createContext)(void 0);t.Z=a},297:function(e,t,n){"use strict";n.d(t,{Z:function(){return r}});var a=n(7378);function r(e){var t=e.children,n=e.type;return a.createElement("span",{className:"badge badge--"+n},t)}},7586:function(e,t,n){"use strict";n.d(t,{Z:function(){return l}});var a=n(7378),r=n(297),i="badgeGroup_2HOO";function o(e){var t=e.children;return a.createElement("span",{className:i},t)}function l(e){var t=e.backend,n=e.frontend,i=e.tooling;return a.createElement(o,null,t&&a.createElement(r.Z,{type:"warning"},"Backend"),n&&a.createElement(r.Z,{type:"success"},"Frontend"),i&&a.createElement(r.Z,{type:"primary"},"Tooling"))}},7608:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return g},metadata:function(){return d},toc:function(){return p},default:function(){return b}});var a=n(9603),r=n(120),i=(n(7378),n(5318)),o=n(7586),l=n(4535),s=n(517),u=["components"],c={title:"Debugging"},g=void 0,d={unversionedId:"debug",id:"debug",isDocsHomePage:!1,title:"Debugging",description:"Lightweight debugging. Wraps the amazing debug library to",source:"@site/docs/debug.mdx",sourceDirName:".",slug:"/debug",permalink:"/docs/debug",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/debug.mdx",version:"current",frontMatter:{title:"Debugging"},sidebar:"docs",previous:{title:"Crash reporting",permalink:"/docs/crash"},next:{title:"Decorators",permalink:"/docs/decorators"}},p=[{value:"Installation",id:"installation",children:[]},{value:"Environment variables",id:"environment-variables",children:[]},{value:"Debugging",id:"debugging",children:[{value:"Invariant messages",id:"invariant-messages",children:[]},{value:"Verbose output",id:"verbose-output",children:[]},{value:"Silencing output",id:"silencing-output",children:[]}]},{value:"Test utilities",id:"test-utilities",children:[{value:"<code>mockDebugger</code>",id:"mockdebugger",children:[]}]}],m={toc:p};function b(e){var t=e.components,n=(0,r.Z)(e,u);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{backend:!0,tooling:!0,mdxType:"EnvBadges"}),(0,i.kt)("p",null,"Lightweight debugging. Wraps the amazing ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/debug"},"debug")," library to\nprovide additional functionality."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/debug\n"))),(0,i.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/debug\n")))),(0,i.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BOOSTJS_DEBUG_NAMESPACE")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") - A prefix for all debugger namespaces when created with\n",(0,i.kt)("inlineCode",{parentName:"li"},"createDebugger()"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BOOSTJS_DEBUG_VERBOSE")," (",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),") - Print verbose messages logged from ",(0,i.kt)("inlineCode",{parentName:"li"},"debugger.verbose()"),",\notherwise they are hidden.")),(0,i.kt)("h2",{id:"debugging"},"Debugging"),(0,i.kt)("p",null,"Like ",(0,i.kt)("a",{parentName:"p",href:"/docs/log"},"logging"),', a "debugger" is a collection of functions that write to ',(0,i.kt)("inlineCode",{parentName:"p"},"process.stderr"),".\nThe key difference is that debug messages are only displayed if the ",(0,i.kt)("inlineCode",{parentName:"p"},"DEBUG")," environment variable is\nset and contains the debugger's namespace (logic provided by the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/debug"},"debug")," package). The namespace can be defined when\ninstantiating a debugger using ",(0,i.kt)("inlineCode",{parentName:"p"},"createDebugger"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createDebugger } from '@boost/debug';\n\nconst debug = createDebugger('boost');\n\nprocess.env.DEBUG = 'boost:*';\n\ndebug('Something is broken!');\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A namespace can either be a string or an array of strings.")),(0,i.kt)("p",null,"Each debug function that logs (excluding invariants) requires a message string as the 1st argument,\nand an optional rest of arguments to interpolate into the message using\n",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/api/util.html#util_util_format_format_args"},"util.format()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"debug('Name: %s %s', user.first_name, user.last_name);\ndebug('Object: %O', data);\n")),(0,i.kt)("h3",{id:"invariant-messages"},"Invariant messages"),(0,i.kt)("p",null,"Invariant debugging logs either a success or a failure message, depending on the truthy evaluation\nof a condition. This can be achieved with\n",(0,i.kt)("inlineCode",{parentName:"p"},"debugger.invariant(condition: boolean, message: string, pass: string, fail: string)"),", which\nrequires the condition to evaluate, a message to always display, and a success and failure message."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"debug.invariant(fs.existsSync(filePath), 'Does file exist?', 'Yes!', 'No');\n")),(0,i.kt)("h3",{id:"verbose-output"},"Verbose output"),(0,i.kt)("p",null,"Debug messages are already hidden behind the ",(0,i.kt)("inlineCode",{parentName:"p"},"DEBUG")," environment variable, but Boost takes it a step\nfurther to support verbose debugging. Messages logged with\n",(0,i.kt)("inlineCode",{parentName:"p"},"debugger.verbose(message: string, ...args: any[])")," will not be displayed unless the\n",(0,i.kt)("inlineCode",{parentName:"p"},"BOOSTJS_DEBUG_VERBOSE")," environment variable is set -- even if ",(0,i.kt)("inlineCode",{parentName:"p"},"DEBUG")," is set."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Will not write!\ndebug.verbose('We need extra information');\n\nprocess.env.BOOSTJS_DEBUG_VERBOSE = 'true';\n\n// Will write!\ndebug.verbose('We need extra information (again)');\n")),(0,i.kt)("h3",{id:"silencing-output"},"Silencing output"),(0,i.kt)("p",null,"By default, all logged messages are immediately written when ",(0,i.kt)("inlineCode",{parentName:"p"},"DEBUG")," contains the debugger\nnamespace. To silence output for a specific debugger, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"debugger.disable()")," function, and to\nre-enable, call ",(0,i.kt)("inlineCode",{parentName:"p"},"debugger.enable()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"debug.disable();\n\n// Will not write!\ndebug('Something is broken!');\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Messages that are logged while silenced are ",(0,i.kt)("em",{parentName:"p"},"lost")," and are ",(0,i.kt)("em",{parentName:"p"},"not")," buffered.")),(0,i.kt)("h2",{id:"test-utilities"},"Test utilities"),(0,i.kt)("p",null,"The following ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest"},"Jest")," utilities are available in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"@boost/debug/test")," module."),(0,i.kt)("h3",{id:"mockdebugger"},(0,i.kt)("inlineCode",{parentName:"h3"},"mockDebugger")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"mockDebugger(): Debugger")),(0,i.kt)("p",null,"Returns a Jest spy that matches the return value shape of ",(0,i.kt)("inlineCode",{parentName:"p"},"createDebugger"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { mockDebugger } from '@boost/debug/test';\n\nit('calls the debugger', () => {\n    const debug = mockDebugger();\n\n    debug('Something is broken!');\n\n    expect(debug).toHaveBeenCalled();\n});\n")))}b.isMDXComponent=!0},8944:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);