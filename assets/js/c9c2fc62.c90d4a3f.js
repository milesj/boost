(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[782],{5318:function(e,t,a){"use strict";a.d(t,{Zo:function(){return i},kt:function(){return d}});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},i=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),u=l(a),d=r,m=u["".concat(s,".").concat(d)]||u[d]||k[d]||o;return a?n.createElement(m,c(c({ref:t},i),{},{components:a})):n.createElement(m,c({ref:t},i))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,c[1]=p;for(var l=2;l<o;l++)c[l]=a[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6965:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return i},default:function(){return u}});var n=a(9603),r=a(120),o=(a(7378),a(5318)),c=["components"],p={title:"Project"},s=void 0,l={unversionedId:"common/project",id:"common/project",isDocsHomePage:!1,title:"Project",description:"A Project class provides workspace and package metadata for a project. A project is denoted by a",source:"@site/docs/common/project.md",sourceDirName:"common",slug:"/common/project",permalink:"/docs/common/project",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/common/project.md",version:"current",frontMatter:{title:"Project"},sidebar:"docs",previous:{title:"PathResolver",permalink:"/docs/common/path-resolver"},next:{title:"Configuration",permalink:"/docs/config"}},i=[{value:"Workspaces",id:"workspaces",children:[]},{value:"API",id:"api",children:[{value:"<code>getPackage</code>",id:"getpackage",children:[]},{value:"<code>getWorkspaceGlobs</code>",id:"getworkspaceglobs",children:[]},{value:"<code>getWorkspacePackages</code>",id:"getworkspacepackages",children:[]},{value:"<code>getWorkspacePackagePaths</code>",id:"getworkspacepackagepaths",children:[]}]}],k={toc:i};function u(e){var t=e.components,a=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Project")," class provides workspace and package metadata for a project. A project is denoted by a\nroot ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file and abides the NPM and Node.js module pattern. To begin, import and\ninstantiate the ",(0,o.kt)("inlineCode",{parentName:"p"},"Project")," class with a path to the project's root."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Project } from '@boost/common';\n\nconst project = new Project();\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Root defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"process.cwd()")," if not provided.")),(0,o.kt)("h2",{id:"workspaces"},"Workspaces"),(0,o.kt)("p",null,"The primary feature of this class is to extract metadata about a project's workspaces. Workspaces\nare used to support multi-package architectures known as monorepos, typically through\n",(0,o.kt)("a",{parentName:"p",href:"https://yarnpkg.com/features/workspaces"},"Yarn"),", ",(0,o.kt)("a",{parentName:"p",href:"https://pnpm.js.org/en/pnpm-workspace_yaml"},"PNPM"),",\nor ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/lerna/lerna#lernajson"},"Lerna"),". In Boost, our implementation of workspaces\naligns with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Project")," - Typically a repository with a root ",(0,o.kt)("inlineCode",{parentName:"li"},"package.json"),". Can either be a collection of\npackages, or a package itself."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Package")," - A folder with a ",(0,o.kt)("inlineCode",{parentName:"li"},"package.json")," file that represents an NPM package. Contains source\nand test files specific to the package."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Workspace")," - A folder that houses one or many packages.")),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"getpackage"},(0,o.kt)("inlineCode",{parentName:"h3"},"getPackage")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Project#getPackage<T extends PackageStructure",">","(): T")),(0,o.kt)("p",null,"Return the contents of the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," found in the defined root path."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const pkg = project.getPackage();\n")),(0,o.kt)("h3",{id:"getworkspaceglobs"},(0,o.kt)("inlineCode",{parentName:"h3"},"getWorkspaceGlobs")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Project#getWorkspaceGlobs(options?: ProjectSearchOptions): FilePath[]")),(0,o.kt)("p",null,"Returns a list of all workspaces globs as they are defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," (under ",(0,o.kt)("inlineCode",{parentName:"p"},"workspaces"),"),\n",(0,o.kt)("inlineCode",{parentName:"p"},"lerna.json")," (under ",(0,o.kt)("inlineCode",{parentName:"p"},"packages"),"), or ",(0,o.kt)("inlineCode",{parentName:"p"},"pnpm-workspace.yaml")," (under ",(0,o.kt)("inlineCode",{parentName:"p"},"packages"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const globs = project.getWorkspaceGlobs(); // => ['packages/*']\n")),(0,o.kt)("h3",{id:"getworkspacepackages"},(0,o.kt)("inlineCode",{parentName:"h3"},"getWorkspacePackages")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Project#getWorkspacePackages<T extends PackageStructure",">","(): WorkspacePackage<T",">","[]")),(0,o.kt)("p",null,"Return all ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"s from all workspace packages. Once loaded, append workspace path metadata."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const pkgs = project.getWorkspacePackages();\n")),(0,o.kt)("h3",{id:"getworkspacepackagepaths"},(0,o.kt)("inlineCode",{parentName:"h3"},"getWorkspacePackagePaths")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Project#getWorkspacePackagePaths(options?: ProjectSearchOptions): FilePath[]")),(0,o.kt)("p",null,"Returns a list of file system paths for all workspaces packages."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const paths = project.getWorkspacePackagePaths(); // => ['packages/foo', 'packages/bar']\n")))}u.isMDXComponent=!0}}]);