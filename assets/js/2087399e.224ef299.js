"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5096],{8120:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var i=o(1948),n=o(3460);const t={title:"5.0 migration",sidebar_label:"5.0"},l=void 0,r={id:"migrate/5.0",title:"5.0 migration",description:"Because boost is relatively stable (there has been no changes in months), this release is all about",source:"@site/docs/migrate/5.0.md",sourceDirName:"migrate",slug:"/migrate/5.0",permalink:"/docs/migrate/5.0",draft:!1,unlisted:!1,editUrl:"https://github.com/milesj/boost/edit/master/website/docs/migrate/5.0.md",tags:[],version:"current",frontMatter:{title:"5.0 migration",sidebar_label:"5.0"},sidebar:"docs",previous:{title:"4.0",permalink:"/docs/migrate/4.0"}},d={},c=[{value:"All packages",id:"all-packages",level:2},{value:"Migrated to ECMAScript modules (<code>.mjs</code>)",id:"migrated-to-ecmascript-modules-mjs",level:3},{value:"Package test utilities are now async",id:"package-test-utilities-are-now-async",level:3},{value:"@boost/common",id:"boostcommon",level:2},{value:"@boost/config",id:"boostconfig",level:2},{value:"@boost/cli",id:"boostcli",level:2},{value:"@boost/module",id:"boostmodule",level:2},{value:"@boost/plugin",id:"boostplugin",level:2},{value:"@boost/test-utils",id:"boosttest-utils",level:2},{value:"@boost/translate",id:"boosttranslate",level:2}];function a(e){const s={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,n.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"Because boost is relatively stable (there has been no changes in months), this release is all about\nmigrating to ESM, and updating dependencies."}),"\n",(0,i.jsx)(s.h2,{id:"all-packages",children:"All packages"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Requires TypeScript v5 or greater."}),"\n",(0,i.jsx)(s.li,{children:"Dropped Node.js v16 support. Now requires v18.12 and above."}),"\n",(0,i.jsx)(s.li,{children:"Updated many dependencies to their latest major version."}),"\n",(0,i.jsx)(s.li,{children:"Migrated all test utilities from Jest to Vitest."}),"\n"]}),"\n",(0,i.jsxs)(s.h3,{id:"migrated-to-ecmascript-modules-mjs",children:["Migrated to ECMAScript modules (",(0,i.jsx)(s.code,{children:".mjs"}),")"]}),"\n",(0,i.jsxs)(s.p,{children:["We have finished our migration to modules, and all packages are now purely ESM, as we ship ",(0,i.jsx)(s.code,{children:".mjs"}),"\nfiles and utilize module-based ",(0,i.jsx)(s.code,{children:"exports"}),". The only exception to this is ",(0,i.jsx)(s.code,{children:"@boost/module"}),", which still\nships some ",(0,i.jsx)(s.code,{children:".cjs"})," files to support ",(0,i.jsx)(s.code,{children:"require()"})," augmentation."]}),"\n",(0,i.jsx)(s.p,{children:"With the migration to ESM, we also see the following benefits:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Increased performance and reduced memory usage."}),"\n",(0,i.jsx)(s.li,{children:"Packages are now easily tree-shakeable."}),"\n",(0,i.jsx)(s.li,{children:"They utilize more modern features and syntax."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"package-test-utilities-are-now-async",children:"Package test utilities are now async"}),"\n",(0,i.jsxs)(s.p,{children:["Some test utilities in the ",(0,i.jsx)(s.code,{children:"/test"})," entry point for individual packages have been updated to be\nasync. This includes functions like ",(0,i.jsx)(s.code,{children:"mockDebugger"})," and ",(0,i.jsx)(s.code,{children:"mockLogger"}),". This change was made to support\nthe new Vitest testing framework."]}),"\n",(0,i.jsx)(s.h2,{id:"boostcommon",children:"@boost/common"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Migrated from ",(0,i.jsx)(s.code,{children:"resolve"})," to ",(0,i.jsx)(s.code,{children:"enhanced-resolve"})," for ",(0,i.jsx)(s.code,{children:"PathResolver"}),". This is to support\n",(0,i.jsx)(s.code,{children:"package.json"})," exports. We currently support the ",(0,i.jsx)(s.code,{children:"import"}),", ",(0,i.jsx)(s.code,{children:"require"}),", and ",(0,i.jsx)(s.code,{children:"node"})," conditions."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"boostconfig",children:"@boost/config"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Loading of ",(0,i.jsx)(s.code,{children:".js"}),", ",(0,i.jsx)(s.code,{children:".cjs"}),", and ",(0,i.jsx)(s.code,{children:".mjs"})," files now utilizes dynamic ",(0,i.jsx)(s.code,{children:"import()"})," instead of ",(0,i.jsx)(s.code,{children:"require()"}),".\nThe configuration must also be the default export."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"boostcli",children:"@boost/cli"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Upgraded to and now requires React v18."}),"\n",(0,i.jsx)(s.li,{children:"Upgraded to and now requires Ink v4. Now uses a WASM based Yoga engine."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"boostmodule",children:"@boost/module"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Migrate to the new Node.js hooks API, from the old loader API. Because of this, imports were\nchanged:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"@boost/module/loader.mjs"})," -> ",(0,i.jsx)(s.code,{children:"@boost/module/register"})," (registers all hooks)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"@boost/module/loader/typescript.mjs"})," -> ",(0,i.jsx)(s.code,{children:"@boost/module/hook-typescript"})," (the TypeScript hook\nitself)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"boostplugin",children:"@boost/plugin"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Updated the ",(0,i.jsx)(s.code,{children:"Loader"})," to use dynamic ",(0,i.jsx)(s.code,{children:"import()"})," for loading modules, instead of our ",(0,i.jsx)(s.code,{children:"requireModule"}),"\nfunction from ",(0,i.jsx)(s.code,{children:"@boost/module"}),". This is to support both CJS and ESM files."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"boosttest-utils",children:"@boost/test-utils"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Migrated from Jest to Vitest."}),"\n",(0,i.jsxs)(s.li,{children:["Removed the ",(0,i.jsx)(s.code,{children:"copyFixtureToMock"})," function."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"boosttranslate",children:"@boost/translate"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Updated ",(0,i.jsx)(s.code,{children:"createTranslator"})," to be async."]}),"\n",(0,i.jsxs)(s.li,{children:["Added support for ",(0,i.jsx)(s.code,{children:".cjs"})," and ",(0,i.jsx)(s.code,{children:".mjs"})," files for translation resources."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,n.M)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},3460:(e,s,o)=>{o.d(s,{I:()=>r,M:()=>l});var i=o(6952);const n={},t=i.createContext(n);function l(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);