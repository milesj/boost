"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5232],{384:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var o=s(1948),n=s(3460);const i={title:"4.0 migration",sidebar_label:"4.0"},r=void 0,d={id:"migrate/4.0",title:"4.0 migration",description:"This is a rather simple release, as the APIs themselves are relatively stable. The biggest changes",source:"@site/docs/migrate/4.0.md",sourceDirName:"migrate",slug:"/migrate/4.0",permalink:"/docs/migrate/4.0",draft:!1,unlisted:!1,editUrl:"https://github.com/milesj/boost/edit/master/website/docs/migrate/4.0.md",tags:[],version:"current",frontMatter:{title:"4.0 migration",sidebar_label:"4.0"},sidebar:"docs",previous:{title:"3.0",permalink:"/docs/migrate/3.0"},next:{title:"5.0",permalink:"/docs/migrate/5.0"}},l={},a=[{value:"All packages",id:"all-packages",level:2},{value:"Migrated to CommonJS (<code>.cjs</code>)",id:"migrated-to-commonjs-cjs",level:3},{value:"Migrated to Node.js <code>exports</code>",id:"migrated-to-nodejs-exports",level:3},{value:"@boost/module",id:"boostmodule",level:2},{value:"Updated ESM loader paths",id:"updated-esm-loader-paths",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,n.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["This is a rather simple release, as the APIs themselves are relatively stable. The biggest changes\nare migrating to ",(0,o.jsx)(t.code,{children:".cjs"})," and utilizing Node.js package ",(0,o.jsx)(t.code,{children:"exports"}),", both in preparation for migrating\nto ECMAScript modules (",(0,o.jsx)(t.code,{children:".mjs"}),")."]}),"\n",(0,o.jsx)(t.h2,{id:"all-packages",children:"All packages"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Requires TypeScript v4.7 or greater."}),"\n",(0,o.jsx)(t.li,{children:"Dropped Node.js v12 support. Now requires v14.15 and above."}),"\n",(0,o.jsx)(t.li,{children:"Updated many dependencies to their latest major version."}),"\n"]}),"\n",(0,o.jsxs)(t.h3,{id:"migrated-to-commonjs-cjs",children:["Migrated to CommonJS (",(0,o.jsx)(t.code,{children:".cjs"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:["With the help of ",(0,o.jsx)(t.a,{href:"https://packemon.dev/",children:"Packemon"}),", all packages are now shipped as CommonJS\n(",(0,o.jsx)(t.code,{children:".cjs"}),"). This change is an initial step before migrating entirely to ECMAScript modules (which may\nbe the next major version), as it unlocked the ability to also ship\n",(0,o.jsxs)(t.a,{href:"https://packemon.dev/docs/features#automatic-mjs-wrappers-for-cjs-inputs",children:[(0,o.jsx)(t.code,{children:".mjs"})," wrappers for our package entry points"]}),".\nWithout this wrapper, named/default imports would ",(0,o.jsx)(t.em,{children:"not"})," work correctly within ",(0,o.jsx)(t.code,{children:".mjs"})," files."]}),"\n",(0,o.jsx)(t.p,{children:"We don't expect this change to cause issues, but we wanted to document it incase you happen to run\ninto weird module problems!"}),"\n",(0,o.jsxs)(t.h3,{id:"migrated-to-nodejs-exports",children:["Migrated to Node.js ",(0,o.jsx)(t.code,{children:"exports"})]}),"\n",(0,o.jsxs)(t.p,{children:["All packages now utilize the new ",(0,o.jsx)(t.code,{children:"package.json"}),"\n",(0,o.jsxs)(t.a,{href:"https://nodejs.org/api/packages.html#package-entry-points",children:[(0,o.jsx)(t.code,{children:"exports"})," feature"]}),". For the most part,\nif you're importing from Boost modules using the package index, then this shouldn't affect you.\nHowever, if you're importing subpaths from Boost modules, like ",(0,o.jsx)(t.code,{children:"@boost/common/test"})," or\n",(0,o.jsx)(t.code,{children:"@boost/cli/react"}),", then these may no longer work depending on the tooling you're using. The\nfollowing minimum versions of popular tools must now be used:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Jest v28"}),"\n",(0,o.jsx)(t.li,{children:"TypeScript v4.7"}),"\n",(0,o.jsx)(t.li,{children:"Webpack v5"}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Another side effect of this change is that our internal files (those in ",(0,o.jsx)(t.code,{children:"lib/"})," or ",(0,o.jsx)(t.code,{children:"cjs/"}),") can no\nlonger be directly imported!"]}),"\n",(0,o.jsx)(t.h2,{id:"boostmodule",children:"@boost/module"}),"\n",(0,o.jsx)(t.h3,{id:"updated-esm-loader-paths",children:"Updated ESM loader paths"}),"\n",(0,o.jsxs)(t.p,{children:["Because of our move to ",(0,o.jsx)(t.a,{href:"#migrated-to-nodejs-exports",children:(0,o.jsx)(t.code,{children:"exports"})}),", the paths to our ESM loader files\nhave changed to the following:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"@boost/module/loader.mjs"})," -> ",(0,o.jsx)(t.code,{children:"@boost/module/loader"})]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"@boost/module/loader/typescript.mjs"})," -> ",(0,o.jsx)(t.code,{children:"@boost/module/loader-typescript"})]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.M)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},3460:(e,t,s)=>{s.d(t,{I:()=>d,M:()=>r});var o=s(6952);const n={},i=o.createContext(n);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);