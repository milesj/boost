(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[709],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var l=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=l.createContext({}),s=function(e){var t=l.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return l.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,k=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?l.createElement(k,r(r({ref:t},u),{},{components:n})):l.createElement(k,r({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4035:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var l=n(9603),a=n(120),i=(n(7378),n(5318)),r=["components"],o={title:"Prompts"},p=void 0,s={unversionedId:"cli/prompts",id:"cli/prompts",isDocsHomePage:!1,title:"Prompts",description:"Prompts are specialized React components for handling process.stdin input.",source:"@site/docs/cli/prompts.md",sourceDirName:"cli",slug:"/cli/prompts",permalink:"/docs/cli/prompts",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/cli/prompts.md",version:"current",frontMatter:{title:"Prompts"},sidebar:"docs",previous:{title:"Components",permalink:"/docs/cli/components"},next:{title:"Testing",permalink:"/docs/cli/testing"}},u=[{value:"<code>Confirm</code>",id:"confirm",children:[{value:"Props",id:"props",children:[]}]},{value:"<code>HiddenInput</code>",id:"hiddeninput",children:[{value:"Props",id:"props-1",children:[]},{value:"Controls",id:"controls",children:[]}]},{value:"<code>Input</code>",id:"input",children:[{value:"Props",id:"props-2",children:[]},{value:"Controls",id:"controls-1",children:[]}]},{value:"<code>MultiSelect</code>",id:"multiselect",children:[{value:"Props",id:"props-3",children:[]},{value:"Controls",id:"controls-2",children:[]}]},{value:"<code>PasswordInput</code>",id:"passwordinput",children:[{value:"Props",id:"props-4",children:[]},{value:"Controls",id:"controls-3",children:[]}]},{value:"<code>Select</code>",id:"select",children:[{value:"Props",id:"props-5",children:[]},{value:"Controls",id:"controls-4",children:[]}]},{value:"Non-React",id:"non-react",children:[]}],d={toc:u};function c(e){var t=e.components,o=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,l.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Prompts are specialized ",(0,i.kt)("a",{parentName:"p",href:"/docs/cli/components"},"React components")," for handling ",(0,i.kt)("inlineCode",{parentName:"p"},"process.stdin")," input."),(0,i.kt)("p",null,"All prompt components share most of the following props."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label")," (",(0,i.kt)("inlineCode",{parentName:"li"},"React.ReactNode"),") - Label to display before or above the prompt itself. ",(0,i.kt)("em",{parentName:"li"},"(Required)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefix")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") - Single character symbol to display before the label. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"?"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onSubmit")," (",(0,i.kt)("inlineCode",{parentName:"li"},"(value: T) => void"),") - Callback triggered when the value is submitted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validate")," (",(0,i.kt)("inlineCode",{parentName:"li"},"(value: T) => void"),") - Function to validate the value on submit. To trigger a failed\nstate, thrown an ",(0,i.kt)("inlineCode",{parentName:"li"},"Error"),".")),(0,i.kt)("h2",{id:"confirm"},(0,i.kt)("inlineCode",{parentName:"h2"},"Confirm")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Confirm")," component provides a binary choice through the input of a single character. On\nsubmission, either a ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," value will be passed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Confirm } from '@boost/cli';\n\n<Confirm label=\"Do you want to continue?\" onSubmit={handleSubmit} />;\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Confirm example",src:n(6638).Z})),(0,i.kt)("h3",{id:"props"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"invalidError")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") - Error message to display when an invalid character is pressed.\nDefaults to a custom message."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"no")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") - Character that triggers a falsy state when pressed. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"N"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"yes")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") - Character that triggers a truthy state when pressed. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"y"),"."),(0,i.kt)("li",{parentName:"ul"},"Does not support the ",(0,i.kt)("inlineCode",{parentName:"li"},"validate")," prop.")),(0,i.kt)("h2",{id:"hiddeninput"},(0,i.kt)("inlineCode",{parentName:"h2"},"HiddenInput")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"HiddenInput")," component is a specialized ",(0,i.kt)("a",{parentName:"p",href:"#input"},"Input")," that accepts user input, hides it from\nthe console, and returns the entered string on submission."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { HiddenInput } from \'@boost/cli\';\n\n<HiddenInput label="What is your secret key?" placeholder="<key>" onSubmit={handleSubmit} />;\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Hidden input example",src:n(1172).Z})),(0,i.kt)("h3",{id:"props-1"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inherits all the same props as ",(0,i.kt)("a",{parentName:"li",href:"#input"},"Input")," except for ",(0,i.kt)("inlineCode",{parentName:"li"},"hideCursor"),".")),(0,i.kt)("h3",{id:"controls"},"Controls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inherits all the same keyboard controls as ",(0,i.kt)("a",{parentName:"li",href:"#input"},"Input"),".")),(0,i.kt)("h2",{id:"input"},(0,i.kt)("inlineCode",{parentName:"h2"},"Input")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Input")," component is a simple text prompt that takes user input and returns a string. Supports\nstandard typing, backspacing. On submission, the final ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," will be trimmed of whitespace."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Input } from \'@boost/cli\';\n\n<Input\n    label="What is your name?"\n    placeholder="<name>"\n    onChange={handleChange}\n    onSubmit={handleSubmit}\n/>;\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Input example",src:n(1167).Z})),(0,i.kt)("h3",{id:"props-2"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"defaultValue")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") - A default value. If none provided, will use an empty state."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hideCursor")," (",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),") - Hide the cursor in the console. Will remove the background color, but\nstill functions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"placeholder")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") - Custom string to display when the value is empty and non-dirty."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onChange")," (",(0,i.kt)("inlineCode",{parentName:"li"},"(value: string) => void"),") - Callback triggered when the value changes.")),(0,i.kt)("h3",{id:"controls-1"},"Controls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"\u2191"),", ",(0,i.kt)("kbd",null,"\u2193")," - Move cursor to the beginning or end of the entered text."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"\u2190"),", ",(0,i.kt)("kbd",null,"\u2192")," - Move cursor forward or backward 1 character."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"delete"),", ",(0,i.kt)("kbd",null,"backspace")," - Remove the previous character at the current cursor position."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"return")," - Submit the currently entered text.")),(0,i.kt)("h2",{id:"multiselect"},(0,i.kt)("inlineCode",{parentName:"h2"},"MultiSelect")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MultiSelect")," component works in a similar fashion to ",(0,i.kt)("a",{parentName:"p",href:"#select"},"Select"),", but allows for multiple\nvalues to be selected before submission."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { MultiSelect } from '@boost/cli';\n\n<MultiSelect\n    label=\"What is your favorite fruits?\"\n    defaultSelected={['banana']}\n    onChange={handleChange}\n    onSubmit={handleSubmit}\n    options={[\n        { label: '\ud83c\udf4e Apple', value: 'apple' },\n        { label: '\ud83c\udf4c Banana', value: 'banana' },\n        { label: '\ud83e\udd65 Coconut', value: 'coconut' },\n        { label: '\ud83c\udf47 Grapes', value: 'grapes' },\n        { label: '\ud83e\udd5d Kiwi', value: 'kiwi' },\n        { label: '\ud83c\udf4b Lemon', value: 'lemon' },\n        { label: '\ud83c\udf48 Melon', value: 'melon' },\n        { label: '\ud83c\udf4a Orange', value: 'orange' },\n        { label: '\ud83c\udf51 Peach', value: 'peach' },\n        { label: '\ud83c\udf50 Pear', value: 'pear' },\n        { label: '\ud83c\udf4d Pineapple', value: 'pineapple' },\n        { label: '\ud83c\udf53 Strawberry', value: 'strawberry' },\n        { label: '\ud83c\udf49 Watermelon', value: 'watermelon' },\n    ]}\n/>;\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Multiple select example",src:n(8448).Z})),(0,i.kt)("h3",{id:"props-3"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"defaultSelected")," (",(0,i.kt)("inlineCode",{parentName:"li"},"T[]"),") - List of option values selected by default."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onChange")," (",(0,i.kt)("inlineCode",{parentName:"li"},"(values: T[]) => void"),") - Callback triggered when a value is selected or unselected."),(0,i.kt)("li",{parentName:"ul"},"Inherits all the same props as ",(0,i.kt)("a",{parentName:"li",href:"#select"},"Select"),".")),(0,i.kt)("h3",{id:"controls-2"},"Controls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"\u2191"),", ",(0,i.kt)("kbd",null,"\u2193")," - Move forward or backward through options in the list."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"\u2190"),", ",(0,i.kt)("kbd",null,"\u2192")," - Move to the beginning or end of the list."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"space")," - Select or unselect the currently highlighted option."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"return")," - Submit the currently selected options.")),(0,i.kt)("h2",{id:"passwordinput"},(0,i.kt)("inlineCode",{parentName:"h2"},"PasswordInput")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PasswordInput")," component is a specialized ",(0,i.kt)("a",{parentName:"p",href:"#input"},"Input")," that masks user input and replaces\neach character with a star (",(0,i.kt)("inlineCode",{parentName:"p"},"*"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { PasswordInput } from \'@boost/cli\';\n\n<PasswordInput label="What is your password?" placeholder="<pass>" onSubmit={handleSubmit} />;\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Password input example",src:n(945).Z})),(0,i.kt)("h3",{id:"props-4"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inherits all the same props as ",(0,i.kt)("a",{parentName:"li",href:"#input"},"Input")," except for ",(0,i.kt)("inlineCode",{parentName:"li"},"hideCursor"),".")),(0,i.kt)("h3",{id:"controls-3"},"Controls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inherits all the same keyboard controls as ",(0,i.kt)("a",{parentName:"li",href:"#input"},"Input"),".")),(0,i.kt)("h2",{id:"select"},(0,i.kt)("inlineCode",{parentName:"h2"},"Select")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Select")," component allows a value to be selected from a pre-defined list of options. Supports\nstandard keyboard navigation. To select or unselect a value, press the space bar, or on submission,\nthe currently highlighted option will be chosen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Select } from '@boost/cli';\n\n<Select\n    label=\"What is your favorite fruit?\"\n    onSubmit={handleSubmit}\n    options={[\n        'apple',\n        'banana',\n        'coconut',\n        'grapes',\n        'kiwi',\n        'lemon',\n        'melon',\n        'orange',\n        'peach',\n        'pear',\n        'pineapple',\n        'strawberry',\n        'watermelon',\n    ]}\n/>;\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Select example",src:n(6121).Z})),(0,i.kt)("p",null,"Options can also be customized with objects, allowing a more unique ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," to be provided. Options\ncan also be grouped by inserting ",(0,i.kt)("inlineCode",{parentName:"p"},"divider")," only options."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Select } from '@boost/cli';\n\n<Select\n    label=\"What is your favorite fruit?\"\n    onSubmit={handleSubmit}\n    options={[\n        { label: '\ud83c\udf4e Apple', value: 'apple' },\n        { label: '\ud83c\udf4c Banana', value: 'banana' },\n        { label: '\ud83e\udd65 Coconut', value: 'coconut' },\n        { label: '\ud83c\udf47 Grapes', value: 'grapes' },\n        { label: '\ud83e\udd5d Kiwi', value: 'kiwi' },\n        { label: '\ud83c\udf4b Lemon', value: 'lemon' },\n        { label: '\ud83c\udf48 Melon', value: 'melon' },\n        { label: '\ud83c\udf4a Orange', value: 'orange' },\n        { label: '\ud83c\udf51 Peach', value: 'peach' },\n        { label: '\ud83c\udf50 Pear', value: 'pear' },\n        { label: '\ud83c\udf4d Pineapple', value: 'pineapple' },\n        { label: '\ud83c\udf53 Strawberry', value: 'strawberry' },\n        { label: '\ud83c\udf49 Watermelon', value: 'watermelon' },\n    ]}\n/>;\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Select with labels example",src:n(4994).Z})),(0,i.kt)("h3",{id:"props-5"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"defaultSelected")," (",(0,i.kt)("inlineCode",{parentName:"li"},"T"),") - Option value selected by default."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"limit")," (",(0,i.kt)("inlineCode",{parentName:"li"},"number"),") - Number of options to display before scrolling. Defaults to console height."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," (",(0,i.kt)("inlineCode",{parentName:"li"},"(T | SelectOption<T>)[]"),") - List of options to choose from. Can either be a string,\nnumber, or object with a ",(0,i.kt)("inlineCode",{parentName:"li"},"label")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"value"),". ",(0,i.kt)("em",{parentName:"li"},"(Required)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflowAfterLabel")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string | (count: number) => string"),") - Label to display above scrollable\noptions with the number of overflowing options."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflowBeforeLabel")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string | (count: number) => string"),") - Label to display below scrollable\noptions with the number of overflowing options."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scrollType")," (",(0,i.kt)("inlineCode",{parentName:"li"},"cycle | overflow"),") - The pattern in which to limit options when scrolling. Defaults\nto ",(0,i.kt)("inlineCode",{parentName:"li"},"overflow"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cycle")," - Will continously cycle through options, even when navigating to and past edges."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overflow")," - Will display options bound to an edge, with the number of options hidden above and\nbelow.")))),(0,i.kt)("h3",{id:"controls-4"},"Controls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"\u2191"),", ",(0,i.kt)("kbd",null,"\u2193")," - Move forward or backward through options in the list."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"\u2190"),", ",(0,i.kt)("kbd",null,"\u2192")," - Move to the beginning or end of the list."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"space")," - Select or unselect the currently highlighted option."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("kbd",null,"return")," - Submit the currently selected option, or the currently highlighted option if none are selected.")),(0,i.kt)("h2",{id:"non-react"},"Non-React"),(0,i.kt)("p",null,"If you would like to use prompts outside of React components and within the command space, sadly,\nthere is no built-in Boost solution. However, you can easily use a third-party solution like\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/enquirer/enquirer"},"enquirer"),". Just be sure to set ",(0,i.kt)("inlineCode",{parentName:"p"},"stdin")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"stdout")," streams\ncorrectly!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { prompt } from 'enquirer';\nimport { Command } from '@boost/cli';\n\nexport default class InitCommand extends Command {\n    async run() {\n        const { stdin, stdout } = this.getProgram().streams;\n\n        const { username } = await prompt({\n            type: 'input',\n            name: 'username',\n            message: 'What is your username?',\n            stdin,\n            stdout,\n        });\n    }\n}\n")))}c.isMDXComponent=!0},6638:function(e,t,n){"use strict";t.Z=n.p+"assets/images/confirm-eec401a1ad5787093e3ca837093c1c5f.gif"},1172:function(e,t,n){"use strict";t.Z=n.p+"assets/images/hidden-input-abdd4ee11917de7b071a9ec1cd3e974a.gif"},1167:function(e,t,n){"use strict";t.Z=n.p+"assets/images/input-670675eb6f3db970cc5ff1bcd6e5de8d.gif"},8448:function(e,t,n){"use strict";t.Z=n.p+"assets/images/multiselect-d8a2cd82f588a8a38206aea8803193f3.gif"},945:function(e,t,n){"use strict";t.Z=n.p+"assets/images/password-input-d6ca3c8202f463b432ce6b1b0560921d.gif"},4994:function(e,t,n){"use strict";t.Z=n.p+"assets/images/select-labels-55f1a1ef5423092ee0eab47f2bbf1f2f.gif"},6121:function(e,t,n){"use strict";t.Z=n.p+"assets/images/select-cbddd6c1f7f631474ffb739fbc291e81.gif"}}]);