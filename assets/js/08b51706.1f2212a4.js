(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[528],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),c=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,k=u["".concat(m,".").concat(d)]||u[d]||p[d]||a;return n?r.createElement(k,i(i({ref:t},l),{},{components:n})):r.createElement(k,i({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9622:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return m},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var r=n(9603),o=n(120),a=(n(7378),n(5318)),i=["components"],s={title:"Testing"},m=void 0,c={unversionedId:"cli/testing",id:"cli/testing",isDocsHomePage:!1,title:"Testing",description:"The following Jest utilities are available in the",source:"@site/docs/cli/testing.md",sourceDirName:"cli",slug:"/cli/testing",permalink:"/docs/cli/testing",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/cli/testing.md",version:"current",frontMatter:{title:"Testing"},sidebar:"docs",previous:{title:"Prompts",permalink:"/docs/cli/prompts"},next:{title:"Overview",permalink:"/docs/common"}},l=[{value:"<code>mockStreams</code>",id:"mockstreams",children:[]},{value:"<code>mockProgram</code>",id:"mockprogram",children:[]},{value:"<code>renderComponent</code>",id:"rendercomponent",children:[]},{value:"<code>runCommand</code>",id:"runcommand",children:[]},{value:"<code>runTask</code>",id:"runtask",children:[]},{value:"<code>runProgram</code>",id:"runprogram",children:[]}],p={toc:l};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The following ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest"},"Jest")," utilities are available in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"@boost/cli/test")," module."),(0,a.kt)("h2",{id:"mockstreams"},(0,a.kt)("inlineCode",{parentName:"h2"},"mockStreams")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"mockStreams(append?: boolean): ProgramStreams")),(0,a.kt)("p",null,"Returns mocked ",(0,a.kt)("inlineCode",{parentName:"p"},"stderr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"stdout"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"stdin")," streams that can be passed to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),". This does\nnot mock all stream functionality, only those required by Boost and Ink."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { mockStreams } from '@boost/cli/test';\n\nconst streams = mockStreams();\n")),(0,a.kt)("h2",{id:"mockprogram"},(0,a.kt)("inlineCode",{parentName:"h2"},"mockProgram")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"mockProgram(options?: ProgramOptions, streams?: ProgramStreams): Program")),(0,a.kt)("p",null,"Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Program")," instance with required options pre-filled and streams mocked (unless manually\nprovided)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { mockProgram } from '@boost/cli/test';\n\nconst program = mockProgram({ name: 'Example' });\n")),(0,a.kt)("h2",{id:"rendercomponent"},(0,a.kt)("inlineCode",{parentName:"h2"},"renderComponent")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"async renderComponent(element: React.ReactElement, stripped?: boolean): Promise<string",">")),(0,a.kt)("p",null,"Can be used to render a React component with Ink and return the rendered result as a terminal\ncompatible string. If ",(0,a.kt)("inlineCode",{parentName:"p"},"stripped")," is true, it will strip ANSI escape escape sequences."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { renderComponent } from '@boost/cli/test';\nimport TestComponent from '../src/components/TestComponent';\n\nit('renders a component', async () => {\n    expect(await renderComponent(<TestComponent />)).toMatchSnapshot();\n});\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"As an alternative, we also suggest using the official\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/vadimdemedes/ink-testing-library"},"ink-testing-library"),".")),(0,a.kt)("h2",{id:"runcommand"},(0,a.kt)("inlineCode",{parentName:"h2"},"runCommand")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"async runCommand<O, P",">","(command: Command, params: P, options?: O): Promise<string",">")),(0,a.kt)("p",null,"Runs a ",(0,a.kt)("inlineCode",{parentName:"p"},"Command")," outside the context of a ",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),", but mimics similar functionality, including\nReact component rendering. Params are required as they're passed to the run method, while options\nare optional and assume class properties have been defined. Also, the ",(0,a.kt)("inlineCode",{parentName:"p"},"exit")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"log")," methods have\nbeen mocked with Jest spies so that they can be asserted."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { runCommand } from '@boost/cli/test';\nimport TestCommand from '../src/commands/TestCommand';\n\nit('runs a command', async () => {\n    const command = new TestCommand();\n\n    expect(await runCommand(command, ['foo', 'bar', 'baz'])).toMatchSnapshot();\n    expect(command.log).toHaveBeenCalled();\n});\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Since there is no ",(0,a.kt)("inlineCode",{parentName:"p"},"Program")," context, any functionality that requires a program will fail. If\nneeded, use ",(0,a.kt)("inlineCode",{parentName:"p"},"runProgram()")," instead.")),(0,a.kt)("h2",{id:"runtask"},(0,a.kt)("inlineCode",{parentName:"h2"},"runTask")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"runTask<A, R, T extends TaskContext",">","(task: (this: T, ...args: A) => R, args: A, context?: T): R")),(0,a.kt)("p",null,"Runs a task function outside the context of a ",(0,a.kt)("inlineCode",{parentName:"p"},"Command"),", in complete isolation. A mock command\ncontext is provided with standard defaults, and can be customized through the 3rd argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { runTask } from '@boost/cli/test';\nimport testTask from '../src/tasks/testTask';\n\nit('runs a task', async () => {\n    const context = {\n        log: jest.fn(),\n    };\n\n    expect(await runTask(testTask, ['foo', 'bar', 'baz'], context)).toMatchSnapshot();\n    expect(context.log).toHaveBeenCalled();\n});\n")),(0,a.kt)("h2",{id:"runprogram"},(0,a.kt)("inlineCode",{parentName:"h2"},"runProgram")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"async runProgram(program: Program, argv: string[]): Promise<{ code: ExitCode; output: string;\noutputStripped: string }",">")),(0,a.kt)("p",null,"Runs a ",(0,a.kt)("inlineCode",{parentName:"p"},"Program")," as if it were ran on the command line, including middleware, commands, success and\nfailuer states, and more. Utilizes mocked streams to capture and return standard output and ANSI\nstripped output. Failed runs will not throw and instead will render a failure output."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { runProgram } from '@boost/cli/test';\nimport Program from '../src/program';\n\nit('runs a program', async () => {\n    const program = new Program();\n\n    const { code, output } = await runProgram(program, ['cmd', '--foo', '123', 'bar']);\n\n    expect(output).toMatchSnapshot();\n    expect(code).toBe(0);\n});\n")))}u.isMDXComponent=!0}}]);