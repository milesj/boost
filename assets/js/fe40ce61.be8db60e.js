(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[452],{9213:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return v},toc:function(){return m},default:function(){return k}});var a=t(9603),s=t(120),r=(t(7378),t(5318)),i=t(7586),l=t(4535),o=t(517),p=["components"],u={title:"Events"},c=void 0,v={unversionedId:"event",id:"event",isDocsHomePage:!1,title:"Events",description:"A type-safe event system with multiple emitter patterns.",source:"@site/docs/event.mdx",sourceDirName:".",slug:"/event",permalink:"/docs/event",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/event.mdx",version:"current",frontMatter:{title:"Events"},sidebar:"docs",previous:{title:"Decorators",permalink:"/docs/decorators"},next:{title:"Logging",permalink:"/docs/log"}},m=[{value:"Installation",id:"installation",children:[]},{value:"Events",id:"events",children:[{value:"Registering listeners",id:"registering-listeners",children:[]},{value:"Unregistering listeners",id:"unregistering-listeners",children:[]},{value:"Emitting events",id:"emitting-events",children:[]}]},{value:"Scopes",id:"scopes",children:[]},{value:"Event types",id:"event-types",children:[{value:"Event",id:"event",children:[]},{value:"BailEvent",id:"bailevent",children:[]},{value:"ConcurrentEvent",id:"concurrentevent",children:[]},{value:"WaterfallEvent",id:"waterfallevent",children:[]}]}],d={toc:m};function k(e){var n=e.components,t=(0,s.Z)(e,p);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{backend:!0,frontend:!0,tooling:!0,api:"/api/event",mdxType:"EnvBadges"}),(0,r.kt)("p",null,"A type-safe event system with multiple emitter patterns."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/event\n"))),(0,r.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/event\n")))),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("p",null,"The event system is built around individual ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,r.kt)("inlineCode",{parentName:"a"},"Event"))," classes that can be instantiated in\nisolation, register and unregister their own listeners, and emit values by executing each listener\nwith arguments. There are multiple ",(0,r.kt)("a",{parentName:"p",href:"#types"},"types of events"),", so choose the best one for each use\ncase."),(0,r.kt)("p",null,"To begin using events, instantiate an ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,r.kt)("inlineCode",{parentName:"a"},"Event"))," with a unique name -- the name is purely for\ndebugging purposes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Event } from '@boost/event';\n\nconst event = new Event<[string]>('example');\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,r.kt)("inlineCode",{parentName:"a"},"Event")),"s utilize TypeScript generics for typing the arguments passed to listener functions.\nThis can be defined using a tuple or an array in the 1st generic slot. The 2nd slot is reserved for\n",(0,r.kt)("a",{parentName:"p",href:"#scopes"},"scopes"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// One argument of type number\nnew Event<[number]>('foo');\n\n// Two arguments of type number and string\nnew Event<[number, string]>('bar');\n\n// Three arguments with the last item being optional\nnew Event<[object, boolean, string?]>('baz');\n\n// Array of any type or size\nnew Event<unknown[]>('foo');\n")),(0,r.kt)("h3",{id:"registering-listeners"},"Registering listeners"),(0,r.kt)("p",null,"Listeners are simply functions that can be registered to an event using ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event#listen"},(0,r.kt)("inlineCode",{parentName:"a"},"Event#listen()")),".\nThe same listener function reference will only be registered once."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"event.listen(listener);\n")),(0,r.kt)("p",null,"A listener can also be registered to execute only once, using ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event#once"},(0,r.kt)("inlineCode",{parentName:"a"},"Event#once()")),", regardless of\nhow many times the event has been emitted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"event.once(listener);\n")),(0,r.kt)("h3",{id:"unregistering-listeners"},"Unregistering listeners"),(0,r.kt)("p",null,"A listener can be unregistered from an event using ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event#unlisten"},(0,r.kt)("inlineCode",{parentName:"a"},"Event#unlisten()")),". The same listener\nreference used to register must also be used for unregistering."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"event.unlisten(listener);\n")),(0,r.kt)("p",null,"To make this flow easier, a pre-configured unlistener is returned from ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event#listen"},(0,r.kt)("inlineCode",{parentName:"a"},"Event#listen()")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const unlisten = event.listen(listener);\nunlisten();\n")),(0,r.kt)("h3",{id:"emitting-events"},"Emitting events"),(0,r.kt)("p",null,"Emitting is the concept of executing all registered listeners with a set of arguments. This can be\nachieved through the ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event#emit"},(0,r.kt)("inlineCode",{parentName:"a"},"Event#emit()"))," method, which requires an array of values to pass to\neach listener as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"event.emit(['abc']);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The array values and its types should match the ",(0,r.kt)("a",{parentName:"p",href:"#events"},"generics defined")," on the constructor.")),(0,r.kt)("h2",{id:"scopes"},"Scopes"),(0,r.kt)("p",null,"Scopes are a mechanism for restricting listeners to a unique subset. Scopes are defined as the 2nd\nargument to ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event#listen"},(0,r.kt)("inlineCode",{parentName:"a"},"Event#listen()")),", ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event#unlisten"},(0,r.kt)("inlineCode",{parentName:"a"},"#unlisten()")),", ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event#once"},(0,r.kt)("inlineCode",{parentName:"a"},"#once()")),", and\n",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event#emit"},(0,r.kt)("inlineCode",{parentName:"a"},"#emit()")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"event.listen(listener);\nevent.listen(listener, 'foo');\nevent.listen(listener, 'bar');\n\n// Will only execute the 1st listener\nevent.emit([]);\n\n// Will only execute the 2nd listener\nevent.emit([], 'foo');\n")),(0,r.kt)("p",null,"A list of acceptable scope names can be passed as the 2nd generic slot to ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,r.kt)("inlineCode",{parentName:"a"},"Event")),",\notherwise all strings are allowed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"new Event<[number], 'foo' | 'bar' | 'baz'>('event');\n")),(0,r.kt)("h2",{id:"event-types"},"Event types"),(0,r.kt)("p",null,"There are 4 types of events that can be instantiated and emitted."),(0,r.kt)("h3",{id:"event"},"Event"),(0,r.kt)("p",null,"Standard ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,r.kt)("inlineCode",{parentName:"a"},"Event"))," that executes listeners in the order they were registered."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Event } from '@boost/event';\n\nconst event = new Event<[string, number]>('standard');\n\nevent.listen(listener);\n\nevent.emit(['abc', 123]);\n")),(0,r.kt)("h3",{id:"bailevent"},"BailEvent"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/BailEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"BailEvent"))," is like ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/Event"},(0,r.kt)("inlineCode",{parentName:"a"},"Event"))," but can bail the execution\nloop early if a listener returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". The emit method will return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if a bail occurs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { BailEvent } from '@boost/event';\n\nconst event = new BailEvent<[object]>('bail');\n\n// Will execute\nevent.listen(() => {});\n\n// Will execute and bail\nevent.listen(() => false);\n\n// Will not execute\nevent.listen(() => {});\n\nconst bailed = event.emit([{ example: true }]);\n")),(0,r.kt)("h3",{id:"concurrentevent"},"ConcurrentEvent"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/ConcurrentEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"ConcurrentEvent"))," executes listeners in parallel and returns\na promise with the result of all listeners."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { ConcurrentEvent } from '@boost/event';\n\nconst event = new ConcurrentEvent<[]>('parallel');\n\nevent.listen(doHeavyProcess);\nevent.listen(doBackgroundJob);\n\n// Async/await\nconst result = await event.emit([]);\n\n// Promise\nevent.emit([]).then((results) => {});\n")),(0,r.kt)("h3",{id:"waterfallevent"},"WaterfallEvent"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/api/event/class/WaterfallEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"WaterfallEvent"))," executes each listener in order, passing the\nprevious listeners return value as an argument to the next listener. The final value is then\nreturned as a result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { WaterfallEvent } from '@boost/event';\n\nconst event = new WaterfallEvent<number>('waterfall');\n\nevent.listen((num) => num * 2);\nevent.listen((num) => num * 3);\n\nconst result = event.emit(10); // 60\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This event only accepts a single argument. The generic type should not be an array, as it types\nthe only argument and the return type.")))}k.isMDXComponent=!0}}]);