(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6743],{5318:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var o=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=s(t),m=r,d=f["".concat(c,".").concat(m)]||f[m]||u[m]||a;return t?o.createElement(d,i(i({ref:n},p),{},{components:t})):o.createElement(d,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2189:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},toc:function(){return s},default:function(){return u}});var o=t(9603),r=t(120),a=(t(7378),t(5318)),i=["components"],l={},c=void 0,s=[{value:"Features",id:"features",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Documentation",id:"documentation",children:[]}],p={toc:s};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/milesj/boost/actions?query=branch%3Amaster"},(0,a.kt)("img",{parentName:"a",src:"https://github.com/milesj/boost/workflows/Build/badge.svg",alt:"Build Status"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@boost/config"},(0,a.kt)("img",{parentName:"a",src:"https://badge.fury.io/js/%40boost%25config.svg",alt:"npm version"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@boost/config"},(0,a.kt)("img",{parentName:"a",src:"https://david-dm.org/milesj/boost.svg?path=packages/config",alt:"npm deps"}))),(0,a.kt)("p",null,"Powerful convention based finder, loader, and manager of both configuration and ignore files."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Blueprint, Predicates } from '@boost/common';\nimport { Configuration } from '@boost/config';\n\ninterface ConfigFile {\n    debug: boolean;\n    sourceMaps: boolean;\n}\n\nclass ConfigManager extends Configuration<ConfigFile> {\n    blueprint({ bool }: Predicates): Blueprint<ConfigFile> {\n        return {\n            debug: bool(),\n            sourceMaps: bool(),\n        };\n    }\n}\n\nconst configManager = new ConfigManager('boost');\n\n// Load `.config/boost.js`, `boost.production.json`, `.boost.yaml`, etc\nconst { config } = await configManager.loadConfigFromRoot('.');\n\n// Load `.boostignore` files\nconst ignore = await configManager.loadIgnoreFromBranchToRoot('./some/deep/path');\n")),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Loads root configs (",(0,a.kt)("inlineCode",{parentName:"li"},".config/<name>.js"),") and branch configs (",(0,a.kt)("inlineCode",{parentName:"li"},".<name>.js"),")."),(0,a.kt)("li",{parentName:"ul"},"Loads ignore files (",(0,a.kt)("inlineCode",{parentName:"li"},".<name>ignore"),")."),(0,a.kt)("li",{parentName:"ul"},"Supports multiple config types: ",(0,a.kt)("inlineCode",{parentName:"li"},"js"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"cjs"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"mjs"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"json"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"yaml")),(0,a.kt)("li",{parentName:"ul"},"Supports environment and root-level based overrides."),(0,a.kt)("li",{parentName:"ul"},"Supports extending from other config files."),(0,a.kt)("li",{parentName:"ul"},"Finds files within each branch folder while traversing up the tree."),(0,a.kt)("li",{parentName:"ul"},"Caches finder results for increased efficiency."),(0,a.kt)("li",{parentName:"ul"},"Custom key-value setting processors.")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"yarn add @boost/config\n")),(0,a.kt)("h2",{id:"documentation"},"Documentation"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://boostlib.dev/docs/config"},"https://boostlib.dev/docs/config")))}u.isMDXComponent=!0}}]);