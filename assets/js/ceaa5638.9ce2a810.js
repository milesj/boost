"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[804],{4408:(n,e,s)=>{s.r(e),s.d(e,{contentTitle:()=>l,default:()=>c,frontMatter:()=>t,toc:()=>r});var i=s(1948),o=s(3460);const t={},l=void 0,r=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Documentation",id:"documentation",level:2}];function a(n){const e={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.M)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.img,{src:"https://img.shields.io/github/actions/workflow/status/milesj/boost/build.yml",alt:"build status"}),"\n",(0,i.jsx)(e.img,{src:"https://img.shields.io/npm/v/@boost/args",alt:"npm version"})]}),"\n",(0,i.jsxs)(e.p,{children:["A convention based argument parsing and formatting library, with strict validation checks. It ",(0,i.jsx)(e.em,{children:"is\nnot"})," a command line interface."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"import { parse } from '@boost/args';\n\ninterface Options {\n  help: boolean;\n  logLevel: 'info' | 'error' | 'warn';\n  version: boolean;\n}\n\nconst { command, errors, options, params, rest } = parse<Options>(process.argv.slice(2), {\n  commands: ['build', 'install', 'update'],\n  options: {\n    help: {\n      default: false,\n      description: 'Show a help menu',\n      type: 'boolean',\n      short: 'H',\n    },\n    logLevel: {\n      choices: ['info', 'error', 'warn'],\n      default: 'info',\n      description: 'Customize logging level',\n    },\n    version: {\n      default: false,\n      description: 'Show the version number',\n      type: 'boolean',\n      short: 'V',\n    },\n  },\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Commands and sub-commands: ",(0,i.jsx)(e.code,{children:"cmd"}),", ",(0,i.jsx)(e.code,{children:"cmd:sub"})]}),"\n",(0,i.jsxs)(e.li,{children:["Options (long and short) that set a value(s): ",(0,i.jsx)(e.code,{children:"--foo value"}),", ",(0,i.jsx)(e.code,{children:"--foo=value"}),", ",(0,i.jsx)(e.code,{children:"-f value"}),", ",(0,i.jsx)(e.code,{children:"-f=value"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Camel (preferred) or kebab cased option names."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Flags (boolean options) that take no value: ",(0,i.jsx)(e.code,{children:"--bar"}),", ",(0,i.jsx)(e.code,{children:"-B"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["With implicit negation support: ",(0,i.jsx)(e.code,{children:"--no-bar"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Parameters that act as standalone values: ",(0,i.jsx)(e.code,{children:"foo bar baz"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Can be marked as required."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Rest arguments that are passed to subsequent scripts (aggregated after ",(0,i.jsx)(e.code,{children:"--"}),"): ",(0,i.jsx)(e.code,{children:"foo -- bar"})]}),"\n",(0,i.jsxs)(e.li,{children:["Supports ",(0,i.jsx)(e.code,{children:"string"}),", ",(0,i.jsx)(e.code,{children:"number"}),", ",(0,i.jsx)(e.code,{children:"boolean"}),", and list based values, with the addition of:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Single value based on a list of possible choices."}),"\n",(0,i.jsx)(e.li,{children:"Multiple values with optional arity count requirements."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Group multiple short options under a single argument: ",(0,i.jsx)(e.code,{children:"-fBp"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Increment a counter each time a short option is found in a group."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Strict parser and validation checks, allowing for informative interfaces.","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Custom option and param validation for increased accuracy."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"yarn add @boost/args\n"})}),"\n",(0,i.jsx)(e.h2,{id:"documentation",children:"Documentation"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://boostlib.dev/docs/args",children:"https://boostlib.dev/docs/args"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://boostlib.dev/api/args",children:"https://boostlib.dev/api/args"})}),"\n"]})]})}function c(n){void 0===n&&(n={});const{wrapper:e}={...(0,o.M)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(a,{...n})}):a(n)}},3460:(n,e,s)=>{s.d(e,{I:()=>r,M:()=>l});var i=s(6952);const o={},t=i.createContext(o);function l(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);