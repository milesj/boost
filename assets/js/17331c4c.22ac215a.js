"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5408],{5484:(n,e,o)=>{o.r(e),o.d(e,{contentTitle:()=>r,default:()=>a,frontMatter:()=>t,toc:()=>c});var i=o(1948),s=o(3460);const t={},r=void 0,c=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Documentation",id:"documentation",level:2}];function l(n){const e={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.M)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.img,{src:"https://img.shields.io/github/actions/workflow/status/milesj/boost/build.yml",alt:"build status"}),"\n",(0,i.jsx)(e.img,{src:"https://img.shields.io/npm/v/@boost/config",alt:"npm version"})]}),"\n",(0,i.jsx)(e.p,{children:"Powerful convention based finder, loader, and manager of both configuration and ignore files."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"import { Blueprint, Schemas } from '@boost/common';\nimport { Configuration } from '@boost/config';\n\ninterface ConfigFile {\n  debug: boolean;\n  sourceMaps: boolean;\n}\n\nclass ConfigManager extends Configuration<ConfigFile> {\n  blueprint({ bool }: Schemas): Blueprint<ConfigFile> {\n    return {\n      debug: bool(),\n      sourceMaps: bool(),\n    };\n  }\n}\n\nconst configManager = new ConfigManager('boost');\n\n// Load `.config/boost.js`, `boost.production.json`, `.boost.yaml`, etc\nconst { config } = await configManager.loadConfigFromRoot('.');\n\n// Load `.boostignore` files\nconst ignore = await configManager.loadIgnoreFromBranchToRoot('./some/deep/path');\n"})}),"\n",(0,i.jsx)(e.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Loads root configs (",(0,i.jsx)(e.code,{children:".config/<name>.js"}),") and branch configs (",(0,i.jsx)(e.code,{children:".<name>.js"}),")."]}),"\n",(0,i.jsxs)(e.li,{children:["Loads ignore files (",(0,i.jsx)(e.code,{children:".<name>ignore"}),")."]}),"\n",(0,i.jsxs)(e.li,{children:["Supports multiple config types: ",(0,i.jsx)(e.code,{children:"js"}),", ",(0,i.jsx)(e.code,{children:"cjs"}),", ",(0,i.jsx)(e.code,{children:"mjs"}),", ",(0,i.jsx)(e.code,{children:"json"}),", ",(0,i.jsx)(e.code,{children:"yaml"})]}),"\n",(0,i.jsx)(e.li,{children:"Supports environment and root-level based overrides."}),"\n",(0,i.jsx)(e.li,{children:"Supports extending from other config files."}),"\n",(0,i.jsx)(e.li,{children:"Finds files within each branch folder while traversing up the tree."}),"\n",(0,i.jsx)(e.li,{children:"Caches finder results for increased efficiency."}),"\n",(0,i.jsx)(e.li,{children:"Custom key-value setting processors."}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"yarn add @boost/config\n"})}),"\n",(0,i.jsx)(e.h2,{id:"documentation",children:"Documentation"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://boostlib.dev/docs/config",children:"https://boostlib.dev/docs/config"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://boostlib.dev/api/config",children:"https://boostlib.dev/api/config"})}),"\n"]})]})}function a(n){void 0===n&&(n={});const{wrapper:e}={...(0,s.M)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},3460:(n,e,o)=>{o.d(e,{I:()=>c,M:()=>r});var i=o(6952);const s={},t=i.createContext(s);function r(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);