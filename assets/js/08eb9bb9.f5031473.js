"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[268],{1960:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=o(1948),t=o(3460);const r={title:"3.0 migration",sidebar_label:"3.0"},a=void 0,i={id:"migrate/3.0",title:"3.0 migration",description:"All packages",source:"@site/docs/migrate/3.0.md",sourceDirName:"migrate",slug:"/migrate/3.0",permalink:"/docs/migrate/3.0",draft:!1,unlisted:!1,editUrl:"https://github.com/milesj/boost/edit/master/website/docs/migrate/3.0.md",tags:[],version:"current",frontMatter:{title:"3.0 migration",sidebar_label:"3.0"},sidebar:"docs",previous:{title:"Translations",permalink:"/docs/translate"},next:{title:"4.0",permalink:"/docs/migrate/4.0"}},c={},l=[{value:"All packages",id:"all-packages",level:2},{value:"Updated <code>optimal</code> to v5",id:"updated-optimal-to-v5",level:3},{value:"@boost/common",id:"boostcommon",level:2},{value:"Updated <code>Path</code> to be more performant and OS compliant",id:"updated-path-to-be-more-performant-and-os-compliant",level:3},{value:"Updated <code>PathResolver</code> to be async",id:"updated-pathresolver-to-be-async",level:3},{value:"Updated <code>Project</code> to use path instances",id:"updated-project-to-use-path-instances",level:3},{value:"Removed <code>parseFile</code> function",id:"removed-parsefile-function",level:3},{value:"Removed <code>requireModule</code> and <code>requireTypedModule</code> functions",id:"removed-requiremodule-and-requiretypedmodule-functions",level:3},{value:"@boost/cli",id:"boostcli",level:2},{value:"React components and hooks must be imported from new module path",id:"react-components-and-hooks-must-be-imported-from-new-module-path",level:3},{value:"Updated <code>useRenderLoop</code> argument to accept seconds",id:"updated-userenderloop-argument-to-accept-seconds",level:3},{value:"Removed shorthand commands",id:"removed-shorthand-commands",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"all-packages",children:"All packages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Requires TypeScript v4.4 or greater, as we rely on new syntax and features."}),"\n",(0,s.jsx)(n.li,{children:"Dropped Node.js v10 support. Now requires v12.17 and above."}),"\n",(0,s.jsx)(n.li,{children:"Dropped Internet Explorer 11 support (for packages with browser code). Now requires the latest\nversions of Edge, Chrome, or Firefox."}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"updated-optimal-to-v5",children:["Updated ",(0,s.jsx)(n.code,{children:"optimal"})," to v5"]}),"\n",(0,s.jsxs)(n.p,{children:["We utilize ",(0,s.jsx)(n.a,{href:"https://github.com/milesj/optimal",children:"optimal"})," for building and validating objects based on\nschemas, and this dependency has been updated to the next major, version 5\n(",(0,s.jsx)(n.a,{href:"https://github.com/milesj/optimal/blob/master/optimal/CHANGELOG.md",children:"view the official changelog"}),").\nThis major includes a complete rewrite, resulting in very different TypeScript types, and a slightly\ndifferent consumable public API."]}),"\n",(0,s.jsxs)(n.p,{children:["Now why is this important for Boost? Because it's used internally by\n",(0,s.jsx)(n.a,{href:"/api/common/class/Contract#blueprint",children:(0,s.jsx)(n.code,{children:"Contract.blueprint()"})}),", which in turn is used by many other\ndownstream packages. The biggest changes that need to be made are as follows:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Predicates (v4) are now know as schemas (v5)."}),"\n",(0,s.jsxs)(n.li,{children:["Array, instance, object, and union schemas now define children types with a chainable ",(0,s.jsx)(n.code,{children:"of()"}),"\nmethod, instead of through the constructor."]}),"\n",(0,s.jsxs)(n.li,{children:["All optimal schemas and types are now exported through a new module import\n",(0,s.jsx)(n.code,{children:"@boost/common/optimal"}),". The ",(0,s.jsx)(n.code,{children:"Blueprint"})," and ",(0,s.jsx)(n.code,{children:"Schemas"})," (formerly ",(0,s.jsx)(n.code,{children:"Predicates"}),") types are still\nexported from the index for convenience."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Before\nimport { Contract, Blueprint, Predicates } from '@boost/common';\n\nexport interface AdapterOptions {\n  name?: string;\n  env?: number;\n}\n\nexport default class Adapter extends Contract<AdapterOptions> {\n  blueprint({ number, object }: Predicates): Blueprint<AdapterOptions> {\n    return {\n      name: string().notEmpty(),\n      env: object(string()),\n    };\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// After\nimport { Contract, Blueprint, Schemas } from '@boost/common';\n// OR\nimport { Contract } from '@boost/common';\nimport { Blueprint, Schemas } from '@boost/common/optimal';\n\nexport interface AdapterOptions {\n  name?: string;\n  env?: number;\n}\n\nexport default class Adapter extends Contract<AdapterOptions> {\n  blueprint({ number, object }: Schemas): Blueprint<AdapterOptions> {\n    return {\n      name: string().notEmpty(),\n      env: object().of(string()),\n    };\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"boostcommon",children:"@boost/common"}),"\n",(0,s.jsxs)(n.h3,{id:"updated-path-to-be-more-performant-and-os-compliant",children:["Updated ",(0,s.jsx)(n.code,{children:"Path"})," to be more performant and OS compliant"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/api/common/class/PathResolver",children:(0,s.jsx)(n.code,{children:"Path"})})," class was designed as an abstraction around file system\nand Node.js module paths to provide seamless interoperability between different operating systems.\nWhile it achieved this, it did so by replacing all path separators with ",(0,s.jsx)(n.code,{children:"/"}),", which works on both\nPOSIX and Windows, but wasn't exactly correct for Windows. It also incurred a performance cost by\nconstantly normalizing and replacing the path parts. We wanted to remedy this, so the following\nchanges have been made:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Path separators are no longer forced to ",(0,s.jsx)(n.code,{children:"/"})," and instead will be OS native: ",(0,s.jsx)(n.code,{children:"/"})," on POSIX, ",(0,s.jsx)(n.code,{children:"\\"})," on\nWindows."]}),"\n",(0,s.jsxs)(n.li,{children:["Path normalization is now deferred until the ",(0,s.jsx)(n.a,{href:"/api/common/class/Path#path",children:(0,s.jsx)(n.code,{children:"Path#path()"})})," method\nis called, instead of being called on every ",(0,s.jsx)(n.code,{children:"Path"})," instantiation."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["While this change was beneficial for file system paths, it had the unfortunate side-effect of\nbreaking all Node.js module ",(0,s.jsx)(n.code,{children:"Path"}),"s, as they must always use forward slashes ",(0,s.jsx)(n.code,{children:"/"}),". To remedy this, a\nnew ",(0,s.jsx)(n.a,{href:"/api/common/class/ModulePath",children:(0,s.jsx)(n.code,{children:"ModulePath"})})," class has been added specifially for Node.js\nmodules, and any reference to the ",(0,s.jsx)(n.code,{children:"Path"})," type has been replaced with a new ",(0,s.jsx)(n.code,{children:"Pathable"})," interface."]}),"\n",(0,s.jsxs)(n.p,{children:["This is most noticeable with ",(0,s.jsx)(n.a,{href:"/api/common/class/PathResolver",children:(0,s.jsx)(n.code,{children:"PathResolver"})}),", as it may return\neither a ",(0,s.jsx)(n.code,{children:"Path"})," or ",(0,s.jsx)(n.code,{children:"ModulePath"})," instance. To utilize methods on these instances, they must now be\ntype cast."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const path = new PathResolver().resolvePath();\n\n// When a file system path is found\n(path as Path).isFile();\n\n// When a node module is found\n(path as ModulePath).hasScope();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Furthermore, this change was also detrimental to unit tests that run in both POSIX and Windows\nenvironments. Typically tests are written in POSIX styled paths (Boost was), which worked before on\nWindows, but will now fail since we no longer force the path separators to be the same. To remedy\nthis, we now provide test utilities that are operating system aware, which can be imported from\n",(0,s.jsx)(n.a,{href:"/api/common-test",children:(0,s.jsx)(n.code,{children:"@boost/common/test"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Before\nexpect(somePathInstance).toEqual(new Path('some/file/system/path'));\nexpect(somePathInstance.path()).toBe('some/file/system/path');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { mockFilePath, normalizeSeparators } from '@boost/common/test';\n\n// After\nexpect(somePathInstance).toEqual(mockFilePath('some/file/system/path'));\nexpect(somePathInstance.path()).toBe(normalizeSeparators('some/file/system/path'));\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"updated-pathresolver-to-be-async",children:["Updated ",(0,s.jsx)(n.code,{children:"PathResolver"})," to be async"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/api/common/class/PathResolver",children:(0,s.jsx)(n.code,{children:"PathResolver"})})," class and its resolve methods were synchronous\nby design (only because ",(0,s.jsx)(n.code,{children:"require.resolve()"}),' was). Since we\'re moving to an "ESM first and only"\napproach, we removed the ',(0,s.jsx)(n.code,{children:"require.resolve()"}),' compatibility and updated the resolver signature to be\nasync. The resolver also accepts a "starting directory" in which to resolve from.']}),"\n",(0,s.jsxs)(n.p,{children:["This change will support the future ",(0,s.jsx)(n.code,{children:"import.meta.resolve()"})," API, but until that lands, the class\nwill use the ",(0,s.jsx)(n.a,{href:"https://npmjs.com/resolve",children:(0,s.jsx)(n.code,{children:"resolve"})})," npm package internally."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Before\nimport { PathResolver } from '@boost/common';\n\nconst resolver = new PathResolver();\nconst path = resolver.resolve();\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// After\nimport { PathResolver } from '@boost/common';\n\nconst resolver = new PathResolver();\nconst path = await resolver.resolve(__dirname);\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"If you require a synchronous API, unfortunately, you will need to implement that functionality\nyourself."}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"updated-project-to-use-path-instances",children:["Updated ",(0,s.jsx)(n.code,{children:"Project"})," to use path instances"]}),"\n",(0,s.jsxs)(n.p,{children:["All methods on ",(0,s.jsx)(n.a,{href:"/api/common/class/Project",children:(0,s.jsx)(n.code,{children:"Project"})})," that returned file system paths, will now\nreturn a ",(0,s.jsx)(n.a,{href:"/api/common/class/Path",children:(0,s.jsx)(n.code,{children:"Path"})})," instance instead of a string."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Before\nproject.getWorkspacePackagePaths().map((path) => new Path(path, 'src/index.ts'));\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// After\nproject.getWorkspacePackagePaths().map((path) => path.append('src/index.ts'));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The exception to this is\n",(0,s.jsx)(n.a,{href:"/api/common/class/Project#getWorkspaceGlobs",children:(0,s.jsx)(n.code,{children:"Project#getWorkspaceGlobs()"})}),", which returns a list\nof strings, since these are glob patterns ",(0,s.jsx)(n.em,{children:"and not"})," file paths (even though they look similar).\nFurthermore, glob patterns will ",(0,s.jsx)(n.em,{children:"always"})," use forward slashes, regardless of operating system."]}),"\n",(0,s.jsxs)(n.h3,{id:"removed-parsefile-function",children:["Removed ",(0,s.jsx)(n.code,{children:"parseFile"})," function"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"parseFile()"})," function has been removed as it partially relied on ",(0,s.jsx)(n.code,{children:"requireModule()"}),", which has\nalso been removed (below)."]}),"\n",(0,s.jsxs)(n.p,{children:["However, similar functionality can be achieved with the ",(0,s.jsx)(n.a,{href:"/api/common/namespace/json",children:(0,s.jsx)(n.code,{children:"json"})})," and\n",(0,s.jsx)(n.a,{href:"/api/common/namespace/yaml",children:(0,s.jsx)(n.code,{children:"yaml"})})," serializers, or simply native ",(0,s.jsx)(n.code,{children:"require()"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Before\nimport { parseFile } from '@boost/common';\n\nconst contents = parseFile('file.js');\nconst contents = parseFile('file.json');\nconst contents = parseFile('file.yaml');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// After\nimport { json, yaml } from '@boost/common';\n\nconst contents = require('file.js');\nconst contents = json.load('file.json');\nconst contents = yaml.load('file.yaml');\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"removed-requiremodule-and-requiretypedmodule-functions",children:["Removed ",(0,s.jsx)(n.code,{children:"requireModule"})," and ",(0,s.jsx)(n.code,{children:"requireTypedModule"})," functions"]}),"\n",(0,s.jsxs)(n.p,{children:["These functions have moved to the new ",(0,s.jsx)(n.a,{href:"/docs/module",children:(0,s.jsx)(n.code,{children:"@boost/module"})})," package."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Before\nimport { requireModule } from '@boost/common';\n\nconst result = requireModule('foo');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// After\nimport { requireModule } from '@boost/module';\n\nconst result = requireModule('foo').default;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"boostcli",children:"@boost/cli"}),"\n",(0,s.jsx)(n.h3,{id:"react-components-and-hooks-must-be-imported-from-new-module-path",children:"React components and hooks must be imported from new module path"}),"\n",(0,s.jsxs)(n.p,{children:["In an effort to reduce startup time and evaluation cost, all React components and hooks provided by\nBoost must now be imported from ",(0,s.jsx)(n.code,{children:"@boost/cli/react"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Before\nimport { Help, Style } from '@boost/cli';\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// After\nimport { Help, Style } from '@boost/cli/react';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"updated-userenderloop-argument-to-accept-seconds",children:["Updated ",(0,s.jsx)(n.code,{children:"useRenderLoop"})," argument to accept seconds"]}),"\n",(0,s.jsxs)(n.p,{children:["Previously, the ",(0,s.jsx)(n.a,{href:"/api/cli-react/function/useRenderLoop",children:(0,s.jsx)(n.code,{children:"useRenderLoop()"})})," hook required the FPS\ninterval in milliseconds, which is a bit confusing. This has been changed to seconds, as we do the\ncalculation internally."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Before\nimport { useRenderLoop } from '@boost/cli/react';\n\nuseRenderLoop(30 / 1000); // 30 FPS\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// After\nimport { useRenderLoop } from '@boost/cli/react';\n\nuseRenderLoop(30); // 30 FPS\n"})}),"\n",(0,s.jsx)(n.h3,{id:"removed-shorthand-commands",children:"Removed shorthand commands"}),"\n",(0,s.jsxs)(n.p,{children:["Instead of using ",(0,s.jsx)(n.a,{href:"/api/cli/class/Command",children:(0,s.jsx)(n.code,{children:"Command"})})," classes, Boost supported a feature known as\nshorthand commands, where an object of options, params, config, etc, could be passed during\nregistration (below)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"program.register<BuildOptions, BuildParams>(\n  'build',\n  {\n    description: 'Build a project',\n    options: {\n      minify: { description: 'Minify source files', type: 'boolean' },\n    },\n    params: [\n      { description: 'Name of project', label: 'name', type: 'string' }\n    ]\n  },\n  function build(this: TaskContext, options: BuildOptions, params: BuildParams, rest: string[]) => {\n    // ...\n  },\n);\n"})}),"\n",(0,s.jsx)(n.p,{children:"While this feature is nice for its simplicity, it was rather complicated to support internally as we\nhad multiple layers of abstractions and proxies to get it working correctly. Shorthand commands were\nforcing us into a more complex implementation, so we opted to remove them entirely."})]})}function h(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},3460:(e,n,o)=>{o.d(n,{I:()=>i,M:()=>a});var s=o(6952);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);