(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[493],{5047:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return g},contentTitle:function(){return m},metadata:function(){return d},toc:function(){return u},default:function(){return h}});var n=a(9603),o=a(120),r=(a(7378),a(5318)),l=a(7586),i=a(4535),s=a(517),p=["components"],g={title:"Logging"},m=void 0,d={unversionedId:"log",id:"log",isDocsHomePage:!1,title:"Logging",description:"Lightweight level based logging system.",source:"@site/docs/log.mdx",sourceDirName:".",slug:"/log",permalink:"/docs/log",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/log.mdx",version:"current",frontMatter:{title:"Logging"},sidebar:"docs",previous:{title:"Events",permalink:"/docs/event"},next:{title:"Pipelines",permalink:"/docs/pipeline"}},u=[{value:"Installation",id:"installation",children:[]},{value:"Environment variables",id:"environment-variables",children:[]},{value:"Logging",id:"logging",children:[{value:"Options",id:"options",children:[]},{value:"Log levels",id:"log-levels",children:[]},{value:"Silencing output",id:"silencing-output",children:[]}]},{value:"Formats",id:"formats",children:[]},{value:"Metadata",id:"metadata",children:[]},{value:"Transport types",id:"transport-types",children:[{value:"ConsoleTransport",id:"consoletransport",children:[]},{value:"StreamTransport",id:"streamtransport",children:[]},{value:"FileTransport",id:"filetransport",children:[]},{value:"RotatingFileTransport",id:"rotatingfiletransport",children:[]}]},{value:"Test utilities",id:"test-utilities",children:[]}],c={toc:u};function h(e){var t=e.components,a=(0,o.Z)(e,p);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{backend:!0,tooling:!0,api:"/api/log",mdxType:"EnvBadges"}),(0,r.kt)("p",null,"Lightweight level based logging system."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)(i.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/log\n"))),(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/log\n")))),(0,r.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BOOSTJS_LOG_DEFAULT_LEVEL")," (",(0,r.kt)("a",{parentName:"li",href:"/api/log#LogLevel"},(0,r.kt)("inlineCode",{parentName:"a"},"LogLevel")),") - The default log level to use when\ncalling the logger function stand alone (the usage examples below). Defaults to the lowest level,\n",(0,r.kt)("inlineCode",{parentName:"li"},"log"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BOOSTJS_LOG_MAX_LEVEL")," (",(0,r.kt)("a",{parentName:"li",href:"/api/log#LogLevel"},(0,r.kt)("inlineCode",{parentName:"a"},"LogLevel")),") - The maximum level, based on priority,\nto write to a stream. All levels higher than the maximum will be ignored. Defaults to allowing all\nlevels.")),(0,r.kt)("h2",{id:"logging"},"Logging"),(0,r.kt)("p",null,'Logging is based around the concept of a "logger", which provides a set of functions of severity\nlevels to log with. Logs are written to one or many provided transports -- or ',(0,r.kt)("inlineCode",{parentName:"p"},"console")," if not\ndefined. To begin, instantiate a logger with ",(0,r.kt)("a",{parentName:"p",href:"/api/log/function/createLogger"},(0,r.kt)("inlineCode",{parentName:"a"},"createLogger")),", which\nreturns a function that can be used for standard level logging."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createLogger } from '@boost/log';\n\nconst log = createLogger({ name: 'boost' });\n\nlog('Something has happened\u2026');\n")),(0,r.kt)("p",null,"Each logging function requires a message string as the 1st argument, and an optional rest of\narguments to interpolate into the message using\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/util.html#util_util_format_format_args"},(0,r.kt)("inlineCode",{parentName:"a"},"util.format()")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"log('Name: %s %s', user.first_name, user.last_name);\nlog('Object: %O', data);\n")),(0,r.kt)("p",null,"If you would prefer to interact with a class instance, you may use the\n",(0,r.kt)("a",{parentName:"p",href:"/api/log/class/Logger"},(0,r.kt)("inlineCode",{parentName:"a"},"Logger"))," class. The major difference between the class and the function, is\nthat the class only has 1 logging method, ",(0,r.kt)("a",{parentName:"p",href:"/api/log/class/Logger#log"},(0,r.kt)("inlineCode",{parentName:"a"},"Logger#log()")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Logger } from '@boost/log';\n\nconst logger = new Logger({ name: 'boost' });\n\nlogger.log({\n    level: 'info',\n    message: 'Something else has happened\u2026',\n});\n")),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("p",null,"When creating a logger, a ",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/LoggerOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"LoggerOptions"))," object can be passed.\nThe options ",(0,r.kt)("em",{parentName:"p"},"cannot")," be customized after the fact."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import chalk from 'chalk';\nimport { createLogger, StreamTransport } from '@boost/log';\n\nconst log = createLogger({\n    name: 'boost',\n    labels: {\n        error: chalk.bgRed.black.bold(' FAIL '),\n    },\n    transports: [new StreamTransport({ levels: ['error'], stream: process.stderr })],\n});\n")),(0,r.kt)("h3",{id:"log-levels"},"Log levels"),(0,r.kt)("p",null,"There are 5 distinct logging levels outside the standard level, each represented as a unique\nfunction on the logger instance. The levels in order of ",(0,r.kt)("strong",{parentName:"p"},"priority")," are ",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"warn"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),". Each function requires a message as the 1st argument, and an optional rest of\narguments to interpolate into the message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"log.trace('Code path hit?');\nlog.debug('What is going on here?');\nlog.info('Systems are stable');\nlog.warn('Something is definitely going on\u2026');\nlog.error('Systems are down! %s', error.message);\n")),(0,r.kt)("h3",{id:"silencing-output"},"Silencing output"),(0,r.kt)("p",null,"By default, all logged messages are immediately written to the configured transports. To silence\noutput and disable writes, call the ",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/LoggerFunction#disable"},(0,r.kt)("inlineCode",{parentName:"a"},"logger.disable()")),"\nfunction, and to re-enable, call ",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/LoggerFunction#enable"},(0,r.kt)("inlineCode",{parentName:"a"},"logger.enable()")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"log.disable();\n\n// Will not write!\nlog.debug('Something is broken!');\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Messages that are logged while silenced are ",(0,r.kt)("em",{parentName:"p"},"lost")," and are ",(0,r.kt)("em",{parentName:"p"},"not")," buffered.")),(0,r.kt)("h2",{id:"formats"},"Formats"),(0,r.kt)("p",null,"All logs are represented as an object, known as a ",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/LogItem"},(0,r.kt)("inlineCode",{parentName:"a"},"LogItem")),". These\nitems contain metadata about the environment, the logger, and the current log message."),(0,r.kt)("p",null,"Before an item is written to a transport, it must be formatted from an object into a string. This\ncan be done on a per transport basis using the\n",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/TransportOptions#format"},(0,r.kt)("inlineCode",{parentName:"a"},"format"))," option, like so."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { ConsoleTransport, formats } from '@boost/log';\n\nconst transport = new ConsoleTransport({\n    format: (item) => `${item.level} ${item.message}`,\n    // Or a pre-built format\n    format: formats.json,\n});\n")),(0,r.kt)("p",null,"Boost provides formats by default, all of which are pre-configured into each built-in transport.\nFeel free to use the ",(0,r.kt)("a",{parentName:"p",href:"/api/log/namespace/formats"},"built-in formats"),", or customize your own!"),(0,r.kt)("h2",{id:"metadata"},"Metadata"),(0,r.kt)("p",null,"Sometimes additional metadata may be required that is not found within the pre-defined log item\nfields. Metadata can be defined on the logger using an object, which is then passed to all log\nitems."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const log = createLogger({\n    name: 'boost',\n    metadata: {\n        locale: 'en',\n        region: 'eu',\n    },\n});\n")),(0,r.kt)("p",null,"It can also be defined per log by passing an object as the 1st argument. Metadata defined at this\nlevel will override the logger metadata."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"log({ locale: 'de' }, \"What's going on?\");\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Fields ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"host"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"pid")," are reserved names and cannot be used.")),(0,r.kt)("h2",{id:"transport-types"},"Transport types"),(0,r.kt)("p",null,"There are multiple types of transports that can be used within a logger, all of which support a\n",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/TransportOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"TransportOptions"))," object. Some transports support additional\noptions, so please refer to their types."),(0,r.kt)("h3",{id:"consoletransport"},"ConsoleTransport"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/api/log/class/ConsoleTransport"},(0,r.kt)("inlineCode",{parentName:"a"},"ConsoleTransport"))," logs messages to the native ",(0,r.kt)("inlineCode",{parentName:"p"},"console")," and\nits corresponding level. This is the default transport when no transports are defined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { ConsoleTransport } from '@boost/log';\n\nconst transport = new ConsoleTransport();\n")),(0,r.kt)("h3",{id:"streamtransport"},"StreamTransport"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/api/log/class/StreamTransport"},(0,r.kt)("inlineCode",{parentName:"a"},"StreamTransport"))," logs messages to any writeable stream or an\nobject that defines a ",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/Writable"},(0,r.kt)("inlineCode",{parentName:"a"},"write()"))," method. Additional\n",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/StreamTransportOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"StreamTransportOptions"))," options may be provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { StreamTransport } from '@boost/log';\n\nconst transport = new StreamTransport({\n    levels: ['error', 'warn'],\n    stream: process.stderr,\n});\n")),(0,r.kt)("h3",{id:"filetransport"},"FileTransport"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/api/log/class/FileTransport"},(0,r.kt)("inlineCode",{parentName:"a"},"FileTransport"))," appends and logs messages to a file at the\ndefined path. Will automatically rotate files when a max file size is met. Additional\n",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/FileTransportOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"FileTransportOptions"))," options may be provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { FileTransport } from '@boost/log';\n\nconst transport = new FileTransport({\n    levels: ['error'],\n    path: '/var/log/error.log',\n});\n")),(0,r.kt)("h3",{id:"rotatingfiletransport"},"RotatingFileTransport"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/api/log/class/RotatingFileTransport"},(0,r.kt)("inlineCode",{parentName:"a"},"RotatingFileTransport"))," is like\n",(0,r.kt)("a",{parentName:"p",href:"/api/log/class/FileTransport"},(0,r.kt)("inlineCode",{parentName:"a"},"FileTransport")),", but also rotates files based on timestamps and a\nchosen periodic interval. Additional\n",(0,r.kt)("a",{parentName:"p",href:"/api/log/interface/RotatingFileTransportOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"RotatingFileTransportOptions"))," options may be\nprovided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { RotatingFileTransport } from '@boost/log';\n\nconst transport = new RotatingFileTransport({\n    levels: ['error'],\n    path: '/var/log/error.log',\n    rotation: 'daily',\n});\n")),(0,r.kt)("h2",{id:"test-utilities"},"Test utilities"),(0,r.kt)("p",null,"A handful of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest"},"Jest")," utilities are available in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"@boost/log/test")," module. ",(0,r.kt)("a",{parentName:"p",href:"/api/log-test"},"View the API for a full list"),"."))}h.isMDXComponent=!0}}]);