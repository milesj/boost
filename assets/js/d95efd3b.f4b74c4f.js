(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7002],{6130:function(e){"use strict";e.exports=JSON.parse('[{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":1,"name":"@boost/args","kind":1,"kindString":"Module","flags":{},"children":[{"id":106,"name":"ParseError","kind":128,"kindString":"Class","flags":{},"children":[{"id":107,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":6,"character":1}],"signatures":[{"id":108,"name":"new ParseError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":109,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":110,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":111,"name":"index","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":106,"name":"ParseError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":112,"name":"arg","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":113,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[107]},{"title":"Properties","kind":1024,"children":[112,113]}],"sources":[{"fileName":"packages/args/src/ParseError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/args/class/ParseError","nextId":294},{"id":294,"name":"ValidationError","kind":128,"kindString":"Class","flags":{},"children":[{"id":295,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":6,"character":1}],"signatures":[{"id":296,"name":"new ValidationError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":297,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":298,"name":"option","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"}],"type":{"type":"reference","id":294,"name":"ValidationError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":299,"name":"option","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Constructors","kind":512,"children":[295]},{"title":"Properties","kind":1024,"children":[299]}],"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":3,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/args/class/ValidationError","previousId":106,"nextId":96},{"id":184,"name":"Arg","kind":256,"kindString":"Interface","flags":{},"children":[{"id":185,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","name":"T"}},{"id":195,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":173,"name":"Config.deprecated"}},{"id":196,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":174,"name":"Config.description"}},{"id":186,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":187,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":188,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":189,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]}},{"id":197,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":175,"name":"Config.hidden"}},{"id":190,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":182,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"}},{"id":191,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":192,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":193,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":194,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[185,195,196,186,197,190,191]}],"sources":[{"fileName":"packages/args/src/types.ts","line":150,"character":17}],"typeParameter":[{"id":198,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":172,"name":"Config"}],"extendedBy":[{"type":"reference","id":199,"name":"Option"},{"type":"reference","id":262,"name":"Param"}],"permalink":"/api/args/interface/Arg","previousId":2,"nextId":150},{"id":150,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":151,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":92,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":152,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":94,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":153,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/src/types.ts","line":96,"character":1}],"type":{"type":"reference","name":"O"}},{"id":154,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":98,"character":1}],"type":{"type":"reference","id":134,"typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamType"}},{"id":155,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":100,"character":1}],"type":{"type":"reference","id":122,"name":"ArgList"}},{"id":156,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/src/types.ts","line":102,"character":1}],"type":{"type":"reference","id":128,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[151,152,153,154,155,156]}],"sources":[{"fileName":"packages/args/src/types.ts","line":90,"character":17}],"typeParameter":[{"id":157,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":158,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":125,"name":"PrimitiveType"}},"default":{"type":"reference","id":122,"name":"ArgList"}}],"permalink":"/api/args/interface/Arguments","previousId":184,"nextId":279},{"id":279,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":280,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":205,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":281,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":206,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[280,281]}],"sources":[{"fileName":"packages/args/src/types.ts","line":204,"character":17}],"permalink":"/api/args/interface/Category","previousId":150,"nextId":176},{"id":176,"name":"Command","kind":256,"kindString":"Interface","flags":{},"children":[{"id":177,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/src/types.ts","line":137,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":179,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":173,"name":"Config.deprecated"}},{"id":180,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":174,"name":"Config.description"}},{"id":181,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":175,"name":"Config.hidden"}},{"id":178,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/src/types.ts","line":139,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[177,179,180,181,178]}],"sources":[{"fileName":"packages/args/src/types.ts","line":135,"character":17}],"extendedTypes":[{"type":"reference","id":172,"name":"Config"}],"permalink":"/api/args/interface/Command","previousId":279,"nextId":172},{"id":172,"name":"Config","kind":256,"kindString":"Interface","flags":{},"children":[{"id":173,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":174,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":175,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[173,174,175]}],"sources":[{"fileName":"packages/args/src/types.ts","line":126,"character":17}],"extendedBy":[{"type":"reference","id":176,"name":"Command"},{"type":"reference","id":184,"name":"Arg"}],"permalink":"/api/args/interface/Config","previousId":176,"nextId":254},{"id":254,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":256,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":255,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":193,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":259,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":260,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":261,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":257,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":293,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":258,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[256,255,259,260,261,257,258]}],"sources":[{"fileName":"packages/args/src/types.ts","line":192,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":199,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"name":"Omit"}],"permalink":"/api/args/interface/Flag","previousId":172,"nextId":235},{"id":235,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":236,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/src/types.ts","line":186,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":239,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":200,"name":"Option.category"}},{"id":237,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":187,"character":1}],"type":{"type":"reference","name":"T"},"overwrites":{"type":"reference","id":202,"name":"Option.default"}},{"id":250,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":212,"name":"Option.deprecated"}},{"id":251,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":213,"name":"Option.description"}},{"id":241,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":242,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":243,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":244,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":203,"name":"Option.format"}},{"id":252,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":214,"name":"Option.hidden"}},{"id":238,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/src/types.ts","line":189,"character":1}],"type":{"type":"literal","value":true}},{"id":240,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":293,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":201,"name":"Option.short"}},{"id":245,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":182,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":207,"name":"Option.type"}},{"id":246,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":247,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":248,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":249,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":208,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[236,239,237,250,251,241,252,238,240,245,246]}],"sources":[{"fileName":"packages/args/src/types.ts","line":184,"character":17}],"typeParameter":[{"id":253,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":123,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":199,"typeArguments":[{"type":"reference","name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/MultipleOption","previousId":254,"nextId":199},{"id":199,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":200,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":202,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":185,"name":"Arg.default"}},{"id":212,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":195,"name":"Arg.deprecated"}},{"id":213,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":196,"name":"Arg.description"}},{"id":203,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":204,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":205,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":206,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":186,"name":"Arg.format"}},{"id":214,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":197,"name":"Arg.hidden"}},{"id":201,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":293,"name":"ShortOptionName"}},{"id":207,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":182,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":190,"name":"Arg.type"}},{"id":208,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":209,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":210,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":211,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":191,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[200,202,212,213,203,214,201,207,208]}],"sources":[{"fileName":"packages/args/src/types.ts","line":169,"character":17}],"typeParameter":[{"id":215,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":126,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","id":184,"typeArguments":[{"type":"reference","name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":216,"name":"SingleOption"},{"type":"reference","id":235,"name":"MultipleOption"}],"permalink":"/api/args/interface/Option","previousId":235,"nextId":262},{"id":262,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":265,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":185,"name":"Arg.default"}},{"id":275,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":195,"name":"Arg.deprecated"}},{"id":276,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":196,"name":"Arg.description"}},{"id":266,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":267,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":268,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":269,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":186,"name":"Arg.format"}},{"id":277,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":197,"name":"Arg.hidden"}},{"id":263,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/src/types.ts","line":198,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":264,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":201,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":270,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":182,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":190,"name":"Arg.type"}},{"id":271,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":272,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":273,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":274,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":191,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[265,275,276,266,277,263,264,270,271]}],"sources":[{"fileName":"packages/args/src/types.ts","line":196,"character":17}],"typeParameter":[{"id":278,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":125,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","id":184,"typeArguments":[{"type":"reference","name":"T"}],"name":"Arg"}],"permalink":"/api/args/interface/Param","previousId":199,"nextId":163},{"id":163,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":164,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":140,"name":"CommandChecker"}]}},{"id":167,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":160,"name":"ParserSettings.loose"}},{"id":165,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/src/types.ts","line":119,"character":1}],"type":{"type":"reference","id":138,"typeArguments":[{"type":"reference","name":"O"}],"name":"MapOptionConfig"}},{"id":166,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":132,"typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamConfig"}},{"id":168,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":161,"name":"ParserSettings.unknown"}},{"id":169,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":162,"name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[164,167,165,166,168,169]}],"sources":[{"fileName":"packages/args/src/types.ts","line":114,"character":17}],"typeParameter":[{"id":170,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":171,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":125,"name":"PrimitiveType"}},"default":{"type":"reference","id":122,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","id":159,"name":"ParserSettings"}],"permalink":"/api/args/interface/ParserOptions","previousId":262,"nextId":159},{"id":159,"name":"ParserSettings","kind":256,"kindString":"Interface","flags":{},"children":[{"id":160,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":161,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":162,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[160,161,162]}],"sources":[{"fileName":"packages/args/src/types.ts","line":105,"character":17}],"extendedBy":[{"type":"reference","id":163,"name":"ParserOptions"}],"permalink":"/api/args/interface/ParserSettings","previousId":163,"nextId":216},{"id":216,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":220,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":200,"name":"Option.category"}},{"id":217,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/src/types.ts","line":178,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"id":218,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/src/types.ts","line":180,"character":1}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":219,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":181,"character":1}],"type":{"type":"reference","name":"T"},"overwrites":{"type":"reference","id":202,"name":"Option.default"}},{"id":231,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":212,"name":"Option.deprecated"}},{"id":232,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":213,"name":"Option.description"}},{"id":222,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":223,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":224,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":225,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":203,"name":"Option.format"}},{"id":233,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":214,"name":"Option.hidden"}},{"id":221,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":293,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":201,"name":"Option.short"}},{"id":226,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":182,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":207,"name":"Option.type"}},{"id":227,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":228,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":229,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":230,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":208,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[220,217,218,219,231,232,222,233,221,226,227]}],"sources":[{"fileName":"packages/args/src/types.ts","line":176,"character":17}],"typeParameter":[{"id":234,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":124,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":199,"typeArguments":[{"type":"reference","name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/SingleOption","previousId":159,"nextId":129},{"id":129,"name":"AliasMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":19,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/args#AliasMap","previousId":11,"nextId":122},{"id":122,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":5,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#ArgList","previousId":129,"nextId":82},{"id":82,"name":"ArgsErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":35,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/args#ArgsErrorCode","previousId":122,"nextId":121},{"id":121,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#Argv","previousId":82,"nextId":140},{"id":140,"name":"CommandChecker","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":12}],"type":{"type":"reflection","declaration":{"id":141,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":29}],"signatures":[{"id":142,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":143,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"permalink":"/api/args#CommandChecker","previousId":121,"nextId":144},{"id":144,"name":"ContextFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":12}],"type":{"type":"reflection","declaration":{"id":145,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":29}],"signatures":[{"id":146,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":148,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":149,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":121,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":163,"typeArguments":[{"type":"reflection","declaration":{"id":147,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":72}]}}],"name":"ParserOptions"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/args#ContextFactory","previousId":140,"nextId":182},{"id":182,"name":"InferArgType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":144,"character":12}],"typeParameter":[{"id":183,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"literal","value":"boolean"},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"intrinsic","name":"number"}]},"trueType":{"type":"literal","value":"number"},"falseType":{"type":"literal","value":"string"}}},"permalink":"/api/args#InferArgType","previousId":144,"nextId":136},{"id":136,"name":"InferOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type."},"sources":[{"fileName":"packages/args/src/types.ts","line":75,"character":12}],"typeParameter":[{"id":137,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"reference","id":254,"name":"Flag"},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"trueType":{"type":"reference","id":235,"typeArguments":[{"type":"reference","name":"T"}],"name":"MultipleOption"},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"trueType":{"type":"reference","id":216,"typeArguments":[{"type":"reference","name":"T"}],"name":"SingleOption"},"falseType":{"type":"intrinsic","name":"never"}}}},"permalink":"/api/args#InferOptionConfig","previousId":182,"nextId":130},{"id":130,"name":"InferParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type. Only primitives are allowed."},"sources":[{"fileName":"packages/args/src/types.ts","line":22,"character":12}],"typeParameter":[{"id":131,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"reference","id":125,"name":"PrimitiveType"},"trueType":{"type":"reference","id":262,"typeArguments":[{"type":"reference","name":"T"}],"name":"Param"},"falseType":{"type":"intrinsic","name":"never"}},"permalink":"/api/args#InferParamConfig","previousId":136,"nextId":123},{"id":123,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":7,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/args#ListType","previousId":130,"nextId":292},{"id":292,"name":"LongOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Option name without leading \\"--\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":226,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/args#LongOptionName","previousId":123,"nextId":138},{"id":138,"name":"MapOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":84,"character":12}],"typeParameter":[{"id":139,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"mapped","parameter":"K","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"T"}},"templateType":{"type":"reference","id":136,"typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","name":"K"},"objectType":{"type":"reference","name":"T"}}],"name":"InferOptionConfig"}},"permalink":"/api/args#MapOptionConfig","previousId":292,"nextId":132},{"id":132,"name":"MapParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":133,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":125,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"E"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":130,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"reference","id":122,"name":"ArgList"},"trueType":{"type":"array","elementType":{"type":"reference","id":262,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Param"}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamConfig","previousId":138,"nextId":134},{"id":134,"name":"MapParamType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":54,"character":12}],"typeParameter":[{"id":135,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":125,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"reference","name":"E"},{"type":"rest","elementType":{"type":"reference","id":122,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"rest","elementType":{"type":"reference","id":122,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"rest","elementType":{"type":"reference","id":122,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"rest","elementType":{"type":"reference","id":122,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"rest","elementType":{"type":"reference","id":122,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"reference","id":122,"name":"ArgList"},"trueType":{"type":"reference","id":122,"name":"ArgList"},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamType","previousId":132,"nextId":282},{"id":282,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":12}],"type":{"type":"intersection","types":[{"type":"reference","id":199,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":283,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":284,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":211,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":285,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":212,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":125,"name":"PrimitiveType"}}},{"id":286,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":213,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":287,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":214,"character":1}],"type":{"type":"reference","id":126,"name":"ValueType"}},{"id":288,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":215,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[284,285,286,287,288]}],"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":41}]}}]},"permalink":"/api/args#OptionConfig","previousId":134,"nextId":289},{"id":289,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":218,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":282,"name":"OptionConfig"}],"name":"Record"},"permalink":"/api/args#OptionConfigMap","previousId":282,"nextId":127},{"id":127,"name":"OptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":15,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":126,"name":"ValueType"}],"name":"Record"},"permalink":"/api/args#OptionMap","previousId":289,"nextId":290},{"id":290,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":221,"character":12}],"type":{"type":"reference","id":262,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/args#ParamConfig","previousId":127,"nextId":291},{"id":291,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":223,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":290,"name":"ParamConfig"}},"permalink":"/api/args#ParamConfigList","previousId":290,"nextId":125},{"id":125,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":124,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/args#PrimitiveType","previousId":291,"nextId":124},{"id":124,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":9,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/args#ScalarType","previousId":125,"nextId":293},{"id":293,"name":"ShortOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Short option name without leading \\"-\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":229,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"A"},{"type":"literal","value":"a"},{"type":"literal","value":"B"},{"type":"literal","value":"b"},{"type":"literal","value":"C"},{"type":"literal","value":"c"},{"type":"literal","value":"D"},{"type":"literal","value":"d"},{"type":"literal","value":"E"},{"type":"literal","value":"e"},{"type":"literal","value":"F"},{"type":"literal","value":"f"},{"type":"literal","value":"G"},{"type":"literal","value":"g"},{"type":"literal","value":"H"},{"type":"literal","value":"h"},{"type":"literal","value":"I"},{"type":"literal","value":"i"},{"type":"literal","value":"J"},{"type":"literal","value":"j"},{"type":"literal","value":"K"},{"type":"literal","value":"k"},{"type":"literal","value":"L"},{"type":"literal","value":"l"},{"type":"literal","value":"M"},{"type":"literal","value":"m"},{"type":"literal","value":"N"},{"type":"literal","value":"n"},{"type":"literal","value":"O"},{"type":"literal","value":"o"},{"type":"literal","value":"P"},{"type":"literal","value":"p"},{"type":"literal","value":"Q"},{"type":"literal","value":"q"},{"type":"literal","value":"R"},{"type":"literal","value":"r"},{"type":"literal","value":"S"},{"type":"literal","value":"s"},{"type":"literal","value":"T"},{"type":"literal","value":"t"},{"type":"literal","value":"U"},{"type":"literal","value":"u"},{"type":"literal","value":"V"},{"type":"literal","value":"v"},{"type":"literal","value":"W"},{"type":"literal","value":"w"},{"type":"literal","value":"X"},{"type":"literal","value":"x"},{"type":"literal","value":"Y"},{"type":"literal","value":"y"},{"type":"literal","value":"Z"},{"type":"literal","value":"z"}]},"permalink":"/api/args#ShortOptionName","previousId":124,"nextId":128},{"id":128,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":17,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/args#UnknownOptionMap","previousId":293,"nextId":126},{"id":126,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":13,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":123,"name":"ListType"},{"type":"reference","id":125,"name":"PrimitiveType"}]},"permalink":"/api/args#ValueType","previousId":128,"nextId":83},{"id":83,"name":"ArgsError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":37,"character":13}],"type":{"type":"reflection","declaration":{"id":84,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":85,"name":"new ArgsError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":86,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}},{"id":87,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/args#ArgsError","previousId":23,"nextId":91},{"id":91,"name":"COMMAND_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#COMMAND_FORMAT","previousId":83,"nextId":88},{"id":88,"name":"DEFAULT_BOOLEAN_VALUE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":2,"character":13}],"type":{"type":"literal","value":false},"defaultValue":"false","permalink":"/api/args#DEFAULT_BOOLEAN_VALUE","previousId":91,"nextId":89},{"id":89,"name":"DEFAULT_NUMBER_VALUE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":3,"character":13}],"type":{"type":"literal","value":0},"defaultValue":"0","permalink":"/api/args#DEFAULT_NUMBER_VALUE","previousId":88,"nextId":90},{"id":90,"name":"DEFAULT_STRING_VALUE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":4,"character":13}],"type":{"type":"literal","value":""},"defaultValue":"\'\'","permalink":"/api/args#DEFAULT_STRING_VALUE","previousId":89,"nextId":92},{"id":92,"name":"LONG_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":13,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#LONG_OPTION_FORMAT","previousId":90,"nextId":95},{"id":95,"name":"OPTION_LIKE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":25,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#OPTION_LIKE","previousId":92,"nextId":93},{"id":93,"name":"SHORT_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":17,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_FORMAT","previousId":95,"nextId":94},{"id":94,"name":"SHORT_OPTION_GROUP_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":21,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_GROUP_FORMAT","previousId":93},{"id":96,"name":"format","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/format.ts","line":14,"character":16}],"signatures":[{"id":97,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a parsed arguments object back into a command line list of arguments."},"parameters":[{"id":98,"name":"argument","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":150,"typeArguments":[{"type":"reference","id":127,"name":"OptionMap"},{"type":"reference","id":122,"name":"ArgList"}],"name":"Arguments"}],"name":"Partial"}}],"type":{"type":"reference","id":121,"name":"Argv"}}],"permalink":"/api/args/function/format","previousId":1,"nextId":99},{"id":99,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parse.ts","line":59,"character":16}],"signatures":[{"id":100,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject. Will extract commands, options, flags, and params based on the defined parser options."},"typeParameter":[{"id":102,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":101,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":103,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":125,"name":"PrimitiveType"}},"default":{"type":"reference","id":122,"name":"ArgList"}}],"parameters":[{"id":104,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":121,"name":"Argv"}},{"id":105,"name":"parserOptions","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":163,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ParserOptions"}}],"type":{"type":"reference","id":150,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parse","previousId":96,"nextId":114},{"id":114,"name":"parseInContext","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parseInContext.ts","line":10,"character":16}],"signatures":[{"id":115,"name":"parseInContext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject using a context factory. The factory can customize the parser options based on the\\narguments being parsed."},"typeParameter":[{"id":117,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":116,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":118,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":125,"name":"PrimitiveType"}},"default":{"type":"reference","id":122,"name":"ArgList"}}],"parameters":[{"id":119,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":121,"name":"Argv"}},{"id":120,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":144,"name":"ContextFactory"}}],"type":{"type":"reference","id":150,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parseInContext","previousId":99,"nextId":184}],"groups":[{"title":"Classes","kind":128,"children":[106,294]},{"title":"Functions","kind":64,"children":[96,99,114]},{"title":"Interfaces","kind":256,"children":[184,150,279,176,172,254,235,199,262,163,159,216]},{"title":"Type aliases","kind":4194304,"children":[129,122,82,121,140,144,182,136,130,123,292,138,132,134,282,289,127,290,291,125,124,293,128,126]},{"title":"Variables","kind":32,"children":[83,91,88,89,90,92,95,93,94]}],"sources":[{"fileName":"packages/args/src/index.ts","line":6,"character":0}],"permalink":"/api/args"},"urlSlug":"args"}],"packageName":"@boost/args","packageVersion":"2.3.3"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":10,"name":"@boost/cli","kind":1,"kindString":"Module","flags":{},"children":[{"id":2193,"name":"Arg","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":2194,"name":"Flag","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Flag.ts","line":8,"character":16}],"signatures":[{"id":2195,"name":"Flag","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line flag (boolean value)."},"parameters":[{"id":2196,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2197,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2663,"typeArguments":[{"type":"reference","id":2559,"name":"FlagConfig"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":2198,"name":"Number","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Number.ts","line":8,"character":16}],"signatures":[{"id":2199,"name":"Number","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a numeric value."},"parameters":[{"id":2200,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2201,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2663,"typeArguments":[{"type":"reference","id":2642,"typeArguments":[{"type":"intrinsic","name":"number"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":2202,"name":"Numbers","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Numbers.ts","line":8,"character":16}],"signatures":[{"id":2203,"name":"Numbers","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple numeric values."},"parameters":[{"id":2204,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2205,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2663,"typeArguments":[{"type":"reference","id":2568,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":2206,"name":"Params","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Params.ts","line":7,"character":16}],"signatures":[{"id":2207,"name":"Params","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator for declaring command line parameters (positional arguments)."},"typeParameter":[{"id":2208,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":2209,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"MapParamConfig"}}],"type":{"type":"reference","name":"MethodDecorator"}}]},{"id":2210,"name":"String","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/String.ts","line":8,"character":16}],"signatures":[{"id":2211,"name":"String","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a string value."},"parameters":[{"id":2212,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2213,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2663,"typeArguments":[{"type":"reference","id":2642,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":2214,"name":"Strings","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Strings.ts","line":8,"character":16}],"signatures":[{"id":2215,"name":"Strings","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple string values."},"parameters":[{"id":2216,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2217,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2663,"typeArguments":[{"type":"reference","id":2568,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]}],"groups":[{"title":"Functions","kind":64,"children":[2194,2198,2202,2206,2210,2214]}],"sources":[{"fileName":"packages/cli/src/decorators/index.ts","line":1,"character":0}],"permalink":"/api/cli/namespace/Arg","previousId":26,"nextId":2545},{"id":2236,"name":"Command","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":2249,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":142,"character":1}],"signatures":[{"id":2250,"name":"new Command","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":2251,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2667,"name":"GlobalOptions"},"default":{"type":"reference","id":2667,"name":"GlobalOptions"}},{"id":2252,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}},"default":{"type":"reference","id":2545,"name":"ArgList"}},{"id":2254,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2253,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":2255,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":2236,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"},{"type":"reference","name":"Options"}],"name":"Command"},"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}},{"id":2261,"name":"exit","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to exit the current program, with an optional error code."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":126,"character":1}],"type":{"type":"reference","id":2677,"name":"ExitHandler"}},{"id":2256,"name":"help","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--help`, `-h` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2257,"name":"locale","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--locale` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":112,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'en\'"},{"id":2262,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to log to the console using a log level."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":129,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2316,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":19,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2747,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":2317,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":25,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2747,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":2340,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":2258,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional arguments passed after `--` on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":2259,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unknown options passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":118,"character":1}],"type":{"type":"reference","id":2661,"name":"UnknownOptionMap"},"defaultValue":"{}"},{"id":2260,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--version`, `-v` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":121,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2237,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":82,"character":8}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":2238,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":84,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2239,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":86,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"defaultValue":"false"},{"id":2240,"name":"categories","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":88,"character":8}],"type":{"type":"reference","id":2675,"name":"Categories"},"defaultValue":"{}"},{"id":2241,"name":"category","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":90,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":2243,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":94,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2242,"name":"description","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":92,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":2244,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":96,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2245,"name":"options","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":98,"character":8}],"type":{"type":"reference","id":2611,"name":"OptionConfigMap"},"defaultValue":"..."},{"id":2246,"name":"params","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":100,"character":8}],"type":{"type":"reference","id":2630,"name":"ParamConfigList"},"defaultValue":"[]"},{"id":2247,"name":"path","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":102,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":2248,"name":"usage","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":104,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"defaultValue":"\'\'"},{"id":2263,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":169,"character":1}],"signatures":[{"id":2264,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate options passed to the constructor."},"parameters":[{"id":2265,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2266,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":2341,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":2342,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2343,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2344,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2345,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2346,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":2267,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":176,"character":7}],"signatures":[{"id":2268,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a React element based on the Help component."},"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}],"name":"Promise"},"implementationOf":{"type":"reference","id":2749,"name":"Commandable.createHelp"}}],"implementationOf":{"type":"reference","id":2748,"name":"Commandable.createHelp"}},{"id":2269,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":198,"character":1}],"signatures":[{"id":2270,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a system native command with the given arguments\\nand pass the results through a promise. This does *not* execute Boost CLI\\ncommands, use `runProgram()` instead."},"parameters":[{"id":2271,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2272,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2273,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Options"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaChildProcess"}}]},{"id":2274,"name":"getArguments","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":211,"character":1}],"signatures":[{"id":2275,"name":"getArguments","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current command class as an arguments object.\\nOptions and params must be parsed first to operate correctly."},"type":{"type":"reference","id":2546,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Arguments"}}]},{"id":2320,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":34,"character":1}],"signatures":[{"id":2321,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":2323,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2322,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":2324,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}},"default":{"type":"reference","id":2545,"name":"ArgList"}}],"parameters":[{"id":2325,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2747,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":2326,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":49,"character":1}],"signatures":[{"id":2327,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":2276,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":225,"character":1}],"signatures":[{"id":2277,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate and return all metadata registered to this command instance."},"type":{"type":"reference","id":2731,"name":"CommandMetadata"},"implementationOf":{"type":"reference","id":2751,"name":"Commandable.getMetadata"}}],"implementationOf":{"type":"reference","id":2750,"name":"Commandable.getMetadata"}},{"id":2278,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":260,"character":1}],"signatures":[{"id":2279,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return metadata as options for argument parsing."},"type":{"type":"reference","id":2631,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ParserOptions"},"implementationOf":{"type":"reference","id":2753,"name":"Commandable.getParserOptions"}}],"implementationOf":{"type":"reference","id":2752,"name":"Commandable.getParserOptions"}},{"id":2280,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":276,"character":1}],"signatures":[{"id":2281,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the command path (canonical name on the command line)."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2755,"name":"Commandable.getPath"}}],"implementationOf":{"type":"reference","id":2754,"name":"Commandable.getPath"}},{"id":2328,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":57,"character":1}],"signatures":[{"id":2329,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":2330,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2747,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2236,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"},{"type":"reference","name":"Options"}],"name":"Command"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2331,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2332,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2333,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}}}],"parameters":[{"id":2334,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2335,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2764,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandConfig"}},{"id":2336,"name":"runner","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2778,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandRunner"}}],"type":{"type":"reference","id":2236,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"},{"type":"reference","name":"Options"}],"name":"Command"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2282,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":283,"character":7}],"signatures":[{"id":2283,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":2284,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},"implementationOf":{"type":"reference","id":2757,"name":"Commandable.render"}}],"implementationOf":{"type":"reference","id":2756,"name":"Commandable.render"}},{"id":2297,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":318,"character":10}],"signatures":[{"id":2298,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Executed when the command is being ran."},"parameters":[{"id":2299,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2701,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2701,"name":"RunResult"}],"name":"Promise"}]},"implementationOf":{"type":"reference","id":2760,"name":"Commandable.run"}}],"implementationOf":{"type":"reference","id":2759,"name":"Commandable.run"}},{"id":2285,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":290,"character":1}],"signatures":[{"id":2286,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program within itself, by passing a custom command and argv list."},"parameters":[{"id":2287,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2555,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2288,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":296,"character":1}],"signatures":[{"id":2289,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run a task (function) with the defined arguments and\\nthe current command instance bound to the task\'s context."},"typeParameter":[{"id":2290,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":2291,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2292,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2293,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2294,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2295,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}}},{"id":2296,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2249]},{"title":"Properties","kind":1024,"children":[2261,2256,2257,2262,2316,2317,2340,2258,2259,2260,2237,2238,2239,2240,2241,2243,2242,2244,2245,2246,2247,2248],"categories":[{"title":"CATEGORY","children":[2261,2256,2257,2262,2340,2258,2259,2260,2237,2238,2239,2240,2241,2243,2242,2244,2245,2246,2247,2248]},{"title":"Events","children":[2316,2317]}]},{"title":"Methods","kind":2048,"children":[2263,2341,2267,2269,2274,2320,2326,2276,2278,2280,2328,2282,2297,2285,2288]}],"sources":[{"fileName":"packages/cli/src/Command.tsx","line":74,"character":22}],"typeParameter":[{"id":2347,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2667,"name":"GlobalOptions"},"default":{"type":"reference","id":2667,"name":"GlobalOptions"}},{"id":2348,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}},"default":{"type":"reference","id":2545,"name":"ArgList"}},{"id":2350,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2349,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":77,"character":27}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"CommandManager"}],"implementedTypes":[{"type":"reference","id":2747,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Commandable"}],"permalink":"/api/cli/class/Command","nextId":2837},{"id":2837,"name":"Failure","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A React component that renders a failure state for errors and warnings."},"children":[{"id":2838,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2839,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2840,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2830,"name":"FailureProps"},{"type":"reference","typeArguments":[{"type":"reference","id":2830,"name":"FailureProps"}],"name":"Readonly"}]}}],"type":{"type":"reference","id":2837,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2841,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"comment":{"tags":[{"tag":"deprecated","text":""},{"tag":"see","text":"https://reactjs.org/docs/legacy-context.html\\n"}]},"parameters":[{"id":2842,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2830,"name":"FailureProps"}},{"id":2843,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","id":2837,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2852,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":152,"character":10}],"signatures":[{"id":2853,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","name":"Element"},"overwrites":{"type":"reference","name":"React.Component.render"}}],"overwrites":{"type":"reference","name":"React.Component.render"}},{"id":2846,"name":"renderCodeFrame","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":50,"character":1}],"signatures":[{"id":2847,"name":"renderCodeFrame","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2848,"name":"renderStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":105,"character":1}],"signatures":[{"id":2849,"name":"renderStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2850,"name":"renderWarnings","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":127,"character":1}],"signatures":[{"id":2851,"name":"renderWarnings","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2844,"name":"shouldHideStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":36,"character":1}],"signatures":[{"id":2845,"name":"shouldHideStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"boolean"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2838]},{"title":"Methods","kind":2048,"children":[2852,2846,2848,2850,2844]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":35,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2830,"name":"FailureProps"}],"name":"Component"}],"permalink":"/api/cli/class/Failure","previousId":2236,"nextId":2429},{"id":2429,"name":"Program","kind":128,"kindString":"Class","flags":{},"children":[{"id":2430,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":130,"character":1}],"signatures":[{"id":2431,"name":"new Program","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2432,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2682,"name":"ProgramOptions"}},{"id":2433,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2690,"name":"ProgramStreams"}}],"type":{"type":"reference","id":2429,"name":"Program"},"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}},{"id":2514,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":19,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2747,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":2434,"name":"onAfterRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a component has rendered."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":59,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2435,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the program and command have been ran."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":65,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"reference","name":"Error"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2515,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":25,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2747,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":2436,"name":"onBeforeRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has run but before a component will render."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":71,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2701,"name":"RunResult"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2437,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the program and command will run."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":77,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2555,"name":"Argv"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2438,"name":"onCommandFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command has been found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":83,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2555,"name":"Argv"},{"type":"intrinsic","name":"string"},{"type":"reference","id":2747,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2439,"name":"onCommandNotFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command wasn\'t found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":89,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2555,"name":"Argv"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2440,"name":"onExit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the exit() handler is executed but before the process exits."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":95,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2441,"name":"onHelp","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the help menu is rendered."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":101,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2538,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2682,"name":"ProgramOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":2442,"name":"streams","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":103,"character":10}],"type":{"type":"reference","id":2690,"name":"ProgramStreams"},"defaultValue":"..."},{"id":2451,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":160,"character":1}],"signatures":[{"id":2452,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2453,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2454,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2682,"name":"ProgramOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":2455,"name":"categories","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":178,"character":1}],"signatures":[{"id":2456,"name":"categories","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define option and command categories to supply to the running command,\\nor the program itself."},"parameters":[{"id":2457,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2675,"name":"Categories"}}],"type":{"type":"reference","id":2429,"name":"Program"}}]},{"id":2539,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":2540,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2541,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2682,"name":"ProgramOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2542,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2543,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2544,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2682,"name":"ProgramOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2682,"name":"ProgramOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2682,"name":"ProgramOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":2458,"name":"default","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":188,"character":1}],"signatures":[{"id":2459,"name":"default","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path as the default command.\\nA default command should be used when stand-alone binary is required."},"parameters":[{"id":2460,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2747,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2429,"name":"Program"}}]},{"id":2461,"name":"exit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":203,"character":1}],"signatures":[{"id":2462,"name":"exit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Exit the program with an error code.\\nShould be called within a command or component."},"parameters":[{"id":2463,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"Error"}]}},{"id":2464,"name":"errorCode","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"never"}}]},{"id":2518,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":34,"character":1}],"signatures":[{"id":2519,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":2521,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2520,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":2522,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}},"default":{"type":"reference","id":2545,"name":"ArgList"}}],"parameters":[{"id":2523,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2747,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":2524,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":49,"character":1}],"signatures":[{"id":2525,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":2465,"name":"middleware","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":227,"character":1}],"signatures":[{"id":2466,"name":"middleware","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define a middleware function to apply to the argv list or args object."},"parameters":[{"id":2467,"name":"middleware","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2810,"name":"Middleware"}}],"type":{"type":"reference","id":2429,"name":"Program"}}]},{"id":2468,"name":"parse","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":240,"character":1}],"signatures":[{"id":2469,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse the arguments list according to the number of commands that have been registered."},"typeParameter":[{"id":2470,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2667,"name":"GlobalOptions"}},{"id":2471,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}},"default":{"type":"reference","id":2545,"name":"ArgList"}}],"parameters":[{"id":2472,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2555,"name":"Argv"}}],"type":{"type":"reference","id":2546,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Arguments"}}]},{"id":2526,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":57,"character":1}],"signatures":[{"id":2527,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":2528,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2747,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2429,"name":"Program"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2529,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2530,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2531,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}}}],"parameters":[{"id":2532,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2533,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2764,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandConfig"}},{"id":2534,"name":"runner","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2778,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandRunner"}}],"type":{"type":"reference","id":2429,"name":"Program"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2473,"name":"renderElement","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":269,"character":7}],"signatures":[{"id":2474,"name":"renderElement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":2475,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"id":2476,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":331,"character":7}],"signatures":[{"id":2477,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program in the following steps:\\n- Apply middleware to argv list.\\n- Parse argv into an args object (of options, params, etc).\\n- Determine command to run, or fail.\\n- Run command and render output.\\n- Return exit code."},"parameters":[{"id":2478,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2555,"name":"Argv"}},{"id":2479,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2698,"name":"ProgramBootstrap"}},{"id":2480,"name":"rethrow","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2481,"name":"runAndExit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":363,"character":7}],"signatures":[{"id":2482,"name":"runAndExit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program and also set the process exit code."},"parameters":[{"id":2483,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2555,"name":"Argv"}},{"id":2484,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2698,"name":"ProgramBootstrap"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2430]},{"title":"Properties","kind":1024,"children":[2514,2434,2435,2515,2436,2437,2438,2439,2440,2441,2538,2442],"categories":[{"title":"CATEGORY","children":[2538,2442]},{"title":"Events","children":[2514,2434,2435,2515,2436,2437,2438,2439,2440,2441]}]},{"title":"Methods","kind":2048,"children":[2451,2455,2539,2458,2461,2518,2524,2465,2468,2526,2473,2476,2481]}],"sources":[{"fileName":"packages/cli/src/Program.tsx","line":54,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2682,"name":"ProgramOptions"}],"name":"CommandManager"}],"permalink":"/api/cli/class/Program","previousId":2837,"nextId":2218},{"id":2546,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2547,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":41,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2548,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":43,"character":4}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":2549,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":45,"character":4}],"type":{"type":"reference","name":"O"}},{"id":2550,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":47,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamType"}},{"id":2551,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":49,"character":4}],"type":{"type":"reference","id":2545,"name":"ArgList"}},{"id":2552,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":51,"character":4}],"type":{"type":"reference","id":2661,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[2547,2548,2549,2550,2551,2552]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":39,"character":17}],"typeParameter":[{"id":2553,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2554,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}},"default":{"type":"reference","id":2545,"name":"ArgList"}}],"permalink":"/api/cli/interface/Arguments","previousId":30,"nextId":2556},{"id":2556,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2557,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":133,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2558,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":134,"character":4}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[2557,2558]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":132,"character":17}],"permalink":"/api/cli/interface/Category","previousId":2546,"nextId":2703},{"id":2703,"name":"CommandConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2704,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":114,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2705,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":116,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2706,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":118,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]}},{"id":2707,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":120,"character":1}],"type":{"type":"reference","id":2675,"name":"Categories"}},{"id":2711,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.category"}},{"id":2713,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.deprecated"}},{"id":2714,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.description"}},{"id":2715,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.hidden"}},{"id":2708,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2611,"name":"OptionConfigMap"}},{"id":2709,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":122,"character":1}],"type":{"type":"reference","id":2630,"name":"ParamConfigList"}},{"id":2710,"name":"path","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2712,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2704,2705,2706,2707,2711,2713,2714,2715,2708,2709,2710,2712]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":112,"character":17}],"extendedTypes":[{"type":"reference","name":"BaseCommandConfig"}],"permalink":"/api/cli/interface/CommandConfig","previousId":2556,"nextId":2731},{"id":2731,"name":"CommandMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2734,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":114,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","id":2719,"name":"CommandStaticConfig.aliases"}},{"id":2735,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":116,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2720,"name":"CommandStaticConfig.allowUnknownOptions"}},{"id":2736,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":118,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","id":2721,"name":"CommandStaticConfig.allowVariadicParams"}},{"id":2737,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":120,"character":1}],"type":{"type":"reference","id":2675,"name":"Categories"},"inheritedFrom":{"type":"reference","id":2722,"name":"CommandStaticConfig.categories"}},{"id":2741,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2726,"name":"CommandStaticConfig.category"}},{"id":2732,"name":"commands","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":135,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2747,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}],"name":"Record"}},{"id":2743,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2728,"name":"CommandStaticConfig.deprecated"}},{"id":2744,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2729,"name":"CommandStaticConfig.description"}},{"id":2733,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":131,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2718,"name":"CommandStaticConfig.hasRegisteredOptions"}},{"id":2745,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2730,"name":"CommandStaticConfig.hidden"}},{"id":2738,"name":"options","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2611,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","id":2723,"name":"CommandStaticConfig.options"}},{"id":2739,"name":"params","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":122,"character":1}],"type":{"type":"reference","id":2630,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","id":2724,"name":"CommandStaticConfig.params"}},{"id":2740,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2725,"name":"CommandStaticConfig.path"}},{"id":2742,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","id":2727,"name":"CommandStaticConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2734,2735,2736,2737,2741,2732,2743,2744,2733,2745,2738,2739,2740,2742]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":134,"character":17}],"extendedTypes":[{"type":"reference","id":2717,"name":"CommandStaticConfig"}],"permalink":"/api/cli/interface/CommandMetadata","previousId":2703,"nextId":2717},{"id":2717,"name":"CommandStaticConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2719,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":114,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"Required.aliases"}},{"id":2720,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":116,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.allowUnknownOptions"}},{"id":2721,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":118,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","name":"Required.allowVariadicParams"}},{"id":2722,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":120,"character":1}],"type":{"type":"reference","id":2675,"name":"Categories"},"inheritedFrom":{"type":"reference","name":"Required.categories"}},{"id":2726,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.category"}},{"id":2728,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.deprecated"}},{"id":2729,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.description"}},{"id":2718,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":131,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2730,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.hidden"}},{"id":2723,"name":"options","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2611,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","name":"Required.options"}},{"id":2724,"name":"params","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":122,"character":1}],"type":{"type":"reference","id":2630,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","name":"Required.params"}},{"id":2725,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.path"}},{"id":2727,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Required.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2719,2720,2721,2722,2726,2728,2729,2718,2730,2723,2724,2725,2727]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":130,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2703,"name":"CommandConfig"}],"name":"Required"}],"extendedBy":[{"type":"reference","id":2731,"name":"CommandMetadata"}],"permalink":"/api/cli/interface/CommandStaticConfig","previousId":2731,"nextId":2747},{"id":2747,"name":"Commandable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2748,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":141,"character":1}],"signatures":[{"id":2749,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}]}],"name":"Promise"}}]},{"id":2750,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":142,"character":1}],"signatures":[{"id":2751,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2731,"name":"CommandMetadata"}}]},{"id":2752,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":143,"character":1}],"signatures":[{"id":2753,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2631,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ParserOptions"}}]},{"id":2754,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":144,"character":1}],"signatures":[{"id":2755,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2756,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":145,"character":1}],"signatures":[{"id":2757,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2758,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"id":2759,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":146,"character":1}],"signatures":[{"id":2760,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2761,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2701,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2701,"name":"RunResult"}],"name":"Promise"}]}}]}],"groups":[{"title":"Methods","kind":2048,"children":[2748,2750,2752,2754,2756,2759]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":140,"character":17}],"typeParameter":[{"id":2762,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"any"}},{"id":2763,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"implementedBy":[{"type":"reference","id":2236,"name":"Command"}],"permalink":"/api/cli/interface/Commandable","previousId":2717,"nextId":2821},{"id":2821,"name":"ConfirmProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2822,"name":"invalidError","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Error message to display when an invalid character is pressed. Defaults to a custom message."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":12,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2825,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"Omit.label"}},{"id":2823,"name":"no","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a falsy state when pressed. Defaults to \\"N\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2826,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.prefix"}},{"id":2824,"name":"yes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a truthy state when pressed. Defaults to \\"y\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2827,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2828,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2829,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"groups":[{"title":"Properties","kind":1024,"children":[2822,2825,2823,2826,2824]},{"title":"Methods","kind":2048,"children":[2827]}],"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":10,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"PromptProps"},{"type":"literal","value":"validate"}],"name":"Omit"}],"permalink":"/api/cli/interface/ConfirmProps","previousId":2747,"nextId":2830},{"id":2830,"name":"FailureProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2831,"name":"binName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the binary being executed."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2832,"name":"commandLine","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Full length command line being ran."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2833,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":23,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2834,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The primary error to display in red."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":25,"character":1}],"type":{"type":"reference","name":"Error"}},{"id":2835,"name":"hideStackTrace","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the primary error stack trace. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":27,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2836,"name":"warnings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Optional errors as warnings to display in yellow."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":29,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}}],"groups":[{"title":"Properties","kind":1024,"children":[2831,2832,2833,2834,2835,2836]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":17,"character":17}],"permalink":"/api/cli/interface/FailureProps","previousId":2821,"nextId":2559},{"id":2559,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2563,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":2560,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":123,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":2564,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":2561,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":2565,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":2566,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":2562,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2563,2560,2564,2561,2565,2566,2562]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":122,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2587,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"name":"Omit"}],"permalink":"/api/cli/interface/Flag","previousId":2830,"nextId":2667},{"id":2667,"name":"GlobalOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2668,"name":"help","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":58,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2669,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":59,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2670,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":60,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2668,2669,2670]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":57,"character":17}],"permalink":"/api/cli/interface/GlobalOptions","previousId":2559,"nextId":2857},{"id":2857,"name":"HeaderProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2858,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Text to display for the label."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2860,"name":"marginBottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The top margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2859,"name":"marginTop","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The bottom margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2861,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Customize the background color using Style. Defaults to normal text."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":15,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2816,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2858,2860,2859,2861]}],"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":7,"character":17}],"permalink":"/api/cli/interface/HeaderProps","previousId":2667,"nextId":2865},{"id":2865,"name":"HelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2866,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of categories to use for command and option grouping."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":33,"character":1}],"type":{"type":"reference","id":2675,"name":"Categories"}},{"id":2868,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of commands, typically sub-commands."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":37,"character":1}],"type":{"type":"reference","id":2716,"name":"CommandConfigMap"}},{"id":2867,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Configuration metadata about the current command."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":35,"character":1}],"type":{"type":"reference","id":2703,"name":"CommandConfig"}},{"id":2869,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2870,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A header to display at the top of the output."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":41,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2871,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of command options."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":43,"character":1}],"type":{"type":"reference","id":2611,"name":"OptionConfigMap"}},{"id":2872,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of command params."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":45,"character":1}],"type":{"type":"reference","id":2630,"name":"ParamConfigList"}}],"groups":[{"title":"Properties","kind":1024,"children":[2866,2868,2867,2869,2870,2871,2872]}],"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":31,"character":17}],"permalink":"/api/cli/interface/HelpProps","previousId":2857,"nextId":2880},{"id":2880,"name":"IndexHelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2882,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2683,"name":"ProgramOptions.banner"}},{"id":2883,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":79,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2684,"name":"ProgramOptions.bin"}},{"id":2881,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":8,"character":1}],"type":{"type":"reference","name":"ReactNode"}},{"id":2884,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":81,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2685,"name":"ProgramOptions.delimiter"}},{"id":2885,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":83,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2686,"name":"ProgramOptions.footer"}},{"id":2886,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":85,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2687,"name":"ProgramOptions.header"}},{"id":2887,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":87,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2688,"name":"ProgramOptions.name"}},{"id":2888,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":89,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2689,"name":"ProgramOptions.version"}}],"groups":[{"title":"Properties","kind":1024,"children":[2882,2883,2881,2884,2885,2886,2887,2888]}],"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":2682,"name":"ProgramOptions"}],"permalink":"/api/cli/interface/IndexHelpProps","previousId":2865,"nextId":2892},{"id":2892,"name":"InputProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2893,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A default value. If none provided, will use an empty state."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2894,"name":"hideCursor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the cursor in the terminal. Will remove the background color, but still functions."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2900,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2895,"name":"mask","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mask to replace every inputted character with."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2899,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom string to display when the value is empty and non-dirty."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2901,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2896,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":15,"character":1}],"signatures":[{"id":2897,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value changes."},"parameters":[{"id":2898,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2902,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2903,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2904,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2905,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2906,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2907,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2893,2894,2900,2895,2899,2901]},{"title":"Methods","kind":2048,"children":[2896,2902,2905]}],"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"PromptProps"}],"permalink":"/api/cli/interface/InputProps","previousId":2880,"nextId":2912},{"id":2912,"name":"MultiSelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2913,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of option values selected by default."},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}},"overwrites":{"type":"reference","id":2958,"name":"SelectProps.defaultSelected"}},{"id":2918,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","id":2960,"name":"SelectProps.label"}},{"id":2926,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":2968,"name":"SelectProps.limit"}},{"id":2917,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","name":"T"},{"type":"reference","id":2943,"typeArguments":[{"type":"reference","name":"T"}],"name":"SelectOptionLike"}]}},"inheritedFrom":{"type":"reference","id":2959,"name":"SelectProps.options"}},{"id":2927,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2969,"name":"SelectProps.overflowAfterLabel"}},{"id":2928,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2970,"name":"SelectProps.overflowBeforeLabel"}},{"id":2919,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2961,"name":"SelectProps.prefix"}},{"id":2929,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","id":2971,"name":"SelectProps.scrollType"}},{"id":2914,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":17,"character":1}],"signatures":[{"id":2915,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when a value is selected or unselected."},"parameters":[{"id":2916,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2920,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2921,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2922,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2963,"name":"SelectProps.onSubmit"}}],"inheritedFrom":{"type":"reference","id":2962,"name":"SelectProps.onSubmit"}},{"id":2923,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2924,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2925,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2966,"name":"SelectProps.validate"}}],"inheritedFrom":{"type":"reference","id":2965,"name":"SelectProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2913,2918,2926,2917,2927,2928,2919,2929]},{"title":"Methods","kind":2048,"children":[2914,2920,2923]}],"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":13,"character":17}],"typeParameter":[{"id":2930,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":2957,"typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T"}},{"type":"reference","name":"T"}],"name":"SelectProps"}],"permalink":"/api/cli/interface/MultiSelectProps","previousId":2892,"nextId":2568},{"id":2568,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2569,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":117,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2572,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2588,"name":"Option.category"}},{"id":2570,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":118,"character":4}],"type":{"type":"reference","name":"T"},"overwrites":{"type":"reference","id":2590,"name":"Option.default"}},{"id":2583,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2600,"name":"Option.deprecated"}},{"id":2584,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2601,"name":"Option.description"}},{"id":2574,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2575,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2576,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2577,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":2591,"name":"Option.format"}},{"id":2585,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2602,"name":"Option.hidden"}},{"id":2571,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":120,"character":4}],"type":{"type":"literal","value":true}},{"id":2573,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2589,"name":"Option.short"}},{"id":2578,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2595,"name":"Option.type"}},{"id":2579,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2580,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2581,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2582,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":2596,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2569,2572,2570,2583,2584,2574,2585,2571,2573,2578,2579]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":115,"character":17}],"typeParameter":[{"id":2586,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2567,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":2587,"typeArguments":[{"type":"reference","name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/MultipleOption","previousId":2912,"nextId":2587},{"id":2587,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2588,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2590,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2600,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2601,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2591,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2592,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2593,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2594,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2602,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2589,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"}},{"id":2595,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2596,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2597,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2598,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2599,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2588,2590,2600,2601,2591,2602,2589,2595,2596]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":102,"character":17}],"typeParameter":[{"id":2603,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2662,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":2568,"name":"MultipleOption"},{"type":"reference","id":2642,"name":"SingleOption"}],"permalink":"/api/cli/interface/Option","previousId":2568,"nextId":2612},{"id":2612,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2615,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2625,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2626,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2616,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2617,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2618,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2619,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2627,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2613,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":127,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2614,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":130,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2620,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2621,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2622,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2623,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2624,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2615,2625,2626,2616,2627,2613,2614,2620,2621]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":125,"character":17}],"typeParameter":[{"id":2628,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2640,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Arg"}],"permalink":"/api/cli/interface/Param","previousId":2587,"nextId":2631},{"id":2631,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2632,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":63,"character":4}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"CommandChecker"}]}},{"id":2635,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":55,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.loose"}},{"id":2633,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"O"}],"name":"MapOptionConfig"}},{"id":2634,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":67,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamConfig"}},{"id":2636,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":57,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.unknown"}},{"id":2637,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":59,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[2632,2635,2633,2634,2636,2637]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":61,"character":17}],"typeParameter":[{"id":2638,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2639,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}},"default":{"type":"reference","id":2545,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","name":"ParserSettings"}],"permalink":"/api/cli/interface/ParserOptions","previousId":2612,"nextId":2694},{"id":2694,"name":"ProgramContextType","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2695,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":99,"character":1}],"type":{"type":"reference","id":2677,"name":"ExitHandler"}},{"id":2696,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":100,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2697,"name":"program","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":101,"character":1}],"type":{"type":"reference","id":2682,"name":"ProgramOptions"}}],"groups":[{"title":"Properties","kind":1024,"children":[2695,2696,2697]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":98,"character":17}],"permalink":"/api/cli/interface/ProgramContextType","previousId":2631,"nextId":2682},{"id":2682,"name":"ProgramOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2683,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2684,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":79,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2685,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":81,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2686,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":83,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2687,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":85,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2688,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":87,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2689,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":89,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2683,2684,2685,2686,2687,2688,2689]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":75,"character":17}],"extendedBy":[{"type":"reference","id":2880,"name":"IndexHelpProps"}],"permalink":"/api/cli/interface/ProgramOptions","previousId":2694,"nextId":2690},{"id":2690,"name":"ProgramStreams","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2691,"name":"stderr","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":93,"character":1}],"type":{"type":"reference","name":"WriteStream"}},{"id":2692,"name":"stdin","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":94,"character":1}],"type":{"type":"reference","name":"ReadStream"}},{"id":2693,"name":"stdout","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":95,"character":1}],"type":{"type":"reference","name":"WriteStream"}}],"groups":[{"title":"Properties","kind":1024,"children":[2691,2692,2693]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":92,"character":17}],"permalink":"/api/cli/interface/ProgramStreams","previousId":2682,"nextId":2764},{"id":2764,"name":"ProxyCommandConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2768,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":114,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"Omit.aliases"}},{"id":2769,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":116,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.allowUnknownOptions"}},{"id":2770,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":118,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","name":"Omit.allowVariadicParams"}},{"id":2771,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":120,"character":1}],"type":{"type":"reference","id":2675,"name":"Categories"},"inheritedFrom":{"type":"reference","name":"Omit.categories"}},{"id":2772,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":2774,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":2767,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":2775,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":2765,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":153,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"O"}],"name":"MapOptionConfig"}},{"id":2766,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":154,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamConfig"}},{"id":2773,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Omit.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2768,2769,2770,2771,2772,2774,2767,2775,2765,2766,2773]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":151,"character":17}],"typeParameter":[{"id":2776,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2777,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2703,"name":"CommandConfig"},{"type":"union","types":[{"type":"literal","value":"options"},{"type":"literal","value":"params"},{"type":"literal","value":"path"}]}],"name":"Omit"}],"permalink":"/api/cli/interface/ProxyCommandConfig","previousId":2690,"nextId":2951},{"id":2951,"name":"SelectOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2952,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2953,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2954,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":19,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]}},{"id":2955,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":20,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2952,2953,2954,2955]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":16,"character":17}],"typeParameter":[{"id":2956,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/cli/interface/SelectOption","previousId":2764,"nextId":2957},{"id":2957,"name":"SelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2958,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Option value selected by default."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":25,"character":1}],"type":{"type":"reference","name":"T"}},{"id":2960,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2968,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.limit"}},{"id":2959,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","name":"V"},{"type":"reference","id":2943,"typeArguments":[{"type":"reference","name":"V"}],"name":"SelectOptionLike"}]}}},{"id":2969,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowAfterLabel"}},{"id":2970,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowBeforeLabel"}},{"id":2961,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2971,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.scrollType"}},{"id":2962,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2963,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2964,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2965,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2966,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2967,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2958,2960,2968,2959,2969,2970,2961,2971]},{"title":"Methods","kind":2048,"children":[2962,2965]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":23,"character":17}],"typeParameter":[{"id":2972,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}},{"id":2973,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"T"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"PromptProps"},{"type":"reference","name":"ScrollableListProps"}],"extendedBy":[{"type":"reference","id":2912,"name":"MultiSelectProps"}],"permalink":"/api/cli/interface/SelectProps","previousId":2951,"nextId":2642},{"id":2642,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2646,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2588,"name":"Option.category"}},{"id":2643,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":110,"character":4}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"id":2644,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":112,"character":4}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":2645,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":113,"character":4}],"type":{"type":"reference","name":"T"},"overwrites":{"type":"reference","id":2590,"name":"Option.default"}},{"id":2657,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2600,"name":"Option.deprecated"}},{"id":2658,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2601,"name":"Option.description"}},{"id":2648,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2649,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2650,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2651,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":2591,"name":"Option.format"}},{"id":2659,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2602,"name":"Option.hidden"}},{"id":2647,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2589,"name":"Option.short"}},{"id":2652,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2595,"name":"Option.type"}},{"id":2653,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2654,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2655,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2656,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":2596,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2646,2643,2644,2645,2657,2658,2648,2659,2647,2652,2653]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":108,"character":17}],"typeParameter":[{"id":2660,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2641,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":2587,"typeArguments":[{"type":"reference","name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/SingleOption","previousId":2957,"nextId":2977},{"id":2977,"name":"StyleProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2978,"name":"children","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":7,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]}},{"id":2979,"name":"inverted","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Invert the colors to style the background instead of foreground. Defaults\\nto `false`."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":10,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2980,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Theme palette name to style with. Defaults to \\"none\\"."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2816,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2978,2979,2980]}],"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":6,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"TextProps"},{"type":"union","types":[{"type":"literal","value":"bold"},{"type":"literal","value":"italic"},{"type":"literal","value":"underline"},{"type":"literal","value":"wrap"}]}],"name":"Pick"}],"permalink":"/api/cli/interface/StyleProps","previousId":2642,"nextId":2193},{"id":2545,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":2,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ArgList","nextId":2555},{"id":2555,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":1,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#Argv","previousId":2545,"nextId":2223},{"id":2223,"name":"CLIErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":23,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/cli#CLIErrorCode","previousId":2555,"nextId":2675},{"id":2675,"name":"Categories","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":67,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"reference","id":2556,"name":"Category"},{"type":"intrinsic","name":"string"}]}],"name":"Record"},"permalink":"/api/cli#Categories","previousId":2223,"nextId":2407},{"id":2407,"name":"CategoryItemMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":3,"character":12}],"typeParameter":[{"id":2411,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":2408,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2409,"name":"items","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":6,"character":2}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"id":2410,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2409,2410]}],"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":5,"character":1}]}}],"name":"Record"},"permalink":"/api/cli#CategoryItemMap","previousId":2675,"nextId":2716},{"id":2716,"name":"CommandConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2703,"name":"CommandConfig"}],"name":"Record"},"permalink":"/api/cli#CommandConfigMap","previousId":2407,"nextId":2746},{"id":2746,"name":"CommandMetadataMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":138,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2731,"name":"CommandMetadata"}],"name":"Record"},"permalink":"/api/cli#CommandMetadataMap","previousId":2716,"nextId":2702},{"id":2702,"name":"CommandPath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":110,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/cli#CommandPath","previousId":2746,"nextId":2676},{"id":2676,"name":"ExitCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":71,"character":12}],"type":{"type":"intrinsic","name":"number"},"permalink":"/api/cli#ExitCode","previousId":2702,"nextId":2677},{"id":2677,"name":"ExitHandler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":73,"character":12}],"type":{"type":"reflection","declaration":{"id":2678,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":73,"character":26}],"signatures":[{"id":2679,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2680,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"Error"},{"type":"intrinsic","name":"string"}]}},{"id":2681,"name":"code","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2676,"name":"ExitCode"}}],"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/cli#ExitHandler","previousId":2676,"nextId":2876},{"id":2876,"name":"HiddenInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2892,"name":"InputProps"},{"type":"union","types":[{"type":"literal","value":"hideCursor"},{"type":"literal","value":"mask"}]}],"name":"Omit"},"permalink":"/api/cli#HiddenInputProps","previousId":2677,"nextId":2567},{"id":2567,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":3,"character":20}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/cli#ListType","previousId":2876,"nextId":2810},{"id":2810,"name":"Middleware","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":181,"character":12}],"type":{"type":"reflection","declaration":{"id":2811,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":181,"character":25}],"signatures":[{"id":2812,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2813,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2555,"name":"Argv"}},{"id":2814,"name":"parse","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2806,"name":"MiddlewareCallback"}},{"id":2815,"name":"logger","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Loggable"}}],"type":{"type":"union","types":[{"type":"reference","id":2805,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2805,"name":"MiddlewareArguments"}],"name":"Promise"}]}}]}},"permalink":"/api/cli#Middleware","previousId":2567,"nextId":2805},{"id":2805,"name":"MiddlewareArguments","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":177,"character":12}],"type":{"type":"reference","id":2546,"typeArguments":[{"type":"reference","id":2667,"name":"GlobalOptions"},{"type":"reference","id":2545,"name":"ArgList"}],"name":"Arguments"},"permalink":"/api/cli#MiddlewareArguments","previousId":2810,"nextId":2806},{"id":2806,"name":"MiddlewareCallback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":179,"character":12}],"type":{"type":"reflection","declaration":{"id":2807,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":179,"character":33}],"signatures":[{"id":2808,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2809,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2555,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":2805,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2805,"name":"MiddlewareArguments"}],"name":"Promise"}]}}]}},"permalink":"/api/cli#MiddlewareCallback","previousId":2805,"nextId":2604},{"id":2604,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":20}],"type":{"type":"intersection","types":[{"type":"reference","id":2587,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":2605,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2606,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":138,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2607,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":139,"character":4}],"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}}},{"id":2608,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":140,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2609,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":141,"character":4}],"type":{"type":"reference","id":2662,"name":"ValueType"}},{"id":2610,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":142,"character":4}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2606,2607,2608,2609,2610]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":49}]}}]},"permalink":"/api/cli#OptionConfig","previousId":2806,"nextId":2611},{"id":2611,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":144,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2604,"name":"OptionConfig"}],"name":"Record"},"permalink":"/api/cli#OptionConfigMap","previousId":2604,"nextId":2671},{"id":2671,"name":"Options","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":63,"character":12}],"typeParameter":[{"id":2672,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":2667,"name":"GlobalOptions"}}],"name":"Omit"}],"name":"MapOptionConfig"},"permalink":"/api/cli#Options","previousId":2611,"nextId":2629},{"id":2629,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":146,"character":20}],"type":{"type":"reference","id":2612,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/cli#ParamConfig","previousId":2671,"nextId":2630},{"id":2630,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":147,"character":20}],"type":{"type":"array","elementType":{"type":"reference","id":2629,"name":"ParamConfig"}},"permalink":"/api/cli#ParamConfigList","previousId":2629,"nextId":2673},{"id":2673,"name":"Params","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":65,"character":12}],"typeParameter":[{"id":2674,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"MapParamConfig"},"permalink":"/api/cli#Params","previousId":2630,"nextId":2663},{"id":2663,"name":"PartialConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":53,"character":12}],"typeParameter":[{"id":2664,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"},{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"description"},{"type":"literal","value":"multiple"},{"type":"literal","value":"path"},{"type":"literal","value":"type"}]}],"name":"Omit"},"permalink":"/api/cli#PartialConfig","previousId":2673,"nextId":2934},{"id":2934,"name":"PasswordInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2892,"name":"InputProps"},{"type":"literal","value":"mask"}],"name":"Omit"},"permalink":"/api/cli#PasswordInputProps","previousId":2663,"nextId":2640},{"id":2640,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":5,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2641,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/cli#PrimitiveType","previousId":2934,"nextId":2698},{"id":2698,"name":"ProgramBootstrap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":104,"character":12}],"type":{"type":"reflection","declaration":{"id":2699,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":104,"character":31}],"signatures":[{"id":2700,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/cli#ProgramBootstrap","previousId":2640,"nextId":2778},{"id":2778,"name":"ProxyCommandRunner","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":157,"character":12}],"typeParameter":[{"id":2784,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2785,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}}}],"type":{"type":"reflection","declaration":{"id":2779,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":157,"character":78}],"signatures":[{"id":2780,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2781,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"O"}},{"id":2782,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"P"}},{"id":2783,"name":"rest","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2701,"name":"RunResult"}],"name":"Promise"},{"type":"reference","id":2701,"name":"RunResult"}]}}]}},"permalink":"/api/cli#ProxyCommandRunner","previousId":2698,"nextId":2701},{"id":2701,"name":"RunResult","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":108,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactElement"},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"void"}]},"permalink":"/api/cli#RunResult","previousId":2778,"nextId":2641},{"id":2641,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":4,"character":20}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/cli#ScalarType","previousId":2701,"nextId":2943},{"id":2943,"name":"SelectOptionLike","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":12,"character":12}],"typeParameter":[{"id":2950,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2944,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2945,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":5}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2946,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":23}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"React.ReactNode"}],"name":"NonNullable"}}],"groups":[{"title":"Properties","kind":1024,"children":[2945,2946]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":3}]}},{"type":"reflection","declaration":{"id":2947,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2948,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":5}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"React.ReactNode"}],"name":"NonNullable"}},{"id":2949,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":42}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2948,2949]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":3}]}}]},"permalink":"/api/cli#SelectOptionLike","previousId":2641,"nextId":2816},{"id":2816,"name":"StyleType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":189,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"failure"},{"type":"literal","value":"info"},{"type":"literal","value":"inverted"},{"type":"literal","value":"muted"},{"type":"literal","value":"notice"},{"type":"literal","value":"success"},{"type":"literal","value":"warning"}]},"permalink":"/api/cli#StyleType","previousId":2943,"nextId":2786},{"id":2786,"name":"TaskContext","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":165,"character":12}],"typeParameter":[{"id":2804,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2667,"name":"GlobalOptions"},"default":{"type":"reference","id":2667,"name":"GlobalOptions"}}],"type":{"type":"intersection","types":[{"type":"reference","name":"O"},{"type":"reflection","declaration":{"id":2787,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2788,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":166,"character":1}],"type":{"type":"reference","id":2677,"name":"ExitHandler"}},{"id":2789,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":167,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2790,"name":"rest","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":168,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2791,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":169,"character":1}],"type":{"type":"reference","id":2661,"name":"UnknownOptionMap"}},{"id":2792,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":171,"character":1}],"signatures":[{"id":2793,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2794,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2555,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2795,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":172,"character":1}],"signatures":[{"id":2796,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2797,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":2798,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2799,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2800,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2801,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2802,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}}},{"id":2803,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2788,2789,2790,2791]},{"title":"Methods","kind":2048,"children":[2792,2795]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":165,"character":71}]}}]},"permalink":"/api/cli#TaskContext","previousId":2816,"nextId":2817},{"id":2817,"name":"ThemePalette","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":199,"character":12}],"type":{"type":"mapped","parameter":"T","parameterType":{"type":"reference","id":2816,"name":"StyleType"},"templateType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ThemePalette","previousId":2786,"nextId":2661},{"id":2661,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":8,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/cli#UnknownOptionMap","previousId":2817,"nextId":2662},{"id":2662,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":6,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2567,"name":"ListType"},{"type":"reference","id":2640,"name":"PrimitiveType"}]},"permalink":"/api/cli#ValueType","previousId":2661,"nextId":2665},{"id":2665,"name":"Writeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":55,"character":12}],"typeParameter":[{"id":2666,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"mapped","parameter":"P","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"T"}},"templateType":{"type":"indexedAccess","indexType":{"type":"reference","name":"P"},"objectType":{"type":"reference","name":"T"}},"readonlyModifier":"-"},"permalink":"/api/cli#Writeable","previousId":2662,"nextId":2224},{"id":2224,"name":"CLIError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":25,"character":13}],"type":{"type":"reflection","declaration":{"id":2225,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2226,"name":"new CLIError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2227,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}},{"id":2228,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/cli#CLIError","previousId":34,"nextId":2362},{"id":2362,"name":"DELIMITER","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":38,"character":13}],"type":{"type":"literal","value":"$ "},"defaultValue":"\'$ \'","permalink":"/api/cli#DELIMITER","previousId":2224,"nextId":2354},{"id":2354,"name":"EXIT_FAIL","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":11,"character":13}],"type":{"type":"reference","id":2676,"name":"ExitCode"},"defaultValue":"1","permalink":"/api/cli#EXIT_FAIL","previousId":2362,"nextId":2353},{"id":2353,"name":"EXIT_PASS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":10,"character":13}],"type":{"type":"reference","id":2676,"name":"ExitCode"},"defaultValue":"0","permalink":"/api/cli#EXIT_PASS","previousId":2354,"nextId":2355},{"id":2355,"name":"INTERNAL_OPTIONS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":13,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":2355,"name":"INTERNAL_OPTIONS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_OPTIONS","previousId":2353,"nextId":2356},{"id":2356,"name":"INTERNAL_PARAMS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":14,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":2356,"name":"INTERNAL_PARAMS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PARAMS","previousId":2355,"nextId":2357},{"id":2357,"name":"INTERNAL_PROGRAM","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":15,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":2357,"name":"INTERNAL_PROGRAM"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PROGRAM","previousId":2356,"nextId":2352},{"id":2352,"name":"LOCALE_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#LOCALE_FORMAT","previousId":2357,"nextId":3016},{"id":3016,"name":"ProgramContext","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/ProgramContext.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2694,"name":"ProgramContextType"}],"name":"Context"},"defaultValue":"...","permalink":"/api/cli#ProgramContext","previousId":2352,"nextId":2358},{"id":2358,"name":"RESERVED_OPTIONS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":17,"character":13}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"...","permalink":"/api/cli#RESERVED_OPTIONS","previousId":3016,"nextId":2359},{"id":2359,"name":"SPACING_COL","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":34,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_COL","previousId":2358,"nextId":2360},{"id":2360,"name":"SPACING_COL_WIDE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":35,"character":13}],"type":{"type":"literal","value":2},"defaultValue":"2","permalink":"/api/cli#SPACING_COL_WIDE","previousId":2359,"nextId":2361},{"id":2361,"name":"SPACING_ROW","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":36,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_ROW","previousId":2360,"nextId":2351},{"id":2351,"name":"VERSION_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#VERSION_FORMAT","previousId":2361},{"id":2218,"name":"Config","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Config.ts","line":16,"character":16}],"signatures":[{"id":2219,"name":"Config","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A class decorator for defining the following metadata on a `Command`.\\n- path\\n- description\\n- aliases\\n- allowUnknownOptions\\n- allowVariadicParams\\n- categories\\n- category\\n- deprecated\\n- hidden\\n- usage"},"parameters":[{"id":2220,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2221,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2222,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2663,"typeArguments":[{"type":"reference","id":2717,"name":"CommandStaticConfig"}],"name":"PartialConfig"}],"name":"Partial"},"defaultValue":"{}"}],"type":{"type":"reference","name":"ClassDecorator"}}],"permalink":"/api/cli/function/Config","previousId":2,"nextId":2818},{"id":2818,"name":"Confirm","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":22,"character":16}],"signatures":[{"id":2819,"name":"Confirm","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a yes/no confirmation prompt."},"parameters":[{"id":2820,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2821,"name":"ConfirmProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Confirm","previousId":2218,"nextId":2854},{"id":2854,"name":"Header","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":21,"character":16}],"signatures":[{"id":2855,"name":"Header","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a header/title within a terminal menu."},"parameters":[{"id":2856,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2857,"name":"HeaderProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Header","previousId":2818,"nextId":2862},{"id":2862,"name":"Help","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":53,"character":16}],"signatures":[{"id":2863,"name":"Help","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for a command.\\nIncludes all sub-commands, options, params, and more."},"parameters":[{"id":2864,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2865,"name":"HelpProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Help","previousId":2854,"nextId":2873},{"id":2873,"name":"HiddenInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":9,"character":16}],"signatures":[{"id":2874,"name":"HiddenInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field that hides its content from the terminal."},"parameters":[{"id":2875,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2876,"name":"HiddenInputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/HiddenInput","previousId":2862,"nextId":2877},{"id":2877,"name":"IndexHelp","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":14,"character":16}],"signatures":[{"id":2878,"name":"IndexHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for the entire program."},"parameters":[{"id":2879,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2880,"name":"IndexHelpProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/IndexHelp","previousId":2873,"nextId":2889},{"id":2889,"name":"Input","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":23,"character":16}],"signatures":[{"id":2890,"name":"Input","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field, allowing the user to enter information."},"parameters":[{"id":2891,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2892,"name":"InputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Input","previousId":2877,"nextId":2908},{"id":2908,"name":"MultiSelect","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":24,"character":16}],"signatures":[{"id":2909,"name":"MultiSelect","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where multiple options can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2910,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2911,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2912,"typeArguments":[{"type":"reference","name":"T"}],"name":"MultiSelectProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/MultiSelect","previousId":2889,"nextId":2931},{"id":2931,"name":"PasswordInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":9,"character":16}],"signatures":[{"id":2932,"name":"PasswordInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field with characters masked with \\"*\\"."},"parameters":[{"id":2933,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2934,"name":"PasswordInputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/PasswordInput","previousId":2908,"nextId":2939},{"id":2939,"name":"Select","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":55,"character":16}],"signatures":[{"id":2940,"name":"Select","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where a single option can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2941,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":2942,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2957,"typeArguments":[{"type":"reference","name":"T"}],"name":"SelectProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Select","previousId":2931,"nextId":2974},{"id":2974,"name":"Style","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":18,"character":16}],"signatures":[{"id":2975,"name":"Style","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that styles text and backgrounds based on the current Boost theme."},"parameters":[{"id":2976,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2977,"name":"StyleProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Style","previousId":2939,"nextId":2363},{"id":2363,"name":"applyMarkdown","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyMarkdown.ts","line":3,"character":16}],"signatures":[{"id":2364,"name":"applyMarkdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2365,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyMarkdown","previousId":2974,"nextId":2366},{"id":2366,"name":"applyStyle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyStyle.ts","line":5,"character":16}],"signatures":[{"id":2367,"name":"applyStyle","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2368,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2369,"name":"type","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2816,"name":"StyleType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyStyle","previousId":2363,"nextId":2421},{"id":2421,"name":"checkNodeRequirement","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkNodeRequirement.ts","line":8,"character":16}],"signatures":[{"id":2422,"name":"checkNodeRequirement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that the currently running Node.js process.version satisfies the given semver range.\\nIf not, a console error will be logged, or an error will be thrown."},"parameters":[{"id":2423,"name":"range","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2424,"name":"throws","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":2810,"name":"Middleware"}}],"permalink":"/api/cli/function/checkNodeRequirement","previousId":2366,"nextId":2425},{"id":2425,"name":"checkPackageOutdated","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkPackageOutdated.ts","line":33,"character":16}],"signatures":[{"id":2426,"name":"checkPackageOutdated","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that a package and its provided version is using the latest distribution\\nversion by checking against the npm registry. If not, a console message will be logged."},"parameters":[{"id":2427,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2428,"name":"version","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2810,"name":"Middleware"}}],"permalink":"/api/cli/function/checkPackageOutdated","previousId":2421,"nextId":2229},{"id":2229,"name":"createProxyCommand","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":48,"character":16}],"signatures":[{"id":2230,"name":"createProxyCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a proxy command using itself as the super class."},"typeParameter":[{"id":2231,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2667,"name":"GlobalOptions"}},{"id":2232,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}}}],"parameters":[{"id":2233,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2702,"name":"CommandPath"}},{"id":2234,"name":"proxyConfig","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2764,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandConfig"}},{"id":2235,"name":"runner","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2778,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandRunner"}}],"type":{"type":"reference","id":2236,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Command"}}],"permalink":"/api/cli/function/createProxyCommand","previousId":2425,"nextId":2370},{"id":2370,"name":"formatCommandCall","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatCommandCall.ts","line":4,"character":16}],"signatures":[{"id":2371,"name":"formatCommandCall","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2372,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2373,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2703,"name":"CommandConfig"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatCommandCall","previousId":2229,"nextId":2374},{"id":2374,"name":"formatDescription","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":7,"character":16}],"signatures":[{"id":2375,"name":"formatDescription","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2376,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2377,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2378,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":9,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}}},{"id":2379,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":10,"character":2}],"type":{"type":"reference","id":2640,"name":"PrimitiveType"}},{"id":2381,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":12,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2380,"name":"description","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":11,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2378,2379,2381,2380]}],"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":8,"character":9}]}}},{"id":2382,"name":"tags","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatDescription","previousId":2370,"nextId":2383},{"id":2383,"name":"formatType","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":3,"character":16}],"signatures":[{"id":2384,"name":"formatType","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2385,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2386,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2387,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":5,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":2388,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":6,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2389,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2390,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":8,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2387,2388,2389,2390]}],"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":4,"character":9}]}}},{"id":2391,"name":"inline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatType","previousId":2374,"nextId":2392},{"id":2392,"name":"formatValue","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatValue.ts","line":3,"character":16}],"signatures":[{"id":2393,"name":"formatValue","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2394,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2640,"name":"PrimitiveType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatValue","previousId":2383,"nextId":2395},{"id":2395,"name":"getLongestWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/getLongestWidth.ts","line":3,"character":16}],"signatures":[{"id":2396,"name":"getLongestWidth","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2397,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/cli/function/getLongestWidth","previousId":2392,"nextId":2398},{"id":2398,"name":"groupByCategory","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":16}],"signatures":[{"id":2399,"name":"groupByCategory","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2404,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2400,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2401,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":44}],"type":{"type":"intrinsic","name":"string"}},{"id":2402,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":63}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2403,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":81}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2401,2402,2403]}]}}}],"parameters":[{"id":2405,"name":"items","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"id":2406,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2675,"name":"Categories"}}],"type":{"type":"reference","id":2407,"typeArguments":[{"type":"reference","name":"T"}],"name":"CategoryItemMap"}}],"permalink":"/api/cli/function/groupByCategory","previousId":2395,"nextId":2412},{"id":2412,"name":"isArgvSize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/isArgvSize.ts","line":4,"character":16}],"signatures":[{"id":2413,"name":"isArgvSize","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2414,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2555,"name":"Argv"}},{"id":2415,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/cli/function/isArgvSize","previousId":2398,"nextId":2416},{"id":2416,"name":"loadTheme","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/loadTheme.ts","line":9,"character":16}],"signatures":[{"id":2417,"name":"loadTheme","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2817,"name":"ThemePalette"}}],"permalink":"/api/cli/function/loadTheme","previousId":2412,"nextId":2418},{"id":2418,"name":"mapCommandMetadata","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/mapCommandMetadata.ts","line":3,"character":16}],"signatures":[{"id":2419,"name":"mapCommandMetadata","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2420,"name":"commands","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2747,"name":"Commandable"}],"name":"Record"}}],"type":{"type":"reference","id":2746,"name":"CommandMetadataMap"}}],"permalink":"/api/cli/function/mapCommandMetadata","previousId":2416,"nextId":2935},{"id":2935,"name":"normalizeOptions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":30,"character":16}],"signatures":[{"id":2936,"name":"normalizeOptions","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2937,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2938,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"indexedAccess","indexType":{"type":"literal","value":"options"},"objectType":{"type":"reference","id":2957,"typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"SelectProps"}}}],"type":{"type":"array","elementType":{"type":"reference","id":2951,"typeArguments":[{"type":"reference","name":"T"}],"name":"SelectOption"}}}],"permalink":"/api/cli/function/normalizeOptions","previousId":2418,"nextId":2981},{"id":2981,"name":"useDimensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":16}],"signatures":[{"id":2982,"name":"useDimensions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reflection","declaration":{"id":2983,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2984,"name":"height","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":35}],"type":{"type":"intrinsic","name":"number"}},{"id":2985,"name":"width","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":51}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[2984,2985]}],"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":33}]}}}],"permalink":"/api/cli/function/useDimensions","previousId":2935,"nextId":2986},{"id":2986,"name":"useIsMounted","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useIsMounted.ts","line":3,"character":16}],"signatures":[{"id":2987,"name":"useIsMounted","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"MutableRefObject"}}],"permalink":"/api/cli/function/useIsMounted","previousId":2981,"nextId":2988},{"id":2988,"name":"useListNavigation","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":3,"character":16}],"signatures":[{"id":2989,"name":"useListNavigation","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2990,"name":"list","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":2991,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2992,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":9}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2993,"name":"divider","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":29}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2992,2993]}],"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":7}]}}}},{"id":2994,"name":"defaultIndex","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reflection","declaration":{"id":2995,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2996,"name":"highlightedIndex","kind":1024,"kindString":"Property","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2997,"name":"onKeyDown","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2998,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2999,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":3000,"name":"onKeyLeft","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":3001,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3002,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":3003,"name":"onKeyRight","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":3004,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3005,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":3006,"name":"onKeyUp","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":3007,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3008,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"groups":[{"title":"Properties","kind":1024,"children":[2996,2997,3000,3003,3006]}]}}}],"permalink":"/api/cli/function/useListNavigation","previousId":2986,"nextId":3009},{"id":3009,"name":"useProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useProgram.ts","line":8,"character":16}],"signatures":[{"id":3010,"name":"useProgram","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2694,"name":"ProgramContextType"}}],"permalink":"/api/cli/function/useProgram","previousId":2988,"nextId":3011},{"id":3011,"name":"useRenderLoop","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":6,"character":16}],"signatures":[{"id":3012,"name":"useRenderLoop","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3013,"name":"fps","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"},"defaultValue":"..."}],"type":{"type":"reflection","declaration":{"id":3014,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":6,"character":58}],"signatures":[{"id":3015,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/cli/function/useRenderLoop","previousId":3009,"nextId":2546}],"groups":[{"title":"Classes","kind":128,"children":[2236,2837,2429]},{"title":"Functions","kind":64,"children":[2218,2818,2854,2862,2873,2877,2889,2908,2931,2939,2974,2363,2366,2421,2425,2229,2370,2374,2383,2392,2395,2398,2412,2416,2418,2935,2981,2986,2988,3009,3011]},{"title":"Interfaces","kind":256,"children":[2546,2556,2703,2731,2717,2747,2821,2830,2559,2667,2857,2865,2880,2892,2912,2568,2587,2612,2631,2694,2682,2690,2764,2951,2957,2642,2977]},{"title":"Namespaces","kind":2,"children":[2193]},{"title":"Type aliases","kind":4194304,"children":[2545,2555,2223,2675,2407,2716,2746,2702,2676,2677,2876,2567,2810,2805,2806,2604,2611,2671,2629,2630,2673,2663,2934,2640,2698,2778,2701,2641,2943,2816,2786,2817,2661,2662,2665]},{"title":"Variables","kind":32,"children":[2224,2362,2354,2353,2355,2356,2357,2352,3016,2358,2359,2360,2361,2351]}],"sources":[{"fileName":"packages/cli/src/index.ts","line":6,"character":0}],"permalink":"/api/cli"},"urlSlug":"cli"},{"index":false,"label":"Components & hooks","reflection":{"id":11,"name":"@boost/cli/react","kind":1,"kindString":"Module","flags":{},"children":[{"id":3017,"name":"Confirm","kind":16777216,"kindString":"Reference","flags":{},"target":2818,"permalink":"/api/cli-react#Confirm","nextId":3018},{"id":3018,"name":"ConfirmProps","kind":16777216,"kindString":"Reference","flags":{},"target":2821,"permalink":"/api/cli-react#ConfirmProps","previousId":3017,"nextId":3020},{"id":3020,"name":"Failure","kind":16777216,"kindString":"Reference","flags":{},"target":2837,"permalink":"/api/cli-react#Failure","previousId":3018,"nextId":3019},{"id":3019,"name":"FailureProps","kind":16777216,"kindString":"Reference","flags":{},"target":2830,"permalink":"/api/cli-react#FailureProps","previousId":3020,"nextId":3021},{"id":3021,"name":"Header","kind":16777216,"kindString":"Reference","flags":{},"target":2854,"permalink":"/api/cli-react#Header","previousId":3019,"nextId":3022},{"id":3022,"name":"HeaderProps","kind":16777216,"kindString":"Reference","flags":{},"target":2857,"permalink":"/api/cli-react#HeaderProps","previousId":3021,"nextId":3023},{"id":3023,"name":"Help","kind":16777216,"kindString":"Reference","flags":{},"target":2862,"permalink":"/api/cli-react#Help","previousId":3022,"nextId":3024},{"id":3024,"name":"HelpProps","kind":16777216,"kindString":"Reference","flags":{},"target":2865,"permalink":"/api/cli-react#HelpProps","previousId":3023,"nextId":3025},{"id":3025,"name":"HiddenInput","kind":16777216,"kindString":"Reference","flags":{},"target":2873,"permalink":"/api/cli-react#HiddenInput","previousId":3024,"nextId":3026},{"id":3026,"name":"HiddenInputProps","kind":16777216,"kindString":"Reference","flags":{},"target":2876,"permalink":"/api/cli-react#HiddenInputProps","previousId":3025,"nextId":3027},{"id":3027,"name":"IndexHelp","kind":16777216,"kindString":"Reference","flags":{},"target":2877,"permalink":"/api/cli-react#IndexHelp","previousId":3026,"nextId":3028},{"id":3028,"name":"IndexHelpProps","kind":16777216,"kindString":"Reference","flags":{},"target":2880,"permalink":"/api/cli-react#IndexHelpProps","previousId":3027,"nextId":3029},{"id":3029,"name":"Input","kind":16777216,"kindString":"Reference","flags":{},"target":2889,"permalink":"/api/cli-react#Input","previousId":3028,"nextId":3030},{"id":3030,"name":"InputProps","kind":16777216,"kindString":"Reference","flags":{},"target":2892,"permalink":"/api/cli-react#InputProps","previousId":3029,"nextId":3031},{"id":3031,"name":"MultiSelect","kind":16777216,"kindString":"Reference","flags":{},"target":2908,"permalink":"/api/cli-react#MultiSelect","previousId":3030,"nextId":3032},{"id":3032,"name":"MultiSelectProps","kind":16777216,"kindString":"Reference","flags":{},"target":2912,"permalink":"/api/cli-react#MultiSelectProps","previousId":3031,"nextId":3033},{"id":3033,"name":"PasswordInput","kind":16777216,"kindString":"Reference","flags":{},"target":2931,"permalink":"/api/cli-react#PasswordInput","previousId":3032,"nextId":3034},{"id":3034,"name":"PasswordInputProps","kind":16777216,"kindString":"Reference","flags":{},"target":2934,"permalink":"/api/cli-react#PasswordInputProps","previousId":3033,"nextId":3047},{"id":3047,"name":"ProgramContext","kind":16777216,"kindString":"Reference","flags":{},"target":3016,"permalink":"/api/cli-react#ProgramContext","previousId":3034,"nextId":3036},{"id":3036,"name":"Select","kind":16777216,"kindString":"Reference","flags":{},"target":2939,"permalink":"/api/cli-react#Select","previousId":3047,"nextId":3038},{"id":3038,"name":"SelectOption","kind":16777216,"kindString":"Reference","flags":{},"target":2951,"permalink":"/api/cli-react#SelectOption","previousId":3036,"nextId":3037},{"id":3037,"name":"SelectOptionLike","kind":16777216,"kindString":"Reference","flags":{},"target":2943,"permalink":"/api/cli-react#SelectOptionLike","previousId":3038,"nextId":3039},{"id":3039,"name":"SelectProps","kind":16777216,"kindString":"Reference","flags":{},"target":2957,"permalink":"/api/cli-react#SelectProps","previousId":3037,"nextId":3040},{"id":3040,"name":"Style","kind":16777216,"kindString":"Reference","flags":{},"target":2974,"permalink":"/api/cli-react#Style","previousId":3039,"nextId":3041},{"id":3041,"name":"StyleProps","kind":16777216,"kindString":"Reference","flags":{},"target":2977,"permalink":"/api/cli-react#StyleProps","previousId":3040,"nextId":3035},{"id":3035,"name":"normalizeOptions","kind":16777216,"kindString":"Reference","flags":{},"target":2935,"permalink":"/api/cli-react#normalizeOptions","previousId":3041,"nextId":3042},{"id":3042,"name":"useDimensions","kind":16777216,"kindString":"Reference","flags":{},"target":2981,"permalink":"/api/cli-react#useDimensions","previousId":3035,"nextId":3043},{"id":3043,"name":"useIsMounted","kind":16777216,"kindString":"Reference","flags":{},"target":2986,"permalink":"/api/cli-react#useIsMounted","previousId":3042,"nextId":3044},{"id":3044,"name":"useListNavigation","kind":16777216,"kindString":"Reference","flags":{},"target":2988,"permalink":"/api/cli-react#useListNavigation","previousId":3043,"nextId":3045},{"id":3045,"name":"useProgram","kind":16777216,"kindString":"Reference","flags":{},"target":3009,"permalink":"/api/cli-react#useProgram","previousId":3044,"nextId":3046},{"id":3046,"name":"useRenderLoop","kind":16777216,"kindString":"Reference","flags":{},"target":3011,"permalink":"/api/cli-react#useRenderLoop","previousId":3045}],"groups":[{"title":"References","kind":16777216,"children":[3017,3018,3020,3019,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3047,3036,3038,3037,3039,3040,3041,3035,3042,3043,3044,3045,3046]}],"sources":[{"fileName":"packages/cli/src/react.ts","line":1,"character":0}],"permalink":"/api/cli-react"},"urlSlug":"cli-react"},{"index":false,"label":"Test utilities","reflection":{"id":12,"name":"@boost/cli/test","kind":1,"kindString":"Module","flags":{},"children":[{"id":54,"name":"MockReadStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":55,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":56,"name":"new MockReadStream","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":54,"name":"MockReadStream"}}]},{"id":57,"name":"isTTY","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"groups":[{"title":"Constructors","kind":512,"children":[55]},{"title":"Properties","kind":1024,"children":[57]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":19,"character":13}],"permalink":"/api/cli-test/class/MockReadStream","nextId":58},{"id":58,"name":"MockWriteStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":59,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":30,"character":1}],"signatures":[{"id":60,"name":"new MockWriteStream","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":61,"name":"append","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":58,"name":"MockWriteStream"}}]},{"id":62,"name":"append","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":63,"name":"columns","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"80"},{"id":64,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":68,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":43,"character":1}],"signatures":[{"id":69,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":72,"name":"off","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":49,"character":1}],"signatures":[{"id":73,"name":"off","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":70,"name":"on","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":47,"character":1}],"signatures":[{"id":71,"name":"on","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":65,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":35,"character":1}],"signatures":[{"id":66,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":67,"name":"string","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[59]},{"title":"Properties","kind":1024,"children":[62,63,64]},{"title":"Methods","kind":2048,"children":[68,72,70,65]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":23,"character":13}],"permalink":"/api/cli-test/class/MockWriteStream","previousId":54,"nextId":16},{"id":16,"name":"mockProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":80,"character":16}],"signatures":[{"id":17,"name":"mockProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a `Program` instance with required options pre-filled and streams mocked\\n(unless manually provided).","text":"```ts\\nimport { mockProgram } from \'@boost/cli/test\';\\n\\nconst program = mockProgram({ name: \'Example\' });\\n```\\n"},"parameters":[{"id":18,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2682,"name":"ProgramOptions"}],"name":"Partial"}},{"id":19,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2690,"name":"ProgramStreams"}}],"type":{"type":"reference","id":2429,"name":"Program"}}],"permalink":"/api/cli-test/function/mockProgram","previousId":1,"nextId":13},{"id":13,"name":"mockStreams","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":62,"character":16}],"signatures":[{"id":14,"name":"mockStreams","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns mocked `stderr`, `stdout`, and `stdin` streams that can be passed to a `Program`.\\nThis does not mock all stream functionality, only those required by Boost and Ink.","text":"```ts\\nimport { mockStreams } from \'@boost/cli/test\';\\n\\nconst streams = mockStreams();\\n```\\n"},"parameters":[{"id":15,"name":"append","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","id":2690,"name":"ProgramStreams"}}],"permalink":"/api/cli-test/function/mockStreams","previousId":16,"nextId":20},{"id":20,"name":"renderComponent","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":109,"character":22}],"signatures":[{"id":21,"name":"renderComponent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to render a React component with Ink and return the rendered result\\nas a terminal compatible string. If `stripped` is true, it will strip ANSI\\nescape escape sequences.","text":"```tsx\\nimport { renderComponent } from \'@boost/cli/test\';\\nimport TestComponent from \'../src/components/TestComponent\';\\n\\nit(\'renders a component\', async () => {\\n\\texpect(await renderComponent(<TestComponent />)).toMatchSnapshot();\\n});\\n```\\n\\n> As an alternative, we also suggest using the official\\n> [ink-testing-library](https://github.com/vadimdemedes/ink-testing-library).\\n"},"parameters":[{"id":22,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.ReactElement"}},{"id":23,"name":"stripped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}],"permalink":"/api/cli-test/function/renderComponent","previousId":13,"nextId":24},{"id":24,"name":"runCommand","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":156,"character":22}],"signatures":[{"id":25,"name":"runCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Command` outside the context of a `Program`, but mimics similar functionality,\\nincluding React component rendering. Params are required as they\'re passed to the run method,\\nwhile options are optional and assume class properties have been defined. Also, the `exit`\\nand `log` methods have been mocked with Jest spies so that they can be asserted.","text":"```ts\\nimport { runCommand } from \'@boost/cli/test\';\\nimport TestCommand from \'../src/commands/TestCommand\';\\n\\nit(\'runs a command\', async () => {\\n\\tconst command = new TestCommand();\\n\\n\\texpect(await runCommand(command, [\'foo\', \'bar\', \'baz\'])).toMatchSnapshot();\\n\\texpect(command.log).toHaveBeenCalled();\\n});\\n```\\n\\n> Since there is no `Program` context, any functionality that requires a program will fail. If\\n> needed, use `runProgram()` instead.\\n"},"typeParameter":[{"id":26,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2667,"name":"GlobalOptions"}},{"id":27,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2640,"name":"PrimitiveType"}}}],"parameters":[{"id":28,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2236,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Command"}},{"id":29,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"P"}},{"id":30,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"O"}],"name":"Partial"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}],"permalink":"/api/cli-test/function/runCommand","previousId":20,"nextId":43},{"id":43,"name":"runProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":257,"character":22}],"signatures":[{"id":44,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Program` as if it were ran on the command line, including middleware,\\ncommands, success and failure states, and more. Utilizes mocked streams to capture\\nand return standard output and ANSI stripped output. Failed runs will not throw\\nand instead will render a failure output.","text":"```ts\\nimport { runProgram } from \'@boost/cli/test\';\\nimport Program from \'../src/program\';\\n\\nit(\'runs a program\', async () => {\\n\\tconst program = new Program();\\n\\n\\tconst { code, output } = await runProgram(program, [\'cmd\', \'--foo\', \'123\', \'bar\']);\\n\\n\\texpect(output).toMatchSnapshot();\\n\\texpect(code).toBe(0);\\n});\\n```\\n"},"parameters":[{"id":45,"name":"program","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2429,"name":"Program"}},{"id":46,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":47,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":48,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":49,"name":"append","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/test.ts","line":260,"character":12}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[49]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":260,"character":10}]}},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":50,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":51,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":13}],"type":{"type":"reference","id":2676,"name":"ExitCode"}},{"id":52,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":29}],"type":{"type":"intrinsic","name":"string"}},{"id":53,"name":"outputStripped","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":45}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[51,52,53]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":11}]}}],"name":"Promise"}}],"permalink":"/api/cli-test/function/runProgram","previousId":24,"nextId":31},{"id":31,"name":"runTask","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":205,"character":16}],"signatures":[{"id":32,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a task function outside the context of a `Command`, in complete isolation.\\nA mock command context is provided with standard defaults, and can be customized\\nthrough the 3rd argument.","text":"```ts\\nimport { runTask } from \'@boost/cli/test\';\\nimport testTask from \'../src/tasks/testTask\';\\n\\nit(\'runs a task\', async () => {\\n\\tconst context = {\\n\\t\\tlog: jest.fn(),\\n\\t};\\n\\n\\texpect(await runTask(testTask, [\'foo\', \'bar\', \'baz\'], context)).toMatchSnapshot();\\n\\texpect(context.log).toHaveBeenCalled();\\n});\\n```\\n"},"typeParameter":[{"id":33,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":34,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}},{"id":35,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2786,"typeArguments":[{"type":"reference","id":2667,"name":"GlobalOptions"}],"name":"TaskContext"}}],"parameters":[{"id":36,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":37,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":206,"character":7}],"signatures":[{"id":38,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":39,"name":"this","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":40,"name":"argz","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}}},{"id":41,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A"}},{"id":42,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}}],"type":{"type":"reference","name":"R"}}],"permalink":"/api/cli-test/function/runTask","previousId":43}],"groups":[{"title":"Classes","kind":128,"children":[54,58]},{"title":"Functions","kind":64,"children":[16,13,20,24,43,31]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":3,"character":0}],"permalink":"/api/cli-test"},"urlSlug":"cli-test"}],"packageName":"@boost/cli","packageVersion":"2.11.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":2,"name":"@boost/common","kind":1,"kindString":"Module","flags":{},"children":[{"id":300,"name":"json","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":315,"name":"JSONStringifyOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":317,"name":"quote","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":7,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":318,"name":"replacer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":8,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},{"type":"reflection","declaration":{"id":319,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":320,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":321,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":322,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]}},{"id":316,"name":"space","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":6,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[317,318,316]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":5,"character":17}]},{"id":310,"name":"JSONReviver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":3,"character":12}],"type":{"type":"reflection","declaration":{"id":311,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":3,"character":26}],"signatures":[{"id":312,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":313,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":314,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}},{"id":301,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":11,"character":16}],"signatures":[{"id":302,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":303,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":304,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":305,"name":"reviver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":310,"name":"JSONReviver"}}],"type":{"type":"reference","name":"T"}}]},{"id":306,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":15,"character":16}],"signatures":[{"id":307,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":308,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":309,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":315,"name":"JSONStringifyOptions"},"defaultValue":"{}"}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[315]},{"title":"Type aliases","kind":4194304,"children":[310]},{"title":"Functions","kind":64,"children":[301,306]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":1,"character":0}],"permalink":"/api/common/namespace/json","previousId":15,"nextId":323},{"id":323,"name":"yaml","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":324,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":3,"character":16}],"signatures":[{"id":325,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":326,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":327,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":328,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"YAML.Options"}}],"type":{"type":"reference","name":"T"}}]},{"id":329,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":7,"character":16}],"signatures":[{"id":330,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":331,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":332,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"YAML.Options"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Functions","kind":64,"children":[324,329]}],"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":1,"character":0}],"permalink":"/api/common/namespace/yaml","previousId":300,"nextId":581},{"id":570,"name":"LookupType","kind":4,"kindString":"Enumeration","flags":{},"children":[{"id":571,"name":"FILE_SYSTEM","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":15,"character":1}],"defaultValue":"\\"FILE_SYSTEM\\""},{"id":572,"name":"NODE_MODULE","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":16,"character":1}],"defaultValue":"\\"NODE_MODULE\\""}],"groups":[{"title":"Enumeration members","kind":16,"children":[571,572]}],"sources":[{"fileName":"packages/common/src/types.ts","line":14,"character":12}],"permalink":"/api/common/enum/LookupType","previousId":5,"nextId":698},{"id":341,"name":"Contract","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":342,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":8,"character":1}],"signatures":[{"id":343,"name":"new Contract","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":345,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":344,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":346,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","id":341,"typeArguments":[{"type":"reference","name":"T"}],"name":"Contract"}}]},{"id":347,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":6,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}],"name":"Readonly"},"implementationOf":{"type":"reference","id":599,"name":"Optionable.options"}},{"id":354,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":55,"character":10}],"signatures":[{"id":355,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":356,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":357,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":358,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"implementationOf":{"type":"reference","name":"Optionable.blueprint"}}],"implementationOf":{"type":"reference","id":600,"name":"Optionable.blueprint"}},{"id":348,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":28,"character":1}],"signatures":[{"id":349,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":350,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"},{"type":"reflection","declaration":{"id":351,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":352,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":353,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}],"name":"Readonly"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[342]},{"title":"Properties","kind":1024,"children":[347]},{"title":"Methods","kind":2048,"children":[354,348]}],"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":22}],"typeParameter":[{"id":360,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":359,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":50}]}}}],"implementedTypes":[{"type":"reference","id":598,"typeArguments":[{"type":"reference","name":"T"}],"name":"Optionable"}],"permalink":"/api/common/class/Contract","nextId":361},{"id":361,"name":"ExitError","kind":128,"kindString":"Class","flags":{},"children":[{"id":362,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":4,"character":1}],"signatures":[{"id":363,"name":"new ExitError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":364,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":365,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":361,"name":"ExitError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":366,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[362]},{"title":"Properties","kind":1024,"children":[366]}],"sources":[{"fileName":"packages/common/src/ExitError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/common/class/ExitError","previousId":341,"nextId":430},{"id":430,"name":"PackageGraph","kind":128,"kindString":"Class","flags":{},"children":[{"id":431,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":24,"character":1}],"signatures":[{"id":432,"name":"new PackageGraph","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":433,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":629,"name":"PackageStructure"},"default":{"type":"reference","id":629,"name":"PackageStructure"}}],"parameters":[{"id":434,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":430,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraph"}}]},{"id":438,"name":"addPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":33,"character":1}],"signatures":[{"id":439,"name":"addPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a package by name with an associated `package.json` object.\\nWill map a dependency between the package and its dependees\\nfound in `dependencies` and `peerDependencies`."},"parameters":[{"id":440,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","id":430,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraph"}}]},{"id":441,"name":"addPackages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":50,"character":1}],"signatures":[{"id":442,"name":"addPackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add multiple packages."},"parameters":[{"id":443,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":430,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraph"}}]},{"id":448,"name":"resolveBatchList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":153,"character":1}],"signatures":[{"id":449,"name":"resolveBatchList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of batched `package.json` objects\\n(array of arrays) in the order they are depended on.","text":"```ts\\ngraph.resolveBatchList().forEach((pkgs) => {\\n\\tpkgs.forEach((pkg) => {\\n\\t\\tconsole.log(pkg.name);\\n\\t});\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"array","elementType":{"type":"reference","name":"T"}}}}]},{"id":444,"name":"resolveList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":68,"character":1}],"signatures":[{"id":445,"name":"resolveList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of all\\n`package.json` objects in the order they are depended on.","text":"```ts\\ngraph.resolveList().forEach((pkg) => {\\n\\tconsole.log(pkg.name);\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}]},{"id":446,"name":"resolveTree","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":90,"character":1}],"signatures":[{"id":447,"name":"resolveTree","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a tree of nodes for all\\n`package.json` objects and their dependency mappings.","text":"```ts\\ngraph.resolveTree().nodes.forEach((node) => {\\n\\tconsole.log(node.package.name);\\n\\n\\tif (node.nodes) {\\n\\t\\t// Dependents\\n\\t}\\n});\\n```\\n"},"type":{"type":"reference","id":684,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraphTree"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[431]},{"title":"Methods","kind":2048,"children":[438,441,448,444,446]}],"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":17,"character":13}],"typeParameter":[{"id":468,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":629,"name":"PackageStructure"},"default":{"type":"reference","id":629,"name":"PackageStructure"}}],"permalink":"/api/common/class/PackageGraph","previousId":361,"nextId":469},{"id":469,"name":"Path","kind":128,"kindString":"Class","flags":{},"children":[{"id":479,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":12,"character":1}],"signatures":[{"id":480,"name":"new Path","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":481,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":569,"name":"PortablePath"}}}],"type":{"type":"reference","id":469,"name":"Path"}}]},{"id":470,"name":"DELIMITER","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":6,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":471,"name":"SEP","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":8,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'/\'"},{"id":483,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":36,"character":1}],"signatures":[{"id":484,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `Path` instance."},"parameters":[{"id":485,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":569,"name":"PortablePath"}}}],"type":{"type":"reference","id":469,"name":"Path"}}]},{"id":486,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":43,"character":1}],"signatures":[{"id":487,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if both paths are equal using strict equality."},"parameters":[{"id":488,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":492,"name":"exists","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":59,"character":1}],"signatures":[{"id":493,"name":"exists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path exists."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":489,"name":"ext","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":50,"character":1}],"signatures":[{"id":490,"name":"ext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the extension (if applicable) with or without leading period."},"parameters":[{"id":491,"name":"withoutPeriod","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":494,"name":"isAbsolute","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":66,"character":1}],"signatures":[{"id":495,"name":"isAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is absolute."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":496,"name":"isDirectory","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":73,"character":1}],"signatures":[{"id":497,"name":"isDirectory","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a folder."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":498,"name":"isFile","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":80,"character":1}],"signatures":[{"id":499,"name":"isFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a file."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":500,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":87,"character":1}],"signatures":[{"id":501,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the file name (with optional extension) or folder name."},"parameters":[{"id":502,"name":"withoutExtension","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":503,"name":"parent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":100,"character":1}],"signatures":[{"id":504,"name":"parent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the parent folder as a new `Path` instance."},"type":{"type":"reference","id":469,"name":"Path"}}]},{"id":505,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":107,"character":1}],"signatures":[{"id":506,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current path as a normalized string."},"type":{"type":"intrinsic","name":"string"}}]},{"id":507,"name":"prepend","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":115,"character":1}],"signatures":[{"id":508,"name":"prepend","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Prepend path parts to the beginning of the current path\\nand return a new `Path` instance."},"parameters":[{"id":509,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":569,"name":"PortablePath"}}}],"type":{"type":"reference","id":469,"name":"Path"}}]},{"id":510,"name":"realPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":123,"character":1}],"signatures":[{"id":511,"name":"realPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a canonical path by resolving directories and symlinks."},"type":{"type":"intrinsic","name":"string"}}]},{"id":512,"name":"relativeTo","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":131,"character":1}],"signatures":[{"id":513,"name":"relativeTo","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new relative `Path` instance from the current\\n\\"from\\" path to the defined \\"to\\" path."},"parameters":[{"id":514,"name":"to","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","id":469,"name":"Path"}}]},{"id":515,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":139,"character":1}],"signatures":[{"id":516,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new `Path` instance where the current path is accurately\\nresolved against the defined current working directory."},"parameters":[{"id":517,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","id":469,"name":"Path"}}]},{"id":518,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":143,"character":1}],"signatures":[{"id":519,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":520,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":147,"character":1}],"signatures":[{"id":521,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":472,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":21,"character":8}],"signatures":[{"id":473,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `Path` instance if a string.\\nIf already a `Path`, return as is."},"parameters":[{"id":474,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","id":469,"name":"Path"}}]},{"id":475,"name":"resolve","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":28,"character":8}],"signatures":[{"id":476,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `create()` but also resolves the path against CWD."},"parameters":[{"id":477,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}},{"id":478,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","id":469,"name":"Path"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[479]},{"title":"Properties","kind":1024,"children":[470,471]},{"title":"Methods","kind":2048,"children":[483,486,492,489,494,496,498,500,503,505,507,510,512,515,518,520,472,475]}],"sources":[{"fileName":"packages/common/src/Path.ts","line":5,"character":13}],"permalink":"/api/common/class/Path","previousId":430,"nextId":522},{"id":522,"name":"PathResolver","kind":128,"kindString":"Class","flags":{},"children":[{"id":523,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":10,"character":1}],"signatures":[{"id":524,"name":"new PathResolver","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":525,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":577,"name":"ModuleResolver"}}],"type":{"type":"reference","id":522,"name":"PathResolver"}}]},{"id":528,"name":"getLookupPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":17,"character":1}],"signatures":[{"id":529,"name":"getLookupPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all lookup paths."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":530,"name":"lookupFilePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":25,"character":1}],"signatures":[{"id":531,"name":"lookupFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a file system path to look for, resolved against the defined current\\nworking directory (or `process.cwd()` otherwise)."},"parameters":[{"id":532,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}},{"id":533,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","id":522,"name":"PathResolver"}}]},{"id":534,"name":"lookupNodeModule","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":38,"character":1}],"signatures":[{"id":535,"name":"lookupNodeModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a Node.js module, either by name or relative path, to look for."},"parameters":[{"id":536,"name":"modulePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","id":522,"name":"PathResolver"}}]},{"id":537,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":55,"character":1}],"signatures":[{"id":538,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a list of lookups, attempt to find the first real/existing path and\\nreturn a resolved absolute path. If a file system path, will check using `fs.exists`.\\nIf a node module path, will check using `require.resolve`."},"type":{"type":"reflection","declaration":{"id":539,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":540,"name":"originalPath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":56,"character":2}],"type":{"type":"reference","id":469,"name":"Path"}},{"id":541,"name":"resolvedPath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":57,"character":2}],"type":{"type":"reference","id":469,"name":"Path"}},{"id":542,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":58,"character":2}],"type":{"type":"reference","id":570,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[540,541,542]}]}}}]},{"id":543,"name":"resolvePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":103,"character":1}],"signatures":[{"id":544,"name":"resolvePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `resolve()` but only returns the resolved path."},"type":{"type":"reference","id":469,"name":"Path"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[523]},{"title":"Methods","kind":2048,"children":[528,530,534,537,543]}],"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":5,"character":13}],"permalink":"/api/common/class/PathResolver","previousId":469,"nextId":547},{"id":547,"name":"Project","kind":128,"kindString":"Class","flags":{},"children":[{"id":548,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":23,"character":1}],"signatures":[{"id":549,"name":"new Project","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":550,"name":"root","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","id":547,"name":"Project"}}]},{"id":551,"name":"root","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":21,"character":10}],"type":{"type":"reference","id":469,"name":"Path"}},{"id":552,"name":"createWorkspaceMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":30,"character":1}],"signatures":[{"id":553,"name":"createWorkspaceMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a workspace metadata object composed of absolute file paths."},"parameters":[{"id":554,"name":"jsonPath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","id":688,"name":"WorkspaceMetadata"}}]},{"id":555,"name":"getPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":48,"character":1}],"signatures":[{"id":556,"name":"getPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the contents of the root `package.json`."},"typeParameter":[{"id":557,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":629,"name":"PackageStructure"}}],"type":{"type":"reference","name":"T"}}]},{"id":558,"name":"getWorkspaceGlobs","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":711,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":64,"character":1}],"signatures":[{"id":559,"name":"getWorkspaceGlobs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace globs as they are configured\\nin `package.json` or `lerna.json`."},"parameters":[{"id":560,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":545,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":564,"name":"getWorkspacePackagePaths","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":711,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":134,"character":1}],"signatures":[{"id":565,"name":"getWorkspacePackagePaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace package paths, resolved against the file system."},"parameters":[{"id":566,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":545,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":561,"name":"getWorkspacePackages","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":711,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":113,"character":1}],"signatures":[{"id":562,"name":"getWorkspacePackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all `package.json`s across all workspaces and their packages.\\nOnce loaded, append workspace path metadata."},"typeParameter":[{"id":563,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":629,"name":"PackageStructure"}}],"type":{"type":"array","elementType":{"type":"reference","id":694,"typeArguments":[{"type":"reference","name":"T"}],"name":"WorkspacePackage"}}}]}],"groups":[{"title":"Constructors","kind":512,"children":[548]},{"title":"Properties","kind":1024,"children":[551]},{"title":"Methods","kind":2048,"children":[552,555,558,564,561]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":20,"character":13}],"permalink":"/api/common/class/Project","previousId":522,"nextId":570},{"id":608,"name":"BugSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":610,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":65,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":609,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":64,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[610,609]}],"sources":[{"fileName":"packages/common/src/types.ts","line":63,"character":17}],"permalink":"/api/common/interface/BugSetting","previousId":18,"nextId":612},{"id":612,"name":"DependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":613,"name":"built","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":71,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":614,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":72,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":615,"name":"unplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":73,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[613,614,615]}],"sources":[{"fileName":"packages/common/src/types.ts","line":70,"character":17}],"permalink":"/api/common/interface/DependencyMetaSetting","previousId":608,"nextId":573},{"id":573,"name":"Lookup","kind":256,"kindString":"Interface","flags":{},"children":[{"id":574,"name":"path","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":20,"character":1}],"type":{"type":"reference","id":469,"name":"Path"}},{"id":575,"name":"raw","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":21,"character":1}],"type":{"type":"reference","id":469,"name":"Path"}},{"id":576,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":22,"character":1}],"type":{"type":"reference","id":570,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[574,575,576]}],"sources":[{"fileName":"packages/common/src/types.ts","line":19,"character":17}],"permalink":"/api/common/interface/Lookup","previousId":612,"nextId":729},{"id":729,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":730,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":9,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":724,"typeArguments":[{"type":"reference","name":"T"}],"name":"MemoizeCache"}]}},{"id":731,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":14,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":732,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":19,"character":4}],"type":{"type":"reference","id":720,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[730,731,732]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":7,"character":17}],"typeParameter":[{"id":733,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/common/interface/MemoizeOptions","previousId":573,"nextId":598},{"id":598,"name":"Optionable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":600,"name":"blueprint","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/types.ts","line":50,"character":1}],"type":{"type":"reference","id":592,"typeArguments":[{"type":"intrinsic","name":"object"}],"name":"BlueprintFactory"}},{"id":599,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/types.ts","line":44,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}}],"groups":[{"title":"Properties","kind":1024,"children":[600,599]}],"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":17}],"typeParameter":[{"id":602,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":601,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":47}]}}}],"implementedBy":[{"type":"reference","id":341,"name":"Contract"}],"permalink":"/api/common/interface/Optionable","previousId":729,"nextId":684},{"id":684,"name":"PackageGraphTree","kind":256,"kindString":"Interface","flags":{},"children":[{"id":685,"name":"nodes","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":163,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":680,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":686,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":164,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[685,686]}],"sources":[{"fileName":"packages/common/src/types.ts","line":162,"character":17}],"typeParameter":[{"id":687,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":629,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTree","previousId":598,"nextId":680},{"id":680,"name":"PackageGraphTreeNode","kind":256,"kindString":"Interface","flags":{},"children":[{"id":681,"name":"nodes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":158,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":680,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":682,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":159,"character":1}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[681,682]}],"sources":[{"fileName":"packages/common/src/types.ts","line":157,"character":17}],"typeParameter":[{"id":683,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":629,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTreeNode","previousId":684,"nextId":629},{"id":629,"name":"PackageStructure","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Shape of `package.json`, with support for third-party properties\\nlike Yarn, Webpack, and TypeScript."},"children":[{"id":630,"name":"author","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":100,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":621,"name":"PeopleSetting"}]}},{"id":631,"name":"bin","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":101,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":605,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}},{"id":632,"name":"browser","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":102,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":633,"name":"browserslist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":103,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":634,"name":"bugs","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":104,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":608,"name":"BugSetting"}]}},{"id":635,"name":"bundledDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":105,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":636,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":106,"character":1}],"type":{"type":"reference","id":607,"name":"ConfigSetting"}},{"id":637,"name":"contributors","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":107,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"array","elementType":{"type":"reference","id":621,"name":"PeopleSetting"}}]}},{"id":638,"name":"cpu","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":108,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":639,"name":"dependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":109,"character":1}],"type":{"type":"reference","id":611,"name":"DependencyMap"}},{"id":640,"name":"dependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":110,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":612,"name":"DependencyMetaSetting"}],"name":"Record"}},{"id":641,"name":"description","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":642,"name":"devDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":112,"character":1}],"type":{"type":"reference","id":611,"name":"DependencyMap"}},{"id":643,"name":"directories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":113,"character":1}],"type":{"type":"reference","id":605,"typeArguments":[{"type":"union","types":[{"type":"literal","value":"bin"},{"type":"literal","value":"doc"},{"type":"literal","value":"example"},{"type":"literal","value":"lib"},{"type":"literal","value":"man"},{"type":"literal","value":"test"}]}],"name":"SettingMap"}},{"id":644,"name":"engines","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":114,"character":1}],"type":{"type":"reference","id":605,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":645,"name":"exports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":115,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":605,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}],"name":"Record"}]}},{"id":646,"name":"files","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":116,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":647,"name":"funding","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":616,"name":"TypeSetting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":616,"name":"TypeSetting"}]}}]}},{"id":648,"name":"homepage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":118,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":649,"name":"imports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":119,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":605,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}],"name":"Record"}},{"id":670,"name":"installConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":143,"character":1}],"type":{"type":"reflection","declaration":{"id":671,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":672,"name":"hoistingLimits","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":144,"character":2}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[672]}]}}},{"id":650,"name":"keywords","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":120,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":673,"name":"languageName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":146,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":651,"name":"license","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":121,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":616,"name":"TypeSetting"},{"type":"array","elementType":{"type":"reference","id":616,"name":"TypeSetting"}}]}},{"id":652,"name":"main","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":122,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":653,"name":"man","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":123,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":668,"name":"module","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":140,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":654,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":655,"name":"optionalDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":611,"name":"DependencyMap"}},{"id":656,"name":"os","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":126,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":657,"name":"peerDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":127,"character":1}],"type":{"type":"reference","id":611,"name":"DependencyMap"}},{"id":658,"name":"peerDependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":128,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":619,"name":"PeerDependencyMetaSetting"}],"name":"Record"}},{"id":674,"name":"preferUnplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":147,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":659,"name":"private","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":129,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":660,"name":"publishConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":130,"character":1}],"type":{"type":"reference","id":607,"name":"ConfigSetting"}},{"id":661,"name":"repository","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":131,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":625,"name":"RepositorySetting"}]}},{"id":675,"name":"resolutions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":148,"character":1}],"type":{"type":"reference","id":611,"name":"DependencyMap"}},{"id":662,"name":"scripts","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":132,"character":1}],"type":{"type":"reference","id":605,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":669,"name":"sideEffects","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":141,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":663,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":133,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"commonjs"},{"type":"literal","value":"module"}]}},{"id":665,"name":"types","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":136,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":666,"name":"typesVersions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":137,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"Record"}],"name":"Record"}},{"id":667,"name":"typings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":138,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":664,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":134,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":676,"name":"workspaces","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":149,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reflection","declaration":{"id":677,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":679,"name":"nohoist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":153,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":678,"name":"packages","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":152,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"groups":[{"title":"Properties","kind":1024,"children":[679,678]}]}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,670,650,673,651,652,653,668,654,655,656,657,658,674,659,660,661,675,662,669,663,665,666,667,664,676]}],"sources":[{"fileName":"packages/common/src/types.ts","line":99,"character":17}],"permalink":"/api/common/interface/PackageStructure","previousId":680,"nextId":619},{"id":619,"name":"PeerDependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":620,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":82,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[620]}],"sources":[{"fileName":"packages/common/src/types.ts","line":81,"character":17}],"permalink":"/api/common/interface/PeerDependencyMetaSetting","previousId":629,"nextId":621},{"id":621,"name":"PeopleSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":623,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":87,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":622,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":624,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":88,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[623,622,624]}],"sources":[{"fileName":"packages/common/src/types.ts","line":85,"character":17}],"permalink":"/api/common/interface/PeopleSetting","previousId":619,"nextId":545},{"id":545,"name":"ProjectSearchOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":546,"name":"relative","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[546]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":16,"character":17}],"permalink":"/api/common/interface/ProjectSearchOptions","previousId":621,"nextId":625},{"id":625,"name":"RepositorySetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":626,"name":"directory","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":92,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":627,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":617,"name":"TypeSetting.type"}},{"id":628,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":618,"name":"TypeSetting.url"}}],"groups":[{"title":"Properties","kind":1024,"children":[626,627,628]}],"sources":[{"fileName":"packages/common/src/types.ts","line":91,"character":17}],"extendedTypes":[{"type":"reference","id":616,"name":"TypeSetting"}],"permalink":"/api/common/interface/RepositorySetting","previousId":545,"nextId":603},{"id":603,"name":"Toolable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":604,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":54,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[604]}],"sources":[{"fileName":"packages/common/src/types.ts","line":53,"character":17}],"permalink":"/api/common/interface/Toolable","previousId":625,"nextId":616},{"id":616,"name":"TypeSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":617,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":618,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[617,618]}],"sources":[{"fileName":"packages/common/src/types.ts","line":76,"character":17}],"extendedBy":[{"type":"reference","id":625,"name":"RepositorySetting"}],"permalink":"/api/common/interface/TypeSetting","previousId":603,"nextId":688},{"id":688,"name":"WorkspaceMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":689,"name":"jsonPath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":170,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":691,"name":"packageName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":172,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":690,"name":"packagePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":693,"name":"workspaceName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":174,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":692,"name":"workspacePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":173,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[689,691,690,693,692]}],"sources":[{"fileName":"packages/common/src/types.ts","line":169,"character":17}],"permalink":"/api/common/interface/WorkspaceMetadata","previousId":616,"nextId":694},{"id":694,"name":"WorkspacePackage","kind":256,"kindString":"Interface","flags":{},"children":[{"id":695,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":178,"character":1}],"type":{"type":"reference","id":688,"name":"WorkspaceMetadata"}},{"id":696,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":179,"character":1}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[695,696]}],"sources":[{"fileName":"packages/common/src/types.ts","line":177,"character":17}],"typeParameter":[{"id":697,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":629,"name":"PackageStructure"},"default":{"type":"reference","id":629,"name":"PackageStructure"}}],"permalink":"/api/common/interface/WorkspacePackage","previousId":688,"nextId":300},{"id":581,"name":"AbstractConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":29,"character":12}],"typeParameter":[{"id":584,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Function"},{"type":"reflection","declaration":{"id":582,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":583,"name":"prototype","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":29,"character":50}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[583]}],"sources":[{"fileName":"packages/common/src/types.ts","line":29,"character":48}]}}]},"permalink":"/api/common#AbstractConstructor","previousId":1,"nextId":592},{"id":592,"name":"BlueprintFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":37,"character":12}],"typeParameter":[{"id":597,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":593,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":37,"character":49}],"signatures":[{"id":594,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":595,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Predicates"}},{"id":596,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Blueprint"}}]}},"permalink":"/api/common#BlueprintFactory","previousId":581,"nextId":333},{"id":333,"name":"CommonErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/common#CommonErrorCode","previousId":592,"nextId":585},{"id":585,"name":"ConcreteConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":31,"character":12}],"typeParameter":[{"id":589,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":586,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":31,"character":37}],"signatures":[{"id":587,"name":"__type","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":588,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","name":"T"}}]}},"permalink":"/api/common#ConcreteConstructor","previousId":333,"nextId":607},{"id":607,"name":"ConfigSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":61,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Record"},"permalink":"/api/common#ConfigSetting","previousId":585,"nextId":590},{"id":590,"name":"Constructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":33,"character":12}],"typeParameter":[{"id":591,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reference","id":581,"typeArguments":[{"type":"reference","name":"T"}],"name":"AbstractConstructor"},{"type":"reference","id":585,"typeArguments":[{"type":"reference","name":"T"}],"name":"ConcreteConstructor"}]},"permalink":"/api/common#Constructor","previousId":607,"nextId":611},{"id":611,"name":"DependencyMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":68,"character":12}],"type":{"type":"reference","id":605,"name":"SettingMap"},"permalink":"/api/common#DependencyMap","previousId":590,"nextId":568},{"id":568,"name":"FilePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":10,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#FilePath","previousId":611,"nextId":384},{"id":384,"name":"InferMergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":6,"character":12}],"typeParameter":[{"id":385,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reference","id":381,"name":"MergableArray"},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"object"},"trueType":{"type":"reference","id":382,"name":"MergableObject"},"falseType":{"type":"intrinsic","name":"never"}}},"permalink":"/api/common#InferMergeable","previousId":568,"nextId":724},{"id":724,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":20}],"typeParameter":[{"id":728,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":725,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":726,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":4,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":727,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":5,"character":4}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[726,727]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":50}]}}],"name":"Map"},"permalink":"/api/common#MemoizeCache","previousId":384,"nextId":720},{"id":720,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":20}],"type":{"type":"reflection","declaration":{"id":721,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":36}],"signatures":[{"id":722,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":723,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/common#MemoizeHasher","previousId":724,"nextId":715},{"id":715,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":20}],"typeParameter":[{"id":719,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":716,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":42}],"signatures":[{"id":717,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":718,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","name":"T"}}]}},"permalink":"/api/common#MemoizedFunction","previousId":720,"nextId":381},{"id":381,"name":"MergableArray","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"permalink":"/api/common#MergableArray","previousId":715,"nextId":382},{"id":382,"name":"MergableObject","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/common#MergableObject","previousId":381,"nextId":383},{"id":383,"name":"Mergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":381,"name":"MergableArray"},{"type":"reference","id":382,"name":"MergableObject"}]},"permalink":"/api/common#Mergeable","previousId":382,"nextId":567},{"id":567,"name":"ModuleName","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":6,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#ModuleName","previousId":383,"nextId":577},{"id":577,"name":"ModuleResolver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":25,"character":12}],"type":{"type":"reflection","declaration":{"id":578,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":25,"character":29}],"signatures":[{"id":579,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":580,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":567,"name":"ModuleName"}}],"type":{"type":"reference","id":568,"name":"FilePath"}}]}},"permalink":"/api/common#ModuleResolver","previousId":567,"nextId":569},{"id":569,"name":"PortablePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":12,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":568,"name":"FilePath"},{"type":"reference","id":469,"name":"Path"}]},"permalink":"/api/common#PortablePath","previousId":577,"nextId":605},{"id":605,"name":"SettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":59,"character":12}],"typeParameter":[{"id":606,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/common#SettingMap","previousId":569,"nextId":334},{"id":334,"name":"CommonError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":335,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":336,"name":"new CommonError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":337,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}},{"id":338,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/common#CommonError","previousId":18,"nextId":339},{"id":339,"name":"MODULE_NAME_PART","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/common/src/constants.ts","line":2,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PART","previousId":334,"nextId":340},{"id":340,"name":"MODULE_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/common/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PATTERN","previousId":339},{"id":698,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Bind.d.ts","line":5,"character":24}],"signatures":[{"id":699,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Bind","nextId":700},{"id":700,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Debounce.d.ts","line":5,"character":24}],"signatures":[{"id":701,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":702,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Debounce","previousId":698,"nextId":703},{"id":703,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":24}],"signatures":[{"id":704,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":705,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":706,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":53}],"signatures":[{"id":707,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":708,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Function"},{"type":"reference","name":"Object"}]}},{"id":709,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":710,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/common/function/Deprecate","previousId":700,"nextId":711},{"id":711,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"decorates":[{"type":"reference","id":558,"name":"getWorkspaceGlobs"},{"type":"reference","id":561,"name":"getWorkspacePackages"},{"type":"reference","id":564,"name":"getWorkspacePackagePaths"}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":25,"character":24}],"signatures":[{"id":712,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":713,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":714,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":720,"name":"MemoizeHasher"},{"type":"reference","id":729,"typeArguments":[{"type":"reference","name":"T"}],"name":"MemoizeOptions"}]}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Memoize","previousId":703,"nextId":734},{"id":734,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Throttle.d.ts","line":5,"character":24}],"signatures":[{"id":735,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":736,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Throttle","previousId":711,"nextId":367},{"id":367,"name":"createBlueprint","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/createBlueprint.ts","line":20,"character":16}],"signatures":[{"id":368,"name":"createBlueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to generate a blueprint object for use within\\n[optimal](https://github.com/milesj/optimal) checks. All supported optimal\\npredicates are passed as an object to the factory.","text":"```ts\\nimport { optimal, createBlueprint } from \'@boost/common\';\\n\\nconst blueprint = createBlueprint(({ string, number }) => ({\\n\\tname: string().required(),\\n\\tage: number().gt(0),\\n}));\\n\\nconst data = optimal({}, blueprint);\\n```\\n"},"typeParameter":[{"id":369,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":370,"name":"factory","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":592,"typeArguments":[{"type":"reference","name":"T"}],"name":"BlueprintFactory"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Blueprint"}}],"permalink":"/api/common/function/createBlueprint","previousId":734,"nextId":371},{"id":371,"name":"deepFreeze","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepFreeze.ts","line":15,"character":16}],"signatures":[{"id":372,"name":"deepFreeze","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively freeze plain objects with `Object.freeze`.","text":"```ts\\nimport { deepFreeze } from \'@boost/common\';\\n\\nconst obj = deepFreeze({ foo: 123 });\\n\\n// Errors!\\nobj.foo = 456;\\n```\\n"},"typeParameter":[{"id":373,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":374,"name":"obj","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/deepFreeze","previousId":367,"nextId":375},{"id":375,"name":"deepMerge","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":44,"character":16}],"signatures":[{"id":376,"name":"deepMerge","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively merge objects and arrays, where values on the\\nright-hand side will overwrite values on the left-hand based on the key\\nor index respectively. Furthermore, if the 2nd argument is not provided,\\nit will simply clone the base value.","text":"```ts\\nimport { deepMerge } from \'@boost/common\';\\n\\nconst obj = deepMerge({ foo: 123, bar: \'abc\' }, { foo: 456, baz: true });\\n\\n// -> { foo: 456, bar: \'abc\', baz: true }\\n```\\n"},"typeParameter":[{"id":377,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":383,"name":"Mergeable"}},{"id":378,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":383,"name":"Mergeable"}}],"parameters":[{"id":379,"name":"base","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":380,"name":"other","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"V"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/deepMerge","previousId":371,"nextId":386},{"id":386,"name":"formatMs","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/formatMs.ts","line":14,"character":16}],"signatures":[{"id":387,"name":"formatMs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to format a UNIX timestamp in milliseconds into a shorthand human readable format.\\nWraps the [pretty-ms](https://www.npmjs.com/package/pretty-ms) package to handle infinite\\nnumbers, zeros, and more.","text":"```ts\\nimport { formatMs } from \'@boost/common\';\\n\\nformatMs(1337000000); // 15d 11h 23m 20s\\n```\\n"},"parameters":[{"id":388,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":389,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/common/function/formatMs","previousId":375,"nextId":390},{"id":390,"name":"instanceOf","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/instanceOf.ts","line":32,"character":16}],"signatures":[{"id":391,"name":"instanceOf","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Performs a loose instance check by comparing class names up the prototype\\nchain if `instanceof` initially fails. To disable this loose check,\\npass `false` as the 3rd argument.","text":"```ts\\nimport { instanceOf } from \'@boost/common\';\\n\\nif (instanceOf(error, Error)) {\\n\\tconsole.log(error.stack);\\n}\\n```\\n\\nGenerics can be used to type the object being checked. This will default\\nto the declaration passed to the 2nd argument.\\n\\n```ts\\ninstanceOf<ParseError>(error, Error);\\n```\\n\\n> Loose checks can be useful if multiple copies of the same class declaration\\n> exists in the module tree. For example, multiple versions of the same package are imported.\\n"},"typeParameter":[{"id":392,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":393,"name":"object","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":394,"name":"declaration","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":590,"typeArguments":[{"type":"reference","name":"T"}],"name":"Constructor"}},{"id":395,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"predicate","name":"object","asserts":false,"targetType":{"type":"reference","name":"T"}}}],"permalink":"/api/common/function/instanceOf","previousId":386,"nextId":396},{"id":396,"name":"isEmpty","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isEmpty.ts","line":17,"character":16}],"signatures":[{"id":397,"name":"isEmpty","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if an object has no properties, an array has no items,\\nor the value is falsy, otherwise, it returns `false`.","text":"```ts\\nimport { isEmpty } from \'@boost/common\';\\n\\nisEmpty({}); // true\\nisEmpty({ name: \'Boost\' }); // false\\n\\nisEmpty([]); // true\\nisEmpty([\'Boost\']); // false\\n```\\n"},"parameters":[{"id":398,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isEmpty","previousId":390,"nextId":399},{"id":399,"name":"isFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isFilePath.ts","line":21,"character":16}],"signatures":[{"id":400,"name":"isFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string or `Path` instance looks like a file system path,\\nby checking for absolute or relative path markers, or the existence of\\npath separating slashes. Will return `false` for values that are only\\nthe file or folder name.","text":"```ts\\nimport { isFilePath } from \'@boost/common\';\\n\\nisFilePath(\'./path/to/file.ts\'); // true\\nisFilePath(new Path(\'/path/to/folder\')); // true\\nisFilePath(\'file.ts\'); // false\\n```\\n"},"parameters":[{"id":401,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isFilePath","previousId":396,"nextId":402},{"id":402,"name":"isModuleName","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isModuleName.ts","line":21,"character":16}],"signatures":[{"id":403,"name":"isModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string is a valid Node module package name,\\naccording to the rules defined in\\n[validate-npm-package-name](https://github.com/npm/validate-npm-package-name).\\nWill `return` false for native builtin modules, like `fs`, and for the old name format.","text":"```ts\\nimport { isModuleName } from \'@boost/common\';\\n\\nisModuleName(\'boost\'); // true\\nisModuleName(\'@boost/common\'); // true\\nisModuleName(\'fs\'); // false\\n```\\n"},"parameters":[{"id":404,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":567,"name":"ModuleName"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isModuleName","previousId":399,"nextId":405},{"id":405,"name":"isObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isObject.ts","line":24,"character":16}],"signatures":[{"id":406,"name":"isObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if the value is an object.","text":"```ts\\nimport { isObject } from \'@boost/common\';\\n\\nisObject({}); // true\\nisObject(new Foo()); // true\\nisObject([]); // false\\n```\\n\\nGenerics can be used to type the return value of the object (when necessary).\\n\\n```ts\\ninterface Person {\\n\\tname: string;\\n}\\n\\nif (isObject<Person>(person)) {\\n\\tconsole.log(person.name);\\n}\\n```\\n"},"typeParameter":[{"id":407,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":408,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","name":"T"}}}],"permalink":"/api/common/function/isObject","previousId":402,"nextId":409},{"id":409,"name":"isPlainObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isPlainObject.ts","line":17,"character":16}],"signatures":[{"id":410,"name":"isPlainObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `isObject` but only returns true if the value is a plain object\\n(no class instances, built-ins, etc). It achieves this by comparing\\nthe value\'s prototype to the built-in `Object` types. If you need to\\nrun these checks for cross-realm objects, pass true to the `loose` argument.","text":"```ts\\nimport { isPlainObject } from \'@boost/common\';\\n\\nisPlainObject({}); // true\\nisPlainObject(new Foo()); // false\\nisPlainObject([]); // false\\n```\\n"},"typeParameter":[{"id":411,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":412,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":413,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","name":"T"}}}],"permalink":"/api/common/function/isPlainObject","previousId":405,"nextId":414},{"id":414,"name":"parseFile","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/parseFile.ts","line":23,"character":16}],"signatures":[{"id":415,"name":"parseFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to *sync*hronously parse and return an object for the following\\nfile types & extensions: `js`, `ts`, `tsx`, `json`, `json5`, `yaml`, `yml`.\\nThe function requires an absolute file path, and any unsupported file type will throw an error.","text":"```ts\\nimport { parseFile } from \'@boost/common\';\\n\\nconst data: ReturnShape = parseFile(\'/absolute/file/path\');\\n```\\n\\n> TypeScript files require the `typescript` package to be installed.\\n"},"typeParameter":[{"id":416,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":417,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/parseFile","previousId":409,"nextId":418},{"id":418,"name":"requireModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/requireModule.ts","line":27,"character":16}],"signatures":[{"id":419,"name":"requireModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Works in a similar fashion to the native NodeJS `require()`, but also handles\\nfiles built with Babel or TypeScript by properly returning the `default` export\\nif an \\"ES module\\", and also allowing the expected type to be defined.","text":"```ts\\nimport { requireModule } from \'@boost/common\';\\n\\nconst result: ReturnShape = requireModule(\'../../some/module\');\\n```\\n\\nThere are some caveats to be aware of in regards to default and named exports\\nin the file being required, they are:\\n\\n- When only a default export, the exported value is returned directly instead\\nof on an object with a `default` property.\\n- When only named exports, the returned value is an object with all the named\\nexports as properties on the object.\\n- When a default export and named exports together, the returned value is an\\nobject with a `default` property, and an additional property for every named\\nexport. It\'s best to stay away from this pattern.\\n"},"typeParameter":[{"id":420,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":421,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/requireModule","previousId":414,"nextId":422},{"id":422,"name":"requireTypedModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/requireTypedModule.ts","line":83,"character":16}],"signatures":[{"id":423,"name":"requireTypedModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `requireModule` but for importing TypeScript files ending in `ts` or `tsx`.\\nWhen imported, will transform the file using the `typescript` package (must be installed),\\nevaluate the code in the current module context, and apply the same process to all child imports.","text":"```ts\\nimport { requireTypedModule } from \'@boost/common\';\\n\\nconst result: ReturnShape = requireTypedModule(\'../../some/module.ts\');\\n```\\n\\n> This helper rarely needs to be used directly as `parseFile` and `requireModule` will\\n> call it under the hood based on the file extension.\\n"},"typeParameter":[{"id":424,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":425,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":569,"name":"PortablePath"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/requireTypedModule","previousId":418,"nextId":426},{"id":426,"name":"toArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/toArray.ts","line":14,"character":16}],"signatures":[{"id":427,"name":"toArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts a non-array to an array. If the provided value is falsy,\\nan empty array is returned. If the provided value is truthy and a\\nnon-array, an array of 1 item is returned.","text":"```ts\\nimport { toArray } from \'@boost/common\';\\n\\ntoArray(123); // [123]\\ntoArray(\'abc\'); // [\'abc\']\\ntoArray([\'a\', \'b\', \'c\']); // [\'a\', \'b\', \'c\']\\n```\\n"},"typeParameter":[{"id":428,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":429,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"T"},{"type":"array","elementType":{"type":"reference","name":"T"}}]}}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}],"permalink":"/api/common/function/toArray","previousId":422,"nextId":608}],"groups":[{"title":"Classes","kind":128,"children":[341,361,430,469,522,547]},{"title":"Enumerations","kind":4,"children":[570]},{"title":"Functions","kind":64,"children":[698,700,703,711,734,367,371,375,386,390,396,399,402,405,409,414,418,422,426]},{"title":"Interfaces","kind":256,"children":[608,612,573,729,598,684,680,629,619,621,545,625,603,616,688,694]},{"title":"Namespaces","kind":2,"children":[300,323]},{"title":"Type aliases","kind":4194304,"children":[581,592,333,585,607,590,611,568,384,724,720,715,381,382,383,567,577,569,605]},{"title":"Variables","kind":32,"children":[334,339,340]}],"sources":[{"fileName":"packages/common/src/index.ts","line":6,"character":0}],"permalink":"/api/common"},"urlSlug":"common"}],"packageName":"@boost/common","packageVersion":"2.8.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":3,"name":"@boost/config","kind":1,"kindString":"Module","flags":{},"children":[{"id":743,"name":"Configuration","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":744,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":43,"character":1}],"signatures":[{"id":745,"name":"new Configuration","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":746,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":747,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":748,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"ModuleResolver"}}],"type":{"type":"reference","id":743,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"},"overwrites":{"type":"reference","name":"Contract<T>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<T>.constructor"}},{"id":749,"name":"onLoadedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded but before processed. Can modify config file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":21,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":865,"typeArguments":[{"type":"reference","name":"T"}],"name":"ConfigFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":750,"name":"onLoadedIgnore","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after ignore files are loaded. Can modify ignore file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":27,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":870,"name":"IgnoreFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":751,"name":"onProcessedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded and processed."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":33,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":797,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":774,"name":"addProcessHandler","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":128,"character":11}],"signatures":[{"id":775,"name":"addProcessHandler","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Add a process handler to customize the processing of key-value setting pairs.\\nMay only run a processor on settings found in the root of the configuration object."},"typeParameter":[{"id":776,"name":"K","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"symbol"}]}},{"id":777,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"indexedAccess","indexType":{"type":"reference","name":"K"},"objectType":{"type":"reference","name":"T"}}}],"parameters":[{"id":778,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"K"}},{"id":779,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":855,"typeArguments":[{"type":"reference","name":"V"}],"name":"Handler"}}],"type":{"type":"reference","id":743,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":804,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":805,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":806,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":807,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":808,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":780,"name":"bootstrap","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":138,"character":11}],"signatures":[{"id":781,"name":"bootstrap","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Life cycle called on initialization."},"type":{"type":"intrinsic","name":"void"}}]},{"id":756,"name":"clearCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":56,"character":1}],"signatures":[{"id":757,"name":"clearCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cache."},"type":{"type":"reference","id":743,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":758,"name":"clearFileCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":66,"character":1}],"signatures":[{"id":759,"name":"clearFileCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached file contents."},"type":{"type":"reference","id":743,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":760,"name":"clearFinderCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":75,"character":1}],"signatures":[{"id":761,"name":"clearFinderCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached directory and file path information."},"type":{"type":"reference","id":743,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":798,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":799,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":800,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"},{"type":"reflection","declaration":{"id":801,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":802,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":803,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":782,"name":"configureFinder","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":144,"character":11}],"signatures":[{"id":783,"name":"configureFinder","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the finder instance."},"parameters":[{"id":784,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":878,"typeArguments":[{"type":"reference","name":"T"}],"name":"ConfigFinderOptions"},{"type":"literal","value":"name"}],"name":"Omit"}}],"type":{"type":"reference","id":743,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":785,"name":"configureProcessor","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":154,"character":11}],"signatures":[{"id":786,"name":"configureProcessor","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the processor instance."},"parameters":[{"id":787,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":918,"name":"ProcessorOptions"},{"type":"literal","value":"name"}],"name":"Omit"}}],"type":{"type":"reference","id":743,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":762,"name":"loadConfigFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":86,"character":7}],"signatures":[{"id":763,"name":"loadConfigFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all config files\\nwithin each branch directory, and the root."},"parameters":[{"id":764,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":874,"typeArguments":[{"type":"reference","name":"T"}],"name":"ProcessedConfig"}],"name":"Promise"}}]},{"id":765,"name":"loadConfigFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":96,"character":7}],"signatures":[{"id":766,"name":"loadConfigFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load config files from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":767,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":874,"typeArguments":[{"type":"reference","name":"T"}],"name":"ProcessedConfig"}],"name":"Promise"}}]},{"id":768,"name":"loadIgnoreFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":107,"character":7}],"signatures":[{"id":769,"name":"loadIgnoreFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all ignore files\\nwithin each branch directory, and the root."},"parameters":[{"id":770,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":870,"name":"IgnoreFile"}}],"name":"Promise"}}]},{"id":771,"name":"loadIgnoreFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":117,"character":7}],"signatures":[{"id":772,"name":"loadIgnoreFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load ignore file from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":773,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":870,"name":"IgnoreFile"}}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[744]},{"title":"Properties","kind":1024,"children":[749,750,751,797],"categories":[{"title":"CATEGORY","children":[797]},{"title":"Events","children":[749,750,751]}]},{"title":"Methods","kind":2048,"children":[774,804,780,756,758,760,798,782,785,762,765,768,771]}],"sources":[{"fileName":"packages/config/src/Configuration.ts","line":16,"character":22}],"typeParameter":[{"id":809,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Contract"}],"permalink":"/api/config/class/Configuration","nextId":836},{"id":865,"name":"ConfigFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":866,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Config content of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":22,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}},{"id":867,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":15,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":863,"name":"File.path"}},{"id":868,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":861,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":864,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[866,867,868]}],"sources":[{"fileName":"packages/config/src/types.ts","line":20,"character":17}],"typeParameter":[{"id":869,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":862,"name":"File"}],"permalink":"/api/config/interface/ConfigFile","previousId":8,"nextId":878},{"id":878,"name":"ConfigFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":879,"name":"extendsSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config extending\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":40,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":880,"name":"extensions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of extensions, in order, to find config files within each folder. Defaults to built-in file format list."},"sources":[{"fileName":"packages/config/src/types.ts","line":42,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":847,"name":"ExtType"}}},{"id":881,"name":"includeEnv","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Find and load environment based config files (using `NODE_ENV`). Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":44,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":882,"name":"loaders","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of loader functions by type. Defaults to built-in file type loaders."},"sources":[{"fileName":"packages/config/src/types.ts","line":46,"character":1}],"type":{"type":"reflection","declaration":{"id":883,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":884,"name":"cjs","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":885,"name":"cjs","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":886,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":887,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":888,"name":"js","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":889,"name":"js","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":890,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":891,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":892,"name":"json","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":893,"name":"json","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":894,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":895,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":896,"name":"json5","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":897,"name":"json5","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":898,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":899,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":900,"name":"mjs","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":901,"name":"mjs","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":902,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":903,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":904,"name":"ts","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":905,"name":"ts","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":906,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":907,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":908,"name":"yaml","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":909,"name":"yaml","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":910,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":911,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[884,888,892,896,900,904,908]}]}}},{"id":912,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of config files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":48,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":913,"name":"overridesSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config overriding\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":50,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":914,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver instead of `require.resolve`."},"sources":[{"fileName":"packages/config/src/types.ts","line":52,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}}],"groups":[{"title":"Properties","kind":1024,"children":[879,880,881,882,912,913,914]}],"sources":[{"fileName":"packages/config/src/types.ts","line":38,"character":17}],"typeParameter":[{"id":915,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/ConfigFinderOptions","previousId":865,"nextId":862},{"id":862,"name":"File","kind":256,"kindString":"Interface","flags":{},"children":[{"id":863,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":15,"character":1}],"type":{"type":"reference","name":"Path"}},{"id":864,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":861,"name":"FileSource"}}],"groups":[{"title":"Properties","kind":1024,"children":[863,864]}],"sources":[{"fileName":"packages/config/src/types.ts","line":13,"character":17}],"extendedBy":[{"type":"reference","id":865,"name":"ConfigFile"},{"type":"reference","id":870,"name":"IgnoreFile"}],"permalink":"/api/config/interface/File","previousId":878,"nextId":870},{"id":870,"name":"IgnoreFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":871,"name":"ignore","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Ignored content of the file, split on new lines."},"sources":[{"fileName":"packages/config/src/types.ts","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":872,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":15,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":863,"name":"File.path"}},{"id":873,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":861,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":864,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[871,872,873]}],"sources":[{"fileName":"packages/config/src/types.ts","line":25,"character":17}],"extendedTypes":[{"type":"reference","id":862,"name":"File"}],"permalink":"/api/config/interface/IgnoreFile","previousId":862,"nextId":916},{"id":916,"name":"IgnoreFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":917,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of ignore files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":57,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[917]}],"sources":[{"fileName":"packages/config/src/types.ts","line":55,"character":17}],"permalink":"/api/config/interface/IgnoreFinderOptions","previousId":870,"nextId":924},{"id":924,"name":"OverridesSettingItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":925,"name":"exclude","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File path patterns/globs to ignore."},"sources":[{"fileName":"packages/config/src/types.ts","line":79,"character":1}],"type":{"type":"reference","id":922,"name":"FileGlob"}},{"id":926,"name":"include","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"File path patterns/globs to match against."},"sources":[{"fileName":"packages/config/src/types.ts","line":81,"character":1}],"type":{"type":"reference","id":922,"name":"FileGlob"}},{"id":927,"name":"settings","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Settings configured for this specific override."},"sources":[{"fileName":"packages/config/src/types.ts","line":83,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}}],"groups":[{"title":"Properties","kind":1024,"children":[925,926,927]}],"sources":[{"fileName":"packages/config/src/types.ts","line":77,"character":17}],"typeParameter":[{"id":928,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/OverridesSettingItem","previousId":916,"nextId":874},{"id":874,"name":"ProcessedConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":875,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"All found and loaded config file contents merged and processed into a\\nsingle config object."},"sources":[{"fileName":"packages/config/src/types.ts","line":33,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}},{"id":876,"name":"files","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of config files found and loaded."},"sources":[{"fileName":"packages/config/src/types.ts","line":35,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":865,"typeArguments":[{"type":"reference","name":"T"}],"name":"ConfigFile"}}}],"groups":[{"title":"Properties","kind":1024,"children":[875,876]}],"sources":[{"fileName":"packages/config/src/types.ts","line":30,"character":17}],"typeParameter":[{"id":877,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/ProcessedConfig","previousId":924,"nextId":918},{"id":918,"name":"ProcessorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":919,"name":"defaultWhenUndefined","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When a setting has a value of `undefined`, fallback to the\\ndefault/initial value for that setting. Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":65,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":920,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of config files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":67,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":921,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Validate all settings within a config file before processing. Defaults to\\n`true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":70,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[919,920,921]}],"sources":[{"fileName":"packages/config/src/types.ts","line":60,"character":17}],"permalink":"/api/config/interface/ProcessorOptions","previousId":874,"nextId":737},{"id":737,"name":"ConfigErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":14,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/config#ConfigErrorCode","previousId":7,"nextId":847},{"id":847,"name":"ExtType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"cjs"},{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"json5"},{"type":"literal","value":"mjs"},{"type":"literal","value":"ts"},{"type":"literal","value":"yaml"},{"type":"literal","value":"yml"}]},"permalink":"/api/config#ExtType","previousId":737,"nextId":923},{"id":923,"name":"ExtendsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":75,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#ExtendsSetting","previousId":847,"nextId":922},{"id":922,"name":"FileGlob","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":73,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#FileGlob","previousId":923,"nextId":861},{"id":861,"name":"FileSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"branch"},{"type":"literal","value":"extended"},{"type":"literal","value":"overridden"},{"type":"literal","value":"root"}]},"permalink":"/api/config#FileSource","previousId":922,"nextId":855},{"id":855,"name":"Handler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":9,"character":12}],"typeParameter":[{"id":860,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":856,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":9,"character":25}],"signatures":[{"id":857,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":858,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":859,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"T"},{"type":"intrinsic","name":"undefined"}]}],"name":"Promise"},{"type":"reference","name":"T"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/config#Handler","previousId":861,"nextId":849},{"id":849,"name":"Loader","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":7,"character":12}],"typeParameter":[{"id":854,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":850,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":7,"character":24}],"signatures":[{"id":851,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":852,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":853,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]}},"permalink":"/api/config#Loader","previousId":855,"nextId":848},{"id":848,"name":"LoaderType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":5,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":847,"name":"ExtType"},{"type":"literal","value":"yml"}],"name":"Exclude"},"permalink":"/api/config#LoaderType","previousId":849,"nextId":929},{"id":929,"name":"OverridesSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":86,"character":12}],"typeParameter":[{"id":930,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"array","elementType":{"type":"reference","id":924,"typeArguments":[{"type":"reference","name":"T"}],"name":"OverridesSettingItem"}},"permalink":"/api/config#OverridesSetting","previousId":848,"nextId":932},{"id":932,"name":"PluginEntry","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":92,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":931,"name":"PluginOptions"}]}]},"permalink":"/api/config#PluginEntry","previousId":929,"nextId":931},{"id":931,"name":"PluginOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":90,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/config#PluginOptions","previousId":932,"nextId":935},{"id":935,"name":"PluginsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":98,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":934,"name":"PluginsSettingList"},{"type":"reference","id":933,"name":"PluginsSettingMap"}]},"permalink":"/api/config#PluginsSetting","previousId":931,"nextId":934},{"id":934,"name":"PluginsSettingList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":96,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":932,"name":"PluginEntry"}},"permalink":"/api/config#PluginsSettingList","previousId":935,"nextId":933},{"id":933,"name":"PluginsSettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":94,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":931,"name":"PluginOptions"}],"name":"Record"},"permalink":"/api/config#PluginsSettingMap","previousId":934,"nextId":738},{"id":738,"name":"ConfigError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":16,"character":13}],"type":{"type":"reflection","declaration":{"id":739,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":740,"name":"new ConfigError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":741,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}},{"id":742,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/config#ConfigError","previousId":13},{"id":836,"name":"createExtendsPredicate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/predicates.ts","line":13,"character":16}],"signatures":[{"id":837,"name":"createExtendsPredicate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` predicate for validating the structure of an \\"extends\\" setting."},"parameters":[{"id":838,"name":"preds","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Predicates"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":923,"name":"ExtendsSetting"}],"name":"default"}}],"permalink":"/api/config/function/createExtendsPredicate","nextId":842},{"id":842,"name":"createOverridesPredicate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/predicates.ts","line":37,"character":16}],"signatures":[{"id":843,"name":"createOverridesPredicate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` predicate for validating the structure of an \\"overrides\\" setting."},"typeParameter":[{"id":844,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":845,"name":"blueprint","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Blueprint"}},{"id":846,"name":"preds","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Predicates"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":924,"typeArguments":[{"type":"reference","name":"T"}],"name":"OverridesSettingItem"}],"name":"ArrayOf"}],"name":"default"}}],"permalink":"/api/config/function/createOverridesPredicate","previousId":836,"nextId":839},{"id":839,"name":"createPluginsPredicate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/predicates.ts","line":22,"character":16}],"signatures":[{"id":840,"name":"createPluginsPredicate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` predicate for validating the structure of a \\"plugins\\" setting."},"parameters":[{"id":841,"name":"preds","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Predicates"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":935,"name":"PluginsSetting"}],"name":"default"}}],"permalink":"/api/config/function/createPluginsPredicate","previousId":842,"nextId":810},{"id":810,"name":"getEnv","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/getEnv.ts","line":4,"character":16}],"signatures":[{"id":811,"name":"getEnv","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Detect the current environment name from `<project>_ENV` and `NODE_ENV`."},"parameters":[{"id":812,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/config/function/getEnv","previousId":839,"nextId":813},{"id":813,"name":"mergeArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeArray.ts","line":4,"character":16}],"signatures":[{"id":814,"name":"mergeArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next arrays into a new array while removing duplicates (using `Set`)."},"typeParameter":[{"id":815,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"parameters":[{"id":816,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":817,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/config/function/mergeArray","previousId":810,"nextId":818},{"id":818,"name":"mergeExtends","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeExtends.ts","line":9,"character":16}],"signatures":[{"id":819,"name":"mergeExtends","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next file paths (either a string or array of strings) into a\\nnew list of file paths. This is useful if utilizing config extending."},"parameters":[{"id":820,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":923,"name":"ExtendsSetting"}},{"id":821,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":923,"name":"ExtendsSetting"}}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"permalink":"/api/config/function/mergeExtends","previousId":813,"nextId":822},{"id":822,"name":"mergeObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeObject.ts","line":4,"character":16}],"signatures":[{"id":823,"name":"mergeObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Shallow merges previous and next objects into a new object using object spread."},"typeParameter":[{"id":824,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":825,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":826,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/config/function/mergeObject","previousId":818,"nextId":827},{"id":827,"name":"mergePlugins","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergePlugins.ts","line":22,"character":16}],"signatures":[{"id":828,"name":"mergePlugins","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next plugin configurations into an object.\\nPlugin configs can either be a list of sources, or list of sources\\nwith flags/options (tuples), or a map of sources to flags/options.\\nThis is useful if utilizing the `@boost/plugin` package."},"parameters":[{"id":829,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":935,"name":"PluginsSetting"}},{"id":830,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":935,"name":"PluginsSetting"}}],"type":{"type":"reference","id":933,"name":"PluginsSettingMap"}}],"permalink":"/api/config/function/mergePlugins","previousId":822,"nextId":831},{"id":831,"name":"overwrite","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/overwrite.ts","line":4,"character":16}],"signatures":[{"id":832,"name":"overwrite","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Overwrite the previous value with the next value."},"typeParameter":[{"id":833,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":834,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":835,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/config/function/overwrite","previousId":827,"nextId":865}],"groups":[{"title":"Classes","kind":128,"children":[743]},{"title":"Functions","kind":64,"children":[836,842,839,810,813,818,822,827,831]},{"title":"Interfaces","kind":256,"children":[865,878,862,870,916,924,874,918]},{"title":"Type aliases","kind":4194304,"children":[737,847,923,922,861,855,849,848,929,932,931,935,934,933]},{"title":"Variables","kind":32,"children":[738]}],"sources":[{"fileName":"packages/config/src/index.ts","line":6,"character":0}],"permalink":"/api/config"},"urlSlug":"config"}],"packageName":"@boost/config","packageVersion":"2.5.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":74,"name":"@boost/debug","kind":1,"kindString":"Module","flags":{},"children":[{"id":3048,"name":"CrashReporter","kind":128,"kindString":"Class","flags":{},"children":[{"id":3049,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3050,"name":"new CrashReporter","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3051,"name":"contents","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":3052,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":37,"character":1}],"signatures":[{"id":3053,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a label with a value, or multiple values, to the last added section."},"parameters":[{"id":3054,"name":"label","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3055,"name":"messages","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"PortablePath"}]}}}],"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3056,"name":"addSection","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":47,"character":1}],"signatures":[{"id":3057,"name":"addSection","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Start a new section with a title."},"parameters":[{"id":3058,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3059,"name":"reportBinaries","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":59,"character":1}],"signatures":[{"id":3060,"name":"reportBinaries","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report Node.js related binary versions and paths."},"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3061,"name":"reportEnvVars","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":86,"character":1}],"signatures":[{"id":3062,"name":"reportEnvVars","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report all environment variables."},"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3063,"name":"reportLanguages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":101,"character":1}],"signatures":[{"id":3064,"name":"reportLanguages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report common programming language versions and paths"},"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3072,"name":"reportPackageVersions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":196,"character":1}],"signatures":[{"id":3073,"name":"reportPackageVersions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report npm package versions for all that match the defined pattern.\\nOnly searches in the root node modules folder and _will not_ work with PnP."},"parameters":[{"id":3074,"name":"patterns","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":3075,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'Packages\'"}],"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3065,"name":"reportProcess","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":147,"character":1}],"signatures":[{"id":3066,"name":"reportProcess","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the current `process`."},"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3067,"name":"reportStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":161,"character":1}],"signatures":[{"id":3068,"name":"reportStackTrace","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report the stack trace for a defined `Error`."},"parameters":[{"id":3069,"name":"error","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Error"}}],"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3070,"name":"reportSystem","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":172,"character":1}],"signatures":[{"id":3071,"name":"reportSystem","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the platform and operating system."},"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]},{"id":3076,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":226,"character":1}],"signatures":[{"id":3077,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the reported content to the defined file path."},"parameters":[{"id":3078,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","id":3048,"name":"CrashReporter"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3049]},{"title":"Properties","kind":1024,"children":[3051]},{"title":"Methods","kind":2048,"children":[3052,3056,3059,3061,3063,3072,3065,3067,3070,3076]}],"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":31,"character":13}],"permalink":"/api/debug/class/CrashReporter","nextId":3079},{"id":3082,"name":"Debugger","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3083,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":7,"character":1}],"signatures":[{"id":3084,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all debugger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3085,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":9,"character":1}],"signatures":[{"id":3086,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all debugger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3087,"name":"invariant","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":11,"character":1}],"signatures":[{"id":3088,"name":"invariant","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a pass or fail message based on a conditional."},"parameters":[{"id":3089,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"}},{"id":3090,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3091,"name":"pass","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3092,"name":"fail","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3093,"name":"verbose","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":13,"character":1}],"signatures":[{"id":3094,"name":"verbose","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log verbose messages that only appear when the `BOOSTJS_DEBUG_VERBOSE` is set."},"parameters":[{"id":3095,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3096,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3083,3085,3087,3093]}],"sources":[{"fileName":"packages/debug/src/types.ts","line":3,"character":17}],"signatures":[{"id":3097,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3098,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3099,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3100,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3101,"name":"formatter","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}},{"id":3102,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","name":"IDebugger"}],"permalink":"/api/debug/interface/Debugger"},{"id":3079,"name":"createDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/createDebugger.ts","line":10,"character":16}],"signatures":[{"id":3080,"name":"createDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Debugger` instance with the defined namespace."},"parameters":[{"id":3081,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","id":3082,"name":"Debugger"}}],"permalink":"/api/debug/function/createDebugger","nextId":3082}],"groups":[{"title":"Classes","kind":128,"children":[3048]},{"title":"Functions","kind":64,"children":[3079]},{"title":"Interfaces","kind":256,"children":[3082]}],"sources":[{"fileName":"packages/debug/src/index.ts","line":6,"character":0}],"permalink":"/api/debug"},"urlSlug":"debug"},{"index":false,"label":"Test utilities","reflection":{"id":75,"name":"@boost/debug/test","kind":1,"kindString":"Module","flags":{},"children":[{"id":76,"name":"mockDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/test.ts","line":20,"character":16}],"signatures":[{"id":77,"name":"mockDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createDebugger`.","text":"```ts\\nimport { mockDebugger } from \'@boost/debug/test\';\\n\\nit(\'calls the debugger\', () => {\\n\\tconst debug = mockDebugger();\\n\\n\\tdebug(\'Something is broken!\');\\n\\n\\texpect(debug).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3082,"name":"Debugger"}}],"permalink":"/api/debug-test/function/mockDebugger"}],"groups":[{"title":"Functions","kind":64,"children":[76]}],"sources":[{"fileName":"packages/debug/src/test.ts","line":3,"character":0}],"permalink":"/api/debug-test"},"urlSlug":"debug-test"}],"packageName":"@boost/debug","packageVersion":"2.2.7"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":4,"name":"@boost/decorators","kind":1,"kindString":"Module","flags":{},"children":[{"id":967,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":968,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":17,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":962,"typeArguments":[{"type":"reference","name":"T"}],"name":"MemoizeCache"}]}},{"id":969,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":970,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":27,"character":1}],"type":{"type":"reference","id":958,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[968,969,970]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":15,"character":17}],"typeParameter":[{"id":971,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/decorators/interface/MemoizeOptions","previousId":4,"nextId":962},{"id":962,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":7,"character":12}],"typeParameter":[{"id":966,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":963,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":964,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":10,"character":2}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":965,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":11,"character":2}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[964,965]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":9,"character":1}]}}],"name":"Map"},"permalink":"/api/decorators#MemoizeCache","nextId":958},{"id":958,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":12}],"type":{"type":"reflection","declaration":{"id":959,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":28}],"signatures":[{"id":960,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":961,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/decorators#MemoizeHasher","previousId":962,"nextId":953},{"id":953,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":12}],"typeParameter":[{"id":957,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":954,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":34}],"signatures":[{"id":955,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":956,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","name":"T"}}]}},"permalink":"/api/decorators#MemoizedFunction","previousId":958},{"id":936,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Bind.ts","line":7,"character":16}],"signatures":[{"id":937,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Bind","nextId":938},{"id":938,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Debounce.ts","line":7,"character":16}],"signatures":[{"id":939,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":940,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Debounce","previousId":936,"nextId":941},{"id":941,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Deprecate.ts","line":13,"character":16}],"signatures":[{"id":942,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":943,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":944,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":945,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":946,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Object"},{"type":"reference","name":"Function"}]}},{"id":947,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":948,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/decorators/function/Deprecate","previousId":938,"nextId":949},{"id":949,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":80,"character":16}],"signatures":[{"id":950,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":951,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":952,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":958,"name":"MemoizeHasher"},{"type":"reference","id":967,"typeArguments":[{"type":"reference","name":"T"}],"name":"MemoizeOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Memoize","previousId":941,"nextId":972},{"id":972,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Throttle.ts","line":7,"character":16}],"signatures":[{"id":973,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":974,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Throttle","previousId":949,"nextId":967}],"groups":[{"title":"Functions","kind":64,"children":[936,938,941,949,972]},{"title":"Interfaces","kind":256,"children":[967]},{"title":"Type aliases","kind":4194304,"children":[962,958,953]}],"sources":[{"fileName":"packages/decorators/src/index.ts","line":6,"character":0}],"permalink":"/api/decorators"},"urlSlug":"decorators"}],"packageName":"@boost/decorators","packageVersion":"2.1.3"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":5,"name":"@boost/event","kind":1,"kindString":"Module","flags":{},"children":[{"id":975,"name":"BailEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":976,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":977,"name":"new BailEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":978,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":979,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":980,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":975,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":1020,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":1019,"name":"BaseEvent.constructor"}},{"id":985,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Scope"},{"type":"literal","value":"*"}]},{"type":"reference","typeArguments":[{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1025,"name":"BaseEvent.listeners"}},{"id":986,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1026,"name":"BaseEvent.name"}},{"id":987,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":988,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":989,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":975,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":1028,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":1027,"name":"BaseEvent.clearListeners"}},{"id":981,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":14,"character":1}],"signatures":[{"id":982,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments.\\nIf a listener returns `false`, the loop with be aborted early,\\nand the emitter will return `true` (for bailed)."},"parameters":[{"id":983,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Args"}},{"id":984,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","id":1057,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":1056,"name":"BaseEvent.emit"}},{"id":990,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":991,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":992,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":1031,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":1030,"name":"BaseEvent.getListeners"}},{"id":993,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":994,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","name":"Scope"},{"type":"literal","value":"*"}]}},"inheritedFrom":{"type":"reference","id":1034,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":1033,"name":"BaseEvent.getScopes"}},{"id":995,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":996,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":997,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":998,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1036,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":1035,"name":"BaseEvent.listen"}},{"id":999,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1000,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1001,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":1002,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1040,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":1039,"name":"BaseEvent.once"}},{"id":1003,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1004,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1005,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":1006,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":975,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":1044,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":1043,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[976]},{"title":"Properties","kind":1024,"children":[985,986]},{"title":"Methods","kind":2048,"children":[987,981,990,993,995,999,1003]}],"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":4,"character":13}],"typeParameter":[{"id":1016,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1017,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":1018,"typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/BailEvent","nextId":1018},{"id":1018,"name":"BaseEvent","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1019,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":11,"character":1}],"signatures":[{"id":1020,"name":"new BaseEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1021,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1022,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1023,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1024,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1018,"typeArguments":[{"type":"reference","name":"Return"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}}]},{"id":1025,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Scope"},{"type":"literal","value":"*"}]},{"type":"reference","typeArguments":[{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"..."},{"id":1026,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1027,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":1028,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":1029,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1018,"typeArguments":[{"type":"reference","name":"Return"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}}]},{"id":1056,"name":"emit","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":123,"character":10}],"signatures":[{"id":1057,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emit the event by executing all scoped listeners with the defined arguments."},"parameters":[{"id":1058,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":1059,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"intrinsic","name":"unknown"}}]},{"id":1030,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":1031,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":1032,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}],"name":"Set"}}]},{"id":1033,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":1034,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","name":"Scope"},{"type":"literal","value":"*"}]}}}]},{"id":1035,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":1036,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":1037,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}},{"id":1038,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"}}]},{"id":1039,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1040,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1041,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}},{"id":1042,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"}}]},{"id":1043,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1044,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1045,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}},{"id":1046,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1018,"typeArguments":[{"type":"reference","name":"Return"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1019]},{"title":"Properties","kind":1024,"children":[1025,1026]},{"title":"Methods","kind":2048,"children":[1027,1056,1030,1033,1035,1039,1043]}],"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":6,"character":22}],"typeParameter":[{"id":1060,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1061,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1062,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedBy":[{"type":"reference","id":975,"name":"BailEvent"},{"type":"reference","id":1063,"name":"ConcurrentEvent"},{"type":"reference","id":1108,"name":"Event"},{"type":"reference","id":1192,"name":"WaterfallEvent"}],"permalink":"/api/event/class/BaseEvent","previousId":975,"nextId":1063},{"id":1063,"name":"ConcurrentEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":1064,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1065,"name":"new ConcurrentEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1066,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1067,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1068,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1063,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":1020,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":1019,"name":"BaseEvent.constructor"}},{"id":1073,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1025,"name":"BaseEvent.listeners"}},{"id":1074,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1026,"name":"BaseEvent.name"}},{"id":1075,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":1076,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":1077,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1063,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":1028,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":1027,"name":"BaseEvent.clearListeners"}},{"id":1069,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":12,"character":7}],"signatures":[{"id":1070,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Asynchronously execute listeners for with the defined arguments.\\nWill return a promise with an array of each listener result."},"parameters":[{"id":1071,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Args"}},{"id":1072,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}],"name":"Promise"},"overwrites":{"type":"reference","id":1057,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":1056,"name":"BaseEvent.emit"}},{"id":1078,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":1079,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":1080,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":1031,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":1030,"name":"BaseEvent.getListeners"}},{"id":1081,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":1082,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":1034,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":1033,"name":"BaseEvent.getScopes"}},{"id":1083,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":1084,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":1085,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":1086,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1036,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":1035,"name":"BaseEvent.listen"}},{"id":1087,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1088,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1089,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":1090,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1040,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":1039,"name":"BaseEvent.once"}},{"id":1091,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1092,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1093,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":1094,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1063,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":1044,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":1043,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[1064]},{"title":"Properties","kind":1024,"children":[1073,1074]},{"title":"Methods","kind":2048,"children":[1075,1069,1078,1081,1083,1087,1091]}],"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":4,"character":13}],"typeParameter":[{"id":1104,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1105,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":1018,"typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/ConcurrentEvent","previousId":1018,"nextId":1108},{"id":1108,"name":"Event","kind":128,"kindString":"Class","flags":{},"children":[{"id":1109,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1110,"name":"new Event","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1111,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1112,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1113,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1108,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":1020,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":1019,"name":"BaseEvent.constructor"}},{"id":1118,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1025,"name":"BaseEvent.listeners"}},{"id":1119,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1026,"name":"BaseEvent.name"}},{"id":1120,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":1121,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":1122,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1108,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":1028,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":1027,"name":"BaseEvent.clearListeners"}},{"id":1114,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/Event.ts","line":11,"character":1}],"signatures":[{"id":1115,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments."},"parameters":[{"id":1116,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Args"}},{"id":1117,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":1057,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":1056,"name":"BaseEvent.emit"}},{"id":1123,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":1124,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":1125,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":1031,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":1030,"name":"BaseEvent.getListeners"}},{"id":1126,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":1127,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":1034,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":1033,"name":"BaseEvent.getScopes"}},{"id":1128,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":1129,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":1130,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":1131,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1036,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":1035,"name":"BaseEvent.listen"}},{"id":1132,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1133,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1134,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":1135,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1040,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":1039,"name":"BaseEvent.once"}},{"id":1136,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1137,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1138,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1157,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":1139,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1108,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":1044,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":1043,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[1109]},{"title":"Properties","kind":1024,"children":[1118,1119]},{"title":"Methods","kind":2048,"children":[1120,1114,1123,1126,1128,1132,1136]}],"sources":[{"fileName":"packages/event/src/Event.ts","line":3,"character":13}],"typeParameter":[{"id":1149,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1150,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":1018,"typeArguments":[{"type":"intrinsic","name":"void"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/Event","previousId":1063,"nextId":1192},{"id":1192,"name":"WaterfallEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":1193,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1194,"name":"new WaterfallEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1195,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1196,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1197,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1192,"typeArguments":[{"type":"reference","name":"Arg"},{"type":"reference","name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":1020,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":1019,"name":"BaseEvent.constructor"}},{"id":1202,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1203,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1204,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1205,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1025,"name":"BaseEvent.listeners"}},{"id":1206,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1026,"name":"BaseEvent.name"}},{"id":1207,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":1208,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":1209,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1192,"typeArguments":[{"type":"reference","name":"Arg"},{"type":"reference","name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":1028,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":1027,"name":"BaseEvent.clearListeners"}},{"id":1198,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":13,"character":1}],"signatures":[{"id":1199,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined argument value.\\nThe return value of each listener will be passed as an argument to the next listener."},"parameters":[{"id":1200,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}},{"id":1201,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","name":"Arg"},"overwrites":{"type":"reference","id":1057,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":1056,"name":"BaseEvent.emit"}},{"id":1210,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":1211,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":1212,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1213,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1214,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1215,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}],"name":"Set"},"inheritedFrom":{"type":"reference","id":1031,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":1030,"name":"BaseEvent.getListeners"}},{"id":1216,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":1217,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":1034,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":1033,"name":"BaseEvent.getScopes"}},{"id":1218,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":1219,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":1220,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1221,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1222,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1223,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}},{"id":1224,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1036,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":1035,"name":"BaseEvent.listen"}},{"id":1225,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1226,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1227,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1228,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1229,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1230,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}},{"id":1231,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1188,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1040,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":1039,"name":"BaseEvent.once"}},{"id":1232,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1233,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1234,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1235,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1236,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1237,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}},{"id":1238,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1192,"typeArguments":[{"type":"reference","name":"Arg"},{"type":"reference","name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":1044,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":1043,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[1193]},{"title":"Properties","kind":1024,"children":[1202,1206]},{"title":"Methods","kind":2048,"children":[1207,1198,1210,1216,1218,1225,1232]}],"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":4,"character":13}],"typeParameter":[{"id":1248,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1249,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":1018,"typeArguments":[{"type":"reference","name":"Arg"},{"type":"tuple","elements":[{"type":"reference","name":"Arg"}]},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/WaterfallEvent","previousId":1108,"nextId":1151},{"id":1151,"name":"EventErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/EventError.ts","line":9,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/event#EventErrorCode","previousId":4,"nextId":1157},{"id":1157,"name":"Listener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":1,"character":12}],"typeParameter":[{"id":1186,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1187,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"},{"type":"inferred","name":"A5"}]},"trueType":{"type":"reflection","declaration":{"id":1158,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":8,"character":3}],"signatures":[{"id":1159,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1160,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":1161,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":1162,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":1163,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}},{"id":1164,"name":"a5","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A5"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"}]},"trueType":{"type":"reflection","declaration":{"id":1165,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":10,"character":3}],"signatures":[{"id":1166,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1167,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":1168,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":1169,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":1170,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"}]},"trueType":{"type":"reflection","declaration":{"id":1171,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":12,"character":3}],"signatures":[{"id":1172,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1173,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":1174,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":1175,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"}]},"trueType":{"type":"reflection","declaration":{"id":1176,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":14,"character":3}],"signatures":[{"id":1177,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1178,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":1179,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"}]},"trueType":{"type":"reflection","declaration":{"id":1180,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":16,"character":3}],"signatures":[{"id":1181,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1182,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reflection","declaration":{"id":1183,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":18,"character":3}],"signatures":[{"id":1184,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1185,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/event#Listener","previousId":1151,"nextId":1188},{"id":1188,"name":"Unlistener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":12}],"type":{"type":"reflection","declaration":{"id":1189,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":25}],"signatures":[{"id":1190,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/event#Unlistener","previousId":1157,"nextId":1191},{"id":1191,"name":"WildstarScope","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":23,"character":12}],"type":{"type":"literal","value":"*"},"permalink":"/api/event#WildstarScope","previousId":1188,"nextId":1107},{"id":1107,"name":"EVENT_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/event/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/event#EVENT_NAME_PATTERN","previousId":3,"nextId":1152},{"id":1152,"name":"EventError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/event/src/EventError.ts","line":11,"character":13}],"type":{"type":"reflection","declaration":{"id":1153,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1154,"name":"new EventError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1155,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}},{"id":1156,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/event#EventError","previousId":1107,"nextId":1106},{"id":1106,"name":"WILDCARD_SCOPE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/event/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":"*"},"defaultValue":"\'*\'","permalink":"/api/event#WILDCARD_SCOPE","previousId":1152}],"groups":[{"title":"Classes","kind":128,"children":[975,1018,1063,1108,1192]},{"title":"Type aliases","kind":4194304,"children":[1151,1157,1188,1191]},{"title":"Variables","kind":32,"children":[1107,1152,1106]}],"sources":[{"fileName":"packages/event/src/index.ts","line":6,"character":0}],"permalink":"/api/event"},"urlSlug":"event"}],"packageName":"@boost/event","packageVersion":"2.3.3"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":78,"name":"@boost/log","kind":1,"kindString":"Module","flags":{},"children":[{"id":3103,"name":"formats","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":3104,"name":"console","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":18,"character":16}],"signatures":[{"id":3105,"name":"console","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item as if it\'s being logged to `console`.\\n_Only_ inclues the label and message."},"parameters":[{"id":3106,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3107,"name":"debug","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":32,"character":16}],"signatures":[{"id":3108,"name":"debug","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item into a human-readable message with all item fields included.\\nThis is the default format for most transports."},"parameters":[{"id":3109,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3110,"name":"json","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":46,"character":16}],"signatures":[{"id":3111,"name":"json","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the entire item into JSON."},"parameters":[{"id":3112,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3113,"name":"message","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":53,"character":16}],"signatures":[{"id":3114,"name":"message","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item using _only_ the message."},"parameters":[{"id":3115,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Functions","kind":64,"children":[3104,3107,3110,3113]}],"sources":[{"fileName":"packages/log/src/formats.ts","line":1,"character":0}],"permalink":"/api/log/namespace/formats","previousId":11,"nextId":3409},{"id":3174,"name":"ConsoleTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3175,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":7,"character":1}],"signatures":[{"id":3176,"name":"new ConsoleTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3177,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3420,"name":"TransportOptions"}],"name":"Partial"}}],"type":{"type":"reference","id":3174,"name":"ConsoleTransport"},"overwrites":{"type":"reference","id":3151,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3150,"name":"Transport.constructor"}},{"id":3182,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3154,"name":"Transport.levels"}},{"id":3190,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3420,"name":"TransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3166,"name":"Transport.options"}},{"id":3183,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":19,"character":1}],"signatures":[{"id":3184,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3185,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3186,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3420,"name":"TransportOptions"}],"name":"Blueprint"},"inheritedFrom":{"type":"reference","id":3156,"name":"Transport.blueprint"}}],"inheritedFrom":{"type":"reference","id":3155,"name":"Transport.blueprint"}},{"id":3191,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3192,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3193,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3420,"name":"TransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3194,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3195,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3196,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3420,"name":"TransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3420,"name":"TransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3420,"name":"TransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3168,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3167,"name":"Transport.configure"}},{"id":3187,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3188,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3189,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3160,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3159,"name":"Transport.format"}},{"id":3178,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":15,"character":1}],"signatures":[{"id":3179,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3180,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3181,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3163,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3162,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3175]},{"title":"Properties","kind":1024,"children":[3182,3190]},{"title":"Methods","kind":2048,"children":[3183,3191,3187,3178]}],"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":6,"character":13}],"extendedTypes":[{"type":"reference","id":3149,"typeArguments":[{"type":"reference","id":3420,"name":"TransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/ConsoleTransport","nextId":3204},{"id":3204,"name":"FileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3205,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":35,"character":1}],"signatures":[{"id":3206,"name":"new FileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3207,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3197,"name":"FileTransportOptions"},"default":{"type":"reference","id":3197,"name":"FileTransportOptions"}}],"parameters":[{"id":3208,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":3204,"typeArguments":[{"type":"reference","name":"Options"}],"name":"FileTransport"},"overwrites":{"type":"reference","id":3151,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3150,"name":"Transport.constructor"}},{"id":3244,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3154,"name":"Transport.levels"}},{"id":3248,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3166,"name":"Transport.options"}},{"id":3209,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":23,"character":10}],"type":{"type":"reference","name":"Path"}},{"id":3210,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":25,"character":1}],"type":{"type":"reference","name":"WritableStream"}},{"id":3215,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":43,"character":10}],"signatures":[{"id":3216,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3217,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3218,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3197,"name":"FileTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3156,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3155,"name":"Transport.blueprint"}},{"id":3219,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":57,"character":1}],"signatures":[{"id":3220,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3221,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3222,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3223,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3249,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3250,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3251,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3252,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3253,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3254,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3168,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3167,"name":"Transport.configure"}},{"id":3245,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3246,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3247,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3160,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3159,"name":"Transport.format"}},{"id":3224,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":73,"character":1}],"signatures":[{"id":3225,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","name":"WritableStream"}}]},{"id":3226,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":97,"character":1}],"signatures":[{"id":3227,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3228,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3163,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3162,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3205]},{"title":"Properties","kind":1024,"children":[3244,3248,3209,3210]},{"title":"Methods","kind":2048,"children":[3215,3219,3249,3245,3224,3226]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":20,"character":13}],"typeParameter":[{"id":3255,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3197,"name":"FileTransportOptions"},"default":{"type":"reference","id":3197,"name":"FileTransportOptions"}}],"extendedTypes":[{"type":"reference","id":3149,"typeArguments":[{"type":"reference","name":"Options"}],"name":"Transport"}],"extendedBy":[{"type":"reference","id":3264,"name":"RotatingFileTransport"}],"permalink":"/api/log/class/FileTransport","previousId":3174,"nextId":3122},{"id":3122,"name":"Logger","kind":128,"kindString":"Class","flags":{},"children":[{"id":3123,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":14,"character":1}],"signatures":[{"id":3124,"name":"new Logger","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3125,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3400,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3122,"name":"Logger"},"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}},{"id":3142,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3400,"name":"LoggerOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3127,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":28,"character":1}],"signatures":[{"id":3128,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3129,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3130,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3400,"name":"LoggerOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3143,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3144,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3145,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3400,"name":"LoggerOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3146,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3147,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3148,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3400,"name":"LoggerOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3400,"name":"LoggerOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3400,"name":"LoggerOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3131,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":42,"character":1}],"signatures":[{"id":3132,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3133,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":50,"character":1}],"signatures":[{"id":3134,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3135,"name":"isAllowed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":55,"character":1}],"signatures":[{"id":3136,"name":"isAllowed","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3137,"name":"level","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3346,"name":"LogLevel"}},{"id":3138,"name":"maxLevel","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":3346,"name":"LogLevel"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":3139,"name":"log","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":73,"character":1}],"signatures":[{"id":3140,"name":"log","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3141,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3358,"name":"LogOptions"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3123]},{"title":"Properties","kind":1024,"children":[3142]},{"title":"Methods","kind":2048,"children":[3127,3143,3131,3133,3135,3139]}],"sources":[{"fileName":"packages/log/src/Logger.ts","line":11,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":3400,"name":"LoggerOptions"}],"name":"Contract"}],"permalink":"/api/log/class/Logger","previousId":3204,"nextId":3264},{"id":3264,"name":"RotatingFileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3265,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3266,"name":"new RotatingFileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3267,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3256,"name":"RotatingFileTransportOptions"}}],"type":{"type":"reference","id":3264,"name":"RotatingFileTransport"},"inheritedFrom":{"type":"reference","id":3206,"name":"FileTransport.constructor"}}],"inheritedFrom":{"type":"reference","id":3205,"name":"FileTransport.constructor"}},{"id":3307,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3244,"name":"FileTransport.levels"}},{"id":3311,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"RotatingFileTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3248,"name":"FileTransport.options"}},{"id":3282,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":23,"character":10}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":3209,"name":"FileTransport.path"}},{"id":3283,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":25,"character":1}],"type":{"type":"reference","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3210,"name":"FileTransport.stream"}},{"id":3269,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":15,"character":10}],"signatures":[{"id":3270,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3271,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3272,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"RotatingFileTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3216,"name":"FileTransport.blueprint"}}],"overwrites":{"type":"reference","id":3215,"name":"FileTransport.blueprint"}},{"id":3288,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":57,"character":1}],"signatures":[{"id":3289,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3290,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3291,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3292,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3220,"name":"FileTransport.close"}}],"inheritedFrom":{"type":"reference","id":3219,"name":"FileTransport.close"}},{"id":3312,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3313,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3314,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"RotatingFileTransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3315,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3316,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3317,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"RotatingFileTransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"RotatingFileTransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"RotatingFileTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3250,"name":"FileTransport.configure"}}],"inheritedFrom":{"type":"reference","id":3249,"name":"FileTransport.configure"}},{"id":3308,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3309,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3310,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3246,"name":"FileTransport.format"}}],"inheritedFrom":{"type":"reference","id":3245,"name":"FileTransport.format"}},{"id":3273,"name":"formatTimestamp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":27,"character":1}],"signatures":[{"id":3274,"name":"formatTimestamp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a `Date` object into a format used within the log file name."},"parameters":[{"id":3275,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3293,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":73,"character":1}],"signatures":[{"id":3294,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3225,"name":"FileTransport.open"}}],"inheritedFrom":{"type":"reference","id":3224,"name":"FileTransport.open"}},{"id":3295,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":97,"character":1}],"signatures":[{"id":3296,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3297,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3227,"name":"FileTransport.write"}}],"inheritedFrom":{"type":"reference","id":3226,"name":"FileTransport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3265]},{"title":"Properties","kind":1024,"children":[3307,3311,3282,3283]},{"title":"Methods","kind":2048,"children":[3269,3288,3312,3308,3273,3293,3295]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":12,"character":13}],"extendedTypes":[{"type":"reference","id":3204,"typeArguments":[{"type":"reference","id":3256,"name":"RotatingFileTransportOptions"}],"name":"FileTransport"}],"permalink":"/api/log/class/RotatingFileTransport","previousId":3122,"nextId":3323},{"id":3323,"name":"StreamTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3324,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":13,"character":1}],"signatures":[{"id":3325,"name":"new StreamTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3326,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3318,"name":"StreamTransportOptions"}}],"type":{"type":"reference","id":3323,"name":"StreamTransport"},"overwrites":{"type":"reference","id":3151,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3150,"name":"Transport.constructor"}},{"id":3335,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3154,"name":"Transport.levels"}},{"id":3339,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3318,"name":"StreamTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3166,"name":"Transport.options"}},{"id":3328,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":19,"character":10}],"signatures":[{"id":3329,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3330,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3331,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3318,"name":"StreamTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3156,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3155,"name":"Transport.blueprint"}},{"id":3340,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3341,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3342,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3318,"name":"StreamTransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3343,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3344,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3345,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3318,"name":"StreamTransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3318,"name":"StreamTransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3318,"name":"StreamTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3168,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3167,"name":"Transport.configure"}},{"id":3336,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3337,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3338,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3160,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3159,"name":"Transport.format"}},{"id":3332,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":33,"character":1}],"signatures":[{"id":3333,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3334,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3163,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3162,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3324]},{"title":"Properties","kind":1024,"children":[3335,3339]},{"title":"Methods","kind":2048,"children":[3328,3340,3336,3332]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":10,"character":13}],"extendedTypes":[{"type":"reference","id":3149,"typeArguments":[{"type":"reference","id":3318,"name":"StreamTransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/StreamTransport","previousId":3264,"nextId":3149},{"id":3149,"name":"Transport","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":3150,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":13,"character":1}],"signatures":[{"id":3151,"name":"new Transport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3152,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3420,"name":"TransportOptions"}}],"parameters":[{"id":3153,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":3149,"typeArguments":[{"type":"reference","name":"Options"}],"name":"Transport"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":3154,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}},"defaultValue":"[]","implementationOf":{"type":"reference","id":3414,"name":"Transportable.levels"}},{"id":3166,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3155,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":19,"character":1}],"signatures":[{"id":3156,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3157,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3158,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3420,"name":"TransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3167,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3168,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3169,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3170,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3171,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3172,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3159,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3160,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3161,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","name":"Transportable.format"}}],"implementationOf":{"type":"reference","id":3415,"name":"Transportable.format"}},{"id":3162,"name":"write","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":47,"character":10}],"signatures":[{"id":3163,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3164,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3165,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}]},"implementationOf":{"type":"reference","id":3417,"name":"Transportable.write"}}],"implementationOf":{"type":"reference","id":3416,"name":"Transportable.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3150]},{"title":"Properties","kind":1024,"children":[3154,3166]},{"title":"Methods","kind":2048,"children":[3155,3167,3159,3162]}],"sources":[{"fileName":"packages/log/src/Transport.ts","line":7,"character":22}],"typeParameter":[{"id":3173,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3420,"name":"TransportOptions"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":3174,"name":"ConsoleTransport"},{"type":"reference","id":3204,"name":"FileTransport"},{"type":"reference","id":3323,"name":"StreamTransport"}],"implementedTypes":[{"type":"reference","id":3413,"name":"Transportable"}],"permalink":"/api/log/class/Transport","previousId":3323,"nextId":3119},{"id":3197,"name":"FileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3201,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3421,"name":"TransportOptions.eol"}},{"id":3202,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3409,"name":"Formatter"}]},"inheritedFrom":{"type":"reference","id":3422,"name":"TransportOptions.format"}},{"id":3198,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":10,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3203,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3423,"name":"TransportOptions.levels"}},{"id":3199,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3200,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":17,"character":1}],"type":{"type":"reference","name":"PortablePath"}}],"groups":[{"title":"Properties","kind":1024,"children":[3201,3202,3198,3203,3199,3200]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":8,"character":17}],"extendedTypes":[{"type":"reference","id":3420,"name":"TransportOptions"}],"extendedBy":[{"type":"reference","id":3256,"name":"RotatingFileTransportOptions"}],"permalink":"/api/log/interface/FileTransportOptions","nextId":3349},{"id":3349,"name":"LogItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3350,"name":"host","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3351,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a localized or customized label."},"sources":[{"fileName":"packages/log/src/types.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3352,"name":"level","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a string."},"sources":[{"fileName":"packages/log/src/types.ts","line":13,"character":1}],"type":{"type":"reference","id":3346,"name":"LogLevel"}},{"id":3353,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log message with interpolated arguments applied."},"sources":[{"fileName":"packages/log/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3354,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional data to include with a log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":3348,"name":"LogMetadata"}},{"id":3355,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of the logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3356,"name":"pid","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current process ID."},"sources":[{"fileName":"packages/log/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3357,"name":"time","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Timestamp of the log, native to the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":23,"character":1}],"type":{"type":"reference","name":"Date"}}],"groups":[{"title":"Properties","kind":1024,"children":[3350,3351,3352,3353,3354,3355,3356,3357]}],"sources":[{"fileName":"packages/log/src/types.ts","line":7,"character":17}],"permalink":"/api/log/interface/LogItem","previousId":3197,"nextId":3358},{"id":3358,"name":"LogOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3359,"name":"args","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Values to interpolate into the message string."},"sources":[{"fileName":"packages/log/src/types.ts","line":28,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":3360,"name":"level","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Level to log as."},"sources":[{"fileName":"packages/log/src/types.ts","line":30,"character":1}],"type":{"type":"reference","id":3346,"name":"LogLevel"}},{"id":3361,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Message to log to the transports."},"sources":[{"fileName":"packages/log/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3362,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include in the message item/string."},"sources":[{"fileName":"packages/log/src/types.ts","line":34,"character":1}],"type":{"type":"reference","id":3348,"name":"LogMetadata"}}],"groups":[{"title":"Properties","kind":1024,"children":[3359,3360,3361,3362]}],"sources":[{"fileName":"packages/log/src/types.ts","line":26,"character":17}],"permalink":"/api/log/interface/LogOptions","previousId":3349,"nextId":3371},{"id":3371,"name":"Loggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3372,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"}},{"id":3377,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"}},{"id":3379,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"}},{"id":3378,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"}},{"id":3380,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"}},{"id":3381,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"}},{"id":3373,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3374,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3375,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3376,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3372,3377,3379,3378,3380,3381]},{"title":"Methods","kind":2048,"children":[3373,3375]}],"sources":[{"fileName":"packages/log/src/types.ts","line":47,"character":17}],"extendedBy":[{"type":"reference","id":3382,"name":"LoggerFunction"}],"permalink":"/api/log/interface/Loggable","previousId":3358,"nextId":3363},{"id":3363,"name":"LoggableWriter","kind":256,"kindString":"Interface","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":37,"character":17}],"signatures":[{"id":3364,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3365,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3348,"name":"LogMetadata"}},{"id":3366,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3367,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3368,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3369,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3370,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedBy":[{"type":"reference","id":3382,"name":"LoggerFunction"}],"permalink":"/api/log/interface/LoggableWriter","previousId":3371,"nextId":3382},{"id":3382,"name":"LoggerFunction","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3383,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3372,"name":"Loggable.debug"}},{"id":3388,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3377,"name":"Loggable.error"}},{"id":3390,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3379,"name":"Loggable.info"}},{"id":3389,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3378,"name":"Loggable.log"}},{"id":3391,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3380,"name":"Loggable.trace"}},{"id":3392,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3363,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3381,"name":"Loggable.warn"}},{"id":3384,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3385,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3374,"name":"Loggable.disable"}}],"inheritedFrom":{"type":"reference","id":3373,"name":"Loggable.disable"}},{"id":3386,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3387,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3376,"name":"Loggable.enable"}}],"inheritedFrom":{"type":"reference","id":3375,"name":"Loggable.enable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3383,3388,3390,3389,3391,3392]},{"title":"Methods","kind":2048,"children":[3384,3386]}],"sources":[{"fileName":"packages/log/src/types.ts","line":66,"character":17}],"signatures":[{"id":3393,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3394,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3348,"name":"LogMetadata"}},{"id":3395,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3396,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3397,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3398,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3399,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","id":3371,"name":"Loggable"},{"type":"reference","id":3363,"name":"LoggableWriter"}],"permalink":"/api/log/interface/LoggerFunction","previousId":3363,"nextId":3400},{"id":3400,"name":"LoggerOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3401,"name":"labels","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom labels to use for each log type."},"sources":[{"fileName":"packages/log/src/types.ts","line":70,"character":1}],"type":{"type":"reference","id":3347,"name":"LogLevelLabels"}},{"id":3402,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include within each log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":72,"character":1}],"type":{"type":"reference","id":3348,"name":"LogMetadata"}},{"id":3403,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name for this logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":74,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3404,"name":"transports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of transports to write messages to."},"sources":[{"fileName":"packages/log/src/types.ts","line":76,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3413,"name":"Transportable"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3401,3402,3403,3404]}],"sources":[{"fileName":"packages/log/src/types.ts","line":68,"character":17}],"permalink":"/api/log/interface/LoggerOptions","previousId":3382,"nextId":3256},{"id":3256,"name":"RotatingFileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3261,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3201,"name":"FileTransportOptions.eol"}},{"id":3262,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3409,"name":"Formatter"}]},"inheritedFrom":{"type":"reference","id":3202,"name":"FileTransportOptions.format"}},{"id":3258,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":10,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":3198,"name":"FileTransportOptions.gzip"}},{"id":3263,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3203,"name":"FileTransportOptions.levels"}},{"id":3259,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":3199,"name":"FileTransportOptions.maxSize"}},{"id":3260,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":17,"character":1}],"type":{"type":"reference","name":"PortablePath"},"inheritedFrom":{"type":"reference","id":3200,"name":"FileTransportOptions.path"}},{"id":3257,"name":"rotation","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Period in which to rotate files. Will append a timestamp to the rotated log file."},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":9,"character":1}],"type":{"type":"reference","id":3424,"name":"Rotation"}}],"groups":[{"title":"Properties","kind":1024,"children":[3261,3262,3258,3263,3259,3260,3257]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":3197,"name":"FileTransportOptions"}],"permalink":"/api/log/interface/RotatingFileTransportOptions","previousId":3400,"nextId":3318},{"id":3318,"name":"StreamTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3320,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3421,"name":"TransportOptions.eol"}},{"id":3321,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3409,"name":"Formatter"}]},"inheritedFrom":{"type":"reference","id":3422,"name":"TransportOptions.format"}},{"id":3322,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3423,"name":"TransportOptions.levels"}},{"id":3319,"name":"stream","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The stream to pipe messages to."},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":7,"character":1}],"type":{"type":"reference","id":3405,"name":"Writable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3320,3321,3322,3319]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":5,"character":17}],"extendedTypes":[{"type":"reference","id":3420,"name":"TransportOptions"}],"permalink":"/api/log/interface/StreamTransportOptions","previousId":3256,"nextId":3420},{"id":3420,"name":"TransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3421,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3422,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3409,"name":"Formatter"}]}},{"id":3423,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3421,3422,3423]}],"sources":[{"fileName":"packages/log/src/types.ts","line":93,"character":17}],"extendedBy":[{"type":"reference","id":3197,"name":"FileTransportOptions"},{"type":"reference","id":3318,"name":"StreamTransportOptions"}],"permalink":"/api/log/interface/TransportOptions","previousId":3318,"nextId":3413},{"id":3413,"name":"Transportable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3415,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":88,"character":1}],"type":{"type":"reference","id":3409,"name":"Formatter"}},{"id":3414,"name":"levels","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":87,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}}},{"id":3416,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":90,"character":1}],"signatures":[{"id":3417,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message and log item to the transport."},"parameters":[{"id":3418,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3419,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}]}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3415,3414]},{"title":"Methods","kind":2048,"children":[3416]}],"sources":[{"fileName":"packages/log/src/types.ts","line":86,"character":17}],"implementedBy":[{"type":"reference","id":3149,"name":"Transport"}],"permalink":"/api/log/interface/Transportable","previousId":3420,"nextId":3405},{"id":3405,"name":"Writable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3406,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":81,"character":1}],"signatures":[{"id":3407,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3408,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3406]}],"sources":[{"fileName":"packages/log/src/types.ts","line":79,"character":17}],"permalink":"/api/log/interface/Writable","previousId":3413,"nextId":3103},{"id":3409,"name":"Formatter","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":12}],"type":{"type":"reflection","declaration":{"id":3410,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":24}],"signatures":[{"id":3411,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3412,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3349,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/log#Formatter","nextId":3346},{"id":3346,"name":"LogLevel","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":1,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"debug"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"log"},{"type":"literal","value":"trace"},{"type":"literal","value":"warn"}]},"permalink":"/api/log#LogLevel","previousId":3409,"nextId":3347},{"id":3347,"name":"LogLevelLabels","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":3,"character":12}],"type":{"type":"mapped","parameter":"L","parameterType":{"type":"reference","id":3346,"name":"LogLevel"},"templateType":{"type":"intrinsic","name":"string"},"optionalModifier":"+"},"permalink":"/api/log#LogLevelLabels","previousId":3346,"nextId":3348},{"id":3348,"name":"LogMetadata","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":5,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/log#LogMetadata","previousId":3347,"nextId":3424},{"id":3424,"name":"Rotation","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":102,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"daily"},{"type":"literal","value":"hourly"},{"type":"literal","value":"monthly"},{"type":"literal","value":"weekly"}]},"permalink":"/api/log#Rotation","previousId":3348,"nextId":3117},{"id":3117,"name":"DEFAULT_LABELS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/log/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","id":3347,"name":"LogLevelLabels"},"defaultValue":"...","permalink":"/api/log#DEFAULT_LABELS","previousId":4,"nextId":3116},{"id":3116,"name":"LOG_LEVELS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/log/src/constants.ts","line":6,"character":13}],"type":{"type":"array","elementType":{"type":"reference","id":3346,"name":"LogLevel"}},"defaultValue":"...","permalink":"/api/log#LOG_LEVELS","previousId":3117,"nextId":3118},{"id":3118,"name":"MAX_LOG_SIZE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/log/src/constants.ts","line":17,"character":13}],"type":{"type":"literal","value":10485760},"defaultValue":"10_485_760","permalink":"/api/log#MAX_LOG_SIZE","previousId":3116},{"id":3119,"name":"createLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/createLogger.ts","line":29,"character":16}],"signatures":[{"id":3120,"name":"createLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a logger with any configured transports."},"parameters":[{"id":3121,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3400,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3382,"name":"LoggerFunction"}}],"permalink":"/api/log/function/createLogger","previousId":5,"nextId":3197}],"groups":[{"title":"Classes","kind":128,"children":[3174,3204,3122,3264,3323,3149]},{"title":"Functions","kind":64,"children":[3119]},{"title":"Interfaces","kind":256,"children":[3197,3349,3358,3371,3363,3382,3400,3256,3318,3420,3413,3405]},{"title":"Namespaces","kind":2,"children":[3103]},{"title":"Type aliases","kind":4194304,"children":[3409,3346,3347,3348,3424]},{"title":"Variables","kind":32,"children":[3117,3116,3118]}],"sources":[{"fileName":"packages/log/src/index.ts","line":6,"character":0}],"permalink":"/api/log"},"urlSlug":"log"},{"index":false,"label":"Test utilities","reflection":{"id":79,"name":"@boost/log/test","kind":1,"kindString":"Module","flags":{},"children":[{"id":80,"name":"mockLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/test.ts","line":20,"character":16}],"signatures":[{"id":81,"name":"mockLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createLogger`.","text":"```ts\\nimport { mockLogger } from \'@boost/log/test\';\\n\\nit(\'calls the logger\', () => {\\n\\tconst log = mockLogger();\\n\\n\\tlog(\'Something has happened\');\\n\\n\\texpect(log).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3382,"name":"LoggerFunction"}}],"permalink":"/api/log-test/function/mockLogger"}],"groups":[{"title":"Functions","kind":64,"children":[80]}],"sources":[{"fileName":"packages/log/src/test.ts","line":3,"character":0}],"permalink":"/api/log-test"},"urlSlug":"log-test"}],"packageName":"@boost/log","packageVersion":"2.2.7"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":6,"name":"@boost/pipeline","kind":1,"kindString":"Module","flags":{},"children":[{"id":1250,"name":"AggregatedPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1252,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1253,"name":"new AggregatedPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1254,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1255,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1256,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1257,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1258,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1259,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1260,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1250,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1402,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1401,"name":"ParallelPipeline.constructor"}},{"id":1280,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","id":1429,"name":"ParallelPipeline.context"}},{"id":1281,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1430,"name":"ParallelPipeline.debug"}},{"id":1278,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1427,"name":"ParallelPipeline.depth"}},{"id":1279,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1428,"name":"ParallelPipeline.index"}},{"id":1283,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1432,"name":"ParallelPipeline.onAfterRun"}},{"id":1284,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1433,"name":"ParallelPipeline.onBeforeRun"}},{"id":1285,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1286,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1434,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":1298,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1299,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1447,"name":"ParallelPipeline.options"}},{"id":1282,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","id":1431,"name":"ParallelPipeline.value"}},{"id":1293,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1294,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1442,"name":"ParallelPipeline.id"}},{"id":1267,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":22,"character":1}],"signatures":[{"id":1268,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1269,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1270,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1765,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1271,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1250,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1415,"name":"ParallelPipeline.add"}},{"id":1272,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1273,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1274,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1250,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1419,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":1414,"name":"ParallelPipeline.add"}},{"id":1263,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":15,"character":1}],"signatures":[{"id":1264,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1265,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1266,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1411,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":1410,"name":"ParallelPipeline.blueprint"}},{"id":1300,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1301,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1302,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1303,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1304,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1305,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1306,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1307,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1308,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1309,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1449,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1448,"name":"ParallelPipeline.configure"}},{"id":1290,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":1}],"signatures":[{"id":1291,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1292,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1440,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1439,"name":"ParallelPipeline.getWorkUnits"}},{"id":1295,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1296,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1297,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1387,"name":"Monitor"}}],"type":{"type":"reference","id":1250,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1445,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1444,"name":"ParallelPipeline.monitor"}},{"id":1261,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":15,"character":7}],"signatures":[{"id":1262,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1774,"typeArguments":[{"type":"reference","name":"Output"}],"name":"AggregatedResult"}],"name":"Promise"},"overwrites":{"type":"reference","id":1426,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":1425,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1252]},{"title":"Properties","kind":1024,"children":[1280,1281,1278,1279,1283,1284,1285,1298,1282],"categories":[{"title":"CATEGORY","children":[1280,1281,1278,1279,1298,1282]},{"title":"Events","children":[1283,1284,1285]}]},{"title":"Accessors","kind":262144,"children":[1293]},{"title":"Methods","kind":2048,"children":[1267,1263,1300,1290,1295,1261]}],"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":6,"character":13}],"typeParameter":[{"id":1310,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1311,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1312,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","id":1400,"typeArguments":[{"type":"reflection","declaration":{"id":1251,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":10,"character":27}]}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/AggregatedPipeline","nextId":1313},{"id":1313,"name":"ConcurrentPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1315,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1316,"name":"new ConcurrentPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1317,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1318,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1319,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1320,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1321,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1322,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1323,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1313,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1402,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1401,"name":"ParallelPipeline.constructor"}},{"id":1343,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","id":1429,"name":"ParallelPipeline.context"}},{"id":1344,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1430,"name":"ParallelPipeline.debug"}},{"id":1341,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1427,"name":"ParallelPipeline.depth"}},{"id":1342,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1428,"name":"ParallelPipeline.index"}},{"id":1346,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1432,"name":"ParallelPipeline.onAfterRun"}},{"id":1347,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1433,"name":"ParallelPipeline.onBeforeRun"}},{"id":1348,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1349,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1434,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":1361,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1362,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1447,"name":"ParallelPipeline.options"}},{"id":1345,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","id":1431,"name":"ParallelPipeline.value"}},{"id":1356,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1357,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1442,"name":"ParallelPipeline.id"}},{"id":1330,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":22,"character":1}],"signatures":[{"id":1331,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1332,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1333,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1765,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1334,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1313,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1415,"name":"ParallelPipeline.add"}},{"id":1335,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1336,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1337,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1313,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1419,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":1414,"name":"ParallelPipeline.add"}},{"id":1326,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":15,"character":1}],"signatures":[{"id":1327,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1328,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1329,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1411,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":1410,"name":"ParallelPipeline.blueprint"}},{"id":1363,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1364,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1365,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1366,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1367,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1368,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1369,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1370,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1371,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1372,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1449,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1448,"name":"ParallelPipeline.configure"}},{"id":1353,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":1}],"signatures":[{"id":1354,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1355,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1440,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1439,"name":"ParallelPipeline.getWorkUnits"}},{"id":1358,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1359,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1360,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1387,"name":"Monitor"}}],"type":{"type":"reference","id":1313,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1445,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1444,"name":"ParallelPipeline.monitor"}},{"id":1324,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":14,"character":7}],"signatures":[{"id":1325,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nIf an error occurs, the pipeline will abort early, otherwise return a list of all results."},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"Output"}}],"name":"Promise"},"overwrites":{"type":"reference","id":1426,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":1425,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1315]},{"title":"Properties","kind":1024,"children":[1343,1344,1341,1342,1346,1347,1348,1361,1345],"categories":[{"title":"CATEGORY","children":[1343,1344,1341,1342,1361,1345]},{"title":"Events","children":[1346,1347,1348]}]},{"title":"Accessors","kind":262144,"children":[1356]},{"title":"Methods","kind":2048,"children":[1330,1326,1363,1353,1358,1324]}],"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":5,"character":13}],"typeParameter":[{"id":1373,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1374,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1375,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","id":1400,"typeArguments":[{"type":"reflection","declaration":{"id":1314,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":9,"character":27}]}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/ConcurrentPipeline","previousId":1250,"nextId":1381},{"id":1381,"name":"Context","kind":128,"kindString":"Class","flags":{},"children":[{"id":1382,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1383,"name":"new Context","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}}]},{"id":1384,"name":"clone","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":15,"character":1}],"signatures":[{"id":1385,"name":"clone","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a new instance of the current context and shallow clone all properties."},"parameters":[{"id":1386,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":1381,"name":"Context"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1382]},{"title":"Methods","kind":2048,"children":[1384]}],"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":11,"character":13}],"permalink":"/api/pipeline/class/Context","previousId":1313,"nextId":1387},{"id":1387,"name":"Monitor","kind":128,"kindString":"Class","flags":{},"children":[{"id":1388,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1389,"name":"new Monitor","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":1387,"name":"Monitor"}}]},{"id":1390,"name":"onPipelineAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a pipeline class has ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1790,"name":"AnyPipeline"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1391,"name":"onPipelineBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline class is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1790,"name":"AnyPipeline"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1392,"name":"onPipelineRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline\'s work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":24,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1790,"name":"AnyPipeline"},{"type":"reference","id":1792,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1393,"name":"onWorkUnitFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has failed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":30,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1792,"name":"AnyWorkUnit"},{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1394,"name":"onWorkUnitPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has passed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1792,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1395,"name":"onWorkUnitRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1792,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":1396,"name":"onWorkUnitSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is skipped."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1792,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1397,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":54,"character":1}],"signatures":[{"id":1398,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor events for the provided pipeline, its work units, and all other\\npipelines and work units down the hierarchical tree."},"parameters":[{"id":1399,"name":"pipeline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1790,"name":"AnyPipeline"}}],"type":{"type":"reference","id":1387,"name":"Monitor"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1388]},{"title":"Properties","kind":1024,"children":[1390,1391,1392,1393,1394,1395,1396],"categories":[{"title":"Events","children":[1390,1391,1392,1393,1394,1395,1396]}]},{"title":"Methods","kind":2048,"children":[1397]}],"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":7,"character":13}],"permalink":"/api/pipeline/class/Monitor","previousId":1381,"nextId":1400},{"id":1400,"name":"ParallelPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1401,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1402,"name":"new ParallelPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1403,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1404,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1405,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1406,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1407,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1408,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1409,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1400,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":1429,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":1430,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":1427,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":1428,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":1432,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":1433,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":1434,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1435,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1447,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":1431,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1442,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1443,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}]},{"id":1414,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":22,"character":1}],"signatures":[{"id":1415,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1416,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1417,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1765,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1418,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1400,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}},{"id":1419,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1420,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1421,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1400,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}}]},{"id":1410,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":15,"character":1}],"signatures":[{"id":1411,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1412,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1413,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1448,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1449,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1450,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1451,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1452,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1453,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1439,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":1}],"signatures":[{"id":1440,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1441,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1444,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1445,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1446,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1387,"name":"Monitor"}}],"type":{"type":"reference","id":1400,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":1425,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":60,"character":10}],"signatures":[{"id":1426,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work unit\'s asynchronously."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1401]},{"title":"Properties","kind":1024,"children":[1429,1430,1427,1428,1432,1433,1434,1447,1431],"categories":[{"title":"CATEGORY","children":[1429,1430,1427,1428,1447,1431]},{"title":"Events","children":[1432,1433,1434]}]},{"title":"Accessors","kind":262144,"children":[1442]},{"title":"Methods","kind":2048,"children":[1414,1410,1448,1439,1444,1425]}],"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":8,"character":22}],"typeParameter":[{"id":1454,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1455,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1456,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1457,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":1250,"name":"AggregatedPipeline"},{"type":"reference","id":1313,"name":"ConcurrentPipeline"},{"type":"reference","id":1468,"name":"PooledPipeline"}],"permalink":"/api/pipeline/class/ParallelPipeline","previousId":1387,"nextId":1468},{"id":1468,"name":"PooledPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1469,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1470,"name":"new PooledPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1471,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1472,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1473,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1474,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1475,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1476,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1464,"name":"PooledOptions"}}],"type":{"type":"reference","id":1468,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1402,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1401,"name":"ParallelPipeline.constructor"}},{"id":1507,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","id":1429,"name":"ParallelPipeline.context"}},{"id":1508,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1430,"name":"ParallelPipeline.debug"}},{"id":1505,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1427,"name":"ParallelPipeline.depth"}},{"id":1506,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1428,"name":"ParallelPipeline.index"}},{"id":1510,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1432,"name":"ParallelPipeline.onAfterRun"}},{"id":1511,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1433,"name":"ParallelPipeline.onBeforeRun"}},{"id":1512,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1513,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1434,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":1525,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1464,"name":"PooledOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1447,"name":"ParallelPipeline.options"}},{"id":1509,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","id":1431,"name":"ParallelPipeline.value"}},{"id":1520,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1521,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1442,"name":"ParallelPipeline.id"}},{"id":1494,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":22,"character":1}],"signatures":[{"id":1495,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1496,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1497,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1765,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1498,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1468,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1415,"name":"ParallelPipeline.add"}},{"id":1499,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1500,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1501,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1468,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1419,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":1414,"name":"ParallelPipeline.add"}},{"id":1484,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":34,"character":10}],"signatures":[{"id":1485,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1486,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1487,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1464,"name":"PooledOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":1411,"name":"ParallelPipeline.blueprint"}}],"overwrites":{"type":"reference","id":1410,"name":"ParallelPipeline.blueprint"}},{"id":1526,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1527,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1528,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1464,"name":"PooledOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1529,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1530,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1531,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1464,"name":"PooledOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1464,"name":"PooledOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1464,"name":"PooledOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1449,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1448,"name":"ParallelPipeline.configure"}},{"id":1517,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":1}],"signatures":[{"id":1518,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1519,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1440,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1439,"name":"ParallelPipeline.getWorkUnits"}},{"id":1522,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1523,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1524,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1387,"name":"Monitor"}}],"type":{"type":"reference","id":1468,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1445,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1444,"name":"ParallelPipeline.monitor"}},{"id":1488,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":49,"character":7}],"signatures":[{"id":1489,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel, in a pool with a max concurrency,\\nwith a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1774,"typeArguments":[{"type":"reference","name":"Output"}],"name":"AggregatedResult"}],"name":"Promise"},"overwrites":{"type":"reference","id":1426,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":1425,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1469]},{"title":"Properties","kind":1024,"children":[1507,1508,1505,1506,1510,1511,1512,1525,1509],"categories":[{"title":"CATEGORY","children":[1507,1508,1505,1506,1525,1509]},{"title":"Events","children":[1510,1511,1512]}]},{"title":"Accessors","kind":262144,"children":[1520]},{"title":"Methods","kind":2048,"children":[1494,1484,1526,1517,1522,1488]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":23,"character":13}],"typeParameter":[{"id":1532,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1533,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1534,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","id":1400,"typeArguments":[{"type":"reference","id":1464,"name":"PooledOptions"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/PooledPipeline","previousId":1400,"nextId":1540},{"id":1540,"name":"Routine","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1541,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":47,"character":1}],"signatures":[{"id":1542,"name":"new Routine","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1543,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1544,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1546,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1545,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1547,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1548,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1549,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1540,"typeArguments":[{"type":"reference","name":"Output"},{"type":"reference","name":"Input"},{"type":"reference","name":"Options"}],"name":"Routine"},"overwrites":{"type":"reference","id":1860,"name":"WorkUnit.constructor"}}],"overwrites":{"type":"reference","id":1859,"name":"WorkUnit.constructor"}},{"id":1550,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":29,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1599,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1867,"name":"WorkUnit.depth"}},{"id":1600,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1868,"name":"WorkUnit.index"}},{"id":1551,"name":"key","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":31,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1552,"name":"onCommand","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after `execa` was executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":37,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1553,"name":"onCommandData","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called while a command is being executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":43,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1605,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":34,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1873,"name":"WorkUnit.onFail"}},{"id":1606,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Output"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1874,"name":"WorkUnit.onPass"}},{"id":1607,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1875,"name":"WorkUnit.onRun"}},{"id":1608,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1876,"name":"WorkUnit.onSkip"}},{"id":1631,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1901,"name":"WorkUnit.options"}},{"id":1601,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","name":"Output"},"inheritedFrom":{"type":"reference","id":1869,"name":"WorkUnit.output"}},{"id":1602,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1870,"name":"WorkUnit.startTime"}},{"id":1603,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1871,"name":"WorkUnit.statusText"}},{"id":1604,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1872,"name":"WorkUnit.stopTime"}},{"id":1609,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1877,"name":"WorkUnit.title"}},{"id":1614,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":96,"character":5}],"getSignature":[{"id":1615,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1884,"name":"WorkUnit.id"}},{"id":1638,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1639,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1640,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1641,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":1642,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1909,"name":"WorkUnit.blueprint"}}],"inheritedFrom":{"type":"reference","id":1908,"name":"WorkUnit.blueprint"}},{"id":1632,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1633,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1634,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1635,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1636,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1637,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1903,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1902,"name":"WorkUnit.configure"}},{"id":1560,"name":"createAggregatedPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":103,"character":1}],"signatures":[{"id":1561,"name":"createAggregatedPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `AggregatedPipeline`. This pipeline will execute all work units\\nin parallel without interruption. Returns an object with a list of errors and results\\nonce all resolve."},"typeParameter":[{"id":1562,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"C"}],"name":"Context"}},{"id":1563,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1564,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"I"}}],"parameters":[{"id":1565,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"C"}},{"id":1566,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"I"}}],"type":{"type":"reference","id":1250,"typeArguments":[{"type":"reference","name":"C"},{"type":"reference","name":"I"},{"type":"reference","name":"O"}],"name":"AggregatedPipeline"}}]},{"id":1567,"name":"createConcurrentPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":111,"character":1}],"signatures":[{"id":1568,"name":"createConcurrentPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `ConcurrentPipeline`. This pipeline will execute all work units\\nin parallel. Returns a list of values once all resolve."},"typeParameter":[{"id":1569,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"C"}],"name":"Context"}},{"id":1570,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1571,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"I"}}],"parameters":[{"id":1572,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"C"}},{"id":1573,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"I"}}],"type":{"type":"reference","id":1313,"typeArguments":[{"type":"reference","name":"C"},{"type":"reference","name":"I"},{"type":"reference","name":"O"}],"name":"ConcurrentPipeline"}}]},{"id":1574,"name":"createPooledPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":120,"character":1}],"signatures":[{"id":1575,"name":"createPooledPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `PooledPipeline`. This pipeline will execute a distinct set of work units\\nin parallel without interruption, based on a max concurrency, until all work units have ran.\\nReturns a list of errors and results once all resolve."},"typeParameter":[{"id":1576,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"C"}],"name":"Context"}},{"id":1577,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1578,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"I"}}],"parameters":[{"id":1579,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"C"}},{"id":1580,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"I"}},{"id":1581,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1464,"name":"PooledOptions"}}],"type":{"type":"reference","id":1468,"typeArguments":[{"type":"reference","name":"C"},{"type":"reference","name":"I"},{"type":"reference","name":"O"}],"name":"PooledPipeline"}}]},{"id":1582,"name":"createWaterfallPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":133,"character":1}],"signatures":[{"id":1583,"name":"createWaterfallPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `WaterfallPipeline`. This pipeline will execute each work unit one by one,\\nwith the return value of the previous being passed to the next. Returns the final value once\\nall resolve."},"typeParameter":[{"id":1584,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"C"}],"name":"Context"}},{"id":1585,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1586,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"C"}},{"id":1587,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"I"}}],"type":{"type":"reference","id":1794,"typeArguments":[{"type":"reference","name":"C"},{"type":"reference","name":"I"}],"name":"WaterfallPipeline"}}]},{"id":1595,"name":"execute","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":163,"character":10}],"signatures":[{"id":1596,"name":"execute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the current routine and return a new value."},"parameters":[{"id":1597,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1598,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"}}]},{"id":1555,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":64,"character":7}],"signatures":[{"id":1556,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a command with the given arguments and pass the results through a promise."},"parameters":[{"id":1557,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1558,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":1559,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Options"},{"type":"reference","id":1535,"name":"ExecuteCommandOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaReturnValue"}],"name":"Promise"}}]},{"id":1610,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":82,"character":1}],"signatures":[{"id":1611,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1881,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1880,"name":"WorkUnit.hasFailed"}},{"id":1612,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":89,"character":1}],"signatures":[{"id":1613,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1883,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1882,"name":"WorkUnit.hasPassed"}},{"id":1616,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":103,"character":1}],"signatures":[{"id":1617,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1887,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1886,"name":"WorkUnit.isComplete"}},{"id":1618,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":110,"character":1}],"signatures":[{"id":1619,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1889,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1888,"name":"WorkUnit.isPending"}},{"id":1620,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":117,"character":1}],"signatures":[{"id":1621,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1891,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1890,"name":"WorkUnit.isRunning"}},{"id":1622,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":124,"character":1}],"signatures":[{"id":1623,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1893,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1892,"name":"WorkUnit.isSkipped"}},{"id":1624,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":131,"character":7}],"signatures":[{"id":1625,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1626,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1627,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"},"inheritedFrom":{"type":"reference","id":1895,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1894,"name":"WorkUnit.run"}},{"id":1588,"name":"setMonitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":140,"character":1}],"signatures":[{"id":1589,"name":"setMonitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the monitor to pass to nested pipelines."},"parameters":[{"id":1590,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1387,"name":"Monitor"}}],"type":{"type":"reference","id":1540,"typeArguments":[{"type":"reference","name":"Output"},{"type":"reference","name":"Input"},{"type":"reference","name":"Options"}],"name":"Routine"}}]},{"id":1628,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":172,"character":1}],"signatures":[{"id":1629,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1630,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1540,"typeArguments":[{"type":"reference","name":"Output"},{"type":"reference","name":"Input"},{"type":"reference","name":"Options"}],"name":"Routine"},"inheritedFrom":{"type":"reference","id":1899,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1898,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1541]},{"title":"Properties","kind":1024,"children":[1550,1599,1600,1551,1552,1553,1605,1606,1607,1608,1631,1601,1602,1603,1604,1609],"categories":[{"title":"CATEGORY","children":[1550,1599,1600,1551,1631,1601,1602,1603,1604,1609]},{"title":"Events","children":[1552,1553,1605,1606,1607,1608]}]},{"title":"Accessors","kind":262144,"children":[1614]},{"title":"Methods","kind":2048,"children":[1638,1632,1560,1567,1574,1582,1595,1555,1610,1612,1616,1618,1620,1622,1624,1588,1628]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":24,"character":22}],"typeParameter":[{"id":1643,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1644,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1646,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1645,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":27,"character":26}]}}}],"extendedTypes":[{"type":"reference","id":1858,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Routine","previousId":1468,"nextId":1647},{"id":1647,"name":"SerialPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1648,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1649,"name":"new SerialPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1650,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1651,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1652,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1653,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1654,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1655,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1656,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1647,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":1679,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":1680,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":1677,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":1678,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":1682,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":1683,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":1684,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1685,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1694,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":1657,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1647,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"..."},{"id":1681,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1689,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1690,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}]},{"id":1658,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1659,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1660,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1661,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1695,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1696,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1697,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1698,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1699,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1700,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1672,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1673,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1674,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1691,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1692,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1693,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1387,"name":"Monitor"}}],"type":{"type":"reference","id":1647,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":1662,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1663,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1664,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1665,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1666,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1765,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"O"}],"name":"Action"}},{"id":1667,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1647,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"O"},{"type":"reference","name":"O"}],"name":"SerialPipeline"}},{"id":1668,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1669,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1670,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1671,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1647,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"O"},{"type":"reference","name":"O"}],"name":"SerialPipeline"}}]},{"id":1675,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":73,"character":10}],"signatures":[{"id":1676,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work units synchronously."},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1648]},{"title":"Properties","kind":1024,"children":[1679,1680,1677,1678,1682,1683,1684,1694,1657,1681],"categories":[{"title":"CATEGORY","children":[1679,1680,1677,1678,1694,1657,1681]},{"title":"Events","children":[1682,1683,1684]}]},{"title":"Accessors","kind":262144,"children":[1689]},{"title":"Methods","kind":2048,"children":[1658,1695,1672,1691,1662,1675]}],"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":8,"character":22}],"typeParameter":[{"id":1701,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1702,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1703,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1704,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":1794,"name":"WaterfallPipeline"}],"permalink":"/api/pipeline/class/SerialPipeline","previousId":1540,"nextId":1705},{"id":1705,"name":"Task","kind":128,"kindString":"Class","flags":{},"children":[{"id":1707,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1708,"name":"new Task","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1709,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1710,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1711,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1712,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1765,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1713,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1714,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1705,"typeArguments":[{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1860,"name":"WorkUnit.constructor"}}],"inheritedFrom":{"type":"reference","id":1859,"name":"WorkUnit.constructor"}},{"id":1719,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1867,"name":"WorkUnit.depth"}},{"id":1720,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1868,"name":"WorkUnit.index"}},{"id":1725,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":34,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1873,"name":"WorkUnit.onFail"}},{"id":1726,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Output"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1874,"name":"WorkUnit.onPass"}},{"id":1727,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1875,"name":"WorkUnit.onRun"}},{"id":1728,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1876,"name":"WorkUnit.onSkip"}},{"id":1751,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1752,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1901,"name":"WorkUnit.options"}},{"id":1721,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","name":"Output"},"inheritedFrom":{"type":"reference","id":1869,"name":"WorkUnit.output"}},{"id":1722,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1870,"name":"WorkUnit.startTime"}},{"id":1723,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1871,"name":"WorkUnit.statusText"}},{"id":1724,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1872,"name":"WorkUnit.stopTime"}},{"id":1729,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1877,"name":"WorkUnit.title"}},{"id":1734,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":96,"character":5}],"getSignature":[{"id":1735,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1884,"name":"WorkUnit.id"}},{"id":1715,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":7,"character":1}],"signatures":[{"id":1716,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1717,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1718,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","id":1909,"name":"WorkUnit.blueprint"}}],"overwrites":{"type":"reference","id":1908,"name":"WorkUnit.blueprint"}},{"id":1753,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1754,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1755,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1756,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1757,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1758,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1759,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1760,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1761,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1762,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1903,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1902,"name":"WorkUnit.configure"}},{"id":1730,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":82,"character":1}],"signatures":[{"id":1731,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1881,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1880,"name":"WorkUnit.hasFailed"}},{"id":1732,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":89,"character":1}],"signatures":[{"id":1733,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1883,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1882,"name":"WorkUnit.hasPassed"}},{"id":1736,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":103,"character":1}],"signatures":[{"id":1737,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1887,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1886,"name":"WorkUnit.isComplete"}},{"id":1738,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":110,"character":1}],"signatures":[{"id":1739,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1889,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1888,"name":"WorkUnit.isPending"}},{"id":1740,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":117,"character":1}],"signatures":[{"id":1741,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1891,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1890,"name":"WorkUnit.isRunning"}},{"id":1742,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":124,"character":1}],"signatures":[{"id":1743,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1893,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1892,"name":"WorkUnit.isSkipped"}},{"id":1744,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":131,"character":7}],"signatures":[{"id":1745,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1746,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1747,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"},"inheritedFrom":{"type":"reference","id":1895,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1894,"name":"WorkUnit.run"}},{"id":1748,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":172,"character":1}],"signatures":[{"id":1749,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1750,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1705,"typeArguments":[{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1899,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1898,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1707]},{"title":"Properties","kind":1024,"children":[1719,1720,1725,1726,1727,1728,1751,1721,1722,1723,1724,1729],"categories":[{"title":"CATEGORY","children":[1719,1720,1751,1721,1722,1723,1724,1729]},{"title":"Events","children":[1725,1726,1727,1728]}]},{"title":"Accessors","kind":262144,"children":[1734]},{"title":"Methods","kind":2048,"children":[1715,1753,1730,1732,1736,1738,1740,1742,1744,1748]}],"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":13}],"typeParameter":[{"id":1763,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1764,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1706,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":68}]}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Task","previousId":1647,"nextId":1794},{"id":1794,"name":"WaterfallPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1796,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1797,"name":"new WaterfallPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1798,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1799,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1800,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1801,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1802,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1803,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1794,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1649,"name":"SerialPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1648,"name":"SerialPipeline.constructor"}},{"id":1829,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","id":1679,"name":"SerialPipeline.context"}},{"id":1830,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1680,"name":"SerialPipeline.debug"}},{"id":1827,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1677,"name":"SerialPipeline.depth"}},{"id":1828,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1678,"name":"SerialPipeline.index"}},{"id":1832,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1682,"name":"SerialPipeline.onAfterRun"}},{"id":1833,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1683,"name":"SerialPipeline.onBeforeRun"}},{"id":1834,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1835,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Input"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1684,"name":"SerialPipeline.onRunWorkUnit"}},{"id":1844,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1845,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1694,"name":"SerialPipeline.options"}},{"id":1806,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1647,"typeArguments":[{"type":"reflection","declaration":{"id":1807,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1657,"name":"SerialPipeline.root"}},{"id":1831,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","id":1681,"name":"SerialPipeline.value"}},{"id":1839,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1840,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1689,"name":"SerialPipeline.id"}},{"id":1808,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1809,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1810,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1811,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1659,"name":"SerialPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":1658,"name":"SerialPipeline.blueprint"}},{"id":1846,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1847,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1848,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1849,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1850,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1851,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1852,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1853,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1854,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1855,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1696,"name":"SerialPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1695,"name":"SerialPipeline.configure"}},{"id":1824,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1825,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1826,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Input"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1673,"name":"SerialPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1672,"name":"SerialPipeline.getWorkUnits"}},{"id":1841,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1842,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1843,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1387,"name":"Monitor"}}],"type":{"type":"reference","id":1794,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1692,"name":"SerialPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1691,"name":"SerialPipeline.monitor"}},{"id":1812,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1813,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1814,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1815,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1816,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1765,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"O"}],"name":"Action"}},{"id":1817,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1647,"typeArguments":[{"type":"reflection","declaration":{"id":1818,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"O"},{"type":"reference","name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1663,"name":"SerialPipeline.pipe"}},{"id":1819,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1820,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1821,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1822,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1647,"typeArguments":[{"type":"reflection","declaration":{"id":1823,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"O"},{"type":"reference","name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1668,"name":"SerialPipeline.pipe"}}],"inheritedFrom":{"type":"reference","id":1662,"name":"SerialPipeline.pipe"}},{"id":1804,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":16,"character":7}],"signatures":[{"id":1805,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the pipeline in sequential order with the output of each\\nwork unit being passed to the next work unit in the chain."},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Input"}],"name":"Promise"},"overwrites":{"type":"reference","id":1676,"name":"SerialPipeline.run"}}],"overwrites":{"type":"reference","id":1675,"name":"SerialPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1796]},{"title":"Properties","kind":1024,"children":[1829,1830,1827,1828,1832,1833,1834,1844,1806,1831],"categories":[{"title":"CATEGORY","children":[1829,1830,1827,1828,1844,1806,1831]},{"title":"Events","children":[1832,1833,1834]}]},{"title":"Accessors","kind":262144,"children":[1839]},{"title":"Methods","kind":2048,"children":[1808,1846,1824,1841,1812,1804]}],"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":7,"character":13}],"typeParameter":[{"id":1856,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1857,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","id":1647,"typeArguments":[{"type":"reflection","declaration":{"id":1795,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":8,"character":1}]}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"}],"name":"SerialPipeline"}],"permalink":"/api/pipeline/class/WaterfallPipeline","previousId":1705,"nextId":1858},{"id":1858,"name":"WorkUnit","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1859,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":63,"character":1}],"signatures":[{"id":1860,"name":"new WorkUnit","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1861,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1862,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1863,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1864,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1865,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1765,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1866,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1858,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1867,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1779,"name":"Hierarchical.depth"}},{"id":1868,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1781,"name":"Hierarchical.index"}},{"id":1873,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":34,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1874,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Output"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1875,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":1876,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1901,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1869,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","name":"Output"}},{"id":1870,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1871,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1872,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1877,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1884,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":96,"character":5}],"getSignature":[{"id":1885,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":1780,"name":"Hierarchical.id"}}],"implementationOf":{"type":"reference","id":1780,"name":"Hierarchical.id"}},{"id":1908,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1909,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1910,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1911,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":1912,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1902,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1903,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1904,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1905,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1906,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1907,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1880,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":82,"character":1}],"signatures":[{"id":1881,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1882,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":89,"character":1}],"signatures":[{"id":1883,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1886,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":103,"character":1}],"signatures":[{"id":1887,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1888,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":110,"character":1}],"signatures":[{"id":1889,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1890,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":117,"character":1}],"signatures":[{"id":1891,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1892,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":124,"character":1}],"signatures":[{"id":1893,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1894,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":131,"character":7}],"signatures":[{"id":1895,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1896,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1897,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"},"implementationOf":{"type":"reference","id":1784,"name":"Runnable.run"}}],"implementationOf":{"type":"reference","id":1783,"name":"Runnable.run"}},{"id":1898,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":172,"character":1}],"signatures":[{"id":1899,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1900,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1858,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1859]},{"title":"Properties","kind":1024,"children":[1867,1868,1873,1874,1875,1876,1901,1869,1870,1871,1872,1877],"categories":[{"title":"CATEGORY","children":[1867,1868,1901,1869,1870,1871,1872,1877]},{"title":"Events","children":[1873,1874,1875,1876]}]},{"title":"Accessors","kind":262144,"children":[1884]},{"title":"Methods","kind":2048,"children":[1908,1902,1880,1882,1886,1888,1890,1892,1894,1898]}],"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":14,"character":22}],"typeParameter":[{"id":1913,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1914,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1915,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":1540,"name":"Routine"},{"type":"reference","id":1705,"name":"Task"}],"implementedTypes":[{"type":"reference","id":1782,"typeArguments":[{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Runnable"},{"type":"reference","id":1778,"name":"Hierarchical"}],"permalink":"/api/pipeline/class/WorkUnit","previousId":1794,"nextId":1774},{"id":1774,"name":"AggregatedResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1775,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of `Errors` that occurred during execution."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":13,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":1776,"name":"results","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of successful execution results."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}],"groups":[{"title":"Properties","kind":1024,"children":[1775,1776]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":11,"character":17}],"typeParameter":[{"id":1777,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/pipeline/interface/AggregatedResult","previousId":10,"nextId":1535},{"id":1535,"name":"ExecuteCommandOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1539,"name":"workUnit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":21,"character":1}],"type":{"type":"reference","id":1792,"name":"AnyWorkUnit"}},{"id":1536,"name":"wrap","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":20,"character":1}],"signatures":[{"id":1537,"name":"wrap","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1538,"name":"process","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaChildProcess"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[1539]},{"title":"Methods","kind":2048,"children":[1536]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":19,"character":17}],"permalink":"/api/pipeline/interface/ExecuteCommandOptions","previousId":1774,"nextId":1778},{"id":1778,"name":"Hierarchical","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1779,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1780,"name":"id","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique ID of the work unit."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1781,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1779,1780,1781]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":18,"character":17}],"implementedBy":[{"type":"reference","id":1858,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Hierarchical","previousId":1535,"nextId":1464},{"id":1464,"name":"PooledOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1465,"name":"concurrency","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"How many work units to process in parallel."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1466,"name":"filo","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Process with first-in-last-out order, instead of first-in-first-out."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1467,"name":"timeout","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Timeout in milliseconds that each work unit may run, or `0` to avoid a\\ntimeout. Defaults to `0`."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1465,1466,1467]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":13,"character":17}],"permalink":"/api/pipeline/interface/PooledOptions","previousId":1778,"nextId":1782},{"id":1782,"name":"Runnable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1783,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":29,"character":1}],"signatures":[{"id":1784,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Accept an input and produce an output."},"parameters":[{"id":1785,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1786,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[1783]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":27,"character":17}],"typeParameter":[{"id":1787,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1788,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{}}],"implementedBy":[{"type":"reference","id":1858,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Runnable","previousId":1464,"nextId":1765},{"id":1765,"name":"Action","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":12}],"typeParameter":[{"id":1771,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1381,"name":"Context"}},{"id":1772,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1773,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"type":{"type":"reflection","declaration":{"id":1766,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":75}],"signatures":[{"id":1767,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1768,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1769,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}},{"id":1770,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1792,"name":"AnyWorkUnit"}}],"type":{"type":"union","types":[{"type":"reference","name":"Output"},{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"}]}}]}},"permalink":"/api/pipeline#Action","previousId":4,"nextId":1790},{"id":1790,"name":"AnyPipeline","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1791,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":35}]}},{"type":"reference","id":1381,"name":"Context"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"Pipeline"},"permalink":"/api/pipeline#AnyPipeline","previousId":1765,"nextId":1792},{"id":1792,"name":"AnyWorkUnit","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":12}],"type":{"type":"reference","id":1858,"typeArguments":[{"type":"reflection","declaration":{"id":1793,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":35}]}},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"WorkUnit"},"permalink":"/api/pipeline#AnyWorkUnit","previousId":1790,"nextId":1458},{"id":1458,"name":"PipelineErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":11,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/pipeline#PipelineErrorCode","previousId":1792,"nextId":1789},{"id":1789,"name":"Status","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":32,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"failed"},{"type":"literal","value":"passed"},{"type":"literal","value":"pending"},{"type":"literal","value":"running"},{"type":"literal","value":"skipped"}]},"permalink":"/api/pipeline#Status","previousId":1458,"nextId":1459},{"id":1459,"name":"PipelineError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":13,"character":13}],"type":{"type":"reflection","declaration":{"id":1460,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1461,"name":"new PipelineError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1462,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}},{"id":1463,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/pipeline#PipelineError","previousId":4,"nextId":1380},{"id":1380,"name":"STATUS_FAILED","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":7,"character":13}],"type":{"type":"reference","id":1789,"name":"Status"},"defaultValue":"\'failed\'","permalink":"/api/pipeline#STATUS_FAILED","previousId":1459,"nextId":1379},{"id":1379,"name":"STATUS_PASSED","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","id":1789,"name":"Status"},"defaultValue":"\'passed\'","permalink":"/api/pipeline#STATUS_PASSED","previousId":1380,"nextId":1376},{"id":1376,"name":"STATUS_PENDING","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","id":1789,"name":"Status"},"defaultValue":"\'pending\'","permalink":"/api/pipeline#STATUS_PENDING","previousId":1379,"nextId":1377},{"id":1377,"name":"STATUS_RUNNING","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","id":1789,"name":"Status"},"defaultValue":"\'running\'","permalink":"/api/pipeline#STATUS_RUNNING","previousId":1376,"nextId":1378},{"id":1378,"name":"STATUS_SKIPPED","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":5,"character":13}],"type":{"type":"reference","id":1789,"name":"Status"},"defaultValue":"\'skipped\'","permalink":"/api/pipeline#STATUS_SKIPPED","previousId":1377}],"groups":[{"title":"Classes","kind":128,"children":[1250,1313,1381,1387,1400,1468,1540,1647,1705,1794,1858]},{"title":"Interfaces","kind":256,"children":[1774,1535,1778,1464,1782]},{"title":"Type aliases","kind":4194304,"children":[1765,1790,1792,1458,1789]},{"title":"Variables","kind":32,"children":[1459,1380,1379,1376,1377,1378]}],"sources":[{"fileName":"packages/pipeline/src/index.ts","line":6,"character":0}],"permalink":"/api/pipeline"},"urlSlug":"pipeline"}],"packageName":"@boost/pipeline","packageVersion":"2.2.7"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":7,"name":"@boost/plugin","kind":1,"kindString":"Module","flags":{},"children":[{"id":1917,"name":"Plugin","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1918,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1919,"name":"new Plugin","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1920,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1922,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1921,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1923,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1917,"typeArguments":[{"type":"reference","name":"T"},{"type":"reference","name":"Options"}],"name":"Plugin"},"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1924,"name":"name","kind":1024,"kindString":"Property","flags":{"isAbstract":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":8,"character":10}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2040,"name":"Pluggable.name"}},{"id":1931,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1938,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1939,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1940,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1941,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":1942,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1932,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1933,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1934,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1935,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1936,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1937,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1928,"name":"shutdown","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":12,"character":1}],"signatures":[{"id":1929,"name":"shutdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1930,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.shutdown"}}],"implementationOf":{"type":"reference","id":2042,"name":"Pluggable.shutdown"}},{"id":1925,"name":"startup","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":10,"character":1}],"signatures":[{"id":1926,"name":"startup","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1927,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.startup"}}],"implementationOf":{"type":"reference","id":2043,"name":"Pluggable.startup"}}],"groups":[{"title":"Constructors","kind":512,"children":[1918]},{"title":"Properties","kind":1024,"children":[1924,1931]},{"title":"Methods","kind":2048,"children":[1938,1932,1928,1925]}],"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":22}],"typeParameter":[{"id":1943,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1945,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1944,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":67}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Contract"}],"implementedTypes":[{"type":"reference","id":2039,"typeArguments":[{"type":"reference","name":"T"}],"name":"Pluggable"}],"permalink":"/api/plugin/class/Plugin","nextId":1952},{"id":1952,"name":"Registry","kind":128,"kindString":"Class","flags":{},"children":[{"id":1953,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":76,"character":1}],"signatures":[{"id":1954,"name":"new Registry","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1955,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2039,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","name":"Plugin"}],"name":"Pluggable"}},{"id":1956,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1957,"name":"projectName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1958,"name":"typeName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1959,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2062,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}}],"type":{"type":"reference","id":1952,"typeArguments":[{"type":"reference","name":"Plugin"},{"type":"reference","name":"Tool"}],"name":"Registry"},"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}},{"id":1960,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":34,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1961,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1962,"name":"onAfterUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1963,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is registered and the `startup` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1964,"name":"onBeforeUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is unregistered and the `shutdown` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":58,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1965,"name":"onLoad","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is loaded but before it\'s registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":64,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2022,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2062,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1966,"name":"pluralName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":66,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1967,"name":"projectName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":68,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1968,"name":"singularName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":70,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1971,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":90,"character":1}],"signatures":[{"id":1972,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1973,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1974,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2062,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":2023,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":2024,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2025,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2062,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2026,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2027,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2028,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2062,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2062,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2062,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1975,"name":"formatModuleName","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":107,"character":1}],"signatures":[{"id":1976,"name":"formatModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a name into a fully qualified and compatible Node/npm module name,\\nwith the tool and type names being used as scopes and prefixes."},"parameters":[{"id":1977,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1978,"name":"scoped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1979,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":119,"character":1}],"signatures":[{"id":1980,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a single registered plugin by module name. If the plugin cannot be found,\\nan error will be thrown."},"typeParameter":[{"id":1981,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2039,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","name":"T"}],"name":"Pluggable"},"default":{"type":"reference","name":"Plugin"}}],"parameters":[{"id":1982,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"T"}}]},{"id":1983,"name":"getAll","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":132,"character":1}],"signatures":[{"id":1984,"name":"getAll","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all registered plugins."},"type":{"type":"array","elementType":{"type":"reference","name":"Plugin"}}}]},{"id":1985,"name":"getMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":139,"character":1}],"signatures":[{"id":1986,"name":"getMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return multiple registered plugins by module name."},"parameters":[{"id":1987,"name":"names","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"array","elementType":{"type":"reference","name":"Plugin"}}}]},{"id":1997,"name":"isRegistered","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":215,"character":1}],"signatures":[{"id":1998,"name":"isRegistered","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if a plugin has been registered."},"parameters":[{"id":1999,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1988,"name":"load","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":146,"character":7}],"signatures":[{"id":1989,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register a single plugin by name, or with an explicit instance."},"parameters":[{"id":1990,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"Plugin"}]}},{"id":1991,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"defaultValue":"{}"},{"id":1992,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2052,"typeArguments":[{"type":"reference","name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Plugin"}],"name":"Promise"}}]},{"id":1993,"name":"loadMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":183,"character":7}],"signatures":[{"id":1994,"name":"loadMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register multiple plugins based on a list of settings."},"parameters":[{"id":1995,"name":"settings","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2045,"name":"Setting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"Plugin"},{"type":"reference","id":2033,"name":"SourceWithOptions"}]}}]}},{"id":1996,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2052,"typeArguments":[{"type":"reference","name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"Plugin"}}],"name":"Promise"}}]},{"id":2000,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":228,"character":7}],"signatures":[{"id":2001,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a plugin and trigger startup with the provided tool."},"parameters":[{"id":2002,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2003,"name":"plugin","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Plugin"}},{"id":2004,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","name":"Tool"}]},"defaultValue":"..."},{"id":2005,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2052,"typeArguments":[{"type":"reference","name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Plugin"}],"name":"Promise"}}]},{"id":2006,"name":"unregister","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":272,"character":7}],"signatures":[{"id":2007,"name":"unregister","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister a plugin by name and trigger shutdown process."},"parameters":[{"id":2008,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2009,"name":"tool","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Tool"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Plugin"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1953]},{"title":"Properties","kind":1024,"children":[1960,1961,1962,1963,1964,1965,2022,1966,1967,1968],"categories":[{"title":"CATEGORY","children":[1960,2022,1966,1967,1968]},{"title":"Events","children":[1961,1962,1963,1964,1965]}]},{"title":"Methods","kind":2048,"children":[1971,2023,1975,1979,1983,1985,1997,1988,1993,2000,2006]}],"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":31,"character":13}],"typeParameter":[{"id":2029,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2039,"name":"Pluggable"}},{"id":2030,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2062,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Contract"}],"permalink":"/api/plugin/class/Registry","previousId":1917,"nextId":2039},{"id":2039,"name":"Pluggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2040,"name":"name","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":15,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":2041,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Priority in which to order the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2042,"name":"shutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":19,"character":1}],"type":{"type":"reference","id":2034,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}},{"id":2043,"name":"startup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":21,"character":1}],"type":{"type":"reference","id":2034,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[2040,2041,2042,2043]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":13,"character":17}],"typeParameter":[{"id":2044,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"any"}}],"implementedBy":[{"type":"reference","id":1917,"name":"Plugin"}],"permalink":"/api/plugin/interface/Pluggable","previousId":1,"nextId":2052},{"id":2052,"name":"RegisterOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2053,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2054,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2053,2054]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":30,"character":17}],"typeParameter":[{"id":2055,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedBy":[{"type":"reference","id":2056,"name":"Registration"}],"permalink":"/api/plugin/interface/RegisterOptions","previousId":2039,"nextId":2056},{"id":2056,"name":"Registration","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2057,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2058,"name":"plugin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Plugin instance or object."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":41,"character":1}],"type":{"type":"reference","name":"T"}},{"id":2059,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":2053,"name":"RegisterOptions.priority"}},{"id":2060,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","id":2054,"name":"RegisterOptions.tool"}}],"groups":[{"title":"Properties","kind":1024,"children":[2057,2058,2059,2060]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":37,"character":17}],"typeParameter":[{"id":2061,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2039,"name":"Pluggable"}}],"extendedTypes":[{"type":"reference","id":2052,"name":"RegisterOptions"}],"permalink":"/api/plugin/interface/Registration","previousId":2052,"nextId":2062},{"id":2062,"name":"RegistryOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2063,"name":"afterShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":46,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2034,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}]}},{"id":2064,"name":"afterStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":48,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2034,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}]}},{"id":2065,"name":"beforeShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":50,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2034,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}]}},{"id":2066,"name":"beforeStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":52,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2034,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}]}},{"id":2067,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver instead of `require.resolve`."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":54,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}},{"id":2068,"name":"validate","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Validate the shape of the plugin being registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":56,"character":1}],"type":{"type":"reference","id":2034,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[2063,2064,2065,2066,2067,2068]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":44,"character":17}],"typeParameter":[{"id":2069,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2039,"name":"Pluggable"}}],"permalink":"/api/plugin/interface/RegistryOptions","previousId":2056,"nextId":2034},{"id":2034,"name":"Callback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":12}],"typeParameter":[{"id":2038,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reflection","declaration":{"id":2035,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":36}],"signatures":[{"id":2036,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2037,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/plugin#Callback","previousId":3,"nextId":2046},{"id":2046,"name":"Factory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":2050,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2039,"name":"Pluggable"}},{"id":2051,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":2047,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":70}],"signatures":[{"id":2048,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2049,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"O"}],"name":"Partial"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Promise"},{"type":"reference","name":"T"}]}}]}},"permalink":"/api/plugin#Factory","previousId":2034,"nextId":1946},{"id":1946,"name":"PluginErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":13,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/plugin#PluginErrorCode","previousId":2046,"nextId":2045},{"id":2045,"name":"Setting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":24,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2032,"name":"SourceOptions"}],"name":"Record"},"permalink":"/api/plugin#Setting","previousId":1946,"nextId":2031},{"id":2031,"name":"Source","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"FilePath"},{"type":"reference","name":"ModuleName"}]},"permalink":"/api/plugin#Source","previousId":2045,"nextId":2032},{"id":2032,"name":"SourceOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/plugin#SourceOptions","previousId":2031,"nextId":2033},{"id":2033,"name":"SourceWithOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":7,"character":12}],"type":{"type":"tuple","elements":[{"type":"reference","id":2031,"name":"Source"},{"type":"reference","id":2032,"name":"SourceOptions"}]},"permalink":"/api/plugin#SourceWithOptions","previousId":2032,"nextId":1916},{"id":1916,"name":"DEFAULT_PRIORITY","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/plugin/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":100},"defaultValue":"100","permalink":"/api/plugin#DEFAULT_PRIORITY","previousId":6,"nextId":1947},{"id":1947,"name":"PluginError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":15,"character":13}],"type":{"type":"reflection","declaration":{"id":1948,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1949,"name":"new PluginError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1950,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}},{"id":1951,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/plugin#PluginError","previousId":1916}],"groups":[{"title":"Classes","kind":128,"children":[1917,1952]},{"title":"Interfaces","kind":256,"children":[2039,2052,2056,2062]},{"title":"Type aliases","kind":4194304,"children":[2034,2046,1946,2045,2031,2032,2033]},{"title":"Variables","kind":32,"children":[1916,1947]}],"sources":[{"fileName":"packages/plugin/src/index.ts","line":6,"character":0}],"permalink":"/api/plugin"},"urlSlug":"plugin"}],"packageName":"@boost/plugin","packageVersion":"2.4.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":8,"name":"@boost/terminal","kind":1,"kindString":"Module","flags":{},"children":[{"id":2070,"name":"cursor","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":2080,"name":"hide","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Hide the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":13,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2081,"name":"nextLine","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Move cursor to the next line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":16,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2082,"name":"position","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Return the current cursur position."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":19,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2083,"name":"prevLine","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Move cursor to the previous line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":22,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2084,"name":"restorePosition","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Restores the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":25,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2085,"name":"savePosition","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Saves the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":28,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2086,"name":"show","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Show the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":31,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2087,"name":"startLine","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Move cursor to the start of the current line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":34,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2071,"name":"backward","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":4,"character":13}],"signatures":[{"id":2072,"name":"backward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move backward. Defaults to `1`."},"parameters":[{"id":2073,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2074,"name":"down","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":7,"character":13}],"signatures":[{"id":2075,"name":"down","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move down. Defaults to `1`."},"parameters":[{"id":2076,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2077,"name":"forward","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":10,"character":13}],"signatures":[{"id":2078,"name":"forward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move forward. Defaults to `1`."},"parameters":[{"id":2079,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2088,"name":"to","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":37,"character":13}],"signatures":[{"id":2089,"name":"to","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the relative position of the cursor."},"parameters":[{"id":2090,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2091,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2092,"name":"toAbsolute","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":40,"character":13}],"signatures":[{"id":2093,"name":"toAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the absolute position of the cursor, starting from the top left."},"parameters":[{"id":2094,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2095,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2096,"name":"up","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":43,"character":13}],"signatures":[{"id":2097,"name":"up","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move up. Defaults to `1`."},"parameters":[{"id":2098,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Variables","kind":32,"children":[2080,2081,2082,2083,2084,2085,2086,2087]},{"title":"Functions","kind":64,"children":[2071,2074,2077,2088,2092,2096]}],"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/cursor","nextId":2099},{"id":2099,"name":"screen","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":2100,"name":"clear","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Clear the terminal screen."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":5,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2101,"name":"clearTerminal","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2102,"name":"erase","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Erase the screen and move the cursor the top left position."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":11,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2103,"name":"eraseDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2104,"name":"eraseEndLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2105,"name":"eraseLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2109,"name":"eraseStartLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2110,"name":"eraseUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2111,"name":"scrollDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2112,"name":"scrollUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2106,"name":"eraseLines","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":2107,"name":"eraseLines","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Erase from the current cursor position up the specified amount of rows."},"parameters":[{"id":2108,"name":"count","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"Count of rows to erase.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2113,"name":"size","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":38,"character":13}],"signatures":[{"id":2114,"name":"size","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Reliably and accurately get the screen size (in `columns` and `rows`)."},"type":{"type":"reference","name":"terminalSize.Size"}}]}],"groups":[{"title":"Variables","kind":32,"children":[2100,2101,2102,2103,2104,2105,2109,2110,2111,2112]},{"title":"Functions","kind":64,"children":[2106,2113]}],"sources":[{"fileName":"packages/terminal/src/screen.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/screen","previousId":2070,"nextId":2148},{"id":2149,"name":"WrapOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2150,"name":"hard","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":126,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2151,"name":"trim","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2152,"name":"wordWrap","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2150,2151,2152]}],"sources":[{"fileName":"packages/terminal/src/text.ts","line":125,"character":17}],"permalink":"/api/terminal/interface/WrapOptions","previousId":7,"nextId":2070},{"id":2148,"name":"TruncateOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":108,"character":12}],"type":{"type":"reference","name":"cliTruncate.Options"},"permalink":"/api/terminal#TruncateOptions","previousId":1,"nextId":2147},{"id":2147,"name":"ANSI_REGEX","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Regular expression for matching ANSI escape codes."},"sources":[{"fileName":"packages/terminal/src/text.ts","line":14,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/terminal#ANSI_REGEX"},{"id":2115,"name":"annotate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":26,"character":16}],"signatures":[{"id":2116,"name":"annotate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text with a visual annotation _(iTerm only)_. If a terminal doe\\nnot support annotations, it will pass the text through.","text":"```ts\\nimport { annotate } from \'@boost/terminal\';\\n\\nconst text = annotate(\'fileName.js\', absFilePath);\\n```\\n"},"parameters":[{"id":2117,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2118,"name":"annotation","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/annotate","nextId":2119},{"id":2119,"name":"calculateWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":44,"character":16}],"signatures":[{"id":2120,"name":"calculateWidth","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculate and return the visual width of a string (number of terminal columns required).\\nBased on [string-width](https://www.npmjs.com/package/string-width).","text":"```ts\\nimport { calculateWidth } from \'@boost/terminal\';\\n\\ncalculateWidth(\'\u53e4\'); // 2\\n```\\n"},"parameters":[{"id":2121,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/terminal/function/calculateWidth","previousId":2115,"nextId":2122},{"id":2122,"name":"hasAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":58,"character":16}],"signatures":[{"id":2123,"name":"hasAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if the string contains ANSI escape codes.\\nBased on [ansi-regex](https://www.npmjs.com/package/ansi-regex).","text":"```ts\\nimport { hasAnsi } from \'@boost/terminal\';\\n\\nhasAnsi(\'\\\\u001B[4mTest\\\\u001B[0m\'); // true\\n```\\n"},"parameters":[{"id":2124,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/terminal/function/hasAnsi","previousId":2119,"nextId":2125},{"id":2125,"name":"link","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":72,"character":16}],"signatures":[{"id":2126,"name":"link","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text in an ANSI escape code hyperlink.\\nIf a terminal does not support hyperlinks, it will pass the text through.","text":"```ts\\nimport { link } from \'@boost/terminal\';\\n\\nconst text = link(\'Read the manual\', \'https://boostlib.dev\');\\n```\\n"},"parameters":[{"id":2127,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2128,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/link","previousId":2122,"nextId":2129},{"id":2129,"name":"sliceAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":90,"character":16}],"signatures":[{"id":2130,"name":"sliceAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Slice a string while preserving ANSI escape codes.\\nBased on [slice-ansi](https://www.npmjs.com/package/slice-ansi).","text":"```ts\\nimport { sliceAnsi } from \'@boost/terminal\';\\n\\nconst text = sliceAnsi(aStringThatMayContainAnsi, 15, 25);\\n```\\n"},"parameters":[{"id":2131,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2132,"name":"start","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2133,"name":"end","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/sliceAnsi","previousId":2125,"nextId":2134},{"id":2134,"name":"stripAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":104,"character":16}],"signatures":[{"id":2135,"name":"stripAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Strip all ANSI escape codes from the provided string.\\nBased on [strip-ansi](https://www.npmjs.com/package/strip-ansi).","text":"```ts\\nimport { stripAnsi } from \'@boost/terminal\';\\n\\nconst text = stripAnsi(aStringThatContainsAnsi);\\n```\\n"},"parameters":[{"id":2136,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/stripAnsi","previousId":2129,"nextId":2137},{"id":2137,"name":"truncate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":121,"character":16}],"signatures":[{"id":2138,"name":"truncate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Truncate a string to a desired terminal width while preserving ANSI escape codes,\\nUnicode surrogate pairs, and fullwidth characters.\\nBased on [cli-truncate](https://www.npmjs.com/package/cli-truncate).","text":"```ts\\nimport { truncate } from \'@boost/terminal\';\\n\\nconst text = truncate(aStringThatMayContainAnsi, 10, { position: \'middle\' });\\n```\\n"},"parameters":[{"id":2139,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2140,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2141,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2148,"name":"TruncateOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/truncate","previousId":2134,"nextId":2142},{"id":2142,"name":"wrapAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":141,"character":16}],"signatures":[{"id":2143,"name":"wrapAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Wrap a string that contains ANSI escape codes to a desired terminal width.\\nBased on [wrap-ansi](https://www.npmjs.com/package/wrap-ansi).","text":"```ts\\nimport { wrapAnsi } from \'@boost/terminal\';\\n\\nconst text = wrapAnsi(aStringThatContainsAnsi, 20);\\n```\\n"},"parameters":[{"id":2144,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2145,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2146,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2149,"name":"WrapOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/wrapAnsi","previousId":2137,"nextId":2149}],"groups":[{"title":"Functions","kind":64,"children":[2115,2119,2122,2125,2129,2134,2137,2142]},{"title":"Interfaces","kind":256,"children":[2149]},{"title":"Namespaces","kind":2,"children":[2070,2099]},{"title":"Type aliases","kind":4194304,"children":[2148]},{"title":"Variables","kind":32,"children":[2147]}],"sources":[{"fileName":"packages/terminal/src/index.ts","line":6,"character":0}],"permalink":"/api/terminal"},"urlSlug":"terminal"}],"packageName":"@boost/terminal","packageVersion":"2.2.2"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":9,"name":"@boost/translate","kind":1,"kindString":"Module","flags":{},"children":[{"id":2175,"name":"MessageOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2178,"name":"context","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Context used for special parsing (male, female, etc)."},"sources":[{"fileName":"packages/translate/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2177,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Count used to determine plurals."},"sources":[{"fileName":"packages/translate/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2176,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Default value to return if a translation was not found."},"sources":[{"fileName":"packages/translate/src/types.ts","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2179,"name":"interpolation","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Interpolation options to pass down."},"sources":[{"fileName":"packages/translate/src/types.ts","line":19,"character":1}],"type":{"type":"reference","name":"InterpolationOptions"}},{"id":2180,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Force translation to this locale."},"sources":[{"fileName":"packages/translate/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2181,"name":"postProcess","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Post-processors to run on the translation."},"sources":[{"fileName":"packages/translate/src/types.ts","line":23,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2178,2177,2176,2179,2180,2181]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":11,"character":17}],"permalink":"/api/translate/interface/MessageOptions","nextId":2182},{"id":2182,"name":"Translator","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2183,"name":"direction","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":28,"character":1}],"type":{"type":"reference","id":2171,"name":"Direction"}},{"id":2184,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":29,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2185,"name":"changeLocale","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":30,"character":1}],"signatures":[{"id":2186,"name":"changeLocale","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2187,"name":"locale","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2183,2184]},{"title":"Methods","kind":2048,"children":[2185]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":26,"character":17}],"signatures":[{"id":2189,"name":"Translator","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2190,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2191,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2174,"name":"InterpolationParams"}},{"id":2192,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2175,"name":"MessageOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/translate/interface/Translator","previousId":2175,"nextId":2158},{"id":2158,"name":"TranslatorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2159,"name":"autoDetect","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Automatically detect the locale from the environment. Defaults to `true`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2160,"name":"debug","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable debugging by logging info to the console."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2161,"name":"fallbackLocale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Fallback locale(s) to use when the detected locale isn\'t translated. Defaults to `en`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":24,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2162,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Locale to explicitly use."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2163,"name":"lookupType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Order in which to load and lookup locale translations."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":28,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"all"},{"type":"literal","value":"currentOnly"},{"type":"literal","value":"languageOnly"}]}},{"id":2164,"name":"resourceFormat","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File format resource bundles are written in. Defaults to `yaml`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":30,"character":1}],"type":{"type":"reference","id":2172,"name":"Format"}}],"groups":[{"title":"Properties","kind":1024,"children":[2159,2160,2161,2162,2163,2164]}],"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":18,"character":17}],"permalink":"/api/translate/interface/TranslatorOptions","previousId":2182,"nextId":2171},{"id":2171,"name":"Direction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"ltr"},{"type":"literal","value":"rtl"}]},"permalink":"/api/translate#Direction","previousId":2,"nextId":2172},{"id":2172,"name":"Format","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"yaml"}]},"permalink":"/api/translate#Format","previousId":2171,"nextId":2174},{"id":2174,"name":"InterpolationParams","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":9,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/translate#InterpolationParams","previousId":2172,"nextId":2173},{"id":2173,"name":"Locale","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":7,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/translate#Locale","previousId":2174,"nextId":2165},{"id":2165,"name":"TranslateErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/translate#TranslateErrorCode","previousId":2173,"nextId":2166},{"id":2166,"name":"TranslateError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":2167,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2168,"name":"new TranslateError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2169,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}},{"id":2170,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/translate#TranslateError","previousId":4},{"id":2153,"name":"createTranslator","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":37,"character":16}],"signatures":[{"id":2154,"name":"createTranslator","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Translator` instance with the defined namespace.\\nA list of resource paths are required for locating translation files."},"parameters":[{"id":2155,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]}},{"id":2156,"name":"resourcePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"PortablePath"},{"type":"array","elementType":{"type":"reference","name":"PortablePath"}}]}},{"id":2157,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2158,"name":"TranslatorOptions"},"defaultValue":"{}"}],"type":{"type":"reference","id":2182,"name":"Translator"}}],"permalink":"/api/translate/function/createTranslator","nextId":2175}],"groups":[{"title":"Functions","kind":64,"children":[2153]},{"title":"Interfaces","kind":256,"children":[2175,2182,2158]},{"title":"Type aliases","kind":4194304,"children":[2171,2172,2174,2173,2165]},{"title":"Variables","kind":32,"children":[2166]}],"sources":[{"fileName":"packages/translate/src/index.ts","line":6,"character":0}],"permalink":"/api/translate"},"urlSlug":"translate"}],"packageName":"@boost/translate","packageVersion":"2.2.7"}]')}}]);