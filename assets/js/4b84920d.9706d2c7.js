(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8122],{297:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var a=n(7378);function i(e){var t=e.children,n=e.type;return a.createElement("span",{className:"badge badge--"+n},t)}},7586:function(e,t,n){"use strict";n.d(t,{Z:function(){return g}});var a=n(7378),i=n(4142),r=n(1554),s=n(297),l="badgeGroup_2HOO",o="apiLink_32Vk";function u(e){var t=e.children;return a.createElement("span",{className:l},t)}function g(e){var t=e.api,n=e.backend,l=e.frontend,g=e.tooling;return a.createElement(a.Fragment,null,t&&a.createElement(i.default,{className:o,to:t},"API ",a.createElement(r.Z,null)),a.createElement(u,null,n&&a.createElement(s.Z,{type:"warning"},"Backend"),l&&a.createElement(s.Z,{type:"success"},"Frontend"),g&&a.createElement(s.Z,{type:"primary"},"Tooling")))}},7608:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return g},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return c},default:function(){return b}});var a=n(9603),i=n(120),r=(n(7378),n(5318)),s=n(7586),l=n(4535),o=n(517),u=["components"],g={title:"Debugging"},d=void 0,p={unversionedId:"debug",id:"debug",isDocsHomePage:!1,title:"Debugging",description:"Lightweight debugging. Wraps the amazing debug library to",source:"@site/docs/debug.mdx",sourceDirName:".",slug:"/debug",permalink:"/docs/debug",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/debug.mdx",version:"current",frontMatter:{title:"Debugging"},sidebar:"docs",previous:{title:"Crash reporting",permalink:"/docs/crash"},next:{title:"Decorators",permalink:"/docs/decorators"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Environment variables",id:"environment-variables",children:[]},{value:"Debugging",id:"debugging",children:[{value:"Invariant messages",id:"invariant-messages",children:[]},{value:"Verbose output",id:"verbose-output",children:[]},{value:"Silencing output",id:"silencing-output",children:[]}]},{value:"Test utilities",id:"test-utilities",children:[]}],m={toc:c};function b(e){var t=e.components,n=(0,i.Z)(e,u);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{backend:!0,tooling:!0,api:"/api/debug",mdxType:"EnvBadges"}),(0,r.kt)("p",null,"Lightweight debugging. Wraps the amazing ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/debug"},"debug")," library to\nprovide additional functionality."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/debug\n"))),(0,r.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/debug\n")))),(0,r.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BOOSTJS_DEBUG_NAMESPACE")," (",(0,r.kt)("inlineCode",{parentName:"li"},"string"),") - A prefix for all debugger namespaces when created with\n",(0,r.kt)("inlineCode",{parentName:"li"},"createDebugger()"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BOOSTJS_DEBUG_VERBOSE")," (",(0,r.kt)("inlineCode",{parentName:"li"},"boolean"),") - Print verbose messages logged from ",(0,r.kt)("inlineCode",{parentName:"li"},"debugger.verbose()"),",\notherwise they are hidden.")),(0,r.kt)("h2",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,"Like ",(0,r.kt)("a",{parentName:"p",href:"/docs/log"},"logging"),', a "debugger" is a collection of functions that write to ',(0,r.kt)("inlineCode",{parentName:"p"},"process.stderr"),".\nThe key difference is that debug messages are only displayed if the ",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG")," environment variable is\nset and contains the debugger's namespace (logic provided by the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/debug"},"debug")," package). The namespace can be defined when\ninstantiating a debugger using ",(0,r.kt)("a",{parentName:"p",href:"/api/debug/function/createDebugger"},(0,r.kt)("inlineCode",{parentName:"a"},"createDebugger")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createDebugger } from '@boost/debug';\n\nconst debug = createDebugger('boost');\n\nprocess.env.DEBUG = 'boost:*';\n\ndebug('Something is broken!');\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A namespace can either be a string or an array of strings.")),(0,r.kt)("p",null,"Each debug function that logs (excluding invariants) requires a message string as the 1st argument,\nand an optional rest of arguments to interpolate into the message using\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/util.html#util_util_format_format_args"},(0,r.kt)("inlineCode",{parentName:"a"},"util.format()")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"debug('Name: %s %s', user.first_name, user.last_name);\ndebug('Object: %O', data);\n")),(0,r.kt)("h3",{id:"invariant-messages"},"Invariant messages"),(0,r.kt)("p",null,"Invariant debugging logs either a success or a failure message, depending on the truthy evaluation\nof a condition. This can be achieved with\n",(0,r.kt)("a",{parentName:"p",href:"/api/debug/interface/Debugger#invariant"},(0,r.kt)("inlineCode",{parentName:"a"},"debugger.invariant()")),", which requires the condition to\nevaluate, a message to always display, and a success and failure message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"debug.invariant(fs.existsSync(filePath), 'Does file exist?', 'Yes!', 'No');\n")),(0,r.kt)("h3",{id:"verbose-output"},"Verbose output"),(0,r.kt)("p",null,"Debug messages are already hidden behind the ",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG")," environment variable, but Boost takes it a step\nfurther to support verbose debugging. Messages logged with\n",(0,r.kt)("a",{parentName:"p",href:"/api/debug/interface/Debugger#verbose"},(0,r.kt)("inlineCode",{parentName:"a"},"debugger.verbose()"))," will not be displayed unless the\n",(0,r.kt)("inlineCode",{parentName:"p"},"BOOSTJS_DEBUG_VERBOSE")," environment variable is set -- even if ",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG")," is set."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Will not write!\ndebug.verbose('We need extra information');\n\nprocess.env.BOOSTJS_DEBUG_VERBOSE = 'true';\n\n// Will write!\ndebug.verbose('We need extra information (again)');\n")),(0,r.kt)("h3",{id:"silencing-output"},"Silencing output"),(0,r.kt)("p",null,"By default, all logged messages are immediately written when ",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG")," contains the debugger\nnamespace. To silence output for a specific debugger, call the\n",(0,r.kt)("a",{parentName:"p",href:"/api/debug/interface/Debugger#disable"},(0,r.kt)("inlineCode",{parentName:"a"},"debugger.disable()"))," function, and to re-enable, call\n",(0,r.kt)("a",{parentName:"p",href:"/api/debug/interface/Debugger#enable"},(0,r.kt)("inlineCode",{parentName:"a"},"debugger.enable()")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"debug.disable();\n\n// Will not write!\ndebug('Something is broken!');\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Messages that are logged while silenced are ",(0,r.kt)("em",{parentName:"p"},"lost")," and are ",(0,r.kt)("em",{parentName:"p"},"not")," buffered.")),(0,r.kt)("h2",{id:"test-utilities"},"Test utilities"),(0,r.kt)("p",null,"A handful of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest"},"Jest")," utilities are available in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"@boost/debug/test")," module. ",(0,r.kt)("a",{parentName:"p",href:"/api/debug-test"},"View the API for a full list"),"."))}b.isMDXComponent=!0}}]);