"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1493],{5318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),g=r,d=m["".concat(s,".").concat(g)]||m[g]||c[g]||o;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},517:function(e,t,n){var a=n(7378);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},2120:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(5773),r=n(7378),o=n(6457),l=n(4956);var i=function(){var e=(0,r.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=n(6429),p=n(8944),u="tabItem_c0e5";function c(e){var t,n,a,o=e.lazy,l=e.block,c=e.defaultValue,m=e.values,g=e.groupId,d=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=m?m:f.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),k=(0,s.duplicates)(h,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===c?c:null!=(t=null!=c?c:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=f[0])?void 0:a.props.value;if(null!==v&&!h.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=i(),N=b.tabGroupChoices,y=b.setTabGroupChoices,T=(0,r.useState)(v),w=T[0],C=T[1],O=[],L=(0,s.useScrollPositionBlocker)().blockElementScrollPositionUntilNextRender;if(null!=g){var E=N[g];null!=E&&E!==w&&h.some((function(e){return e.value===E}))&&C(E)}var S=function(e){var t=e.currentTarget,n=O.indexOf(t),a=h[n].value;a!==w&&(L(t),C(a),null!=g&&y(g,a))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=O.indexOf(e.currentTarget)+1;n=O[a]||O[0];break;case"ArrowLeft":var r=O.indexOf(e.currentTarget)-1;n=O[r]||O[O.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":l},d)},h.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,className:(0,p.Z)("tabs__item",u,{"tabs__item--active":w===t}),key:t,ref:function(e){return O.push(e)},onKeyDown:j,onFocus:S,onClick:S},null!=n?n:t)}))),o?(0,r.cloneElement)(f.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function m(e){var t=(0,o.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},297:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7378);function r(e){var t=e.children,n=e.type;return a.createElement("span",{className:"badge badge--"+n},t)}},2723:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(7378),r=n(1884),o=n(8458),l=n(297),i="badgeGroup_2HOO",s="apiLink_32Vk";function p(e){var t=e.children;return a.createElement("span",{className:i},t)}function u(e){var t=e.api,n=e.backend,i=e.frontend,u=e.tooling;return a.createElement(a.Fragment,null,t&&a.createElement(r.default,{className:s,to:t},"API ",a.createElement(o.Z,null)),a.createElement(p,null,n&&a.createElement(l.Z,{type:"warning"},"Backend"),i&&a.createElement(l.Z,{type:"success"},"Frontend"),u&&a.createElement(l.Z,{type:"primary"},"Tooling")))}},1347:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return g},default:function(){return f}});var a=n(5773),r=n(808),o=(n(7378),n(5318)),l=n(2723),i=n(2120),s=n(517),p=["components"],u={title:"Logging"},c=void 0,m={unversionedId:"log",id:"log",title:"Logging",description:"Lightweight level based logging system.",source:"@site/docs/log.mdx",sourceDirName:".",slug:"/log",permalink:"/docs/log",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/log.mdx",tags:[],version:"current",frontMatter:{title:"Logging"},sidebar:"docs",previous:{title:"Events",permalink:"/docs/event"},next:{title:"Modules",permalink:"/docs/module"}},g=[{value:"Installation",id:"installation",children:[],level:2},{value:"Environment variables",id:"environment-variables",children:[],level:2},{value:"Logging",id:"logging",children:[{value:"Options",id:"options",children:[],level:3},{value:"Log levels",id:"log-levels",children:[],level:3},{value:"Silencing output",id:"silencing-output",children:[],level:3}],level:2},{value:"Formats",id:"formats",children:[],level:2},{value:"Metadata",id:"metadata",children:[],level:2},{value:"Transport types",id:"transport-types",children:[{value:"ConsoleTransport",id:"consoletransport",children:[],level:3},{value:"StreamTransport",id:"streamtransport",children:[],level:3},{value:"FileTransport",id:"filetransport",children:[],level:3},{value:"RotatingFileTransport",id:"rotatingfiletransport",children:[],level:3}],level:2},{value:"Test utilities",id:"test-utilities",children:[],level:2}],d={toc:g};function f(e){var t=e.components,n=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(l.Z,{backend:!0,tooling:!0,api:"/api/log",mdxType:"EnvBadges"}),(0,o.kt)("p",null,"Lightweight level based logging system."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)(i.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/log\n"))),(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/log\n")))),(0,o.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"BOOSTJS_LOG_DEFAULT_LEVEL")," (",(0,o.kt)("a",{parentName:"li",href:"/api/log#LogLevel"},(0,o.kt)("inlineCode",{parentName:"a"},"LogLevel")),") - The default log level to use when\ncalling the logger function stand alone (the usage examples below). Defaults to the lowest level,\n",(0,o.kt)("inlineCode",{parentName:"li"},"log"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"BOOSTJS_LOG_MAX_LEVEL")," (",(0,o.kt)("a",{parentName:"li",href:"/api/log#LogLevel"},(0,o.kt)("inlineCode",{parentName:"a"},"LogLevel")),") - The maximum level, based on priority,\nto write to a stream. All levels higher than the maximum will be ignored. Defaults to allowing all\nlevels.")),(0,o.kt)("h2",{id:"logging"},"Logging"),(0,o.kt)("p",null,'Logging is based around the concept of a "logger", which provides a set of functions of severity\nlevels to log with. Logs are written to one or many provided transports -- or ',(0,o.kt)("inlineCode",{parentName:"p"},"console")," if not\ndefined. To begin, instantiate a logger with ",(0,o.kt)("a",{parentName:"p",href:"/api/log/function/createLogger"},(0,o.kt)("inlineCode",{parentName:"a"},"createLogger")),", which\nreturns a function that can be used for standard level logging."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createLogger } from '@boost/log';\n\nconst log = createLogger({ name: 'boost' });\n\nlog('Something has happened\u2026');\n")),(0,o.kt)("p",null,"Each logging function requires a message string as the 1st argument, and an optional rest of\narguments to interpolate into the message using\n",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/util.html#util_util_format_format_args"},(0,o.kt)("inlineCode",{parentName:"a"},"util.format()")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"log('Name: %s %s', user.first_name, user.last_name);\nlog('Object: %O', data);\n")),(0,o.kt)("p",null,"If you would prefer to interact with a class instance, you may use the\n",(0,o.kt)("a",{parentName:"p",href:"/api/log/class/Logger"},(0,o.kt)("inlineCode",{parentName:"a"},"Logger"))," class. The major difference between the class and the function, is\nthat the class only has 1 logging method, ",(0,o.kt)("a",{parentName:"p",href:"/api/log/class/Logger#log"},(0,o.kt)("inlineCode",{parentName:"a"},"Logger#log()")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Logger } from '@boost/log';\n\nconst logger = new Logger({ name: 'boost' });\n\nlogger.log({\n    level: 'info',\n    message: 'Something else has happened\u2026',\n});\n")),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("p",null,"When creating a logger, a ",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/LoggerOptions"},(0,o.kt)("inlineCode",{parentName:"a"},"LoggerOptions"))," object can be passed.\nThe options ",(0,o.kt)("em",{parentName:"p"},"cannot")," be customized after the fact."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import chalk from 'chalk';\nimport { createLogger, StreamTransport } from '@boost/log';\n\nconst log = createLogger({\n    name: 'boost',\n    labels: {\n        error: chalk.bgRed.black.bold(' FAIL '),\n    },\n    transports: [new StreamTransport({ levels: ['error'], stream: process.stderr })],\n});\n")),(0,o.kt)("h3",{id:"log-levels"},"Log levels"),(0,o.kt)("p",null,"There are 5 distinct logging levels outside the standard level, each represented as a unique\nfunction on the logger instance. The levels in order of ",(0,o.kt)("strong",{parentName:"p"},"priority")," are ",(0,o.kt)("inlineCode",{parentName:"p"},"trace"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"info"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"warn"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),". Each function requires a message as the 1st argument, and an optional rest of\narguments to interpolate into the message."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"log.trace('Code path hit?');\nlog.debug('What is going on here?');\nlog.info('Systems are stable');\nlog.warn('Something is definitely going on\u2026');\nlog.error('Systems are down! %s', error.message);\n")),(0,o.kt)("h3",{id:"silencing-output"},"Silencing output"),(0,o.kt)("p",null,"By default, all logged messages are immediately written to the configured transports. To silence\noutput and disable writes, call the ",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/LoggerFunction#disable"},(0,o.kt)("inlineCode",{parentName:"a"},"logger.disable()")),"\nfunction, and to re-enable, call ",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/LoggerFunction#enable"},(0,o.kt)("inlineCode",{parentName:"a"},"logger.enable()")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"log.disable();\n\n// Will not write!\nlog.debug('Something is broken!');\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Messages that are logged while silenced are ",(0,o.kt)("em",{parentName:"p"},"lost")," and are ",(0,o.kt)("em",{parentName:"p"},"not")," buffered.")),(0,o.kt)("h2",{id:"formats"},"Formats"),(0,o.kt)("p",null,"All logs are represented as an object, known as a ",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/LogItem"},(0,o.kt)("inlineCode",{parentName:"a"},"LogItem")),". These\nitems contain metadata about the environment, the logger, and the current log message."),(0,o.kt)("p",null,"Before an item is written to a transport, it must be formatted from an object into a string. This\ncan be done on a per transport basis using the\n",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/TransportOptions#format"},(0,o.kt)("inlineCode",{parentName:"a"},"format"))," option, like so."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ConsoleTransport, formats } from '@boost/log';\n\nconst transport = new ConsoleTransport({\n    format: (item) => `${item.level} ${item.message}`,\n    // Or a pre-built format\n    format: formats.json,\n});\n")),(0,o.kt)("p",null,"Boost provides formats by default, all of which are pre-configured into each built-in transport.\nFeel free to use the ",(0,o.kt)("a",{parentName:"p",href:"/api/log/namespace/formats"},"built-in formats"),", or customize your own!"),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("p",null,"Sometimes additional metadata may be required that is not found within the pre-defined log item\nfields. Metadata can be defined on the logger using an object, which is then passed to all log\nitems."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const log = createLogger({\n    name: 'boost',\n    metadata: {\n        locale: 'en',\n        region: 'eu',\n    },\n});\n")),(0,o.kt)("p",null,"It can also be defined per log by passing an object as the 1st argument. Metadata defined at this\nlevel will override the logger metadata."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"log({ locale: 'de' }, \"What's going on?\");\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Fields ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"host"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"pid")," are reserved names and cannot be used.")),(0,o.kt)("h2",{id:"transport-types"},"Transport types"),(0,o.kt)("p",null,"There are multiple types of transports that can be used within a logger, all of which support a\n",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/TransportOptions"},(0,o.kt)("inlineCode",{parentName:"a"},"TransportOptions"))," object. Some transports support additional\noptions, so please refer to their types."),(0,o.kt)("h3",{id:"consoletransport"},"ConsoleTransport"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/api/log/class/ConsoleTransport"},(0,o.kt)("inlineCode",{parentName:"a"},"ConsoleTransport"))," logs messages to the native ",(0,o.kt)("inlineCode",{parentName:"p"},"console")," and\nits corresponding level. This is the default transport when no transports are defined."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ConsoleTransport } from '@boost/log';\n\nconst transport = new ConsoleTransport();\n")),(0,o.kt)("h3",{id:"streamtransport"},"StreamTransport"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/api/log/class/StreamTransport"},(0,o.kt)("inlineCode",{parentName:"a"},"StreamTransport"))," logs messages to any writeable stream or an\nobject that defines a ",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/Writable"},(0,o.kt)("inlineCode",{parentName:"a"},"write()"))," method. Additional\n",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/StreamTransportOptions"},(0,o.kt)("inlineCode",{parentName:"a"},"StreamTransportOptions"))," options may be provided."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { StreamTransport } from '@boost/log';\n\nconst transport = new StreamTransport({\n    levels: ['error', 'warn'],\n    stream: process.stderr,\n});\n")),(0,o.kt)("h3",{id:"filetransport"},"FileTransport"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/api/log/class/FileTransport"},(0,o.kt)("inlineCode",{parentName:"a"},"FileTransport"))," appends and logs messages to a file at the\ndefined path. Will automatically rotate files when a max file size is met. Additional\n",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/FileTransportOptions"},(0,o.kt)("inlineCode",{parentName:"a"},"FileTransportOptions"))," options may be provided."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { FileTransport } from '@boost/log';\n\nconst transport = new FileTransport({\n    levels: ['error'],\n    path: '/var/log/error.log',\n});\n")),(0,o.kt)("h3",{id:"rotatingfiletransport"},"RotatingFileTransport"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/api/log/class/RotatingFileTransport"},(0,o.kt)("inlineCode",{parentName:"a"},"RotatingFileTransport"))," is like\n",(0,o.kt)("a",{parentName:"p",href:"/api/log/class/FileTransport"},(0,o.kt)("inlineCode",{parentName:"a"},"FileTransport")),", but also rotates files based on timestamps and a\nchosen periodic interval. Additional\n",(0,o.kt)("a",{parentName:"p",href:"/api/log/interface/RotatingFileTransportOptions"},(0,o.kt)("inlineCode",{parentName:"a"},"RotatingFileTransportOptions"))," options may be\nprovided."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { RotatingFileTransport } from '@boost/log';\n\nconst transport = new RotatingFileTransport({\n    levels: ['error'],\n    path: '/var/log/error.log',\n    rotation: 'daily',\n});\n")),(0,o.kt)("h2",{id:"test-utilities"},"Test utilities"),(0,o.kt)("p",null,"A handful of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest"},"Jest")," utilities are available in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"@boost/log/test")," module. ",(0,o.kt)("a",{parentName:"p",href:"/api/log-test"},"View the API for a full list"),"."))}f.isMDXComponent=!0}}]);