"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[772],{1312:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>d,toc:()=>u});var i=o(1948),s=o(3460),r=o(302),t=o(240),l=o(2548);const a={title:"Configuration"},c=void 0,d={id:"config",title:"Configuration",description:"Powerful convention based finder, loader, and manager of both configuration and ignore files. Will",source:"@site/docs/config.mdx",sourceDirName:".",slug:"/config",permalink:"/docs/config",draft:!1,unlisted:!1,editUrl:"https://github.com/milesj/boost/edit/master/website/docs/config.mdx",tags:[],version:"current",frontMatter:{title:"Configuration"},sidebar:"docs",previous:{title:"Common utilities",permalink:"/docs/common"},next:{title:"Crash reporting",permalink:"/docs/crash"}},h={},u=[{value:"Installation",id:"installation",level:2},{value:"Setup",id:"setup",level:2},{value:"Finder options",id:"finder-options",level:3},{value:"Processor options",id:"processor-options",level:3},{value:"Processing settings",id:"processing-settings",level:3},{value:"Config files",id:"config-files",level:2},{value:"File patterns",id:"file-patterns",level:3},{value:"File formats",id:"file-formats",level:3},{value:"Loading config files",id:"loading-config-files",level:3},{value:"Lookup resolution",id:"lookup-resolution",level:4},{value:"From root",id:"from-root",level:4},{value:"From branch",id:"from-branch",level:4},{value:"Enable extending",id:"enable-extending",level:3},{value:"Presets",id:"presets",level:4},{value:"Enable overrides",id:"enable-overrides",level:3},{value:"Ignore files",id:"ignore-files",level:2},{value:"File patterns",id:"file-patterns-1",level:3},{value:"Loading ignore files",id:"loading-ignore-files",level:3},{value:"From root",id:"from-root-1",level:4},{value:"From branch",id:"from-branch-1",level:4}];function f(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.c,{backend:!0,tooling:!0,api:"/api/config"}),"\n",(0,i.jsx)(n.p,{children:"Powerful convention based finder, loader, and manager of both configuration and ignore files. Will\nfind config files of multiple supported formats while traversing up the tree."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(t.c,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"pnpm",value:"pnpm"},{label:"npm",value:"npm"}],children:[(0,i.jsx)(l.c,{value:"yarn",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add @boost/config\n"})})}),(0,i.jsx)(l.c,{value:"pnpm",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm add @boost/config\n"})})}),(0,i.jsx)(l.c,{value:"npm",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @boost/config\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.p,{children:"Configuration in the context of this package encompasses 2 concepts: config files and ignore files.\nConfig files are a collection of settings (key-value pairs), while ignore files are a list of file\npath patterns and globs."}),"\n",(0,i.jsxs)(n.p,{children:["To utilize this functionality, we must extend the ",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration",children:(0,i.jsx)(n.code,{children:"Configuration"})})," class, and define\na blueprint for the structure of our config file (using ",(0,i.jsx)(n.a,{href:"/docs/common#class-contracts",children:"optimal"}),").\nThis class will fulfill multiple roles: managing, finding, loading, and processing of files."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { Blueprint, Schemas } from '@boost/common';\nimport { Configuration } from '@boost/config';\n\n// Example structure\ninterface ConfigFile {\n  ast?: boolean;\n  cwd?: string;\n  debug?: boolean;\n  exclude?: string[];\n  include?: string[];\n  options?: object;\n}\n\nclass Manager extends Configuration<ConfigFile> {\n  blueprint({ array, bool, string, object }: Schemas): Blueprint<ConfigFile> {\n    return {\n      ast: bool(),\n      cwd: string(process.cwd()),\n      debug: bool(),\n      exclude: array().of(string()),\n      include: array().of(string()),\n      options: object(),\n    };\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'This class layer is designed to be "internal only", and should not be utilized by consumers\ndirectly. Instead, consumers should interact with an instance of the class, like so.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export default new Manager('boost');\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["The string value passed to the constructor is the name of the config and ignore files, in camel\ncase format. For example, ",(0,i.jsx)(n.code,{children:"boost.js"})," and ",(0,i.jsx)(n.code,{children:".boostignore"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"finder-options",children:"Finder options"}),"\n",(0,i.jsxs)(n.p,{children:["To customize the config file finding and loading layer, call\n",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#configureFinder",children:(0,i.jsx)(n.code,{children:"Configuration#configureFinder()"})})," within\n",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#bootstrap",children:(0,i.jsx)(n.code,{children:"#bootstrap()"})}),". This method supports all options in\n",(0,i.jsx)(n.a,{href:"/api/config/interface/ConfigFinderOptions",children:(0,i.jsx)(n.code,{children:"ConfigFinderOptions"})})," except for ",(0,i.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    this.configureFinder({\n      extendsSetting: 'extends',\n      includeEnv: false,\n    });\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"processor-options",children:"Processor options"}),"\n",(0,i.jsxs)(n.p,{children:["To customize the config processing layer, call\n",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#configureProcessor",children:(0,i.jsx)(n.code,{children:"Configuration#configureProcessor()"})})," while\nwithin ",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#bootstrap",children:(0,i.jsx)(n.code,{children:"#bootstrap()"})}),". This method supports all options\nin ",(0,i.jsx)(n.a,{href:"/api/config/interface/ProcessorOptions",children:(0,i.jsx)(n.code,{children:"ProcessorOptions"})})," except for ",(0,i.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    this.configureProcessor({\n      defaultWhenUndefined: false,\n    });\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"processing-settings",children:"Processing settings"}),"\n",(0,i.jsx)(n.p,{children:"When multiple config files are merged into a single config file, this is known as processing.\nProcessing happens automatically for each setting as we need to determine what the next setting\nvalue would be. By default, the following rules apply when the next and previous setting values are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Arrays"}),": will be merged and deduped into a new array."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Objects"}),": will be shallow merged (using spread) into a new object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Primitives"}),": next value will overwrite the previous value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Undefined"}),": will reset to initial value if\n",(0,i.jsx)(n.a,{href:"/api/config/interface/ProcessorOptions#defaultWhenUndefined",children:(0,i.jsx)(n.code,{children:"defaultWhenUndefined"})})," is true."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If you would like to customize this process, you can define custom process handlers per setting with\n",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#addProcessHandler",children:(0,i.jsx)(n.code,{children:"Configuration#addProcessHandler()"})}),". This\nmethod requires a setting name and handler function (which is passed the previous and next values)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    // Always use forward slashes\n    this.addProcessHandler('cwd', (prev, next) => next.replace(/\\\\/g, '/'));\n\n    // Deep merge options since they're dynamic\n    this.addProcessHandler('options', (prev, next) => deepMerge(prev, next));\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Handlers may only be defined on root-level settings."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To make this process even easier, we provide a handful of pre-defined handlers (below) that can be\nused for common scenarios (these handlers power the default rules mentioned above)."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/api/config/function/mergeArray",children:(0,i.jsx)(n.code,{children:"mergeArray"})})," - Merges previous and next arrays into a new array\nwhile removing duplicates (using ",(0,i.jsx)(n.code,{children:"Set"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/api/config/function/mergeExtends",children:(0,i.jsx)(n.code,{children:"mergeExtends"})})," - Merges previous and next file paths (either\na string or array of strings) into a new list of file paths. This is useful if utilizing\n",(0,i.jsx)(n.a,{href:"#enable-extending",children:"config extending"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/api/config/function/mergeObject",children:(0,i.jsx)(n.code,{children:"mergeObject"})})," - Shallow merges previous and next objects into\na new object using object spread."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/api/config/function/mergePlugins",children:(0,i.jsx)(n.code,{children:"mergePlugins"})})," - Merges previous and next plugin\nconfigurations into an object. Plugin configs can either be a list of sources, or list of sources\nwith flags/options (tuples), or a map of sources to flags/options. This is useful if utilizing the\n",(0,i.jsx)(n.a,{href:"/docs/plugin#configuration-files",children:"plugin package"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/api/config/function/overwrite",children:(0,i.jsx)(n.code,{children:"overwrite"})})," - Overwrite the previous value with the next value."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { mergePlugins } from '@boost/config';\n\nclass Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    // Using example from @boost/plugin documentation\n    this.addProcessHandler('renderers', mergePlugins);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"config-files",children:"Config files"}),"\n",(0,i.jsx)(n.p,{children:"A config file is a file that explicitly defines settings (key-value pairs) according to a defined\nstructure."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Configuration files are designed to be serializable, so please use primitive, object, and array\nvalues only. Try to avoid non-serializable values like class instances."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"file-patterns",children:"File patterns"}),"\n",(0,i.jsxs)(n.p,{children:["Config files are grouped into either the root or branch category. The root of a project is denoted\nby a root ",(0,i.jsx)(n.code,{children:"*.config.*"})," file, or a folder with the name ",(0,i.jsx)(n.code,{children:".config"}),", which contains config files.\nBranch config files are located within folders (at any depth) below the root, and are prefixed with\na leading dot (",(0,i.jsx)(n.code,{children:"."}),")."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Root"}),(0,i.jsx)(n.th,{children:"Branch"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:".config/<name>.<ext>"}),", ",(0,i.jsx)(n.code,{children:"<name>.config.<ext>"})]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".<name>.<ext>"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:".config/<name>.<env>.<ext>"}),", ",(0,i.jsx)(n.code,{children:"<name>.config.<env>.<ext>"})]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".<name>.<env>.<ext>"})})]})]})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<name>"})," - Name passed to your ",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration",children:(0,i.jsx)(n.code,{children:"Configuration"})})," instance (in camel case)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<env>"})," - Current environment derived from ",(0,i.jsx)(n.code,{children:"NODE_ENV"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<ext>"})," - File extension supported by the defined ",(0,i.jsx)(n.a,{href:"#finder-options",children:"loaders and extensions"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"file-formats",children:"File formats"}),"\n",(0,i.jsxs)(n.p,{children:["Config files can be written in the formats below, and are listed in the order in which they're\nresolved (can customize with the ",(0,i.jsx)(n.a,{href:"#finder-options",children:(0,i.jsx)(n.code,{children:"extensions"})})," option)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".js"})," - JavaScript. Will load with ",(0,i.jsx)(n.a,{href:"https://nodejs.org/api/esm.html#esm_enabling",children:"CommonJS or ECMAScript modules"})," depending on the\n",(0,i.jsx)(n.code,{children:"package.json"})," ",(0,i.jsx)(n.code,{children:"type"})," field. Defaults to CommonJS if not defined."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".json"}),", ",(0,i.jsx)(n.code,{children:".json5"})," - JSON. Supports ",(0,i.jsx)(n.a,{href:"https://json5.org/",children:"JSON5"})," for both extensions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".cjs"})," - JavaScript using ",(0,i.jsx)(n.a,{href:"https://nodejs.org/api/esm.html#esm_enabling",children:"CommonJS"})," (",(0,i.jsx)(n.code,{children:"require()"}),"). ",(0,i.jsx)(n.em,{children:"Supported by all Node.js versions."})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".mjs"})," - JavaScript using ",(0,i.jsx)(n.a,{href:"https://nodejs.org/api/esm.html#esm_enabling",children:"ECMAScript modules"})," (",(0,i.jsx)(n.code,{children:"import"}),"/",(0,i.jsx)(n.code,{children:"export"}),"). ",(0,i.jsx)(n.em,{children:"Requires Node.js\nv13.3+."})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".ts"})," - TypeScript. ",(0,i.jsxs)(n.em,{children:["Requires the ",(0,i.jsx)(n.code,{children:"typescript"})," package."]})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".yaml"}),", ",(0,i.jsx)(n.code,{children:".yml"})," - YAML. ",(0,i.jsx)(n.em,{children:"Does not support multi-document."})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Based on the file structure in the ",(0,i.jsx)(n.a,{href:"#setup",children:"Setup"})," section above, the config files can be\ndemonstrated as followed (excluding standard JavaScript since it's either CJS or MJS)."]}),"\n",(0,i.jsxs)(t.c,{groupId:"file-format",defaultValue:"cjs",values:[{label:"JavaScript (CJS)",value:"cjs"},{label:"JavaScript (MJS)",value:"mjs"},{label:"TypeScript",value:"ts"},{label:"JSON",value:"json"},{label:"YAML",value:"yaml"}],children:[(0,i.jsx)(l.c,{value:"cjs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  ast: false,\n  debug: true,\n  exclude: ['**/node_modules/**'],\n  include: ['src/**', 'tests/**'],\n  options: { experimental: true },\n};\n"})})}),(0,i.jsx)(l.c,{value:"mjs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"export default {\n  ast: false,\n  debug: true,\n  exclude: ['**/node_modules/**'],\n  include: ['src/**', 'tests/**'],\n  options: { experimental: true },\n};\n"})})}),(0,i.jsx)(l.c,{value:"ts",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import type { ConfigFile } from './types';\n\nconst config: ConfigFile = {\n  ast: false,\n  debug: true,\n  exclude: ['**/node_modules/**'],\n  include: ['src/**', 'tests/**'],\n  options: { experimental: true },\n};\n\nexport default config;\n"})})}),(0,i.jsx)(l.c,{value:"json",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "ast": false,\n  "debug": true,\n  "exclude": ["**/node_modules/**"],\n  "include": ["src/**", "tests/**"],\n  "options": { "experimental": true }\n}\n'})})}),(0,i.jsx)(l.c,{value:"yaml",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"ast: false\ndebug: true\nexclude:\n  - '**/node_modules/**'\ninclude:\n  - 'src/**'\n  - 'tests/**'\noptions:\n  experimental: true\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"loading-config-files",children:"Loading config files"}),"\n",(0,i.jsxs)(n.p,{children:["Config files can be found and loaded with either the\n",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#loadConfigFromRoot",children:(0,i.jsx)(n.code,{children:"Configuration#loadConfigFromRoot()"})})," or\n",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#loadConfigFromBranchToRoot",children:(0,i.jsx)(n.code,{children:"Configuration#loadConfigFromBranchToRoot()"})})," methods -- both of which\nreturn a processed config object that abides the\n",(0,i.jsx)(n.a,{href:"/api/config/interface/ProcessedConfig",children:(0,i.jsx)(n.code,{children:"ProcessedConfig"})})," type."]}),"\n",(0,i.jsx)(n.h4,{id:"lookup-resolution",children:"Lookup resolution"}),"\n",(0,i.jsx)(n.p,{children:"When the finder traverses through the file system and attempts to resolve config files within\neach/target folder, it does so using the lookup algorithm demonstrated below. Let's assume the\nfollowing:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The config file name is ",(0,i.jsx)(n.code,{children:"boost"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"All file formats are supported, in their default lookup order (js, json, cjs, mjs, ts, json5,\nyaml, yml)."}),"\n",(0,i.jsxs)(n.li,{children:["The current environment is ",(0,i.jsx)(n.code,{children:"development"})," (the value of ",(0,i.jsx)(n.code,{children:"NODE_ENV"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"boost.js\nboost.development.js\nboost.json\nboost.development.json\nboost.cjs\nboost.development.cjs\nboost.mjs\nboost.development.mjs\nboost.ts\nboost.development.ts\nboost.json5\nboost.development.json5\nboost.yaml\nboost.development.yaml\nboost.yml\nboost.development.yml\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For each file format, we attempt to find the base config file, and an environment config file (if\n",(0,i.jsx)(n.a,{href:"#finder-options",children:(0,i.jsx)(n.code,{children:"includeEnv"})})," is true). This allows for higher precendence config per environment.\nOnce a file is found, the lookup process is aborted, and the confg is returned."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Only 1 file format will be used per folder. Multiple file formats is not supported."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"from-root",children:"From root"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#loadConfigFromRoot",children:(0,i.jsx)(n.code,{children:"Configuration#loadConfigFromRoot()"})})," will load the config file found in\nthe root, either a ",(0,i.jsx)(n.code,{children:"*.config.*"})," or ",(0,i.jsx)(n.code,{children:".config/*.*"})," file. If no root path is provided, it defaults to\n",(0,i.jsx)(n.code,{children:"process.cwd()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="root/.config/boost.json"',children:'{\n  "debug": true\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const { config } = await manager.loadConfigFromRoot('/root');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"{\n  config: { debug: true },\n  files: [\n    {\n      config: { debug: true },\n      path: new Path('/root/.config/boost.json'),\n      source: 'root',\n    },\n  ],\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"from-branch",children:"From branch"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#loadConfigFromBranchToRoot",children:(0,i.jsx)(n.code,{children:"Configuration#loadConfigFromBranchToRoot()"})})," method will load a\nconfig file from each folder while traversing upwards from the branch folder to the root folder. The\nfound list is returned in reverse order so that the deepest branch can be used to overwrite the\nprevious branch (or root)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="root/modules/features/.boost.mjs"',children:"export default {\n  ast: true,\n};\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="root/modules/.boost.yaml"',children:"options:\n  experimental: true\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="root/.config/boost.json"',children:'{\n  "debug": true\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const { config } = await manager.loadConfigFromBranchToRoot('/root/modules/features');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"{\n\tconfig: {\n\t\tast: true,\n\t\tdebug: true,\n\t\toptions: {\n\t\t\texperimental: true,\n\t\t},\n\t},\n\tfiles: [\n\t\t{\n\t\t\tconfig: { debug: true },\n\t\t\tpath: new Path('/root/.config/boost.json'),\n\t\t\tsource: 'root',\n\t\t},\n\t\t{\n\t\t\tconfig: {\n\t\t\t\toptions: {\n\t\t\t\t\texperimental: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\tpath: new Path('/root/modules/.boost.yaml'),\n\t\t\tsource: 'branch',\n\t\t},\n\t\t{\n\t\t\tconfig: { ast: true },\n\t\t\tpath: new Path('/root/modules/features/.boost.mjs'),\n\t\t\tsource: 'branch',\n\t\t},\n\t],\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"enable-extending",children:"Enable extending"}),"\n",(0,i.jsxs)(n.p,{children:["Config extending enables consumers of your project to extend and merge with external config files\nusing file system paths or ",(0,i.jsx)(n.a,{href:"#presets",children:"Node.js modules"}),", with the current config file taking\nprecedence. With that being said, extending is ",(0,i.jsx)(n.em,{children:"not"})," enabled by default and must be configured for\nuse. To enable, define the ",(0,i.jsx)(n.a,{href:"#finder-options",children:(0,i.jsx)(n.code,{children:"extendsSetting"})})," option with the name of a setting in\nwhich extending would be configured."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    this.configureFinder({\n      extendsSetting: 'extend',\n    });\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Consumers may now extend external config files by defining a string or an array of strings for\n",(0,i.jsx)(n.code,{children:"extend"})," (name derived from the example above)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export default {\n  extend: ['./some/relative/path.js', 'npm-module'],\n  debug: false,\n};\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"File paths are relative to the file it's configured in."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"presets",children:"Presets"}),"\n",(0,i.jsxs)(n.p,{children:["To extend from a Node.js module, we must use a preset. A preset is a\n",(0,i.jsx)(n.a,{href:"#file-formats",children:"JavaScript config file"})," located in the module root, named in the format of\n",(0,i.jsx)(n.code,{children:"<name>.preset.js"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="npm-module/boost.preset.js"',children:"module.exports = {\n  exclude: ['**/node_modules'],\n};\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Since the preset is JavaScript, it can be written in either CommonJS or ECMAScript format,\nassuming the ",(0,i.jsx)(n.code,{children:"type"})," field has been set in ",(0,i.jsx)(n.code,{children:"package.json"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"enable-overrides",children:"Enable overrides"}),"\n",(0,i.jsxs)(n.p,{children:["Config overrides enables consumers of your project to define granular settings based on file path\nmatching; settings defined in this fashion would override their base settings. With that being said,\noverrides are ",(0,i.jsx)(n.em,{children:"not"})," enabled by default and must be configured for use. To enable, define the\n",(0,i.jsx)(n.a,{href:"#finder-options",children:(0,i.jsx)(n.code,{children:"overridesSetting"})})," option with the name of a setting in which overrides would be\nconfigured."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    this.configureFinder({\n      overridesSetting: 'override',\n    });\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Overrides are extracted ",(0,i.jsx)(n.em,{children:"before"})," configurations are processed, so a process handler is not\nrequired."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Consumers may now define overrides in their config file by passing a list of items to the ",(0,i.jsx)(n.code,{children:"override"}),"\nsetting (name derived from the example above). Each item must abide the\n",(0,i.jsx)(n.a,{href:"/api/config/interface/OverridesSettingItem",children:(0,i.jsx)(n.code,{children:"OverridesSettingItem"})})," type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export default {\n  debug: false,\n  override: [\n    {\n      include: '*.test.ts',\n      settings: {\n        debug: true,\n      },\n    },\n  ],\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ignore-files",children:"Ignore files"}),"\n",(0,i.jsx)(n.p,{children:"An ignore file is a standard text file that denotes files and folders to ignore\n(filter/exclude/etc), within the current directory, using matching globs and patterns."}),"\n",(0,i.jsx)(n.h3,{id:"file-patterns-1",children:"File patterns"}),"\n",(0,i.jsxs)(n.p,{children:["Both root and branch level ignore files use the same file naming scheme. The file is prefixed with a\nleading dot (",(0,i.jsx)(n.code,{children:"."}),"), followed by the name passed to your ",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration",children:(0,i.jsx)(n.code,{children:"Configuration"})})," instance (in\ncamel case), and suffixed with ",(0,i.jsx)(n.code,{children:"ignore"}),"."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Root"}),(0,i.jsx)(n.th,{children:"Branch"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".<name>ignore"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".<name>ignore"})})]})})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["The root ignore file is not located within the ",(0,i.jsx)(n.code,{children:".config"})," folder as ignore paths/patterns/globs\nmust be relative to the current directory."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"loading-ignore-files",children:"Loading ignore files"}),"\n",(0,i.jsxs)(n.p,{children:["Ignore files can be found and loaded with either the\n",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#loadIgnoreFromRoot",children:(0,i.jsx)(n.code,{children:"Configuration#loadIgnoreFromRoot()"})})," or\n",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#loadIgnoreFromBranchToRoot",children:(0,i.jsx)(n.code,{children:"Configuration#loadIgnoreFromBranchToRoot()"})})," methods -- both of which\nreturn a list of ignore metadata that abide the ",(0,i.jsx)(n.a,{href:"/api/config/interface/IgnoreFile",children:(0,i.jsx)(n.code,{children:"IgnoreFile"})}),"\ntype."]}),"\n",(0,i.jsx)(n.p,{children:"To demonstrate this, let's assume the following file system."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"root/\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 features/\n\u2502   \u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u2502   \u2514\u2500\u2500 .boostignore\n\u2502   \u251c\u2500\u2500 foo.ts\n\u2502   \u251c\u2500\u2500 bar.ts\n\u2502   \u2514\u2500\u2500 baz.ts\n\u2514\u2500\u2500 .boostignore\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="root/modules/features/.boostignore"',children:"build/\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="root/.boostignore"',children:"*.log\n*.lock\n"})}),"\n",(0,i.jsx)(n.h4,{id:"from-root-1",children:"From root"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#loadIgnoreFromRoot",children:(0,i.jsx)(n.code,{children:"Configuration#loadIgnoreFromRoot()"})})," will load the ignore file found in\nthe root folder (typically 1 file). If no root path is provided, it defaults to ",(0,i.jsx)(n.code,{children:"process.cwd()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const list = await manager.loadIgnoreFromRoot('/root');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"[\n  {\n    ignore: ['*.log', '*.lock'],\n    path: new Path('/root/.boostignore'),\n    source: 'root',\n  },\n];\n"})}),"\n",(0,i.jsx)(n.h4,{id:"from-branch-1",children:"From branch"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/api/config/class/Configuration#loadIgnoreFromBranchToRoot",children:(0,i.jsx)(n.code,{children:"Configuration#loadIgnoreFromBranchToRoot()"})})," method will load an\nignore file from each folder while traversing upwards from the branch folder to the root folder. The\nfound list is returned in reverse order so that the deepest branch can be used to overwrite the\nprevious branch (or root)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const list = await manager.loadIgnoreFromBranchToRoot('/root/modules/features');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"[\n  {\n    ignore: ['*.log', '*.lock'],\n    path: new Path('/root'),\n    source: 'root',\n  },\n  {\n    ignore: ['build/'],\n    path: new Path('/root/modules/features/.boostignore'),\n    source: 'branch',\n  },\n];\n"})})]})}function g(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},2548:(e,n,o)=>{o.d(n,{c:()=>t});o(6952);var i=o(8112);const s={tabItem:"tabItem_wHwb"};var r=o(1948);function t(e){let{children:n,hidden:o,className:t}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.c)(s.tabItem,t),hidden:o,children:n})}},240:(e,n,o)=>{o.d(n,{c:()=>f});var i=o(6952),s=o(8112),r=o(320),t=o(500),l=o(6576);const a={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var c=o(1948);function d(e){let{className:n,block:o,selectedValue:i,selectValue:t,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:h}=(0,r.MV)(),u=e=>{const n=e.currentTarget,o=d.indexOf(n),s=l[o].value;s!==i&&(h(n),t(s))},f=e=>{var n;let o=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{var i;const n=d.indexOf(e.currentTarget)+1;o=null!=(i=d[n])?i:d[0];break}case"ArrowLeft":{var s;const n=d.indexOf(e.currentTarget)-1;o=null!=(s=d[n])?s:d[d.length-1];break}}null==(n=o)||n.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.c)("tabs",{"tabs--block":o},n),children:l.map((e=>{let{value:n,label:o,attributes:r}=e;return(0,c.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>d.push(e),onKeyDown:f,onClick:u,...r,className:(0,s.c)("tabs__item",a.tabItem,null==r?void 0:r.className,{"tabs__item--active":i===n}),children:null!=o?o:n},n)}))})}function h(e){let{lazy:n,children:o,selectedValue:s}=e;const r=(Array.isArray(o)?o:[o]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function u(e){const n=(0,t.a)(e);return(0,c.jsxs)("div",{className:(0,s.c)("tabs-container",a.tabList),children:[(0,c.jsx)(d,{...e,...n}),(0,c.jsx)(h,{...e,...n})]})}function f(e){const n=(0,l.c)();return(0,c.jsx)(u,{...e,children:(0,t.A)(e.children)},String(n))}},500:(e,n,o)=>{o.d(n,{A:()=>c,a:()=>f});var i=o(6952),s=o(7976),r=o(2508),t=o(440),l=o(2484),a=o(900);function c(e){var n,o;return null!=(n=null==(o=i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:o.filter(Boolean))?n:[]}function d(e){const{values:n,children:o}=e;return(0,i.useMemo)((()=>{const e=null!=n?n:function(e){return c(e).map((e=>{let{props:{value:n,label:o,attributes:i,default:s}}=e;return{value:n,label:o,attributes:i,default:s}}))}(o);return function(e){const n=(0,l.w)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,o])}function h(e){let{value:n,tabValues:o}=e;return o.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:o}=e;const r=(0,s.Uz)(),l=function(e){let{queryString:n=!1,groupId:o}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!o)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=o?o:null}({queryString:n,groupId:o});return[(0,t._M)(l),(0,i.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(r.location.search);n.set(l,e),r.replace({...r.location,search:n.toString()})}),[l,r])]}function f(e){const{defaultValue:n,queryString:o=!1,groupId:s}=e,t=d(e),[l,c]=(0,i.useState)((()=>function(e){var n;let{defaultValue:o,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(o){if(!h({value:o,tabValues:i}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+o+'" but none of its children has the corresponding value. Available values are: '+i.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return o}const s=null!=(n=i.find((e=>e.default)))?n:i[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:t}))),[f,g]=u({queryString:o,groupId:s}),[p,x]=function(e){let{groupId:n}=e;const o=function(e){return e?"docusaurus.tab."+e:null}(n),[s,r]=(0,a.IN)(o);return[s,(0,i.useCallback)((e=>{o&&r.set(e)}),[o,r])]}({groupId:s}),j=(()=>{const e=null!=f?f:p;return h({value:e,tabValues:t})?e:null})();(0,r.c)((()=>{j&&c(j)}),[j]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:t}))throw new Error("Can't select invalid tab value="+e);c(e),g(e),x(e)}),[g,x,t]),tabValues:t}}},5392:(e,n,o)=>{o.d(n,{c:()=>s});var i=o(1948);function s(e){let{children:n,type:o}=e;return(0,i.jsx)("span",{className:"badge badge--"+o,children:n})}},302:(e,n,o)=>{o.d(n,{c:()=>c});var i=o(4308),s=o(3752),r=o(5392);const t={badgeGroup:"badgeGroup_syf7",apiLink:"apiLink_JWAN"};var l=o(1948);function a(e){let{children:n}=e;return(0,l.jsx)("span",{className:t.badgeGroup,children:n})}function c(e){let{api:n,backend:o,frontend:c,tooling:d}=e;return(0,l.jsxs)(l.Fragment,{children:[n&&(0,l.jsxs)(i.default,{className:t.apiLink,to:n,children:["API ",(0,l.jsx)(s.c,{})]}),(0,l.jsxs)(a,{children:[o&&(0,l.jsx)(r.c,{type:"warning",children:"Backend"}),c&&(0,l.jsx)(r.c,{type:"success",children:"Frontend"}),d&&(0,l.jsx)(r.c,{type:"primary",children:"Tooling"})]})]})}},3460:(e,n,o)=>{o.d(n,{I:()=>l,M:()=>t});var i=o(6952);const s={},r=i.createContext(s);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);