"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7002],{3210:function(e){e.exports=JSON.parse('[{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":1,"name":"@boost/args","kind":2,"kindString":"Module","flags":{},"children":[{"id":144,"name":"ParseError","kind":128,"kindString":"Class","flags":{},"children":[{"id":145,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":6,"character":1}],"signatures":[{"id":146,"name":"new ParseError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":147,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":148,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":149,"name":"index","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":144,"name":"ParseError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":150,"name":"arg","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":151,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[145]},{"title":"Properties","kind":1024,"children":[150,151]}],"sources":[{"fileName":"packages/args/src/ParseError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/args/class/ParseError","nextId":322},{"id":322,"name":"ValidationError","kind":128,"kindString":"Class","flags":{},"children":[{"id":323,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":6,"character":1}],"signatures":[{"id":324,"name":"new ValidationError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":325,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":326,"name":"option","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"}],"type":{"type":"reference","id":322,"name":"ValidationError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":327,"name":"option","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Constructors","kind":512,"children":[323]},{"title":"Properties","kind":1024,"children":[327]}],"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":3,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/args/class/ValidationError","previousId":144,"nextId":134},{"id":222,"name":"Arg","kind":256,"kindString":"Interface","flags":{},"children":[{"id":223,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","id":234,"name":"T"}},{"id":231,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":211,"name":"Config.deprecated"}},{"id":232,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":212,"name":"Config.description"}},{"id":233,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":213,"name":"Config.hidden"}},{"id":227,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":220,"typeArguments":[{"type":"reference","id":234,"name":"T"}],"name":"InferArgType"}},{"id":224,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":225,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":226,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"reference","id":234,"name":"T"}}]},{"id":228,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":229,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":230,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[223,231,232,233,227]},{"title":"Methods","kind":2048,"children":[224,228]}],"sources":[{"fileName":"packages/args/src/types.ts","line":150,"character":17}],"typeParameter":[{"id":234,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":210,"name":"Config"}],"extendedBy":[{"type":"reference","id":235,"name":"Option"},{"type":"reference","id":292,"name":"Param"}],"permalink":"/api/args/interface/Arg","previousId":152,"nextId":188},{"id":188,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":189,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":92,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":190,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":94,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":191,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/src/types.ts","line":96,"character":1}],"type":{"type":"reference","id":195,"name":"O"}},{"id":192,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":98,"character":1}],"type":{"type":"reference","id":172,"typeArguments":[{"type":"reference","id":196,"name":"P"}],"name":"MapParamType"}},{"id":193,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":100,"character":1}],"type":{"type":"reference","id":160,"name":"ArgList"}},{"id":194,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/src/types.ts","line":102,"character":1}],"type":{"type":"reference","id":166,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[189,190,191,192,193,194]}],"sources":[{"fileName":"packages/args/src/types.ts","line":90,"character":17}],"typeParameter":[{"id":195,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":196,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":163,"name":"PrimitiveType"}},"default":{"type":"reference","id":160,"name":"ArgList"}}],"permalink":"/api/args/interface/Arguments","previousId":222,"nextId":307},{"id":307,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":308,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":205,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":309,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":206,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[308,309]}],"sources":[{"fileName":"packages/args/src/types.ts","line":204,"character":17}],"permalink":"/api/args/interface/Category","previousId":188,"nextId":214},{"id":214,"name":"Command","kind":256,"kindString":"Interface","flags":{},"children":[{"id":215,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/src/types.ts","line":137,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":217,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":211,"name":"Config.deprecated"}},{"id":218,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":212,"name":"Config.description"}},{"id":219,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":213,"name":"Config.hidden"}},{"id":216,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/src/types.ts","line":139,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[215,217,218,219,216]}],"sources":[{"fileName":"packages/args/src/types.ts","line":135,"character":17}],"extendedTypes":[{"type":"reference","id":210,"name":"Config"}],"permalink":"/api/args/interface/Command","previousId":307,"nextId":210},{"id":210,"name":"Config","kind":256,"kindString":"Interface","flags":{},"children":[{"id":211,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":212,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":213,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[211,212,213]}],"sources":[{"fileName":"packages/args/src/types.ts","line":126,"character":17}],"extendedBy":[{"type":"reference","id":214,"name":"Command"},{"type":"reference","id":222,"name":"Arg"}],"permalink":"/api/args/interface/Config","previousId":214,"nextId":284},{"id":284,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":286,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":285,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":193,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":289,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":290,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":291,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":287,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":321,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":288,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[286,285,289,290,291,287,288]}],"sources":[{"fileName":"packages/args/src/types.ts","line":192,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":235,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"name":"Omit"}],"permalink":"/api/args/interface/Flag","previousId":210,"nextId":267},{"id":267,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":268,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/src/types.ts","line":186,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":271,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":236,"name":"Option.category"}},{"id":269,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":187,"character":1}],"type":{"type":"reference","id":283,"name":"T"},"overwrites":{"type":"reference","id":238,"name":"Option.default"}},{"id":280,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":246,"name":"Option.deprecated"}},{"id":281,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":247,"name":"Option.description"}},{"id":282,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":248,"name":"Option.hidden"}},{"id":270,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/src/types.ts","line":189,"character":1}],"type":{"type":"literal","value":true}},{"id":272,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":321,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":237,"name":"Option.short"}},{"id":276,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":220,"typeArguments":[{"type":"reference","id":283,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":242,"name":"Option.type"}},{"id":273,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":274,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":275,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"reference","id":234,"name":"T"},"inheritedFrom":{"type":"reference","id":240,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":239,"name":"Option.format"}},{"id":277,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":278,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":279,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":244,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":243,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[268,271,269,280,281,282,270,272,276]},{"title":"Methods","kind":2048,"children":[273,277]}],"sources":[{"fileName":"packages/args/src/types.ts","line":184,"character":17}],"typeParameter":[{"id":283,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":161,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":235,"typeArguments":[{"type":"reference","id":283,"name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/MultipleOption","previousId":284,"nextId":235},{"id":235,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":236,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":238,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","id":249,"name":"T"},"inheritedFrom":{"type":"reference","id":223,"name":"Arg.default"}},{"id":246,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":231,"name":"Arg.deprecated"}},{"id":247,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":232,"name":"Arg.description"}},{"id":248,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":233,"name":"Arg.hidden"}},{"id":237,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":321,"name":"ShortOptionName"}},{"id":242,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":220,"typeArguments":[{"type":"reference","id":249,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":227,"name":"Arg.type"}},{"id":239,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":240,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":241,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"reference","id":234,"name":"T"},"inheritedFrom":{"type":"reference","id":225,"name":"Arg.format"}}],"inheritedFrom":{"type":"reference","id":224,"name":"Arg.format"}},{"id":243,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":244,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":245,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":229,"name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","id":228,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[236,238,246,247,248,237,242]},{"title":"Methods","kind":2048,"children":[239,243]}],"sources":[{"fileName":"packages/args/src/types.ts","line":169,"character":17}],"typeParameter":[{"id":249,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":164,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","id":222,"typeArguments":[{"type":"reference","id":249,"name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":250,"name":"SingleOption"},{"type":"reference","id":267,"name":"MultipleOption"}],"permalink":"/api/args/interface/Option","previousId":267,"nextId":292},{"id":292,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":295,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","id":306,"name":"T"},"inheritedFrom":{"type":"reference","id":223,"name":"Arg.default"}},{"id":303,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":231,"name":"Arg.deprecated"}},{"id":304,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":232,"name":"Arg.description"}},{"id":305,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":233,"name":"Arg.hidden"}},{"id":293,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/src/types.ts","line":198,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":294,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":201,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":299,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":220,"typeArguments":[{"type":"reference","id":306,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":227,"name":"Arg.type"}},{"id":296,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":297,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":298,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"reference","id":234,"name":"T"},"inheritedFrom":{"type":"reference","id":225,"name":"Arg.format"}}],"inheritedFrom":{"type":"reference","id":224,"name":"Arg.format"}},{"id":300,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":301,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":302,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":229,"name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","id":228,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[295,303,304,305,293,294,299]},{"title":"Methods","kind":2048,"children":[296,300]}],"sources":[{"fileName":"packages/args/src/types.ts","line":196,"character":17}],"typeParameter":[{"id":306,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":163,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","id":222,"typeArguments":[{"type":"reference","id":306,"name":"T"}],"name":"Arg"}],"permalink":"/api/args/interface/Param","previousId":235,"nextId":201},{"id":201,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":202,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":178,"name":"CommandChecker"}]}},{"id":205,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":198,"name":"ParserSettings.loose"}},{"id":203,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/src/types.ts","line":119,"character":1}],"type":{"type":"reference","id":176,"typeArguments":[{"type":"reference","id":208,"name":"O"}],"name":"MapOptionConfig"}},{"id":204,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":170,"typeArguments":[{"type":"reference","id":209,"name":"P"}],"name":"MapParamConfig"}},{"id":206,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":199,"name":"ParserSettings.unknown"}},{"id":207,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":200,"name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[202,205,203,204,206,207]}],"sources":[{"fileName":"packages/args/src/types.ts","line":114,"character":17}],"typeParameter":[{"id":208,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":209,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":163,"name":"PrimitiveType"}},"default":{"type":"reference","id":160,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","id":197,"name":"ParserSettings"}],"permalink":"/api/args/interface/ParserOptions","previousId":292,"nextId":197},{"id":197,"name":"ParserSettings","kind":256,"kindString":"Interface","flags":{},"children":[{"id":198,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":199,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":200,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[198,199,200]}],"sources":[{"fileName":"packages/args/src/types.ts","line":105,"character":17}],"extendedBy":[{"type":"reference","id":201,"name":"ParserOptions"}],"permalink":"/api/args/interface/ParserSettings","previousId":201,"nextId":250},{"id":250,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":254,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":236,"name":"Option.category"}},{"id":251,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/src/types.ts","line":178,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":266,"name":"T"}}},{"id":252,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/src/types.ts","line":180,"character":1}],"type":{"type":"conditional","checkType":{"type":"reference","id":266,"name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":253,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":181,"character":1}],"type":{"type":"reference","id":266,"name":"T"},"overwrites":{"type":"reference","id":238,"name":"Option.default"}},{"id":263,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":246,"name":"Option.deprecated"}},{"id":264,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":247,"name":"Option.description"}},{"id":265,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":248,"name":"Option.hidden"}},{"id":255,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":321,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":237,"name":"Option.short"}},{"id":259,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":220,"typeArguments":[{"type":"reference","id":266,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":242,"name":"Option.type"}},{"id":256,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":257,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":258,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"reference","id":234,"name":"T"},"inheritedFrom":{"type":"reference","id":240,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":239,"name":"Option.format"}},{"id":260,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":261,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":262,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":234,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":244,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":243,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[254,251,252,253,263,264,265,255,259]},{"title":"Methods","kind":2048,"children":[256,260]}],"sources":[{"fileName":"packages/args/src/types.ts","line":176,"character":17}],"typeParameter":[{"id":266,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":162,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":235,"typeArguments":[{"type":"reference","id":266,"name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/SingleOption","previousId":197,"nextId":167},{"id":167,"name":"AliasMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":19,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/args#AliasMap","previousId":250,"nextId":160},{"id":160,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":5,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#ArgList","previousId":167,"nextId":120},{"id":120,"name":"ArgsErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":35,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/args#ArgsErrorCode","previousId":160,"nextId":159},{"id":159,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#Argv","previousId":120,"nextId":178},{"id":178,"name":"CommandChecker","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":12}],"type":{"type":"reflection","declaration":{"id":179,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":29}],"signatures":[{"id":180,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":181,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"permalink":"/api/args#CommandChecker","previousId":159,"nextId":182},{"id":182,"name":"ContextFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":12}],"type":{"type":"reflection","declaration":{"id":183,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":29}],"signatures":[{"id":184,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":186,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":187,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":159,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":201,"typeArguments":[{"type":"reflection","declaration":{"id":185,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":72}]}}],"name":"ParserOptions"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/args#ContextFactory","previousId":178,"nextId":220},{"id":220,"name":"InferArgType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":144,"character":12}],"typeParameter":[{"id":221,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":221,"name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"literal","value":"boolean"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":221,"name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"intrinsic","name":"number"}]},"trueType":{"type":"literal","value":"number"},"falseType":{"type":"literal","value":"string"}}},"permalink":"/api/args#InferArgType","previousId":182,"nextId":174},{"id":174,"name":"InferOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type."},"sources":[{"fileName":"packages/args/src/types.ts","line":75,"character":12}],"typeParameter":[{"id":175,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":175,"name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"reference","id":284,"name":"Flag"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":175,"name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"trueType":{"type":"reference","id":267,"typeArguments":[{"type":"reference","id":175,"name":"T"}],"name":"MultipleOption"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":175,"name":"T"},"extendsType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"trueType":{"type":"reference","id":250,"typeArguments":[{"type":"reference","id":175,"name":"T"}],"name":"SingleOption"},"falseType":{"type":"intrinsic","name":"never"}}}},"permalink":"/api/args#InferOptionConfig","previousId":220,"nextId":168},{"id":168,"name":"InferParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type. Only primitives are allowed."},"sources":[{"fileName":"packages/args/src/types.ts","line":22,"character":12}],"typeParameter":[{"id":169,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":169,"name":"T"},"extendsType":{"type":"reference","id":163,"name":"PrimitiveType"},"trueType":{"type":"reference","id":292,"typeArguments":[{"type":"reference","id":169,"name":"T"}],"name":"Param"},"falseType":{"type":"intrinsic","name":"never"}},"permalink":"/api/args#InferParamConfig","previousId":174,"nextId":161},{"id":161,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":7,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/args#ListType","previousId":168,"nextId":320},{"id":320,"name":"LongOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Option name without leading \\"--\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":226,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/args#LongOptionName","previousId":161,"nextId":176},{"id":176,"name":"MapOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":84,"character":12}],"typeParameter":[{"id":177,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"mapped","parameter":"K","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":177,"name":"T"}},"templateType":{"type":"reference","id":174,"typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","name":"K"},"objectType":{"type":"reference","id":177,"name":"T"}}],"name":"InferOptionConfig"}},"permalink":"/api/args#MapOptionConfig","previousId":320,"nextId":170},{"id":170,"name":"MapParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":171,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":163,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","id":171,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"E"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":171,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":171,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":171,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":171,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":168,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":171,"name":"T"},"extendsType":{"type":"reference","id":160,"name":"ArgList"},"trueType":{"type":"array","elementType":{"type":"reference","id":292,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Param"}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamConfig","previousId":176,"nextId":172},{"id":172,"name":"MapParamType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":54,"character":12}],"typeParameter":[{"id":173,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":163,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","id":173,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"reference","name":"E"},{"type":"rest","elementType":{"type":"reference","id":160,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":173,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"rest","elementType":{"type":"reference","id":160,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":173,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"rest","elementType":{"type":"reference","id":160,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":173,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"rest","elementType":{"type":"reference","id":160,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":173,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"rest","elementType":{"type":"reference","id":160,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":173,"name":"T"},"extendsType":{"type":"reference","id":160,"name":"ArgList"},"trueType":{"type":"reference","id":160,"name":"ArgList"},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamType","previousId":170,"nextId":310},{"id":310,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":12}],"type":{"type":"intersection","types":[{"type":"reference","id":235,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":311,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":312,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":211,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":313,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":212,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":163,"name":"PrimitiveType"}}},{"id":314,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":213,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":315,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":214,"character":1}],"type":{"type":"reference","id":164,"name":"ValueType"}},{"id":316,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":215,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[312,313,314,315,316]}],"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":41}]}}]},"permalink":"/api/args#OptionConfig","previousId":172,"nextId":317},{"id":317,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":218,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":310,"name":"OptionConfig"}],"name":"Record"},"permalink":"/api/args#OptionConfigMap","previousId":310,"nextId":165},{"id":165,"name":"OptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":15,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":164,"name":"ValueType"}],"name":"Record"},"permalink":"/api/args#OptionMap","previousId":317,"nextId":318},{"id":318,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":221,"character":12}],"type":{"type":"reference","id":292,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/args#ParamConfig","previousId":165,"nextId":319},{"id":319,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":223,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":318,"name":"ParamConfig"}},"permalink":"/api/args#ParamConfigList","previousId":318,"nextId":163},{"id":163,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":162,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/args#PrimitiveType","previousId":319,"nextId":162},{"id":162,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":9,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/args#ScalarType","previousId":163,"nextId":321},{"id":321,"name":"ShortOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Short option name without leading \\"-\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":229,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"A"},{"type":"literal","value":"a"},{"type":"literal","value":"B"},{"type":"literal","value":"b"},{"type":"literal","value":"C"},{"type":"literal","value":"c"},{"type":"literal","value":"D"},{"type":"literal","value":"d"},{"type":"literal","value":"E"},{"type":"literal","value":"e"},{"type":"literal","value":"F"},{"type":"literal","value":"f"},{"type":"literal","value":"G"},{"type":"literal","value":"g"},{"type":"literal","value":"H"},{"type":"literal","value":"h"},{"type":"literal","value":"I"},{"type":"literal","value":"i"},{"type":"literal","value":"J"},{"type":"literal","value":"j"},{"type":"literal","value":"K"},{"type":"literal","value":"k"},{"type":"literal","value":"L"},{"type":"literal","value":"l"},{"type":"literal","value":"M"},{"type":"literal","value":"m"},{"type":"literal","value":"N"},{"type":"literal","value":"n"},{"type":"literal","value":"O"},{"type":"literal","value":"o"},{"type":"literal","value":"P"},{"type":"literal","value":"p"},{"type":"literal","value":"Q"},{"type":"literal","value":"q"},{"type":"literal","value":"R"},{"type":"literal","value":"r"},{"type":"literal","value":"S"},{"type":"literal","value":"s"},{"type":"literal","value":"T"},{"type":"literal","value":"t"},{"type":"literal","value":"U"},{"type":"literal","value":"u"},{"type":"literal","value":"V"},{"type":"literal","value":"v"},{"type":"literal","value":"W"},{"type":"literal","value":"w"},{"type":"literal","value":"X"},{"type":"literal","value":"x"},{"type":"literal","value":"Y"},{"type":"literal","value":"y"},{"type":"literal","value":"Z"},{"type":"literal","value":"z"}]},"permalink":"/api/args#ShortOptionName","previousId":162,"nextId":166},{"id":166,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":17,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/args#UnknownOptionMap","previousId":321,"nextId":164},{"id":164,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":13,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":161,"name":"ListType"},{"type":"reference","id":163,"name":"PrimitiveType"}]},"permalink":"/api/args#ValueType","previousId":166,"nextId":121},{"id":121,"name":"ArgsError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":37,"character":13}],"type":{"type":"reflection","declaration":{"id":122,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":123,"name":"new ArgsError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":124,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}},{"id":125,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/args#ArgsError","previousId":164,"nextId":129},{"id":129,"name":"COMMAND_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#COMMAND_FORMAT","previousId":121,"nextId":126},{"id":126,"name":"DEFAULT_BOOLEAN_VALUE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":2,"character":13}],"type":{"type":"literal","value":false},"defaultValue":"false","permalink":"/api/args#DEFAULT_BOOLEAN_VALUE","previousId":129,"nextId":127},{"id":127,"name":"DEFAULT_NUMBER_VALUE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":3,"character":13}],"type":{"type":"literal","value":0},"defaultValue":"0","permalink":"/api/args#DEFAULT_NUMBER_VALUE","previousId":126,"nextId":128},{"id":128,"name":"DEFAULT_STRING_VALUE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":4,"character":13}],"type":{"type":"literal","value":""},"defaultValue":"\'\'","permalink":"/api/args#DEFAULT_STRING_VALUE","previousId":127,"nextId":130},{"id":130,"name":"LONG_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":13,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#LONG_OPTION_FORMAT","previousId":128,"nextId":133},{"id":133,"name":"OPTION_LIKE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":25,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#OPTION_LIKE","previousId":130,"nextId":131},{"id":131,"name":"SHORT_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":17,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_FORMAT","previousId":133,"nextId":132},{"id":132,"name":"SHORT_OPTION_GROUP_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/args/src/constants.ts","line":21,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_GROUP_FORMAT","previousId":131},{"id":134,"name":"format","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/format.ts","line":14,"character":16}],"signatures":[{"id":135,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a parsed arguments object back into a command line list of arguments."},"parameters":[{"id":136,"name":"argument","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":188,"typeArguments":[{"type":"reference","id":165,"name":"OptionMap"},{"type":"reference","id":160,"name":"ArgList"}],"name":"Arguments"}],"name":"Partial"}}],"type":{"type":"reference","id":159,"name":"Argv"}}],"permalink":"/api/args/function/format","previousId":322,"nextId":137},{"id":137,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parse.ts","line":59,"character":16}],"signatures":[{"id":138,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject. Will extract commands, options, flags, and params based on the defined parser options."},"typeParameter":[{"id":140,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":139,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":141,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":163,"name":"PrimitiveType"}},"default":{"type":"reference","id":160,"name":"ArgList"}}],"parameters":[{"id":142,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":159,"name":"Argv"}},{"id":143,"name":"parserOptions","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":201,"typeArguments":[{"type":"reference","id":140,"name":"O"},{"type":"reference","id":141,"name":"P"}],"name":"ParserOptions"}}],"type":{"type":"reference","id":188,"typeArguments":[{"type":"reference","id":140,"name":"O"},{"type":"reference","id":141,"name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parse","previousId":134,"nextId":152},{"id":152,"name":"parseInContext","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parseInContext.ts","line":10,"character":16}],"signatures":[{"id":153,"name":"parseInContext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject using a context factory. The factory can customize the parser options based on the\\narguments being parsed."},"typeParameter":[{"id":155,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":154,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":156,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":163,"name":"PrimitiveType"}},"default":{"type":"reference","id":160,"name":"ArgList"}}],"parameters":[{"id":157,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":159,"name":"Argv"}},{"id":158,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":182,"name":"ContextFactory"}}],"type":{"type":"reference","id":188,"typeArguments":[{"type":"reference","id":155,"name":"O"},{"type":"reference","id":156,"name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parseInContext","previousId":137,"nextId":222}],"groups":[{"title":"Classes","kind":128,"children":[144,322]},{"title":"Functions","kind":64,"children":[134,137,152]},{"title":"Interfaces","kind":256,"children":[222,188,307,214,210,284,267,235,292,201,197,250]},{"title":"Type aliases","kind":4194304,"children":[167,160,120,159,178,182,220,174,168,161,320,176,170,172,310,317,165,318,319,163,162,321,166,164]},{"title":"Variables","kind":32,"children":[121,129,126,127,128,130,133,131,132]}],"sources":[{"fileName":"packages/args/src/index.ts","line":6,"character":0}],"permalink":"/api/args"},"urlSlug":"args"}],"packageName":"@boost/args","packageVersion":"3.0.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":9,"name":"@boost/cli","kind":2,"kindString":"Module","flags":{},"children":[{"id":1771,"name":"Arg","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":1772,"name":"Flag","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Flag.ts","line":8,"character":16}],"signatures":[{"id":1773,"name":"Flag","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line flag (boolean value)."},"parameters":[{"id":1774,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1775,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2126,"name":"Flag"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1776,"name":"Number","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Number.ts","line":8,"character":16}],"signatures":[{"id":1777,"name":"Number","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a numeric value."},"parameters":[{"id":1778,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1779,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2203,"typeArguments":[{"type":"intrinsic","name":"number"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1780,"name":"Numbers","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Numbers.ts","line":8,"character":16}],"signatures":[{"id":1781,"name":"Numbers","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple numeric values."},"parameters":[{"id":1782,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1783,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2135,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1784,"name":"Params","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Params.ts","line":7,"character":16}],"signatures":[{"id":1785,"name":"Params","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator for declaring command line parameters (positional arguments)."},"typeParameter":[{"id":1786,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":1787,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1786,"name":"T"}],"name":"MapParamConfig"}}],"type":{"type":"reference","name":"MethodDecorator"}}]},{"id":1788,"name":"String","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/String.ts","line":8,"character":16}],"signatures":[{"id":1789,"name":"String","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a string value."},"parameters":[{"id":1790,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1791,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2203,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1792,"name":"Strings","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Strings.ts","line":8,"character":16}],"signatures":[{"id":1793,"name":"Strings","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple string values."},"parameters":[{"id":1794,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1795,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2135,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":1796,"name":"flag","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/flag.ts","line":8,"character":16}],"signatures":[{"id":1797,"name":"flag","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line flag (boolean value)."},"parameters":[{"id":1798,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1799,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2126,"name":"Flag"}],"name":"PartialConfig"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1800,"name":"number","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/number.ts","line":8,"character":16}],"signatures":[{"id":1801,"name":"number","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with a numeric value."},"typeParameter":[{"id":1802,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"number"},"default":{"type":"intrinsic","name":"number"}}],"parameters":[{"id":1803,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1804,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2203,"typeArguments":[{"type":"intrinsic","name":"number"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1802,"name":"T"}}]},{"id":1805,"name":"numbers","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/numbers.ts","line":8,"character":16}],"signatures":[{"id":1806,"name":"numbers","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with multiple numeric values."},"typeParameter":[{"id":1807,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"number"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"number"}}}],"parameters":[{"id":1808,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1809,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2135,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1807,"name":"T"}}]},{"id":1810,"name":"params","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/params.ts","line":6,"character":16}],"signatures":[{"id":1811,"name":"params","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring command line parameters (positional arguments)."},"typeParameter":[{"id":1812,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":1813,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1812,"name":"T"}],"name":"MapParamConfig"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1812,"name":"T"}],"name":"MapParamConfig"}}]},{"id":1814,"name":"string","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/string.ts","line":8,"character":16}],"signatures":[{"id":1815,"name":"string","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with a string value."},"typeParameter":[{"id":1816,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1817,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1818,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2203,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1816,"name":"T"}}]},{"id":1819,"name":"strings","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/strings.ts","line":8,"character":16}],"signatures":[{"id":1820,"name":"strings","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with multiple string values."},"typeParameter":[{"id":1821,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":1822,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1823,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2135,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1821,"name":"T"}}]}],"groups":[{"title":"Functions","kind":64,"children":[1772,1776,1780,1784,1788,1792,1796,1800,1805,1810,1814,1819]}],"sources":[{"fileName":"packages/cli/src/metadata/args.ts","line":1,"character":0}],"permalink":"/api/cli/namespace/Arg","previousId":2203,"nextId":2112},{"id":1830,"name":"Command","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1843,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":116,"character":1}],"signatures":[{"id":1844,"name":"new Command","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1845,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2226,"name":"GlobalOptions"},"default":{"type":"reference","id":2226,"name":"GlobalOptions"}},{"id":1846,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"reference","id":2112,"name":"ArgList"}},{"id":1848,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1847,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1849,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1848,"name":"Options"}}],"type":{"type":"reference","id":1830,"typeArguments":[{"type":"reference","id":1845,"name":"O"},{"type":"reference","id":1846,"name":"P"},{"type":"reference","id":1848,"name":"Options"}],"name":"Command"},"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}},{"id":1855,"name":"exit","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to exit the current program, with an optional error code."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":100,"character":1}],"type":{"type":"reference","id":2236,"name":"ExitHandler"}},{"id":1850,"name":"help","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--help`, `-h` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":83,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1851,"name":"locale","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--locale` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'en\'"},{"id":1856,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to log to the console using a log level."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":103,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":1903,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":1904,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":1921,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1848,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":1852,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional arguments passed after `--` on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":89,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":1853,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unknown options passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":92,"character":1}],"type":{"type":"reference","id":2220,"name":"UnknownOptionMap"},"defaultValue":"{}"},{"id":1854,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--version`, `-v` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1831,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":56,"character":8}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":1832,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":58,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1833,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":60,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"defaultValue":"false"},{"id":1834,"name":"categories","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":62,"character":8}],"type":{"type":"reference","id":2234,"name":"Categories"},"defaultValue":"{}"},{"id":1835,"name":"category","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":64,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1837,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":68,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1836,"name":"description","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":66,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1838,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":70,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1839,"name":"options","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":72,"character":8}],"type":{"type":"reference","id":2174,"name":"OptionConfigMap"},"defaultValue":"globalOptions"},{"id":1840,"name":"params","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":74,"character":8}],"type":{"type":"reference","id":2191,"name":"ParamConfigList"},"defaultValue":"[]"},{"id":1841,"name":"path","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":76,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1842,"name":"usage","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":78,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"defaultValue":"\'\'"},{"id":1857,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":126,"character":1}],"signatures":[{"id":1858,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate options passed to the constructor."},"parameters":[{"id":1859,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":1922,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1923,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1924,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1848,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1925,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1926,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1927,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1848,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1848,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1848,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":1860,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":133,"character":7}],"signatures":[{"id":1861,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a React element based on the Help component."},"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}],"name":"Promise"},"implementationOf":{"type":"reference","id":2315,"name":"Commandable.createHelp"}}],"implementationOf":{"type":"reference","id":2314,"name":"Commandable.createHelp"}},{"id":1862,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":154,"character":1}],"signatures":[{"id":1863,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a system native command with the given arguments\\nand pass the results through a promise. This does *not* execute Boost CLI\\ncommands, use `runProgram()` instead."},"parameters":[{"id":1864,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1865,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":1866,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Options"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaChildProcess"}}]},{"id":1867,"name":"getArguments","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":167,"character":1}],"signatures":[{"id":1868,"name":"getArguments","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current command class as an arguments object.\\nOptions and params must be parsed first to operate correctly."},"type":{"type":"reference","id":2113,"typeArguments":[{"type":"reference","id":1845,"name":"O"},{"type":"reference","id":1846,"name":"P"}],"name":"Arguments"}}]},{"id":1907,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":27,"character":1}],"signatures":[{"id":1908,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":1910,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1909,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":1911,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"reference","id":2112,"name":"ArgList"}}],"parameters":[{"id":1912,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2313,"typeArguments":[{"type":"reference","id":1910,"name":"O"},{"type":"reference","id":1911,"name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":1913,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":42,"character":1}],"signatures":[{"id":1914,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":1869,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":181,"character":1}],"signatures":[{"id":1870,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate and return all metadata registered to this command instance."},"type":{"type":"reference","id":2297,"name":"CommandMetadata"},"implementationOf":{"type":"reference","id":2317,"name":"Commandable.getMetadata"}}],"implementationOf":{"type":"reference","id":2316,"name":"Commandable.getMetadata"}},{"id":1871,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":218,"character":1}],"signatures":[{"id":1872,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return metadata as options for argument parsing."},"type":{"type":"reference","id":2192,"typeArguments":[{"type":"reference","id":1845,"name":"O"},{"type":"reference","id":1846,"name":"P"}],"name":"ParserOptions"},"implementationOf":{"type":"reference","id":2319,"name":"Commandable.getParserOptions"}}],"implementationOf":{"type":"reference","id":2318,"name":"Commandable.getParserOptions"}},{"id":1873,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":234,"character":1}],"signatures":[{"id":1874,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the command path (canonical name on the command line)."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2321,"name":"Commandable.getPath"}}],"implementationOf":{"type":"reference","id":2320,"name":"Commandable.getPath"}},{"id":1915,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":50,"character":1}],"signatures":[{"id":1916,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":1917,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":1830,"typeArguments":[{"type":"reference","id":1845,"name":"O"},{"type":"reference","id":1846,"name":"P"},{"type":"reference","id":1848,"name":"Options"}],"name":"Command"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":1875,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":241,"character":7}],"signatures":[{"id":1876,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":1877,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},"implementationOf":{"type":"reference","id":2323,"name":"Commandable.render"}}],"implementationOf":{"type":"reference","id":2322,"name":"Commandable.render"}},{"id":1897,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":336,"character":10}],"signatures":[{"id":1898,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Executed when the command is being ran."},"parameters":[{"id":1899,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":1846,"name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2260,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2260,"name":"RunResult"}],"name":"Promise"}]},"implementationOf":{"type":"reference","id":2326,"name":"Commandable.run"}}],"implementationOf":{"type":"reference","id":2325,"name":"Commandable.run"}},{"id":1878,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":248,"character":1}],"signatures":[{"id":1879,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program within itself, by passing a custom command and argv list."},"parameters":[{"id":1880,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2122,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":1881,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":254,"character":1}],"signatures":[{"id":1882,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run a task (function) with the defined arguments and\\nthe current command instance bound to the task\'s context."},"typeParameter":[{"id":1883,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1884,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1885,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1886,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1887,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1888,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":1883,"name":"A"}}],"type":{"type":"reference","id":1884,"name":"R"}}]}}},{"id":1889,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":1883,"name":"A"}}],"type":{"type":"reference","id":1884,"name":"R"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1843]},{"title":"Properties","kind":1024,"children":[1855,1850,1851,1856,1903,1904,1921,1852,1853,1854,1831,1832,1833,1834,1835,1837,1836,1838,1839,1840,1841,1842],"categories":[{"title":"CATEGORY","children":[1855,1850,1851,1856,1921,1852,1853,1854,1831,1832,1833,1834,1835,1837,1836,1838,1839,1840,1841,1842]},{"title":"Events","children":[1903,1904]}]},{"title":"Methods","kind":2048,"children":[1857,1922,1860,1862,1867,1907,1913,1869,1871,1873,1915,1875,1897,1878,1881]}],"sources":[{"fileName":"packages/cli/src/Command.ts","line":48,"character":22}],"typeParameter":[{"id":1928,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2226,"name":"GlobalOptions"},"default":{"type":"reference","id":2226,"name":"GlobalOptions"}},{"id":1929,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"reference","id":2112,"name":"ArgList"}},{"id":1931,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1930,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":51,"character":27}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1848,"name":"Options"}],"name":"CommandManager"}],"implementedTypes":[{"type":"reference","id":2313,"typeArguments":[{"type":"reference","id":1845,"name":"O"},{"type":"reference","id":1846,"name":"P"}],"name":"Commandable"}],"permalink":"/api/cli/class/Command","nextId":2011},{"id":2011,"name":"Program","kind":128,"kindString":"Class","flags":{},"children":[{"id":2012,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":127,"character":1}],"signatures":[{"id":2013,"name":"new Program","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2014,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2241,"name":"ProgramOptions"}},{"id":2015,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2249,"name":"ProgramStreams"}}],"type":{"type":"reference","id":2011,"name":"Program"},"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}},{"id":2087,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":2016,"name":"onAfterRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a component has rendered."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":56,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2017,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the program and command have been ran."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":62,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"reference","name":"Error"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2088,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":2018,"name":"onBeforeRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has run but before a component will render."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":68,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2260,"name":"RunResult"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2019,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the program and command will run."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":74,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2122,"name":"Argv"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2020,"name":"onCommandFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command has been found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":80,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2122,"name":"Argv"},{"type":"intrinsic","name":"string"},{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2021,"name":"onCommandNotFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command wasn\'t found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":86,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2122,"name":"Argv"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2022,"name":"onExit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the exit() handler is executed but before the process exits."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":92,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2023,"name":"onHelp","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the help menu is rendered."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":98,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2105,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2241,"name":"ProgramOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":2024,"name":"streams","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/cli/src/Program.ts","line":100,"character":10}],"type":{"type":"reference","id":2249,"name":"ProgramStreams"},"defaultValue":"..."},{"id":2033,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":157,"character":1}],"signatures":[{"id":2034,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2035,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2241,"name":"ProgramOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":2036,"name":"categories","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":175,"character":1}],"signatures":[{"id":2037,"name":"categories","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define option and command categories to supply to the running command,\\nor the program itself."},"parameters":[{"id":2038,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2234,"name":"Categories"}}],"type":{"type":"reference","id":2011,"name":"Program"}}]},{"id":2106,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":2107,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2108,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2241,"name":"ProgramOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2109,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2110,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2111,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2241,"name":"ProgramOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2241,"name":"ProgramOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2241,"name":"ProgramOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":2039,"name":"default","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":185,"character":1}],"signatures":[{"id":2040,"name":"default","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path as the default command.\\nA default command should be used when stand-alone binary is required."},"parameters":[{"id":2041,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2011,"name":"Program"}}]},{"id":2042,"name":"exit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":200,"character":1}],"signatures":[{"id":2043,"name":"exit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Exit the program with an error code.\\nShould be called within a command or component."},"parameters":[{"id":2044,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"Error"}]}},{"id":2045,"name":"errorCode","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"never"}}]},{"id":2091,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":27,"character":1}],"signatures":[{"id":2092,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":2094,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2093,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":2095,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"reference","id":2112,"name":"ArgList"}}],"parameters":[{"id":2096,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2313,"typeArguments":[{"type":"reference","id":1910,"name":"O"},{"type":"reference","id":1911,"name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":2097,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":42,"character":1}],"signatures":[{"id":2098,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":2046,"name":"middleware","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":224,"character":1}],"signatures":[{"id":2047,"name":"middleware","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define a middleware function to apply to the argv list or args object."},"parameters":[{"id":2048,"name":"middleware","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2354,"name":"Middleware"}}],"type":{"type":"reference","id":2011,"name":"Program"}}]},{"id":2049,"name":"parse","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":237,"character":1}],"signatures":[{"id":2050,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse the arguments list according to the number of commands that have been registered."},"typeParameter":[{"id":2051,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2226,"name":"GlobalOptions"}},{"id":2052,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"reference","id":2112,"name":"ArgList"}}],"parameters":[{"id":2053,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2122,"name":"Argv"}}],"type":{"type":"reference","id":2113,"typeArguments":[{"type":"reference","id":2051,"name":"O"},{"type":"reference","id":2052,"name":"P"}],"name":"Arguments"}}]},{"id":2099,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":50,"character":1}],"signatures":[{"id":2100,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":2101,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2011,"name":"Program"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2054,"name":"renderElement","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":266,"character":7}],"signatures":[{"id":2055,"name":"renderElement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":2056,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"id":2057,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":333,"character":7}],"signatures":[{"id":2058,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program in the following steps:\\n- Apply middleware to argv list.\\n- Parse argv into an args object (of options, params, etc).\\n- Determine command to run, or fail.\\n- Run command and render output.\\n- Return exit code."},"parameters":[{"id":2059,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2122,"name":"Argv"}},{"id":2060,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2257,"name":"ProgramBootstrap"}},{"id":2061,"name":"rethrow","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2062,"name":"runAndExit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":365,"character":7}],"signatures":[{"id":2063,"name":"runAndExit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program and also set the process exit code."},"parameters":[{"id":2064,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2122,"name":"Argv"}},{"id":2065,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2257,"name":"ProgramBootstrap"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2012]},{"title":"Properties","kind":1024,"children":[2087,2016,2017,2088,2018,2019,2020,2021,2022,2023,2105,2024],"categories":[{"title":"CATEGORY","children":[2105,2024]},{"title":"Events","children":[2087,2016,2017,2088,2018,2019,2020,2021,2022,2023]}]},{"title":"Methods","kind":2048,"children":[2033,2036,2106,2039,2042,2091,2097,2046,2049,2099,2054,2057,2062]}],"sources":[{"fileName":"packages/cli/src/Program.ts","line":51,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2241,"name":"ProgramOptions"}],"name":"CommandManager"}],"permalink":"/api/cli/class/Program","previousId":1830,"nextId":1766},{"id":2113,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2114,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":41,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2115,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":43,"character":4}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":2116,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":45,"character":4}],"type":{"type":"reference","id":2120,"name":"O"}},{"id":2117,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":47,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2121,"name":"P"}],"name":"MapParamType"}},{"id":2118,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":49,"character":4}],"type":{"type":"reference","id":2112,"name":"ArgList"}},{"id":2119,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":51,"character":4}],"type":{"type":"reference","id":2220,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[2114,2115,2116,2117,2118,2119]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":39,"character":17}],"typeParameter":[{"id":2120,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2121,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"reference","id":2112,"name":"ArgList"}}],"permalink":"/api/cli/interface/Arguments","previousId":2000,"nextId":2123},{"id":2123,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2124,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":133,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2125,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":134,"character":4}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[2124,2125]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":132,"character":17}],"permalink":"/api/cli/interface/Category","previousId":2113,"nextId":2262},{"id":2262,"name":"CommandConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2263,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2264,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":117,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2265,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":119,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]}},{"id":2266,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2234,"name":"Categories"}},{"id":2270,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.category"}},{"id":2272,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.deprecated"}},{"id":2273,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.description"}},{"id":2274,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.hidden"}},{"id":2267,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of options to their configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":123,"character":1}],"type":{"type":"reference","id":2174,"name":"OptionConfigMap"}},{"id":2268,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of param (positional args) configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2191,"name":"ParamConfigList"}},{"id":2269,"name":"path","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2271,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2263,2264,2265,2266,2270,2272,2273,2274,2267,2268,2269,2271]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":113,"character":17}],"extendedTypes":[{"type":"reference","name":"BaseCommandConfig"}],"permalink":"/api/cli/interface/CommandConfig","previousId":2123,"nextId":2297},{"id":2297,"name":"CommandMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2300,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","id":2285,"name":"CommandStaticConfig.aliases"}},{"id":2301,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":117,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2286,"name":"CommandStaticConfig.allowUnknownOptions"}},{"id":2302,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":119,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","id":2287,"name":"CommandStaticConfig.allowVariadicParams"}},{"id":2303,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2234,"name":"Categories"},"inheritedFrom":{"type":"reference","id":2288,"name":"CommandStaticConfig.categories"}},{"id":2307,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2292,"name":"CommandStaticConfig.category"}},{"id":2298,"name":"commands","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":144,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}],"name":"Record"}},{"id":2309,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2294,"name":"CommandStaticConfig.deprecated"}},{"id":2310,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2295,"name":"CommandStaticConfig.description"}},{"id":2299,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":140,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2284,"name":"CommandStaticConfig.hasRegisteredOptions"}},{"id":2311,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2296,"name":"CommandStaticConfig.hidden"}},{"id":2304,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of options to their configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":123,"character":1}],"type":{"type":"reference","id":2174,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","id":2289,"name":"CommandStaticConfig.options"}},{"id":2305,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of param (positional args) configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2191,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","id":2290,"name":"CommandStaticConfig.params"}},{"id":2306,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2291,"name":"CommandStaticConfig.path"}},{"id":2308,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","id":2293,"name":"CommandStaticConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2300,2301,2302,2303,2307,2298,2309,2310,2299,2311,2304,2305,2306,2308]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":143,"character":17}],"extendedTypes":[{"type":"reference","id":2283,"name":"CommandStaticConfig"}],"permalink":"/api/cli/interface/CommandMetadata","previousId":2262,"nextId":2283},{"id":2283,"name":"CommandStaticConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2285,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"Required.aliases"}},{"id":2286,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":117,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.allowUnknownOptions"}},{"id":2287,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":119,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","name":"Required.allowVariadicParams"}},{"id":2288,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2234,"name":"Categories"},"inheritedFrom":{"type":"reference","name":"Required.categories"}},{"id":2292,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.category"}},{"id":2294,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.deprecated"}},{"id":2295,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.description"}},{"id":2284,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":140,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2296,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.hidden"}},{"id":2289,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of options to their configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":123,"character":1}],"type":{"type":"reference","id":2174,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","name":"Required.options"}},{"id":2290,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of param (positional args) configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2191,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","name":"Required.params"}},{"id":2291,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.path"}},{"id":2293,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Required.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2285,2286,2287,2288,2292,2294,2295,2284,2296,2289,2290,2291,2293]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":139,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2262,"name":"CommandConfig"}],"name":"Required"}],"extendedBy":[{"type":"reference","id":2297,"name":"CommandMetadata"}],"permalink":"/api/cli/interface/CommandStaticConfig","previousId":2297,"nextId":2313},{"id":2313,"name":"Commandable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2314,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":150,"character":1}],"signatures":[{"id":2315,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}]}],"name":"Promise"}}]},{"id":2316,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":151,"character":1}],"signatures":[{"id":2317,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2297,"name":"CommandMetadata"}}]},{"id":2318,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":152,"character":1}],"signatures":[{"id":2319,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2192,"typeArguments":[{"type":"reference","id":2328,"name":"O"},{"type":"reference","id":2329,"name":"P"}],"name":"ParserOptions"}}]},{"id":2320,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":153,"character":1}],"signatures":[{"id":2321,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2322,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":154,"character":1}],"signatures":[{"id":2323,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2324,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"id":2325,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":155,"character":1}],"signatures":[{"id":2326,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2327,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":2329,"name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2260,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2260,"name":"RunResult"}],"name":"Promise"}]}}]}],"groups":[{"title":"Methods","kind":2048,"children":[2314,2316,2318,2320,2322,2325]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":149,"character":17}],"typeParameter":[{"id":2328,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"any"}},{"id":2329,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"implementedBy":[{"type":"reference","id":1830,"name":"Command"}],"permalink":"/api/cli/interface/Commandable","previousId":2283,"nextId":2126},{"id":2126,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2128,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":2127,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":123,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":2131,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":2132,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":2133,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":2129,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":2130,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2128,2127,2131,2132,2133,2129,2130]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":122,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2152,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"name":"Omit"}],"permalink":"/api/cli/interface/Flag","previousId":2313,"nextId":2226},{"id":2226,"name":"GlobalOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2227,"name":"help","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":59,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2228,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":60,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2229,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":61,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2227,2228,2229]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":58,"character":17}],"permalink":"/api/cli/interface/GlobalOptions","previousId":2126,"nextId":2135},{"id":2135,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2136,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":117,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2139,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2153,"name":"Option.category"}},{"id":2137,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":118,"character":4}],"type":{"type":"reference","id":2151,"name":"T"},"overwrites":{"type":"reference","id":2155,"name":"Option.default"}},{"id":2148,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2163,"name":"Option.deprecated"}},{"id":2149,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2164,"name":"Option.description"}},{"id":2150,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2165,"name":"Option.hidden"}},{"id":2138,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":120,"character":4}],"type":{"type":"literal","value":true}},{"id":2140,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2154,"name":"Option.short"}},{"id":2144,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2151,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2159,"name":"Option.type"}},{"id":2141,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2142,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2143,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":2157,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":2156,"name":"Option.format"}},{"id":2145,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2146,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2147,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2161,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":2160,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2136,2139,2137,2148,2149,2150,2138,2140,2144]},{"title":"Methods","kind":2048,"children":[2141,2145]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":115,"character":17}],"typeParameter":[{"id":2151,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2134,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":2152,"typeArguments":[{"type":"reference","id":2151,"name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/MultipleOption","previousId":2226,"nextId":2152},{"id":2152,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2153,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2155,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","id":2166,"name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2163,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2164,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2165,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2154,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"}},{"id":2159,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2166,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2156,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2157,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2158,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.format"}}],"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2160,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2161,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2162,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2153,2155,2163,2164,2165,2154,2159]},{"title":"Methods","kind":2048,"children":[2156,2160]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":102,"character":17}],"typeParameter":[{"id":2166,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2221,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2166,"name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":2135,"name":"MultipleOption"},{"type":"reference","id":2203,"name":"SingleOption"}],"permalink":"/api/cli/interface/Option","previousId":2135,"nextId":2276},{"id":2276,"name":"OptionInitializer","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2282,"name":"[INTERNAL_INITIALIZER]","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":133,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2281,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":135,"character":1}],"type":{"type":"intrinsic","name":"unknown"}},{"id":2277,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":134,"character":1}],"signatures":[{"id":2278,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2279,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}},{"id":2280,"name":"property","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2282,2281]},{"title":"Methods","kind":2048,"children":[2277]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":132,"character":17}],"permalink":"/api/cli/interface/OptionInitializer","previousId":2152,"nextId":2175},{"id":2175,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2178,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","id":2189,"name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2186,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2187,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2188,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2176,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":127,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2177,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":130,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2182,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2189,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2179,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2180,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2181,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.format"}}],"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2183,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2184,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2185,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2178,2186,2187,2188,2176,2177,2182]},{"title":"Methods","kind":2048,"children":[2179,2183]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":125,"character":17}],"typeParameter":[{"id":2189,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2201,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2189,"name":"T"}],"name":"Arg"}],"permalink":"/api/cli/interface/Param","previousId":2276,"nextId":2192},{"id":2192,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2193,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":63,"character":4}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"CommandChecker"}]}},{"id":2196,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":55,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.loose"}},{"id":2194,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2199,"name":"O"}],"name":"MapOptionConfig"}},{"id":2195,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":67,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2200,"name":"P"}],"name":"MapParamConfig"}},{"id":2197,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":57,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.unknown"}},{"id":2198,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":59,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[2193,2196,2194,2195,2197,2198]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":61,"character":17}],"typeParameter":[{"id":2199,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2200,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}},"default":{"type":"reference","id":2112,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","name":"ParserSettings"}],"permalink":"/api/cli/interface/ParserOptions","previousId":2175,"nextId":2253},{"id":2253,"name":"ProgramContextType","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2254,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":100,"character":1}],"type":{"type":"reference","id":2236,"name":"ExitHandler"}},{"id":2255,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":101,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2256,"name":"program","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":102,"character":1}],"type":{"type":"reference","id":2241,"name":"ProgramOptions"}}],"groups":[{"title":"Properties","kind":1024,"children":[2254,2255,2256]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":99,"character":17}],"permalink":"/api/cli/interface/ProgramContextType","previousId":2192,"nextId":2241},{"id":2241,"name":"ProgramOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2242,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2243,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":80,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2244,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":82,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2245,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2246,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2247,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":88,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2248,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2242,2243,2244,2245,2246,2247,2248]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":76,"character":17}],"extendedBy":[{"type":"reference","id":2424,"name":"IndexHelpProps"}],"permalink":"/api/cli/interface/ProgramOptions","previousId":2253,"nextId":2249},{"id":2249,"name":"ProgramStreams","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2250,"name":"stderr","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":94,"character":1}],"type":{"type":"reference","name":"WriteStream"}},{"id":2251,"name":"stdin","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":95,"character":1}],"type":{"type":"reference","name":"ReadStream"}},{"id":2252,"name":"stdout","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":96,"character":1}],"type":{"type":"reference","name":"WriteStream"}}],"groups":[{"title":"Properties","kind":1024,"children":[2250,2251,2252]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":93,"character":17}],"permalink":"/api/cli/interface/ProgramStreams","previousId":2241,"nextId":2203},{"id":2203,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2207,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2153,"name":"Option.category"}},{"id":2204,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":110,"character":4}],"type":{"type":"array","elementType":{"type":"reference","id":2219,"name":"T"}}},{"id":2205,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":112,"character":4}],"type":{"type":"conditional","checkType":{"type":"reference","id":2219,"name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":2206,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":113,"character":4}],"type":{"type":"reference","id":2219,"name":"T"},"overwrites":{"type":"reference","id":2155,"name":"Option.default"}},{"id":2216,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2163,"name":"Option.deprecated"}},{"id":2217,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2164,"name":"Option.description"}},{"id":2218,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2165,"name":"Option.hidden"}},{"id":2208,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2154,"name":"Option.short"}},{"id":2212,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2219,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2159,"name":"Option.type"}},{"id":2209,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2210,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2211,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":2157,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":2156,"name":"Option.format"}},{"id":2213,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2214,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2215,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2161,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":2160,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2207,2204,2205,2206,2216,2217,2218,2208,2212]},{"title":"Methods","kind":2048,"children":[2209,2213]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":108,"character":17}],"typeParameter":[{"id":2219,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2202,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":2152,"typeArguments":[{"type":"reference","id":2219,"name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/SingleOption","previousId":2249,"nextId":1771},{"id":2112,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":2,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ArgList","previousId":1771,"nextId":2122},{"id":2122,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":1,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#Argv","previousId":2112,"nextId":1824},{"id":1824,"name":"CLIErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":24,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/cli#CLIErrorCode","previousId":2122,"nextId":2234},{"id":2234,"name":"Categories","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":68,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"reference","id":2123,"name":"Category"},{"type":"intrinsic","name":"string"}]}],"name":"Record"},"permalink":"/api/cli#Categories","previousId":1824,"nextId":1989},{"id":1989,"name":"CategoryItemMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":3,"character":12}],"typeParameter":[{"id":1993,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":1990,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1991,"name":"items","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":6,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":1993,"name":"T"}}},{"id":1992,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1991,1992]}],"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":5,"character":1}]}}],"name":"Record"},"permalink":"/api/cli#CategoryItemMap","previousId":2234,"nextId":2275},{"id":2275,"name":"CommandConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":130,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2262,"name":"CommandConfig"}],"name":"Record"},"permalink":"/api/cli#CommandConfigMap","previousId":1989,"nextId":2312},{"id":2312,"name":"CommandMetadataMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":147,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2297,"name":"CommandMetadata"}],"name":"Record"},"permalink":"/api/cli#CommandMetadataMap","previousId":2275,"nextId":2261},{"id":2261,"name":"CommandPath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":111,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/cli#CommandPath","previousId":2312,"nextId":2235},{"id":2235,"name":"ExitCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":72,"character":12}],"type":{"type":"intrinsic","name":"number"},"permalink":"/api/cli#ExitCode","previousId":2261,"nextId":2236},{"id":2236,"name":"ExitHandler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":74,"character":12}],"type":{"type":"reflection","declaration":{"id":2237,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":74,"character":26}],"signatures":[{"id":2238,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2239,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"Error"},{"type":"intrinsic","name":"string"}]}},{"id":2240,"name":"code","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2235,"name":"ExitCode"}}],"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/cli#ExitHandler","previousId":2235,"nextId":2134},{"id":2134,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":3,"character":20}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/cli#ListType","previousId":2236,"nextId":2354},{"id":2354,"name":"Middleware","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":176,"character":12}],"type":{"type":"reflection","declaration":{"id":2355,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":176,"character":25}],"signatures":[{"id":2356,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2357,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2122,"name":"Argv"}},{"id":2358,"name":"parse","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2350,"name":"MiddlewareCallback"}},{"id":2359,"name":"logger","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Loggable"}}],"type":{"type":"union","types":[{"type":"reference","id":2349,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2349,"name":"MiddlewareArguments"}],"name":"Promise"}]}}]}},"permalink":"/api/cli#Middleware","previousId":2134,"nextId":2349},{"id":2349,"name":"MiddlewareArguments","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":172,"character":12}],"type":{"type":"reference","id":2113,"typeArguments":[{"type":"reference","id":2226,"name":"GlobalOptions"},{"type":"reference","id":2112,"name":"ArgList"}],"name":"Arguments"},"permalink":"/api/cli#MiddlewareArguments","previousId":2354,"nextId":2350},{"id":2350,"name":"MiddlewareCallback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":174,"character":12}],"type":{"type":"reflection","declaration":{"id":2351,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":174,"character":33}],"signatures":[{"id":2352,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2353,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2122,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":2349,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2349,"name":"MiddlewareArguments"}],"name":"Promise"}]}}]}},"permalink":"/api/cli#MiddlewareCallback","previousId":2349,"nextId":2167},{"id":2167,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":20}],"type":{"type":"intersection","types":[{"type":"reference","id":2152,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":2168,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2169,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":138,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2170,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":139,"character":4}],"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}}},{"id":2171,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":140,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2172,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":141,"character":4}],"type":{"type":"reference","id":2221,"name":"ValueType"}},{"id":2173,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":142,"character":4}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2169,2170,2171,2172,2173]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":49}]}}]},"permalink":"/api/cli#OptionConfig","previousId":2350,"nextId":2174},{"id":2174,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":144,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2167,"name":"OptionConfig"}],"name":"Record"},"permalink":"/api/cli#OptionConfigMap","previousId":2167,"nextId":2230},{"id":2230,"name":"Options","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":64,"character":12}],"typeParameter":[{"id":2231,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2231,"name":"T"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":2226,"name":"GlobalOptions"}}],"name":"Omit"}],"name":"MapOptionConfig"},"permalink":"/api/cli#Options","previousId":2174,"nextId":2190},{"id":2190,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":146,"character":20}],"type":{"type":"reference","id":2175,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/cli#ParamConfig","previousId":2230,"nextId":2191},{"id":2191,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":147,"character":20}],"type":{"type":"array","elementType":{"type":"reference","id":2190,"name":"ParamConfig"}},"permalink":"/api/cli#ParamConfigList","previousId":2190,"nextId":2232},{"id":2232,"name":"Params","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":66,"character":12}],"typeParameter":[{"id":2233,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2233,"name":"T"}],"name":"MapParamConfig"},"permalink":"/api/cli#Params","previousId":2191,"nextId":2222},{"id":2222,"name":"PartialConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":54,"character":12}],"typeParameter":[{"id":2223,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2223,"name":"T"},{"type":"union","types":[{"type":"literal","value":"description"},{"type":"literal","value":"multiple"},{"type":"literal","value":"path"},{"type":"literal","value":"type"}]}],"name":"Omit"},"permalink":"/api/cli#PartialConfig","previousId":2232,"nextId":2201},{"id":2201,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":5,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2202,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/cli#PrimitiveType","previousId":2222,"nextId":2257},{"id":2257,"name":"ProgramBootstrap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":105,"character":12}],"type":{"type":"reflection","declaration":{"id":2258,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":105,"character":31}],"signatures":[{"id":2259,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/cli#ProgramBootstrap","previousId":2201,"nextId":2260},{"id":2260,"name":"RunResult","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":109,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactElement"},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"void"}]},"permalink":"/api/cli#RunResult","previousId":2257,"nextId":2202},{"id":2202,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":4,"character":20}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/cli#ScalarType","previousId":2260,"nextId":2360},{"id":2360,"name":"StyleType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":184,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"failure"},{"type":"literal","value":"info"},{"type":"literal","value":"inverted"},{"type":"literal","value":"muted"},{"type":"literal","value":"notice"},{"type":"literal","value":"success"},{"type":"literal","value":"warning"}]},"permalink":"/api/cli#StyleType","previousId":2202,"nextId":2330},{"id":2330,"name":"TaskContext","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":160,"character":12}],"typeParameter":[{"id":2348,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2226,"name":"GlobalOptions"},"default":{"type":"reference","id":2226,"name":"GlobalOptions"}}],"type":{"type":"intersection","types":[{"type":"reference","id":2348,"name":"O"},{"type":"reflection","declaration":{"id":2331,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2332,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":161,"character":1}],"type":{"type":"reference","id":2236,"name":"ExitHandler"}},{"id":2333,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":162,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2334,"name":"rest","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":163,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2335,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":2220,"name":"UnknownOptionMap"}},{"id":2336,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":166,"character":1}],"signatures":[{"id":2337,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2338,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2122,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2339,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":167,"character":1}],"signatures":[{"id":2340,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2341,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":2342,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2343,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2344,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2345,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2346,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":2341,"name":"A"}}],"type":{"type":"reference","id":2342,"name":"R"}}]}}},{"id":2347,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":2341,"name":"A"}}],"type":{"type":"reference","id":2342,"name":"R"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2332,2333,2334,2335]},{"title":"Methods","kind":2048,"children":[2336,2339]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":160,"character":71}]}}]},"permalink":"/api/cli#TaskContext","previousId":2360,"nextId":2361},{"id":2361,"name":"ThemePalette","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":194,"character":12}],"type":{"type":"mapped","parameter":"T","parameterType":{"type":"reference","id":2360,"name":"StyleType"},"templateType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ThemePalette","previousId":2330,"nextId":2220},{"id":2220,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":8,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/cli#UnknownOptionMap","previousId":2361,"nextId":2221},{"id":2221,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":6,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2134,"name":"ListType"},{"type":"reference","id":2201,"name":"PrimitiveType"}]},"permalink":"/api/cli#ValueType","previousId":2220,"nextId":2224},{"id":2224,"name":"Writeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":56,"character":12}],"typeParameter":[{"id":2225,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"mapped","parameter":"P","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":2225,"name":"T"}},"templateType":{"type":"indexedAccess","indexType":{"type":"reference","name":"P"},"objectType":{"type":"reference","id":2225,"name":"T"}},"readonlyModifier":"-"},"permalink":"/api/cli#Writeable","previousId":2221,"nextId":1825},{"id":1825,"name":"CLIError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":26,"character":13}],"type":{"type":"reflection","declaration":{"id":1826,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1827,"name":"new CLIError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1828,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}},{"id":1829,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/cli#CLIError","previousId":2224,"nextId":1944},{"id":1944,"name":"DELIMITER","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":39,"character":13}],"type":{"type":"literal","value":"$ "},"defaultValue":"\'$ \'","permalink":"/api/cli#DELIMITER","previousId":1825,"nextId":1935},{"id":1935,"name":"EXIT_FAIL","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":11,"character":13}],"type":{"type":"reference","id":2235,"name":"ExitCode"},"defaultValue":"1","permalink":"/api/cli#EXIT_FAIL","previousId":1944,"nextId":1934},{"id":1934,"name":"EXIT_PASS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":10,"character":13}],"type":{"type":"reference","id":2235,"name":"ExitCode"},"defaultValue":"0","permalink":"/api/cli#EXIT_PASS","previousId":1935,"nextId":1939},{"id":1939,"name":"INTERNAL_INITIALIZER","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":16,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1939,"name":"INTERNAL_INITIALIZER"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_INITIALIZER","previousId":1934,"nextId":1936},{"id":1936,"name":"INTERNAL_OPTIONS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":13,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1936,"name":"INTERNAL_OPTIONS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_OPTIONS","previousId":1939,"nextId":1937},{"id":1937,"name":"INTERNAL_PARAMS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":14,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1937,"name":"INTERNAL_PARAMS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PARAMS","previousId":1936,"nextId":1938},{"id":1938,"name":"INTERNAL_PROGRAM","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":15,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1938,"name":"INTERNAL_PROGRAM"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PROGRAM","previousId":1937,"nextId":1933},{"id":1933,"name":"LOCALE_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#LOCALE_FORMAT","previousId":1938,"nextId":1940},{"id":1940,"name":"RESERVED_OPTIONS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":18,"character":13}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"...","permalink":"/api/cli#RESERVED_OPTIONS","previousId":1933,"nextId":1941},{"id":1941,"name":"SPACING_COL","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":35,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_COL","previousId":1940,"nextId":1942},{"id":1942,"name":"SPACING_COL_WIDE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":36,"character":13}],"type":{"type":"literal","value":2},"defaultValue":"2","permalink":"/api/cli#SPACING_COL_WIDE","previousId":1941,"nextId":1943},{"id":1943,"name":"SPACING_ROW","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":37,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_ROW","previousId":1942,"nextId":1932},{"id":1932,"name":"VERSION_FORMAT","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#VERSION_FORMAT","previousId":1943},{"id":1766,"name":"Config","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Config.ts","line":16,"character":16}],"signatures":[{"id":1767,"name":"Config","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A class decorator for defining the following metadata on a `Command`.\\n- path\\n- description\\n- aliases\\n- allowUnknownOptions\\n- allowVariadicParams\\n- categories\\n- category\\n- deprecated\\n- hidden\\n- usage"},"parameters":[{"id":1768,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1769,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1770,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2222,"typeArguments":[{"type":"reference","id":2283,"name":"CommandStaticConfig"}],"name":"PartialConfig"}],"name":"Partial"},"defaultValue":"{}"}],"type":{"type":"reference","name":"ClassDecorator"}}],"permalink":"/api/cli/function/Config","previousId":2011,"nextId":1945},{"id":1945,"name":"applyMarkdown","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyMarkdown.ts","line":3,"character":16}],"signatures":[{"id":1946,"name":"applyMarkdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1947,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyMarkdown","previousId":1766,"nextId":1948},{"id":1948,"name":"applyStyle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyStyle.ts","line":5,"character":16}],"signatures":[{"id":1949,"name":"applyStyle","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1950,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1951,"name":"type","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2360,"name":"StyleType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyStyle","previousId":1945,"nextId":2003},{"id":2003,"name":"checkNodeRequirement","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkNodeRequirement.ts","line":8,"character":16}],"signatures":[{"id":2004,"name":"checkNodeRequirement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that the currently running Node.js process.version satisfies the given semver range.\\nIf not, a console error will be logged, or an error will be thrown."},"parameters":[{"id":2005,"name":"range","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2006,"name":"throws","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":2354,"name":"Middleware"}}],"permalink":"/api/cli/function/checkNodeRequirement","previousId":1948,"nextId":2007},{"id":2007,"name":"checkPackageOutdated","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkPackageOutdated.ts","line":37,"character":16}],"signatures":[{"id":2008,"name":"checkPackageOutdated","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that a package and its provided version is using the latest distribution\\nversion by checking against the npm registry. If not, a console message will be logged."},"parameters":[{"id":2009,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2010,"name":"version","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2354,"name":"Middleware"}}],"permalink":"/api/cli/function/checkPackageOutdated","previousId":2003,"nextId":1952},{"id":1952,"name":"formatCommandCall","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatCommandCall.ts","line":4,"character":16}],"signatures":[{"id":1953,"name":"formatCommandCall","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1954,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1955,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2262,"name":"CommandConfig"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatCommandCall","previousId":2007,"nextId":1956},{"id":1956,"name":"formatDescription","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":7,"character":16}],"signatures":[{"id":1957,"name":"formatDescription","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1958,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1959,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1960,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":9,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}}},{"id":1961,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":10,"character":2}],"type":{"type":"reference","id":2201,"name":"PrimitiveType"}},{"id":1963,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":12,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1962,"name":"description","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":11,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1960,1961,1963,1962]}]}}},{"id":1964,"name":"tags","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatDescription","previousId":1952,"nextId":1965},{"id":1965,"name":"formatType","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":3,"character":16}],"signatures":[{"id":1966,"name":"formatType","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1967,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1968,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1969,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":5,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":1970,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":6,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1971,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1972,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":8,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1969,1970,1971,1972]}]}}},{"id":1973,"name":"inline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatType","previousId":1956,"nextId":1974},{"id":1974,"name":"formatValue","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatValue.ts","line":3,"character":16}],"signatures":[{"id":1975,"name":"formatValue","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1976,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2201,"name":"PrimitiveType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatValue","previousId":1965,"nextId":1977},{"id":1977,"name":"getLongestWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/getLongestWidth.ts","line":3,"character":16}],"signatures":[{"id":1978,"name":"getLongestWidth","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1979,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/cli/function/getLongestWidth","previousId":1974,"nextId":1980},{"id":1980,"name":"groupByCategory","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":16}],"signatures":[{"id":1981,"name":"groupByCategory","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1986,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1982,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1983,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":44}],"type":{"type":"intrinsic","name":"string"}},{"id":1984,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":63}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1985,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":81}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1983,1984,1985]}]}}}],"parameters":[{"id":1987,"name":"items","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":1986,"name":"T"}}},{"id":1988,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2234,"name":"Categories"}}],"type":{"type":"reference","id":1989,"typeArguments":[{"type":"reference","id":1986,"name":"T"}],"name":"CategoryItemMap"}}],"permalink":"/api/cli/function/groupByCategory","previousId":1977,"nextId":1994},{"id":1994,"name":"isArgvSize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/isArgvSize.ts","line":4,"character":16}],"signatures":[{"id":1995,"name":"isArgvSize","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1996,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2122,"name":"Argv"}},{"id":1997,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/cli/function/isArgvSize","previousId":1980,"nextId":1998},{"id":1998,"name":"loadTheme","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/loadTheme.ts","line":8,"character":16}],"signatures":[{"id":1999,"name":"loadTheme","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2361,"name":"ThemePalette"}}],"permalink":"/api/cli/function/loadTheme","previousId":1994,"nextId":2000},{"id":2000,"name":"mapCommandMetadata","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/mapCommandMetadata.ts","line":3,"character":16}],"signatures":[{"id":2001,"name":"mapCommandMetadata","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2002,"name":"commands","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2313,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}],"name":"Record"}}],"type":{"type":"reference","id":2312,"name":"CommandMetadataMap"}}],"permalink":"/api/cli/function/mapCommandMetadata","previousId":1998,"nextId":2113}],"groups":[{"title":"Classes","kind":128,"children":[1830,2011]},{"title":"Functions","kind":64,"children":[1766,1945,1948,2003,2007,1952,1956,1965,1974,1977,1980,1994,1998,2000]},{"title":"Interfaces","kind":256,"children":[2113,2123,2262,2297,2283,2313,2126,2226,2135,2152,2276,2175,2192,2253,2241,2249,2203]},{"title":"Namespaces","kind":4,"children":[1771]},{"title":"Type aliases","kind":4194304,"children":[2112,2122,1824,2234,1989,2275,2312,2261,2235,2236,2134,2354,2349,2350,2167,2174,2230,2190,2191,2232,2222,2201,2257,2260,2202,2360,2330,2361,2220,2221,2224]},{"title":"Variables","kind":32,"children":[1825,1944,1935,1934,1939,1936,1937,1938,1933,1940,1941,1942,1943,1932]}],"sources":[{"fileName":"packages/cli/src/index.ts","line":6,"character":0}],"permalink":"/api/cli"},"urlSlug":"cli"},{"index":false,"label":"Components & hooks","reflection":{"id":10,"name":"@boost/cli/react","kind":2,"kindString":"Module","flags":{},"children":[{"id":2381,"name":"Failure","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A React component that renders a failure state for errors and warnings."},"children":[{"id":2382,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2383,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2384,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2374,"name":"FailureProps"},{"type":"reference","typeArguments":[{"type":"reference","id":2374,"name":"FailureProps"}],"name":"Readonly"}]}}],"type":{"type":"reference","id":2381,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2385,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"comment":{"tags":[{"tag":"deprecated","text":""},{"tag":"see","text":"https://reactjs.org/docs/legacy-context.html\\n"}]},"parameters":[{"id":2386,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2374,"name":"FailureProps"}},{"id":2387,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","id":2381,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2396,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":152,"character":10}],"signatures":[{"id":2397,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","name":"Element"},"overwrites":{"type":"reference","name":"React.Component.render"}}],"overwrites":{"type":"reference","name":"React.Component.render"}},{"id":2390,"name":"renderCodeFrame","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":50,"character":1}],"signatures":[{"id":2391,"name":"renderCodeFrame","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2392,"name":"renderStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":105,"character":1}],"signatures":[{"id":2393,"name":"renderStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2394,"name":"renderWarnings","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":127,"character":1}],"signatures":[{"id":2395,"name":"renderWarnings","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2388,"name":"shouldHideStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":36,"character":1}],"signatures":[{"id":2389,"name":"shouldHideStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"boolean"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2382]},{"title":"Methods","kind":2048,"children":[2396,2390,2392,2394,2388]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":35,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2374,"name":"FailureProps"}],"name":"Component"}],"permalink":"/api/cli-react/class/Failure","nextId":2362},{"id":2365,"name":"ConfirmProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2366,"name":"invalidError","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Error message to display when an invalid character is pressed. Defaults to a custom message."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":12,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2369,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"Omit.label"}},{"id":2367,"name":"no","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a falsy state when pressed. Defaults to \\"N\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2370,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.prefix"}},{"id":2368,"name":"yes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a truthy state when pressed. Defaults to \\"y\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2371,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2372,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2373,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"groups":[{"title":"Properties","kind":1024,"children":[2366,2369,2367,2370,2368]},{"title":"Methods","kind":2048,"children":[2371]}],"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":10,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"PromptProps"},{"type":"literal","value":"validate"}],"name":"Omit"}],"permalink":"/api/cli-react/interface/ConfirmProps","previousId":2555,"nextId":2374},{"id":2374,"name":"FailureProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2375,"name":"binName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the binary being executed."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2376,"name":"commandLine","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Full length command line being ran."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2377,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":23,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2378,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The primary error to display in red."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":25,"character":1}],"type":{"type":"reference","name":"Error"}},{"id":2379,"name":"hideStackTrace","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the primary error stack trace. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":27,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2380,"name":"warnings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Optional errors as warnings to display in yellow."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":29,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}}],"groups":[{"title":"Properties","kind":1024,"children":[2375,2376,2377,2378,2379,2380]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":17,"character":17}],"permalink":"/api/cli-react/interface/FailureProps","previousId":2365,"nextId":2401},{"id":2401,"name":"HeaderProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2402,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Text to display for the label."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2404,"name":"marginBottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The top margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2403,"name":"marginTop","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The bottom margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2405,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Customize the background color using Style. Defaults to normal text."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":15,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2360,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2402,2404,2403,2405]}],"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":7,"character":17}],"permalink":"/api/cli-react/interface/HeaderProps","previousId":2374,"nextId":2409},{"id":2409,"name":"HelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2410,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of categories to use for command and option grouping."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":33,"character":1}],"type":{"type":"reference","id":2234,"name":"Categories"}},{"id":2412,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of commands, typically sub-commands."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":37,"character":1}],"type":{"type":"reference","id":2275,"name":"CommandConfigMap"}},{"id":2411,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Configuration metadata about the current command."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":35,"character":1}],"type":{"type":"reference","id":2262,"name":"CommandConfig"}},{"id":2413,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2414,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A header to display at the top of the output."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":41,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2415,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of command options."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":43,"character":1}],"type":{"type":"reference","id":2174,"name":"OptionConfigMap"}},{"id":2416,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of command params."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":45,"character":1}],"type":{"type":"reference","id":2191,"name":"ParamConfigList"}}],"groups":[{"title":"Properties","kind":1024,"children":[2410,2412,2411,2413,2414,2415,2416]}],"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":31,"character":17}],"permalink":"/api/cli-react/interface/HelpProps","previousId":2401,"nextId":2424},{"id":2424,"name":"IndexHelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2426,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2242,"name":"ProgramOptions.banner"}},{"id":2427,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":80,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2243,"name":"ProgramOptions.bin"}},{"id":2425,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":8,"character":1}],"type":{"type":"reference","name":"ReactNode"}},{"id":2428,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":82,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2244,"name":"ProgramOptions.delimiter"}},{"id":2429,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2245,"name":"ProgramOptions.footer"}},{"id":2430,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2246,"name":"ProgramOptions.header"}},{"id":2431,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":88,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2247,"name":"ProgramOptions.name"}},{"id":2432,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2248,"name":"ProgramOptions.version"}}],"groups":[{"title":"Properties","kind":1024,"children":[2426,2427,2425,2428,2429,2430,2431,2432]}],"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":2241,"name":"ProgramOptions"}],"permalink":"/api/cli-react/interface/IndexHelpProps","previousId":2409,"nextId":2436},{"id":2436,"name":"InputProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2437,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A default value. If none provided, will use an empty state."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2438,"name":"hideCursor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the cursor in the terminal. Will remove the background color, but still functions."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2444,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2439,"name":"mask","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mask to replace every inputted character with."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2443,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom string to display when the value is empty and non-dirty."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2445,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2440,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":15,"character":1}],"signatures":[{"id":2441,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value changes."},"parameters":[{"id":2442,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2446,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2447,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2448,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2449,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2450,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2451,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2437,2438,2444,2439,2443,2445]},{"title":"Methods","kind":2048,"children":[2440,2446,2449]}],"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"PromptProps"}],"permalink":"/api/cli-react/interface/InputProps","previousId":2424,"nextId":2456},{"id":2456,"name":"MultiSelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2457,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of option values selected by default."},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":2474,"name":"T"}},"overwrites":{"type":"reference","id":2502,"name":"SelectProps.defaultSelected"}},{"id":2462,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","id":2504,"name":"SelectProps.label"}},{"id":2470,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":2512,"name":"SelectProps.limit"}},{"id":2461,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":2474,"name":"T"},{"type":"reference","id":2487,"typeArguments":[{"type":"reference","id":2474,"name":"T"}],"name":"SelectOptionLike"}]}},"inheritedFrom":{"type":"reference","id":2503,"name":"SelectProps.options"}},{"id":2471,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2513,"name":"SelectProps.overflowAfterLabel"}},{"id":2472,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2514,"name":"SelectProps.overflowBeforeLabel"}},{"id":2463,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2505,"name":"SelectProps.prefix"}},{"id":2473,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","id":2515,"name":"SelectProps.scrollType"}},{"id":2458,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":17,"character":1}],"signatures":[{"id":2459,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when a value is selected or unselected."},"parameters":[{"id":2460,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2474,"name":"T"}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2464,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2465,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2466,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2507,"name":"SelectProps.onSubmit"}}],"inheritedFrom":{"type":"reference","id":2506,"name":"SelectProps.onSubmit"}},{"id":2467,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2468,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2469,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2510,"name":"SelectProps.validate"}}],"inheritedFrom":{"type":"reference","id":2509,"name":"SelectProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2457,2462,2470,2461,2471,2472,2463,2473]},{"title":"Methods","kind":2048,"children":[2458,2464,2467]}],"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":13,"character":17}],"typeParameter":[{"id":2474,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":2501,"typeArguments":[{"type":"array","elementType":{"type":"reference","id":2474,"name":"T"}},{"type":"reference","id":2474,"name":"T"}],"name":"SelectProps"}],"permalink":"/api/cli-react/interface/MultiSelectProps","previousId":2436,"nextId":2495},{"id":2495,"name":"SelectOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2496,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2497,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2498,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":19,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]}},{"id":2499,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":20,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2500,"name":"T"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2496,2497,2498,2499]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":16,"character":17}],"typeParameter":[{"id":2500,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/cli-react/interface/SelectOption","previousId":2456,"nextId":2501},{"id":2501,"name":"SelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2502,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Option value selected by default."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":25,"character":1}],"type":{"type":"reference","id":2516,"name":"T"}},{"id":2504,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2512,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.limit"}},{"id":2503,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":2517,"name":"V"},{"type":"reference","id":2487,"typeArguments":[{"type":"reference","id":2517,"name":"V"}],"name":"SelectOptionLike"}]}}},{"id":2513,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowAfterLabel"}},{"id":2514,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowBeforeLabel"}},{"id":2505,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2515,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.scrollType"}},{"id":2506,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2507,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2508,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2509,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2510,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2511,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2502,2504,2512,2503,2513,2514,2505,2515]},{"title":"Methods","kind":2048,"children":[2506,2509]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":23,"character":17}],"typeParameter":[{"id":2516,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}},{"id":2517,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":2516,"name":"T"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2516,"name":"T"}],"name":"PromptProps"},{"type":"reference","name":"ScrollableListProps"}],"extendedBy":[{"type":"reference","id":2456,"name":"MultiSelectProps"}],"permalink":"/api/cli-react/interface/SelectProps","previousId":2495,"nextId":2521},{"id":2521,"name":"StyleProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2522,"name":"children","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":7,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]}},{"id":2523,"name":"inverted","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Invert the colors to style the background instead of foreground. Defaults\\nto `false`."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":10,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2524,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Theme palette name to style with. Defaults to \\"none\\"."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2360,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2522,2523,2524]}],"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":6,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"TextProps"},{"type":"union","types":[{"type":"literal","value":"bold"},{"type":"literal","value":"italic"},{"type":"literal","value":"underline"},{"type":"literal","value":"wrap"}]}],"name":"Pick"}],"permalink":"/api/cli-react/interface/StyleProps","previousId":2501,"nextId":2420},{"id":2420,"name":"HiddenInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2436,"name":"InputProps"},{"type":"union","types":[{"type":"literal","value":"hideCursor"},{"type":"literal","value":"mask"}]}],"name":"Omit"},"permalink":"/api/cli-react#HiddenInputProps","previousId":2521,"nextId":2478},{"id":2478,"name":"PasswordInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2436,"name":"InputProps"},{"type":"literal","value":"mask"}],"name":"Omit"},"permalink":"/api/cli-react#PasswordInputProps","previousId":2420,"nextId":2487},{"id":2487,"name":"SelectOptionLike","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":12,"character":12}],"typeParameter":[{"id":2494,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2488,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2489,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":5}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2490,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":23}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"React.ReactNode"}],"name":"NonNullable"}}],"groups":[{"title":"Properties","kind":1024,"children":[2489,2490]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":3}]}},{"type":"reflection","declaration":{"id":2491,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2492,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":5}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"React.ReactNode"}],"name":"NonNullable"}},{"id":2493,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":42}],"type":{"type":"reference","id":2494,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2492,2493]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":3}]}}]},"permalink":"/api/cli-react#SelectOptionLike","previousId":2478,"nextId":2560},{"id":2560,"name":"ProgramContext","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/cli/src/ProgramContext.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2253,"name":"ProgramContextType"}],"name":"Context"},"defaultValue":"...","permalink":"/api/cli-react#ProgramContext","previousId":2487},{"id":2362,"name":"Confirm","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":22,"character":16}],"signatures":[{"id":2363,"name":"Confirm","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a yes/no confirmation prompt."},"parameters":[{"id":2364,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2365,"name":"ConfirmProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Confirm","previousId":2381,"nextId":2398},{"id":2398,"name":"Header","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":21,"character":16}],"signatures":[{"id":2399,"name":"Header","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a header/title within a terminal menu."},"parameters":[{"id":2400,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2401,"name":"HeaderProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Header","previousId":2362,"nextId":2406},{"id":2406,"name":"Help","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":53,"character":16}],"signatures":[{"id":2407,"name":"Help","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for a command.\\nIncludes all sub-commands, options, params, and more."},"parameters":[{"id":2408,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2409,"name":"HelpProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Help","previousId":2398,"nextId":2417},{"id":2417,"name":"HiddenInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":9,"character":16}],"signatures":[{"id":2418,"name":"HiddenInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field that hides its content from the terminal."},"parameters":[{"id":2419,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2420,"name":"HiddenInputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/HiddenInput","previousId":2406,"nextId":2421},{"id":2421,"name":"IndexHelp","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":14,"character":16}],"signatures":[{"id":2422,"name":"IndexHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for the entire program."},"parameters":[{"id":2423,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2424,"name":"IndexHelpProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/IndexHelp","previousId":2417,"nextId":2433},{"id":2433,"name":"Input","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":23,"character":16}],"signatures":[{"id":2434,"name":"Input","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field, allowing the user to enter information."},"parameters":[{"id":2435,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2436,"name":"InputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Input","previousId":2421,"nextId":2452},{"id":2452,"name":"MultiSelect","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":24,"character":16}],"signatures":[{"id":2453,"name":"MultiSelect","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where multiple options can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2454,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2455,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2456,"typeArguments":[{"type":"reference","id":2454,"name":"T"}],"name":"MultiSelectProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/MultiSelect","previousId":2433,"nextId":2475},{"id":2475,"name":"PasswordInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":9,"character":16}],"signatures":[{"id":2476,"name":"PasswordInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field with characters masked with \\"*\\"."},"parameters":[{"id":2477,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2478,"name":"PasswordInputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/PasswordInput","previousId":2452,"nextId":2483},{"id":2483,"name":"Select","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":55,"character":16}],"signatures":[{"id":2484,"name":"Select","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where a single option can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2485,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":2486,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2501,"typeArguments":[{"type":"reference","id":2485,"name":"T"},{"type":"reference","id":2485,"name":"T"}],"name":"SelectProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Select","previousId":2475,"nextId":2518},{"id":2518,"name":"Style","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":18,"character":16}],"signatures":[{"id":2519,"name":"Style","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that styles text and backgrounds based on the current Boost theme."},"parameters":[{"id":2520,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2521,"name":"StyleProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli-react/function/Style","previousId":2483,"nextId":2479},{"id":2479,"name":"normalizeOptions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":30,"character":16}],"signatures":[{"id":2480,"name":"normalizeOptions","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2481,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2482,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"array","elementType":{"type":"reference","id":2495,"typeArguments":[{"type":"reference","id":2481,"name":"T"}],"name":"SelectOption"}}}],"permalink":"/api/cli-react/function/normalizeOptions","previousId":2518,"nextId":2525},{"id":2525,"name":"useDimensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":16}],"signatures":[{"id":2526,"name":"useDimensions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reflection","declaration":{"id":2527,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2528,"name":"height","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":35}],"type":{"type":"intrinsic","name":"number"}},{"id":2529,"name":"width","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":51}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[2528,2529]}],"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":33}]}}}],"permalink":"/api/cli-react/function/useDimensions","previousId":2479,"nextId":2530},{"id":2530,"name":"useIsMounted","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useIsMounted.ts","line":3,"character":16}],"signatures":[{"id":2531,"name":"useIsMounted","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"MutableRefObject"}}],"permalink":"/api/cli-react/function/useIsMounted","previousId":2525,"nextId":2532},{"id":2532,"name":"useListNavigation","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":3,"character":16}],"signatures":[{"id":2533,"name":"useListNavigation","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2534,"name":"list","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":2535,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2536,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":9}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2537,"name":"divider","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":29}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2536,2537]}]}}}},{"id":2538,"name":"defaultIndex","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reflection","declaration":{"id":2539,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2540,"name":"highlightedIndex","kind":1024,"kindString":"Property","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2541,"name":"onKeyDown","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2542,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2543,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":2544,"name":"onKeyLeft","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2545,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2546,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":2547,"name":"onKeyRight","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2548,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2549,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":2550,"name":"onKeyUp","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2551,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2552,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"groups":[{"title":"Properties","kind":1024,"children":[2540,2541,2544,2547,2550]}]}}}],"permalink":"/api/cli-react/function/useListNavigation","previousId":2530,"nextId":2553},{"id":2553,"name":"useProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useProgram.ts","line":8,"character":16}],"signatures":[{"id":2554,"name":"useProgram","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2253,"name":"ProgramContextType"}}],"permalink":"/api/cli-react/function/useProgram","previousId":2532,"nextId":2555},{"id":2555,"name":"useRenderLoop","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":5,"character":16}],"signatures":[{"id":2556,"name":"useRenderLoop","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2557,"name":"fps","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"},"defaultValue":"30"}],"type":{"type":"reflection","declaration":{"id":2558,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":5,"character":49}],"signatures":[{"id":2559,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/cli-react/function/useRenderLoop","previousId":2553,"nextId":2365}],"groups":[{"title":"Classes","kind":128,"children":[2381]},{"title":"Functions","kind":64,"children":[2362,2398,2406,2417,2421,2433,2452,2475,2483,2518,2479,2525,2530,2532,2553,2555]},{"title":"Interfaces","kind":256,"children":[2365,2374,2401,2409,2424,2436,2456,2495,2501,2521]},{"title":"Type aliases","kind":4194304,"children":[2420,2478,2487]},{"title":"Variables","kind":32,"children":[2560]}],"sources":[{"fileName":"packages/cli/src/react.ts","line":1,"character":0}],"permalink":"/api/cli-react"},"urlSlug":"cli-react"},{"index":false,"label":"Test utilities","reflection":{"id":11,"name":"@boost/cli/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":53,"name":"MockReadStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":54,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":55,"name":"new MockReadStream","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":53,"name":"MockReadStream"}}]},{"id":56,"name":"isTTY","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"groups":[{"title":"Constructors","kind":512,"children":[54]},{"title":"Properties","kind":1024,"children":[56]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":19,"character":13}],"permalink":"/api/cli-test/class/MockReadStream","nextId":57},{"id":57,"name":"MockWriteStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":58,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":30,"character":1}],"signatures":[{"id":59,"name":"new MockWriteStream","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":60,"name":"append","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":57,"name":"MockWriteStream"}}]},{"id":61,"name":"append","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":62,"name":"columns","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"80"},{"id":63,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":67,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":43,"character":1}],"signatures":[{"id":68,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":71,"name":"off","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":49,"character":1}],"signatures":[{"id":72,"name":"off","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":69,"name":"on","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":47,"character":1}],"signatures":[{"id":70,"name":"on","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":64,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":35,"character":1}],"signatures":[{"id":65,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":66,"name":"string","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[58]},{"title":"Properties","kind":1024,"children":[61,62,63]},{"title":"Methods","kind":2048,"children":[67,71,69,64]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":23,"character":13}],"permalink":"/api/cli-test/class/MockWriteStream","previousId":53,"nextId":15},{"id":15,"name":"mockProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":80,"character":16}],"signatures":[{"id":16,"name":"mockProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a `Program` instance with required options pre-filled and streams mocked\\n(unless manually provided).","text":"```ts\\nimport { mockProgram } from \'@boost/cli/test\';\\n\\nconst program = mockProgram({ name: \'Example\' });\\n```\\n"},"parameters":[{"id":17,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2241,"name":"ProgramOptions"}],"name":"Partial"}},{"id":18,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2249,"name":"ProgramStreams"}}],"type":{"type":"reference","id":2011,"name":"Program"}}],"permalink":"/api/cli-test/function/mockProgram","previousId":57,"nextId":12},{"id":12,"name":"mockStreams","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":62,"character":16}],"signatures":[{"id":13,"name":"mockStreams","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns mocked `stderr`, `stdout`, and `stdin` streams that can be passed to a `Program`.\\nThis does not mock all stream functionality, only those required by Boost and Ink.","text":"```ts\\nimport { mockStreams } from \'@boost/cli/test\';\\n\\nconst streams = mockStreams();\\n```\\n"},"parameters":[{"id":14,"name":"append","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","id":2249,"name":"ProgramStreams"}}],"permalink":"/api/cli-test/function/mockStreams","previousId":15,"nextId":19},{"id":19,"name":"renderComponent","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":109,"character":22}],"signatures":[{"id":20,"name":"renderComponent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to render a React component with Ink and return the rendered result\\nas a terminal compatible string. If `stripped` is true, it will strip ANSI\\nescape escape sequences.","text":"```tsx\\nimport { renderComponent } from \'@boost/cli/test\';\\nimport TestComponent from \'../src/components/TestComponent\';\\n\\nit(\'renders a component\', async () => {\\n\\texpect(await renderComponent(<TestComponent />)).toMatchSnapshot();\\n});\\n```\\n\\n> As an alternative, we also suggest using the official\\n> [ink-testing-library](https://github.com/vadimdemedes/ink-testing-library).\\n"},"parameters":[{"id":21,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}},{"id":22,"name":"stripped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}],"permalink":"/api/cli-test/function/renderComponent","previousId":12,"nextId":23},{"id":23,"name":"runCommand","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":156,"character":22}],"signatures":[{"id":24,"name":"runCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Command` outside the context of a `Program`, but mimics similar functionality,\\nincluding React component rendering. Params are required as they\'re passed to the run method,\\nwhile options are optional and assume class properties have been defined. Also, the `exit`\\nand `log` methods have been mocked with Jest spies so that they can be asserted.","text":"```ts\\nimport { runCommand } from \'@boost/cli/test\';\\nimport TestCommand from \'../src/commands/TestCommand\';\\n\\nit(\'runs a command\', async () => {\\n\\tconst command = new TestCommand();\\n\\n\\texpect(await runCommand(command, [\'foo\', \'bar\', \'baz\'])).toMatchSnapshot();\\n\\texpect(command.log).toHaveBeenCalled();\\n});\\n```\\n\\n> Since there is no `Program` context, any functionality that requires a program will fail. If\\n> needed, use `runProgram()` instead.\\n"},"typeParameter":[{"id":25,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2226,"name":"GlobalOptions"}},{"id":26,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2201,"name":"PrimitiveType"}}}],"parameters":[{"id":27,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1830,"typeArguments":[{"type":"reference","id":25,"name":"O"},{"type":"reference","id":26,"name":"P"},{"type":"reflection","declaration":{"id":28,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Command"}},{"id":29,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":26,"name":"P"}},{"id":30,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":25,"name":"O"}],"name":"Partial"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}],"permalink":"/api/cli-test/function/runCommand","previousId":19,"nextId":42},{"id":42,"name":"runProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":257,"character":22}],"signatures":[{"id":43,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Program` as if it were ran on the command line, including middleware,\\ncommands, success and failure states, and more. Utilizes mocked streams to capture\\nand return standard output and ANSI stripped output. Failed runs will not throw\\nand instead will render a failure output.","text":"```ts\\nimport { runProgram } from \'@boost/cli/test\';\\nimport Program from \'../src/program\';\\n\\nit(\'runs a program\', async () => {\\n\\tconst program = new Program();\\n\\n\\tconst { code, output } = await runProgram(program, [\'cmd\', \'--foo\', \'123\', \'bar\']);\\n\\n\\texpect(output).toMatchSnapshot();\\n\\texpect(code).toBe(0);\\n});\\n```\\n"},"parameters":[{"id":44,"name":"program","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2011,"name":"Program"}},{"id":45,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":46,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":47,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":48,"name":"append","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/test.ts","line":260,"character":12}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[48]}]}},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":49,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":50,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":13}],"type":{"type":"reference","id":2235,"name":"ExitCode"}},{"id":51,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":29}],"type":{"type":"intrinsic","name":"string"}},{"id":52,"name":"outputStripped","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":45}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[50,51,52]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":11}]}}],"name":"Promise"}}],"permalink":"/api/cli-test/function/runProgram","previousId":23,"nextId":31},{"id":31,"name":"runTask","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":205,"character":16}],"signatures":[{"id":32,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a task function outside the context of a `Command`, in complete isolation.\\nA mock command context is provided with standard defaults, and can be customized\\nthrough the 3rd argument.","text":"```ts\\nimport { runTask } from \'@boost/cli/test\';\\nimport testTask from \'../src/tasks/testTask\';\\n\\nit(\'runs a task\', async () => {\\n\\tconst context = {\\n\\t\\tlog: jest.fn(),\\n\\t};\\n\\n\\texpect(await runTask(testTask, [\'foo\', \'bar\', \'baz\'], context)).toMatchSnapshot();\\n\\texpect(context.log).toHaveBeenCalled();\\n});\\n```\\n"},"typeParameter":[{"id":33,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":34,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}},{"id":35,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2330,"typeArguments":[{"type":"reference","id":2226,"name":"GlobalOptions"}],"name":"TaskContext"}}],"parameters":[{"id":36,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":37,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":38,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":39,"name":"argz","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":33,"name":"A"}}],"type":{"type":"reference","id":34,"name":"R"}}]}}},{"id":40,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":33,"name":"A"}},{"id":41,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":35,"name":"T"}],"name":"Partial"}}],"type":{"type":"reference","id":34,"name":"R"}}],"permalink":"/api/cli-test/function/runTask","previousId":42}],"groups":[{"title":"Classes","kind":128,"children":[53,57]},{"title":"Functions","kind":64,"children":[15,12,19,23,42,31]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":3,"character":0}],"permalink":"/api/cli-test"},"urlSlug":"cli-test"}],"packageName":"@boost/cli","packageVersion":"3.0.3"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":73,"name":"@boost/common","kind":2,"kindString":"Module","flags":{},"children":[{"id":2561,"name":"json","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":2580,"name":"JSONStringifyOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2582,"name":"quote","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":9,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":2583,"name":"replacer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":10,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},{"type":"reflection","declaration":{"id":2584,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2585,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2586,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2587,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]}},{"id":2581,"name":"space","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":8,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2582,2583,2581]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":7,"character":17}]},{"id":2575,"name":"JSONReviver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":5,"character":12}],"type":{"type":"reflection","declaration":{"id":2576,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":5,"character":26}],"signatures":[{"id":2577,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2578,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2579,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}},{"id":2571,"name":"load","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":21,"character":16}],"signatures":[{"id":2572,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2573,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2574,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2573,"name":"T"}}]},{"id":2562,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":13,"character":16}],"signatures":[{"id":2563,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2564,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2565,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2566,"name":"reviver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2575,"name":"JSONReviver"}}],"type":{"type":"reference","id":2564,"name":"T"}}]},{"id":2567,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":17,"character":16}],"signatures":[{"id":2568,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2569,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2570,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2580,"name":"JSONStringifyOptions"},"defaultValue":"{}"}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[2580]},{"title":"Type aliases","kind":4194304,"children":[2575]},{"title":"Functions","kind":64,"children":[2571,2562,2567]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":1,"character":0}],"permalink":"/api/common/namespace/json","previousId":3000,"nextId":2588},{"id":2588,"name":"yaml","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":2598,"name":"load","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":13,"character":16}],"signatures":[{"id":2599,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2600,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2601,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2600,"name":"T"}}]},{"id":2589,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":5,"character":16}],"signatures":[{"id":2590,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2591,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2592,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2593,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":2591,"name":"T"}}]},{"id":2594,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":9,"character":16}],"signatures":[{"id":2595,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2596,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2597,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Functions","kind":64,"children":[2598,2589,2594]}],"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":1,"character":0}],"permalink":"/api/common/namespace/yaml","previousId":2561,"nextId":2886},{"id":2610,"name":"Contract","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":2611,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":8,"character":1}],"signatures":[{"id":2612,"name":"new Contract","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":2614,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2613,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":2615,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2614,"name":"T"}}],"type":{"type":"reference","id":2610,"typeArguments":[{"type":"reference","id":2614,"name":"T"}],"name":"Contract"}}]},{"id":2616,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":6,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2614,"name":"T"}],"name":"Required"}],"name":"Readonly"},"implementationOf":{"type":"reference","id":2905,"name":"Optionable.options"}},{"id":2623,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":51,"character":10}],"signatures":[{"id":2624,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":2625,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":2626,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"implementationOf":{"type":"reference","name":"Optionable.blueprint"}}],"implementationOf":{"type":"reference","id":2906,"name":"Optionable.blueprint"}},{"id":2617,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":28,"character":1}],"signatures":[{"id":2618,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2619,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2614,"name":"T"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2620,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2621,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2622,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2614,"name":"T"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2614,"name":"T"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2614,"name":"T"}],"name":"Required"}],"name":"Readonly"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2611]},{"title":"Properties","kind":1024,"children":[2616]},{"title":"Methods","kind":2048,"children":[2623,2617]}],"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":22}],"typeParameter":[{"id":2628,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2627,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":50}]}}}],"implementedTypes":[{"type":"reference","id":2904,"typeArguments":[{"type":"reference","id":2614,"name":"T"}],"name":"Optionable"}],"permalink":"/api/common/class/Contract","nextId":2629},{"id":2629,"name":"ExitError","kind":128,"kindString":"Class","flags":{},"children":[{"id":2630,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":4,"character":1}],"signatures":[{"id":2631,"name":"new ExitError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2632,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2633,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":2629,"name":"ExitError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":2634,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[2630]},{"title":"Properties","kind":1024,"children":[2634]}],"sources":[{"fileName":"packages/common/src/ExitError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/common/class/ExitError","previousId":2610,"nextId":2686},{"id":2686,"name":"ModulePath","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"An immutable class for operating on Node.js module IDs, names, and paths."},"children":[{"id":2693,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":12,"character":1}],"signatures":[{"id":2694,"name":"new ModulePath","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2695,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2686,"name":"ModulePath"}}]},{"id":2698,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":34,"character":1}],"signatures":[{"id":2699,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `ModulePath` instance."},"parameters":[{"id":2700,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2686,"name":"ModulePath"}}]},{"id":2701,"name":"hasScope","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":43,"character":1}],"signatures":[{"id":2702,"name":"hasScope","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the module is scoped within a private namespace\\n(starts with @)."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2703,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":51,"character":1}],"signatures":[{"id":2704,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the module name without any trailing import paths,\\nor optionally without the private scope."},"parameters":[{"id":2705,"name":"withoutScope","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2706,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":64,"character":1}],"signatures":[{"id":2707,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current module path as a normalized string."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2866,"name":"Pathable.path"}}],"implementationOf":{"type":"reference","id":2865,"name":"Pathable.path"}},{"id":2708,"name":"scope","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":79,"character":1}],"signatures":[{"id":2709,"name":"scope","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the private scope with leading @, or null if not defined."},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}]},{"id":2710,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":87,"character":1}],"signatures":[{"id":2711,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2712,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":91,"character":1}],"signatures":[{"id":2713,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2868,"name":"Pathable.toString"}}],"implementationOf":{"type":"reference","id":2867,"name":"Pathable.toString"}},{"id":2687,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":19,"character":8}],"signatures":[{"id":2688,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `ModulePath` instance."},"parameters":[{"id":2689,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2686,"name":"ModulePath"}}]},{"id":2690,"name":"path","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":26,"character":8}],"signatures":[{"id":2691,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a module path-like value to a formatted module path string."},"parameters":[{"id":2692,"name":"part","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2693]},{"title":"Methods","kind":2048,"children":[2698,2701,2703,2706,2708,2710,2712,2687,2690]}],"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":7,"character":13}],"implementedTypes":[{"type":"reference","id":2864,"name":"Pathable"}],"permalink":"/api/common/class/ModulePath","previousId":2629,"nextId":2714},{"id":2714,"name":"PackageGraph","kind":128,"kindString":"Class","flags":{},"children":[{"id":2715,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":24,"character":1}],"signatures":[{"id":2716,"name":"new PackageGraph","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":2717,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2935,"name":"PackageStructure"},"default":{"type":"reference","id":2935,"name":"PackageStructure"}}],"parameters":[{"id":2718,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2717,"name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":2714,"typeArguments":[{"type":"reference","id":2717,"name":"T"}],"name":"PackageGraph"}}]},{"id":2722,"name":"addPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":33,"character":1}],"signatures":[{"id":2723,"name":"addPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a package by name with an associated `package.json` object.\\nWill map a dependency between the package and its dependees\\nfound in `dependencies` and `peerDependencies`."},"parameters":[{"id":2724,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2717,"name":"T"}}],"type":{"type":"reference","id":2714,"typeArguments":[{"type":"reference","id":2717,"name":"T"}],"name":"PackageGraph"}}]},{"id":2725,"name":"addPackages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":50,"character":1}],"signatures":[{"id":2726,"name":"addPackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add multiple packages."},"parameters":[{"id":2727,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2717,"name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":2714,"typeArguments":[{"type":"reference","id":2717,"name":"T"}],"name":"PackageGraph"}}]},{"id":2732,"name":"resolveBatchList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":153,"character":1}],"signatures":[{"id":2733,"name":"resolveBatchList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of batched `package.json` objects\\n(array of arrays) in the order they are depended on.","text":"```ts\\ngraph.resolveBatchList().forEach((pkgs) => {\\n\\tpkgs.forEach((pkg) => {\\n\\t\\tconsole.log(pkg.name);\\n\\t});\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"array","elementType":{"type":"reference","id":2717,"name":"T"}}}}]},{"id":2728,"name":"resolveList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":68,"character":1}],"signatures":[{"id":2729,"name":"resolveList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of all\\n`package.json` objects in the order they are depended on.","text":"```ts\\ngraph.resolveList().forEach((pkg) => {\\n\\tconsole.log(pkg.name);\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"reference","id":2717,"name":"T"}}}]},{"id":2730,"name":"resolveTree","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":90,"character":1}],"signatures":[{"id":2731,"name":"resolveTree","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a tree of nodes for all\\n`package.json` objects and their dependency mappings.","text":"```ts\\ngraph.resolveTree().nodes.forEach((node) => {\\n\\tconsole.log(node.package.name);\\n\\n\\tif (node.nodes) {\\n\\t\\t// Dependents\\n\\t}\\n});\\n```\\n"},"type":{"type":"reference","id":2990,"typeArguments":[{"type":"reference","id":2717,"name":"T"}],"name":"PackageGraphTree"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2715]},{"title":"Methods","kind":2048,"children":[2722,2725,2732,2728,2730]}],"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":17,"character":13}],"typeParameter":[{"id":2752,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2935,"name":"PackageStructure"},"default":{"type":"reference","id":2935,"name":"PackageStructure"}}],"permalink":"/api/common/class/PackageGraph","previousId":2686,"nextId":2753},{"id":2753,"name":"Path","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"An immutable class for operating on file system paths.\\nWill normalize path separators based on the operating system,\\n\\"/\\" on Linux/MacOS, and \\"\\\\\\\\\\" on Windows."},"children":[{"id":2766,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":19,"character":1}],"signatures":[{"id":2767,"name":"new Path","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2768,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2753,"name":"Path"}}]},{"id":2754,"name":"DELIMITER","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":11,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.delimiter"},{"id":2755,"name":"SEP","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":13,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.sep"},{"id":2771,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":48,"character":1}],"signatures":[{"id":2772,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `Path` instance."},"parameters":[{"id":2773,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2753,"name":"Path"}}]},{"id":2774,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":55,"character":1}],"signatures":[{"id":2775,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if both paths are equal using strict equality."},"parameters":[{"id":2776,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2780,"name":"exists","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":71,"character":1}],"signatures":[{"id":2781,"name":"exists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path exists."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2777,"name":"ext","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":62,"character":1}],"signatures":[{"id":2778,"name":"ext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the extension (if applicable) with or without leading period."},"parameters":[{"id":2779,"name":"withoutPeriod","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2782,"name":"isAbsolute","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":78,"character":1}],"signatures":[{"id":2783,"name":"isAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is absolute."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2784,"name":"isDirectory","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":85,"character":1}],"signatures":[{"id":2785,"name":"isDirectory","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a folder."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2786,"name":"isFile","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":92,"character":1}],"signatures":[{"id":2787,"name":"isFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a file."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2788,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":99,"character":1}],"signatures":[{"id":2789,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the file name (with optional extension) or folder name."},"parameters":[{"id":2790,"name":"withoutExtension","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2791,"name":"parent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":112,"character":1}],"signatures":[{"id":2792,"name":"parent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the parent folder as a new `Path` instance."},"type":{"type":"reference","id":2753,"name":"Path"}}]},{"id":2793,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":119,"character":1}],"signatures":[{"id":2794,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current path as a normalized string."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2866,"name":"Pathable.path"}}],"implementationOf":{"type":"reference","id":2865,"name":"Pathable.path"}},{"id":2795,"name":"prepend","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":132,"character":1}],"signatures":[{"id":2796,"name":"prepend","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Prepend path parts to the beginning of the current path\\nand return a new `Path` instance."},"parameters":[{"id":2797,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2753,"name":"Path"}}]},{"id":2798,"name":"realPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":140,"character":1}],"signatures":[{"id":2799,"name":"realPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a canonical path by resolving directories and symlinks."},"type":{"type":"intrinsic","name":"string"}}]},{"id":2800,"name":"relativeTo","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":148,"character":1}],"signatures":[{"id":2801,"name":"relativeTo","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new relative `Path` instance from the current\\n\\"from\\" path to the defined \\"to\\" path."},"parameters":[{"id":2802,"name":"to","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2753,"name":"Path"}}]},{"id":2803,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":156,"character":1}],"signatures":[{"id":2804,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new `Path` instance where the current path is accurately\\nresolved against the defined working directory."},"parameters":[{"id":2805,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2753,"name":"Path"}}]},{"id":2806,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":160,"character":1}],"signatures":[{"id":2807,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2808,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":164,"character":1}],"signatures":[{"id":2809,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2868,"name":"Pathable.toString"}}],"implementationOf":{"type":"reference","id":2867,"name":"Pathable.toString"}},{"id":2756,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":26,"character":8}],"signatures":[{"id":2757,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `Path` instance."},"parameters":[{"id":2758,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2753,"name":"Path"}}]},{"id":2759,"name":"path","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":33,"character":8}],"signatures":[{"id":2760,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a path-like value to a formatted path string."},"parameters":[{"id":2761,"name":"part","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2762,"name":"resolve","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":40,"character":8}],"signatures":[{"id":2763,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `create()` but also resolves the path against a working directory."},"parameters":[{"id":2764,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}},{"id":2765,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2753,"name":"Path"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2766]},{"title":"Properties","kind":1024,"children":[2754,2755]},{"title":"Methods","kind":2048,"children":[2771,2774,2780,2777,2782,2784,2786,2788,2791,2793,2795,2798,2800,2803,2806,2808,2756,2759,2762]}],"sources":[{"fileName":"packages/common/src/Path.ts","line":10,"character":13}],"extendedBy":[{"type":"reference","id":3004,"name":"VirtualPath"}],"implementedTypes":[{"type":"reference","id":2864,"name":"Pathable"}],"permalink":"/api/common/class/Path","previousId":2714,"nextId":2810},{"id":2810,"name":"PathResolver","kind":128,"kindString":"Class","flags":{},"children":[{"id":2815,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":12,"character":1}],"signatures":[{"id":2816,"name":"new PathResolver","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2817,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2871,"name":"ModuleResolver"}}],"type":{"type":"reference","id":2810,"name":"PathResolver"}}]},{"id":2820,"name":"getLookupPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":32,"character":1}],"signatures":[{"id":2821,"name":"getLookupPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all lookup paths."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":2822,"name":"lookupFilePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":40,"character":1}],"signatures":[{"id":2823,"name":"lookupFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a file system path to look for, resolved against the defined current\\nworking directory (or `process.cwd()` otherwise)."},"parameters":[{"id":2824,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}},{"id":2825,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2810,"name":"PathResolver"}}]},{"id":2826,"name":"lookupFilePathWithExts","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":54,"character":1}],"signatures":[{"id":2827,"name":"lookupFilePathWithExts","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a file system path with a list of possible extensions to look for,\\nresolved against the defined current working directory (or `process.cwd()` otherwise)."},"parameters":[{"id":2828,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}},{"id":2829,"name":"exts","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2830,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2810,"name":"PathResolver"}}]},{"id":2831,"name":"lookupNodeModule","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":67,"character":1}],"signatures":[{"id":2832,"name":"lookupNodeModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a Node.js module, either by name or relative path, to look for."},"parameters":[{"id":2833,"name":"moduleId","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2810,"name":"PathResolver"}}]},{"id":2834,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":82,"character":7}],"signatures":[{"id":2835,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a list of lookups, attempt to find the first real/existing path and\\nreturn a resolved absolute path. If a file system path, will check using `fs.exists`.\\nIf a node module path, will check using the provided resolver."},"parameters":[{"id":2836,"name":"startDir","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2882,"name":"ResolvedLookup"}],"name":"Promise"}}]},{"id":2837,"name":"resolvePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":130,"character":7}],"signatures":[{"id":2838,"name":"resolvePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `resolve()` but only returns the resolved file path."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2864,"name":"Pathable"}],"name":"Promise"}}]},{"id":2811,"name":"defaultResolver","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":16,"character":14}],"signatures":[{"id":2812,"name":"defaultResolver","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2813,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2814,"name":"startDir","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2815]},{"title":"Methods","kind":2048,"children":[2820,2822,2826,2831,2834,2837,2811]}],"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":7,"character":13}],"permalink":"/api/common/class/PathResolver","previousId":2753,"nextId":2841},{"id":2841,"name":"Project","kind":128,"kindString":"Class","flags":{},"children":[{"id":2845,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":18,"character":1}],"signatures":[{"id":2846,"name":"new Project","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2847,"name":"root","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","id":2841,"name":"Project"}}]},{"id":2848,"name":"root","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":16,"character":10}],"type":{"type":"reference","id":2753,"name":"Path"}},{"id":2849,"name":"createWorkspaceMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":33,"character":1}],"signatures":[{"id":2850,"name":"createWorkspaceMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a workspace metadata object composed of absolute file paths."},"parameters":[{"id":2851,"name":"jsonPath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2994,"name":"WorkspaceMetadata"}}]},{"id":2852,"name":"getPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":51,"character":1}],"signatures":[{"id":2853,"name":"getPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the contents of the root `package.json`."},"typeParameter":[{"id":2854,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2935,"name":"PackageStructure"}}],"type":{"type":"reference","id":2854,"name":"T"}}]},{"id":2855,"name":"getWorkspaceGlobs","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":3074,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":67,"character":1}],"signatures":[{"id":2856,"name":"getWorkspaceGlobs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace globs as they are configured\\nin `package.json` or `lerna.json`. Glob patterns will _always_\\nuse forward slashes, regardless of OS."},"parameters":[{"id":2857,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2839,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":2861,"name":"getWorkspacePackagePaths","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":3074,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":140,"character":1}],"signatures":[{"id":2862,"name":"getWorkspacePackagePaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace package paths, resolved against the file system.\\nAbsolute file paths are returned unless the `relative` option is true."},"parameters":[{"id":2863,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2839,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"reference","id":2753,"name":"Path"}}}]},{"id":2858,"name":"getWorkspacePackages","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":3074,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":118,"character":1}],"signatures":[{"id":2859,"name":"getWorkspacePackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all `package.json`s across all workspaces and their packages.\\nOnce loaded, append workspace path metadata."},"typeParameter":[{"id":2860,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2935,"name":"PackageStructure"}}],"type":{"type":"array","elementType":{"type":"reference","id":3000,"typeArguments":[{"type":"reference","id":2860,"name":"T"}],"name":"WorkspacePackage"}}}]},{"id":2842,"name":"normalizeGlob","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":26,"character":8}],"signatures":[{"id":2843,"name":"normalizeGlob","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Normalize a glob pattern or path for use on POSIX and Windows machines.","tags":[{"tag":"link","text":"https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows\\n"}]},"parameters":[{"id":2844,"name":"pattern","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2845]},{"title":"Properties","kind":1024,"children":[2848]},{"title":"Methods","kind":2048,"children":[2849,2852,2855,2861,2858,2842]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":15,"character":13}],"permalink":"/api/common/class/Project","previousId":2810,"nextId":3004},{"id":3004,"name":"VirtualPath","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"An immutable class for operating on file system paths,\\nthat always normalize using a forward slash (\\"/\\") for path separators.\\nUseful for paths found in configurations, globs, etc."},"children":[{"id":3017,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3018,"name":"new VirtualPath","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3019,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":3004,"name":"VirtualPath"},"inheritedFrom":{"type":"reference","id":2767,"name":"Path.constructor"}}],"inheritedFrom":{"type":"reference","id":2766,"name":"Path.constructor"}},{"id":3008,"name":"DELIMITER","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":11,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.delimiter","inheritedFrom":{"type":"reference","id":2754,"name":"Path.DELIMITER"}},{"id":3009,"name":"SEP","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":13,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.sep","inheritedFrom":{"type":"reference","id":2755,"name":"Path.SEP"}},{"id":3024,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":48,"character":1}],"signatures":[{"id":3025,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `Path` instance."},"parameters":[{"id":3026,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2753,"name":"Path"},"inheritedFrom":{"type":"reference","id":2772,"name":"Path.append"}}],"inheritedFrom":{"type":"reference","id":2771,"name":"Path.append"}},{"id":3027,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":55,"character":1}],"signatures":[{"id":3028,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if both paths are equal using strict equality."},"parameters":[{"id":3029,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2775,"name":"Path.equals"}}],"inheritedFrom":{"type":"reference","id":2774,"name":"Path.equals"}},{"id":3033,"name":"exists","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":71,"character":1}],"signatures":[{"id":3034,"name":"exists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path exists."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2781,"name":"Path.exists"}}],"inheritedFrom":{"type":"reference","id":2780,"name":"Path.exists"}},{"id":3030,"name":"ext","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":62,"character":1}],"signatures":[{"id":3031,"name":"ext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the extension (if applicable) with or without leading period."},"parameters":[{"id":3032,"name":"withoutPeriod","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2778,"name":"Path.ext"}}],"inheritedFrom":{"type":"reference","id":2777,"name":"Path.ext"}},{"id":3035,"name":"isAbsolute","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":78,"character":1}],"signatures":[{"id":3036,"name":"isAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is absolute."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2783,"name":"Path.isAbsolute"}}],"inheritedFrom":{"type":"reference","id":2782,"name":"Path.isAbsolute"}},{"id":3037,"name":"isDirectory","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":85,"character":1}],"signatures":[{"id":3038,"name":"isDirectory","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a folder."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2785,"name":"Path.isDirectory"}}],"inheritedFrom":{"type":"reference","id":2784,"name":"Path.isDirectory"}},{"id":3039,"name":"isFile","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":92,"character":1}],"signatures":[{"id":3040,"name":"isFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a file."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2787,"name":"Path.isFile"}}],"inheritedFrom":{"type":"reference","id":2786,"name":"Path.isFile"}},{"id":3041,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":99,"character":1}],"signatures":[{"id":3042,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the file name (with optional extension) or folder name."},"parameters":[{"id":3043,"name":"withoutExtension","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2789,"name":"Path.name"}}],"inheritedFrom":{"type":"reference","id":2788,"name":"Path.name"}},{"id":3044,"name":"parent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":112,"character":1}],"signatures":[{"id":3045,"name":"parent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the parent folder as a new `Path` instance."},"type":{"type":"reference","id":2753,"name":"Path"},"inheritedFrom":{"type":"reference","id":2792,"name":"Path.parent"}}],"inheritedFrom":{"type":"reference","id":2791,"name":"Path.parent"}},{"id":3020,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/VirtualPath.ts","line":22,"character":10}],"signatures":[{"id":3021,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current module path as a normalized string,\\nconverting all path separators to \\"/\\"."},"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","id":2794,"name":"Path.path"}}],"overwrites":{"type":"reference","id":2793,"name":"Path.path"}},{"id":3046,"name":"prepend","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":132,"character":1}],"signatures":[{"id":3047,"name":"prepend","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Prepend path parts to the beginning of the current path\\nand return a new `Path` instance."},"parameters":[{"id":3048,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2753,"name":"Path"},"inheritedFrom":{"type":"reference","id":2796,"name":"Path.prepend"}}],"inheritedFrom":{"type":"reference","id":2795,"name":"Path.prepend"}},{"id":3049,"name":"realPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":140,"character":1}],"signatures":[{"id":3050,"name":"realPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a canonical path by resolving directories and symlinks."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2799,"name":"Path.realPath"}}],"inheritedFrom":{"type":"reference","id":2798,"name":"Path.realPath"}},{"id":3051,"name":"relativeTo","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":148,"character":1}],"signatures":[{"id":3052,"name":"relativeTo","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new relative `Path` instance from the current\\n\\"from\\" path to the defined \\"to\\" path."},"parameters":[{"id":3053,"name":"to","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2753,"name":"Path"},"inheritedFrom":{"type":"reference","id":2801,"name":"Path.relativeTo"}}],"inheritedFrom":{"type":"reference","id":2800,"name":"Path.relativeTo"}},{"id":3054,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":156,"character":1}],"signatures":[{"id":3055,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new `Path` instance where the current path is accurately\\nresolved against the defined working directory."},"parameters":[{"id":3056,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2753,"name":"Path"},"inheritedFrom":{"type":"reference","id":2804,"name":"Path.resolve"}}],"inheritedFrom":{"type":"reference","id":2803,"name":"Path.resolve"}},{"id":3057,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":160,"character":1}],"signatures":[{"id":3058,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2807,"name":"Path.toJSON"}}],"inheritedFrom":{"type":"reference","id":2806,"name":"Path.toJSON"}},{"id":3059,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":164,"character":1}],"signatures":[{"id":3060,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2809,"name":"Path.toString"}}],"inheritedFrom":{"type":"reference","id":2808,"name":"Path.toString"}},{"id":3010,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":26,"character":8}],"signatures":[{"id":3011,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `Path` instance."},"parameters":[{"id":3012,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2753,"name":"Path"},"inheritedFrom":{"type":"reference","id":2757,"name":"Path.create"}}],"inheritedFrom":{"type":"reference","id":2756,"name":"Path.create"}},{"id":3005,"name":"path","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/VirtualPath.ts","line":14,"character":17}],"signatures":[{"id":3006,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a path-like value to a formatted virtual path string."},"parameters":[{"id":3007,"name":"part","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","id":2760,"name":"Path.path"}}],"overwrites":{"type":"reference","id":2759,"name":"Path.path"}},{"id":3013,"name":"resolve","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":40,"character":8}],"signatures":[{"id":3014,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `create()` but also resolves the path against a working directory."},"parameters":[{"id":3015,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}},{"id":3016,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"reference","id":2753,"name":"Path"},"inheritedFrom":{"type":"reference","id":2763,"name":"Path.resolve"}}],"inheritedFrom":{"type":"reference","id":2762,"name":"Path.resolve"}}],"groups":[{"title":"Constructors","kind":512,"children":[3017]},{"title":"Properties","kind":1024,"children":[3008,3009]},{"title":"Methods","kind":2048,"children":[3024,3027,3033,3030,3035,3037,3039,3041,3044,3020,3046,3049,3051,3054,3057,3059,3010,3005,3013]}],"sources":[{"fileName":"packages/common/src/VirtualPath.ts","line":10,"character":13}],"extendedTypes":[{"type":"reference","id":2753,"name":"Path"}],"permalink":"/api/common/class/VirtualPath","previousId":2841,"nextId":3061},{"id":2914,"name":"BugSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2916,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2915,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2916,2915]}],"sources":[{"fileName":"packages/common/src/types.ts","line":76,"character":17}],"permalink":"/api/common/interface/BugSetting","previousId":2682,"nextId":2918},{"id":2918,"name":"DependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2919,"name":"built","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2920,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":85,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2921,"name":"unplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2919,2920,2921]}],"sources":[{"fileName":"packages/common/src/types.ts","line":83,"character":17}],"permalink":"/api/common/interface/DependencyMetaSetting","previousId":2914,"nextId":2878},{"id":2878,"name":"Lookup","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2879,"name":"path","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":26,"character":1}],"type":{"type":"reference","id":2864,"name":"Pathable"}},{"id":2880,"name":"raw","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":27,"character":1}],"type":{"type":"reference","id":2864,"name":"Pathable"}},{"id":2881,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":28,"character":1}],"type":{"type":"reference","id":2877,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[2879,2880,2881]}],"sources":[{"fileName":"packages/common/src/types.ts","line":25,"character":17}],"permalink":"/api/common/interface/Lookup","previousId":2918,"nextId":3092},{"id":3092,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3093,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":9,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3087,"typeArguments":[{"type":"reference","id":3096,"name":"T"}],"name":"MemoizeCache"}]}},{"id":3094,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":14,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":3095,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":19,"character":4}],"type":{"type":"reference","id":3083,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[3093,3094,3095]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":7,"character":17}],"typeParameter":[{"id":3096,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/common/interface/MemoizeOptions","previousId":2878,"nextId":2904},{"id":2904,"name":"Optionable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2906,"name":"blueprint","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":2898,"typeArguments":[{"type":"intrinsic","name":"object"}],"name":"BlueprintFactory"}},{"id":2905,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/types.ts","line":57,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2908,"name":"T"}],"name":"Required"}],"name":"Readonly"}}],"groups":[{"title":"Properties","kind":1024,"children":[2906,2905]}],"sources":[{"fileName":"packages/common/src/types.ts","line":55,"character":17}],"typeParameter":[{"id":2908,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2907,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":55,"character":47}]}}}],"implementedBy":[{"type":"reference","id":2610,"name":"Contract"}],"permalink":"/api/common/interface/Optionable","previousId":3092,"nextId":2990},{"id":2990,"name":"PackageGraphTree","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2991,"name":"nodes","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":176,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":2986,"typeArguments":[{"type":"reference","id":2993,"name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":2992,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":177,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2991,2992]}],"sources":[{"fileName":"packages/common/src/types.ts","line":175,"character":17}],"typeParameter":[{"id":2993,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2935,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTree","previousId":2904,"nextId":2986},{"id":2986,"name":"PackageGraphTreeNode","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2987,"name":"nodes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":171,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":2986,"typeArguments":[{"type":"reference","id":2989,"name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":2988,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":172,"character":1}],"type":{"type":"reference","id":2989,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2987,2988]}],"sources":[{"fileName":"packages/common/src/types.ts","line":170,"character":17}],"typeParameter":[{"id":2989,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2935,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTreeNode","previousId":2990,"nextId":2935},{"id":2935,"name":"PackageStructure","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Shape of `package.json`, with support for third-party properties\\nlike Yarn, Webpack, and TypeScript."},"children":[{"id":2936,"name":"author","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":113,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2927,"name":"PeopleSetting"}]}},{"id":2937,"name":"bin","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":114,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2911,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}},{"id":2938,"name":"browser","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":115,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2939,"name":"browserslist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":116,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2940,"name":"bugs","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2914,"name":"BugSetting"}]}},{"id":2941,"name":"bundledDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":118,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2942,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":119,"character":1}],"type":{"type":"reference","id":2913,"name":"ConfigSetting"}},{"id":2943,"name":"contributors","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":120,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"array","elementType":{"type":"reference","id":2927,"name":"PeopleSetting"}}]}},{"id":2944,"name":"cpu","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":121,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2945,"name":"dependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":122,"character":1}],"type":{"type":"reference","id":2917,"name":"DependencyMap"}},{"id":2946,"name":"dependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":123,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2918,"name":"DependencyMetaSetting"}],"name":"Record"}},{"id":2947,"name":"description","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2948,"name":"devDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2917,"name":"DependencyMap"}},{"id":2949,"name":"directories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":126,"character":1}],"type":{"type":"reference","id":2911,"typeArguments":[{"type":"union","types":[{"type":"literal","value":"test"},{"type":"literal","value":"bin"},{"type":"literal","value":"doc"},{"type":"literal","value":"example"},{"type":"literal","value":"lib"},{"type":"literal","value":"man"}]}],"name":"SettingMap"}},{"id":2950,"name":"engines","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":127,"character":1}],"type":{"type":"reference","id":2911,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":2951,"name":"exports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":128,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":2911,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}],"name":"Record"}]}},{"id":2952,"name":"files","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":129,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2953,"name":"funding","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":130,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2922,"name":"TypeSetting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2922,"name":"TypeSetting"}]}}]}},{"id":2954,"name":"homepage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":131,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2955,"name":"imports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":132,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2911,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}],"name":"Record"}},{"id":2976,"name":"installConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":156,"character":1}],"type":{"type":"reflection","declaration":{"id":2977,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2978,"name":"hoistingLimits","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":157,"character":2}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2978]}]}}},{"id":2956,"name":"keywords","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":133,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2979,"name":"languageName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":159,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2957,"name":"license","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":134,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2922,"name":"TypeSetting"},{"type":"array","elementType":{"type":"reference","id":2922,"name":"TypeSetting"}}]}},{"id":2958,"name":"main","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":135,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2959,"name":"man","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":136,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2974,"name":"module","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":153,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2960,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":137,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2961,"name":"optionalDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":138,"character":1}],"type":{"type":"reference","id":2917,"name":"DependencyMap"}},{"id":2962,"name":"os","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":139,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2963,"name":"peerDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":140,"character":1}],"type":{"type":"reference","id":2917,"name":"DependencyMap"}},{"id":2964,"name":"peerDependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":141,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2925,"name":"PeerDependencyMetaSetting"}],"name":"Record"}},{"id":2980,"name":"preferUnplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":160,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2965,"name":"private","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":142,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2966,"name":"publishConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":143,"character":1}],"type":{"type":"reference","id":2913,"name":"ConfigSetting"}},{"id":2967,"name":"repository","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":144,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2931,"name":"RepositorySetting"}]}},{"id":2981,"name":"resolutions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":161,"character":1}],"type":{"type":"reference","id":2917,"name":"DependencyMap"}},{"id":2968,"name":"scripts","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":145,"character":1}],"type":{"type":"reference","id":2911,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":2975,"name":"sideEffects","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":154,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2969,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":146,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"commonjs"},{"type":"literal","value":"module"}]}},{"id":2971,"name":"types","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":149,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2972,"name":"typesVersions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":150,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"Record"}],"name":"Record"}},{"id":2973,"name":"typings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":151,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2970,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":147,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2982,"name":"workspaces","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reflection","declaration":{"id":2983,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2985,"name":"nohoist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":166,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2984,"name":"packages","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":165,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"groups":[{"title":"Properties","kind":1024,"children":[2985,2984]}]}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2976,2956,2979,2957,2958,2959,2974,2960,2961,2962,2963,2964,2980,2965,2966,2967,2981,2968,2975,2969,2971,2972,2973,2970,2982]}],"sources":[{"fileName":"packages/common/src/types.ts","line":112,"character":17}],"permalink":"/api/common/interface/PackageStructure","previousId":2986,"nextId":2864},{"id":2864,"name":"Pathable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2865,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":7,"character":1}],"signatures":[{"id":2866,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2867,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":8,"character":1}],"signatures":[{"id":2868,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[2865,2867]}],"sources":[{"fileName":"packages/common/src/types.ts","line":6,"character":17}],"implementedBy":[{"type":"reference","id":2686,"name":"ModulePath"},{"type":"reference","id":2753,"name":"Path"}],"permalink":"/api/common/interface/Pathable","previousId":2935,"nextId":2925},{"id":2925,"name":"PeerDependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2926,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2926]}],"sources":[{"fileName":"packages/common/src/types.ts","line":94,"character":17}],"permalink":"/api/common/interface/PeerDependencyMetaSetting","previousId":2864,"nextId":2927},{"id":2927,"name":"PeopleSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2929,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":100,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2928,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":99,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2930,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":101,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2929,2928,2930]}],"sources":[{"fileName":"packages/common/src/types.ts","line":98,"character":17}],"permalink":"/api/common/interface/PeopleSetting","previousId":2925,"nextId":2839},{"id":2839,"name":"ProjectSearchOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2840,"name":"relative","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":12,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2840]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":11,"character":17}],"permalink":"/api/common/interface/ProjectSearchOptions","previousId":2927,"nextId":2931},{"id":2931,"name":"RepositorySetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2932,"name":"directory","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":105,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2933,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2923,"name":"TypeSetting.type"}},{"id":2934,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":91,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2924,"name":"TypeSetting.url"}}],"groups":[{"title":"Properties","kind":1024,"children":[2932,2933,2934]}],"sources":[{"fileName":"packages/common/src/types.ts","line":104,"character":17}],"extendedTypes":[{"type":"reference","id":2922,"name":"TypeSetting"}],"permalink":"/api/common/interface/RepositorySetting","previousId":2839,"nextId":2882},{"id":2882,"name":"ResolvedLookup","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2883,"name":"originalSource","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Original file path or module ID of the lookup."},"sources":[{"fileName":"packages/common/src/types.ts","line":33,"character":1}],"type":{"type":"reference","id":2864,"name":"Pathable"}},{"id":2884,"name":"resolvedPath","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Resolved absolute *file* path for the found lookup."},"sources":[{"fileName":"packages/common/src/types.ts","line":35,"character":1}],"type":{"type":"reference","id":2753,"name":"Path"}},{"id":2885,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The type of lookup that was found."},"sources":[{"fileName":"packages/common/src/types.ts","line":37,"character":1}],"type":{"type":"reference","id":2877,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[2883,2884,2885]}],"sources":[{"fileName":"packages/common/src/types.ts","line":31,"character":17}],"permalink":"/api/common/interface/ResolvedLookup","previousId":2931,"nextId":2909},{"id":2909,"name":"Toolable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2910,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":67,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2910]}],"sources":[{"fileName":"packages/common/src/types.ts","line":66,"character":17}],"permalink":"/api/common/interface/Toolable","previousId":2882,"nextId":2922},{"id":2922,"name":"TypeSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2923,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2924,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":91,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2923,2924]}],"sources":[{"fileName":"packages/common/src/types.ts","line":89,"character":17}],"extendedBy":[{"type":"reference","id":2931,"name":"RepositorySetting"}],"permalink":"/api/common/interface/TypeSetting","previousId":2909,"nextId":2994},{"id":2994,"name":"WorkspaceMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2995,"name":"jsonPath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":183,"character":1}],"type":{"type":"reference","id":2753,"name":"Path"}},{"id":2997,"name":"packageName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":185,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2996,"name":"packagePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":184,"character":1}],"type":{"type":"reference","id":2753,"name":"Path"}},{"id":2999,"name":"workspaceName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":187,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2998,"name":"workspacePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":186,"character":1}],"type":{"type":"reference","id":2753,"name":"Path"}}],"groups":[{"title":"Properties","kind":1024,"children":[2995,2997,2996,2999,2998]}],"sources":[{"fileName":"packages/common/src/types.ts","line":182,"character":17}],"permalink":"/api/common/interface/WorkspaceMetadata","previousId":2922,"nextId":3000},{"id":3000,"name":"WorkspacePackage","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3001,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":191,"character":1}],"type":{"type":"reference","id":2994,"name":"WorkspaceMetadata"}},{"id":3002,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":192,"character":1}],"type":{"type":"reference","id":3003,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[3001,3002]}],"sources":[{"fileName":"packages/common/src/types.ts","line":190,"character":17}],"typeParameter":[{"id":3003,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2935,"name":"PackageStructure"},"default":{"type":"reference","id":2935,"name":"PackageStructure"}}],"permalink":"/api/common/interface/WorkspacePackage","previousId":2994,"nextId":2561},{"id":2886,"name":"AbstractConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":12}],"typeParameter":[{"id":2890,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":2887,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":37}],"signatures":[{"id":2888,"name":"__type","kind":16384,"kindString":"Constructor signature","flags":{"isAbstract":true},"parameters":[{"id":2889,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":2890,"name":"T"}}]}},"permalink":"/api/common#AbstractConstructor","previousId":2588,"nextId":2898},{"id":2898,"name":"BlueprintFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":50,"character":12}],"typeParameter":[{"id":2903,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":2899,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":50,"character":49}],"signatures":[{"id":2900,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2901,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Schemas"}},{"id":2902,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2903,"name":"T"}],"name":"Blueprint"}}]}},"permalink":"/api/common#BlueprintFactory","previousId":2886,"nextId":2602},{"id":2602,"name":"CommonErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/common#CommonErrorCode","previousId":2898,"nextId":2891},{"id":2891,"name":"ConcreteConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":44,"character":12}],"typeParameter":[{"id":2895,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":2892,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":44,"character":37}],"signatures":[{"id":2893,"name":"__type","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2894,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":2895,"name":"T"}}]}},"permalink":"/api/common#ConcreteConstructor","previousId":2602,"nextId":2913},{"id":2913,"name":"ConfigSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":74,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Record"},"permalink":"/api/common#ConfigSetting","previousId":2891,"nextId":2896},{"id":2896,"name":"Constructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":46,"character":12}],"typeParameter":[{"id":2897,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reference","id":2886,"typeArguments":[{"type":"reference","id":2897,"name":"T"}],"name":"AbstractConstructor"},{"type":"reference","id":2891,"typeArguments":[{"type":"reference","id":2897,"name":"T"}],"name":"ConcreteConstructor"}]},"permalink":"/api/common#Constructor","previousId":2913,"nextId":2917},{"id":2917,"name":"DependencyMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":81,"character":12}],"type":{"type":"reference","id":2911,"name":"SettingMap"},"permalink":"/api/common#DependencyMap","previousId":2896,"nextId":2876},{"id":2876,"name":"FilePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":21,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#FilePath","previousId":2917,"nextId":2652},{"id":2652,"name":"InferMergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":6,"character":12}],"typeParameter":[{"id":2653,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":2653,"name":"T"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reference","id":2649,"name":"MergableArray"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":2653,"name":"T"},"extendsType":{"type":"intrinsic","name":"object"},"trueType":{"type":"reference","id":2650,"name":"MergableObject"},"falseType":{"type":"intrinsic","name":"never"}}},"permalink":"/api/common#InferMergeable","previousId":2876,"nextId":2877},{"id":2877,"name":"LookupType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":23,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"file-system"},{"type":"literal","value":"node-module"}]},"permalink":"/api/common#LookupType","previousId":2652,"nextId":3087},{"id":3087,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":20}],"typeParameter":[{"id":3091,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":3088,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3089,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":4,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":3090,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":5,"character":4}],"type":{"type":"reference","id":3091,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[3089,3090]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":50}]}}],"name":"Map"},"permalink":"/api/common#MemoizeCache","previousId":2877,"nextId":3083},{"id":3083,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":20}],"type":{"type":"reflection","declaration":{"id":3084,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":36}],"signatures":[{"id":3085,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3086,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/common#MemoizeHasher","previousId":3087,"nextId":3078},{"id":3078,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":20}],"typeParameter":[{"id":3082,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":3079,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":42}],"signatures":[{"id":3080,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3081,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","id":3082,"name":"T"}}]}},"permalink":"/api/common#MemoizedFunction","previousId":3083,"nextId":2649},{"id":2649,"name":"MergableArray","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"permalink":"/api/common#MergableArray","previousId":3078,"nextId":2650},{"id":2650,"name":"MergableObject","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/common#MergableObject","previousId":2649,"nextId":2651},{"id":2651,"name":"Mergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":2649,"name":"MergableArray"},{"type":"reference","id":2650,"name":"MergableObject"}]},"permalink":"/api/common#Mergeable","previousId":2650,"nextId":2870},{"id":2870,"name":"ModuleID","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":15,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#ModuleID","previousId":2651,"nextId":2871},{"id":2871,"name":"ModuleResolver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":17,"character":12}],"type":{"type":"reflection","declaration":{"id":2872,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":17,"character":29}],"signatures":[{"id":2873,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2874,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2870,"name":"ModuleID"}},{"id":2875,"name":"startDir","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2876,"name":"FilePath"}}],"type":{"type":"union","types":[{"type":"reference","id":2876,"name":"FilePath"},{"type":"reference","typeArguments":[{"type":"reference","id":2876,"name":"FilePath"}],"name":"Promise"}]}}]}},"permalink":"/api/common#ModuleResolver","previousId":2870,"nextId":2869},{"id":2869,"name":"PortablePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":2876,"name":"FilePath"},{"type":"reference","id":2870,"name":"ModuleID"},{"type":"reference","id":2864,"name":"Pathable"}]},"permalink":"/api/common#PortablePath","previousId":2871,"nextId":2911},{"id":2911,"name":"SettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":72,"character":12}],"typeParameter":[{"id":2912,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2912,"name":"T"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/common#SettingMap","previousId":2869,"nextId":2603},{"id":2603,"name":"CommonError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":2604,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2605,"name":"new CommonError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2606,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}},{"id":2607,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/common#CommonError","previousId":2911,"nextId":2608},{"id":2608,"name":"MODULE_NAME_PART","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/common/src/constants.ts","line":2,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PART","previousId":2603,"nextId":2609},{"id":2609,"name":"MODULE_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/common/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PATTERN","previousId":2608},{"id":3061,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Bind.d.ts","line":5,"character":24}],"signatures":[{"id":3062,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Bind","previousId":3004,"nextId":3063},{"id":3063,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Debounce.d.ts","line":5,"character":24}],"signatures":[{"id":3064,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":3065,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Debounce","previousId":3061,"nextId":3066},{"id":3066,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":24}],"signatures":[{"id":3067,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":3068,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":3069,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":53}],"signatures":[{"id":3070,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":3071,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Function"},{"type":"reference","name":"Object"}]}},{"id":3072,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":3073,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/common/function/Deprecate","previousId":3063,"nextId":3074},{"id":3074,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"decorates":[{"type":"reference","name":"initializeAndValidate"},{"type":"reference","id":2855,"name":"getWorkspaceGlobs"},{"type":"reference","id":2858,"name":"getWorkspacePackages"},{"type":"reference","id":2861,"name":"getWorkspacePackagePaths"}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":25,"character":24}],"signatures":[{"id":3075,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":3076,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":3077,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":3083,"name":"MemoizeHasher"},{"type":"reference","id":3092,"typeArguments":[{"type":"reference","id":3076,"name":"T"}],"name":"MemoizeOptions"}]}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Memoize","previousId":3066,"nextId":3097},{"id":3097,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Throttle.d.ts","line":5,"character":24}],"signatures":[{"id":3098,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":3099,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Throttle","previousId":3074,"nextId":2635},{"id":2635,"name":"createBlueprint","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/createBlueprint.ts","line":21,"character":16}],"signatures":[{"id":2636,"name":"createBlueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to generate a blueprint object for use within\\n[optimal](https://github.com/milesj/optimal) checks. All supported optimal\\nschemas are passed as an object to the factory.","text":"```ts\\nimport { createBlueprint } from \'@boost/common\';\\nimport { optimal } from \'@boost/common/optimal\';\\n\\nconst blueprint = createBlueprint(({ string, number }) => ({\\n\\tname: string().required(),\\n\\tage: number().gt(0),\\n}));\\n\\nconst object = optimal(blueprint).validate({});\\n```\\n"},"typeParameter":[{"id":2637,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2638,"name":"factory","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2898,"typeArguments":[{"type":"reference","id":2637,"name":"T"}],"name":"BlueprintFactory"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2637,"name":"T"}],"name":"Blueprint"}}],"permalink":"/api/common/function/createBlueprint","previousId":3097,"nextId":2639},{"id":2639,"name":"deepFreeze","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepFreeze.ts","line":15,"character":16}],"signatures":[{"id":2640,"name":"deepFreeze","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively freeze plain objects with `Object.freeze`.","text":"```ts\\nimport { deepFreeze } from \'@boost/common\';\\n\\nconst obj = deepFreeze({ foo: 123 });\\n\\n// Errors!\\nobj.foo = 456;\\n```\\n"},"typeParameter":[{"id":2641,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2642,"name":"obj","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2641,"name":"T"}}],"type":{"type":"reference","id":2641,"name":"T"}}],"permalink":"/api/common/function/deepFreeze","previousId":2635,"nextId":2643},{"id":2643,"name":"deepMerge","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":44,"character":16}],"signatures":[{"id":2644,"name":"deepMerge","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively merge objects and arrays, where values on the\\nright-hand side will overwrite values on the left-hand based on the key\\nor index respectively. Furthermore, if the 2nd argument is not provided,\\nit will simply clone the base value.","text":"```ts\\nimport { deepMerge } from \'@boost/common\';\\n\\nconst obj = deepMerge({ foo: 123, bar: \'abc\' }, { foo: 456, baz: true });\\n\\n// -> { foo: 456, bar: \'abc\', baz: true }\\n```\\n"},"typeParameter":[{"id":2645,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2651,"name":"Mergeable"}},{"id":2646,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2651,"name":"Mergeable"}}],"parameters":[{"id":2647,"name":"base","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2645,"name":"T"}},{"id":2648,"name":"other","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2646,"name":"V"}}],"type":{"type":"reference","id":2645,"name":"T"}}],"permalink":"/api/common/function/deepMerge","previousId":2639,"nextId":2654},{"id":2654,"name":"formatMs","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/formatMs.ts","line":14,"character":16}],"signatures":[{"id":2655,"name":"formatMs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to format a UNIX timestamp in milliseconds into a shorthand human readable format.\\nWraps the [pretty-ms](https://www.npmjs.com/package/pretty-ms) package to handle infinite\\nnumbers, zeros, and more.","text":"```ts\\nimport { formatMs } from \'@boost/common\';\\n\\nformatMs(1337000000); // 15d 11h 23m 20s\\n```\\n"},"parameters":[{"id":2656,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2657,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/common/function/formatMs","previousId":2643,"nextId":2658},{"id":2658,"name":"instanceOf","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/instanceOf.ts","line":32,"character":16}],"signatures":[{"id":2659,"name":"instanceOf","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Performs a loose instance check by comparing class names up the prototype\\nchain if `instanceof` initially fails. To disable this loose check,\\npass `false` as the 3rd argument.","text":"```ts\\nimport { instanceOf } from \'@boost/common\';\\n\\nif (instanceOf(error, Error)) {\\n\\tconsole.log(error.stack);\\n}\\n```\\n\\nGenerics can be used to type the object being checked. This will default\\nto the declaration passed to the 2nd argument.\\n\\n```ts\\ninstanceOf<ParseError>(error, Error);\\n```\\n\\n> Loose checks can be useful if multiple copies of the same class declaration\\n> exists in the module tree. For example, multiple versions of the same package are imported.\\n"},"typeParameter":[{"id":2660,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":2661,"name":"object","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2662,"name":"declaration","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2896,"typeArguments":[{"type":"reference","id":2660,"name":"T"}],"name":"Constructor"}},{"id":2663,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"predicate","name":"object","asserts":false,"targetType":{"type":"reference","id":2660,"name":"T"}}}],"permalink":"/api/common/function/instanceOf","previousId":2654,"nextId":2664},{"id":2664,"name":"isEmpty","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isEmpty.ts","line":17,"character":16}],"signatures":[{"id":2665,"name":"isEmpty","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if an object has no properties, an array has no items,\\nor the value is falsy, otherwise, it returns `false`.","text":"```ts\\nimport { isEmpty } from \'@boost/common\';\\n\\nisEmpty({}); // true\\nisEmpty({ name: \'Boost\' }); // false\\n\\nisEmpty([]); // true\\nisEmpty([\'Boost\']); // false\\n```\\n"},"parameters":[{"id":2666,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isEmpty","previousId":2658,"nextId":2667},{"id":2667,"name":"isFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isFilePath.ts","line":20,"character":16}],"signatures":[{"id":2668,"name":"isFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string or `Path` instance looks like a file system path,\\nby checking for absolute or relative path markers, or the existence of\\npath separating slashes. Will return `false` for values that are only\\nthe file or folder name.","text":"```ts\\nimport { isFilePath } from \'@boost/common\';\\n\\nisFilePath(\'./path/to/file.ts\'); // true\\nisFilePath(new Path(\'/path/to/folder\')); // true\\nisFilePath(\'file.ts\'); // false\\n```\\n"},"parameters":[{"id":2669,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2869,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isFilePath","previousId":2664,"nextId":2670},{"id":2670,"name":"isModuleName","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isModuleName.ts","line":21,"character":16}],"signatures":[{"id":2671,"name":"isModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string is a valid Node module package name,\\naccording to the rules defined in\\n[validate-npm-package-name](https://github.com/npm/validate-npm-package-name).\\nWill `return` false for native builtin modules, like `fs`, and for the old name format.","text":"```ts\\nimport { isModuleName } from \'@boost/common\';\\n\\nisModuleName(\'boost\'); // true\\nisModuleName(\'@boost/common\'); // true\\nisModuleName(\'fs\'); // false\\n```\\n"},"parameters":[{"id":2672,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isModuleName","previousId":2667,"nextId":2673},{"id":2673,"name":"isObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isObject.ts","line":24,"character":16}],"signatures":[{"id":2674,"name":"isObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if the value is an object.","text":"```ts\\nimport { isObject } from \'@boost/common\';\\n\\nisObject({}); // true\\nisObject(new Foo()); // true\\nisObject([]); // false\\n```\\n\\nGenerics can be used to type the return value of the object (when necessary).\\n\\n```ts\\ninterface Person {\\n\\tname: string;\\n}\\n\\nif (isObject<Person>(person)) {\\n\\tconsole.log(person.name);\\n}\\n```\\n"},"typeParameter":[{"id":2675,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2676,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","id":2675,"name":"T"}}}],"permalink":"/api/common/function/isObject","previousId":2670,"nextId":2677},{"id":2677,"name":"isPlainObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isPlainObject.ts","line":17,"character":16}],"signatures":[{"id":2678,"name":"isPlainObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `isObject` but only returns true if the value is a plain object\\n(no class instances, built-ins, etc). It achieves this by comparing\\nthe value\'s prototype to the built-in `Object` types. If you need to\\nrun these checks for cross-realm objects, pass true to the `loose` argument.","text":"```ts\\nimport { isPlainObject } from \'@boost/common\';\\n\\nisPlainObject({}); // true\\nisPlainObject(new Foo()); // false\\nisPlainObject([]); // false\\n```\\n"},"typeParameter":[{"id":2679,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2680,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2681,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","id":2679,"name":"T"}}}],"permalink":"/api/common/function/isPlainObject","previousId":2673,"nextId":2682},{"id":2682,"name":"toArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/toArray.ts","line":14,"character":16}],"signatures":[{"id":2683,"name":"toArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts a non-array to an array. If the provided value is falsy,\\nan empty array is returned. If the provided value is truthy and a\\nnon-array, an array of 1 item is returned.","text":"```ts\\nimport { toArray } from \'@boost/common\';\\n\\ntoArray(123); // [123]\\ntoArray(\'abc\'); // [\'abc\']\\ntoArray([\'a\', \'b\', \'c\']); // [\'a\', \'b\', \'c\']\\n```\\n"},"typeParameter":[{"id":2684,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":2685,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":2684,"name":"T"},{"type":"array","elementType":{"type":"reference","id":2684,"name":"T"}}]}}],"type":{"type":"array","elementType":{"type":"reference","id":2684,"name":"T"}}}],"permalink":"/api/common/function/toArray","previousId":2677,"nextId":2914}],"groups":[{"title":"Classes","kind":128,"children":[2610,2629,2686,2714,2753,2810,2841,3004]},{"title":"Functions","kind":64,"children":[3061,3063,3066,3074,3097,2635,2639,2643,2654,2658,2664,2667,2670,2673,2677,2682]},{"title":"Interfaces","kind":256,"children":[2914,2918,2878,3092,2904,2990,2986,2935,2864,2925,2927,2839,2931,2882,2909,2922,2994,3000]},{"title":"Namespaces","kind":4,"children":[2561,2588]},{"title":"Type aliases","kind":4194304,"children":[2886,2898,2602,2891,2913,2896,2917,2876,2652,2877,3087,3083,3078,2649,2650,2651,2870,2871,2869,2911]},{"title":"Variables","kind":32,"children":[2603,2608,2609]}],"sources":[{"fileName":"packages/common/src/index.ts","line":6,"character":0}],"permalink":"/api/common"},"urlSlug":"common"},{"index":false,"label":"Optimal","reflection":{"id":88,"name":"@boost/common/optimal","kind":2,"kindString":"Module","flags":{},"children":[{"id":89,"name":"portablePathSchema","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"A schema for validating a value is a `PortablePath`.\\nChecks for a string, `Path`, or `Pathable`."},"sources":[{"fileName":"packages/common/src/optimal.ts","line":11,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2869,"name":"PortablePath"}],"name":"UnionSchema"},"defaultValue":"...","permalink":"/api/common-optimal#portablePathSchema"}],"groups":[{"title":"Variables","kind":32,"children":[89]}],"sources":[{"fileName":"packages/common/src/optimal.ts","line":1,"character":0}],"permalink":"/api/common-optimal"},"urlSlug":"common-optimal"},{"index":false,"label":"Test utilities","reflection":{"id":74,"name":"@boost/common/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":79,"name":"mockFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":19,"character":16}],"signatures":[{"id":80,"name":"mockFilePath","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":81,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2753,"name":"Path"}}],"permalink":"/api/common-test/function/mockFilePath","nextId":85},{"id":85,"name":"mockModulePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":30,"character":16}],"signatures":[{"id":86,"name":"mockModulePath","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":87,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2686,"name":"ModulePath"}}],"permalink":"/api/common-test/function/mockModulePath","previousId":79,"nextId":82},{"id":82,"name":"mockNormalizedFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":23,"character":16}],"signatures":[{"id":83,"name":"mockNormalizedFilePath","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":84,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}}],"type":{"type":"reference","id":2753,"name":"Path"}}],"permalink":"/api/common-test/function/mockNormalizedFilePath","previousId":85,"nextId":75},{"id":75,"name":"normalizeSeparators","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":7,"character":16}],"signatures":[{"id":76,"name":"normalizeSeparators","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Normalize a path or its parts by ensuring all path separators match\\nthe operating systems default character."},"typeParameter":[{"id":77,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2869,"name":"PortablePath"},{"type":"array","elementType":{"type":"reference","id":2869,"name":"PortablePath"}}]}}],"parameters":[{"id":78,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":77,"name":"T"}}],"type":{"type":"reference","id":77,"name":"T"}}],"permalink":"/api/common-test/function/normalizeSeparators","previousId":82}],"groups":[{"title":"Functions","kind":64,"children":[79,85,82,75]}],"sources":[{"fileName":"packages/common/src/test.ts","line":1,"character":0}],"permalink":"/api/common-test"},"urlSlug":"common-test"}],"packageName":"@boost/common","packageVersion":"3.2.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":2,"name":"@boost/config","kind":2,"kindString":"Module","flags":{},"children":[{"id":334,"name":"Configuration","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":335,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":44,"character":1}],"signatures":[{"id":336,"name":"new Configuration","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":337,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":338,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":339,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"ModuleResolver"}}],"type":{"type":"reference","id":334,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Configuration"},"overwrites":{"type":"reference","name":"Contract<T>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<T>.constructor"}},{"id":340,"name":"onLoadedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded but before processed. Can modify config file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":22,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":462,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"ConfigFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":341,"name":"onLoadedIgnore","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after ignore files are loaded. Can modify ignore file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":28,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":467,"name":"IgnoreFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":342,"name":"onProcessedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded and processed."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":34,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Required"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":394,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":371,"name":"addProcessHandler","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":150,"character":11}],"signatures":[{"id":372,"name":"addProcessHandler","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Add a process handler to customize the processing of key-value setting pairs.\\nMay only run a processor on settings found in the root of the configuration object."},"typeParameter":[{"id":373,"name":"K","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"symbol"}]}},{"id":374,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"indexedAccess","indexType":{"type":"reference","id":373,"name":"K"},"objectType":{"type":"reference","id":337,"name":"T"}}}],"parameters":[{"id":375,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":373,"name":"K"}},{"id":376,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":451,"typeArguments":[{"type":"reference","id":374,"name":"V"}],"name":"Handler"}}],"type":{"type":"reference","id":334,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Configuration"}}]},{"id":401,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":402,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":403,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":404,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":377,"name":"bootstrap","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":160,"character":11}],"signatures":[{"id":378,"name":"bootstrap","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Life cycle called on initialization."},"type":{"type":"intrinsic","name":"void"}}]},{"id":347,"name":"clearCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":57,"character":1}],"signatures":[{"id":348,"name":"clearCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cache."},"type":{"type":"reference","id":334,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Configuration"}}]},{"id":349,"name":"clearFileCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":67,"character":1}],"signatures":[{"id":350,"name":"clearFileCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached file contents."},"type":{"type":"reference","id":334,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Configuration"}}]},{"id":351,"name":"clearFinderCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":76,"character":1}],"signatures":[{"id":352,"name":"clearFinderCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached directory and file path information."},"type":{"type":"reference","id":334,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Configuration"}}]},{"id":395,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":396,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":397,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Partial"},{"type":"reflection","declaration":{"id":398,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":399,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":400,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":379,"name":"configureFinder","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":166,"character":11}],"signatures":[{"id":380,"name":"configureFinder","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the finder instance."},"parameters":[{"id":381,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":478,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"ConfigFinderOptions"},{"type":"literal","value":"name"}],"name":"Omit"}}],"type":{"type":"reference","id":334,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Configuration"}}]},{"id":382,"name":"configureProcessor","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":176,"character":11}],"signatures":[{"id":383,"name":"configureProcessor","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the processor instance."},"parameters":[{"id":384,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":499,"name":"ProcessorOptions"},{"type":"literal","value":"name"}],"name":"Omit"}}],"type":{"type":"reference","id":334,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Configuration"}}]},{"id":353,"name":"findRootDir","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":87,"character":7}],"signatures":[{"id":354,"name":"findRootDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Attempt to find the root directory starting from the provided directory.\\nOnce the root is found, it will be cached for further lookups,\\notherwise an error is thrown based on current configuration."},"parameters":[{"id":355,"name":"fromDir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Path"}],"name":"Promise"}}]},{"id":356,"name":"loadConfigFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":96,"character":7}],"signatures":[{"id":357,"name":"loadConfigFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all config files\\nwithin each branch directory, and the root."},"parameters":[{"id":358,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":471,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"ProcessedConfig"}],"name":"Promise"}}]},{"id":359,"name":"loadConfigFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":106,"character":7}],"signatures":[{"id":360,"name":"loadConfigFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load config files from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":361,"name":"fromDir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":471,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"ProcessedConfig"}],"name":"Promise"}}]},{"id":362,"name":"loadIgnoreFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":117,"character":7}],"signatures":[{"id":363,"name":"loadIgnoreFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all ignore files\\nwithin each branch directory, and the root."},"parameters":[{"id":364,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":467,"name":"IgnoreFile"}}],"name":"Promise"}}]},{"id":365,"name":"loadIgnoreFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":127,"character":7}],"signatures":[{"id":366,"name":"loadIgnoreFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load ignore file from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":367,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":467,"name":"IgnoreFile"}}],"name":"Promise"}}]},{"id":368,"name":"setRootDir","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":139,"character":1}],"signatures":[{"id":369,"name":"setRootDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Explicitly set the root directory to stop traversal at. This should only be set\\nmanually when you want full control, and know file boundaries up front.","text":"This *does not* check for the existence of the root config file or folder.\\n"},"parameters":[{"id":370,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","id":334,"typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Configuration"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[335]},{"title":"Properties","kind":1024,"children":[340,341,342,394],"categories":[{"title":"CATEGORY","children":[394]},{"title":"Events","children":[340,341,342]}]},{"title":"Methods","kind":2048,"children":[371,401,377,347,349,351,395,379,382,353,356,359,362,365,368]}],"sources":[{"fileName":"packages/config/src/Configuration.ts","line":17,"character":22}],"typeParameter":[{"id":405,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":337,"name":"T"}],"name":"Contract"}],"permalink":"/api/config/class/Configuration","nextId":432},{"id":475,"name":"BaseFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":477,"name":"errorIfNoRootFound","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error if the root config cannot be located."},"sources":[{"fileName":"packages/config/src/types.ts","line":45,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":476,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":43,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[477,476]}],"sources":[{"fileName":"packages/config/src/types.ts","line":41,"character":17}],"extendedBy":[{"type":"reference","id":478,"name":"ConfigFinderOptions"},{"type":"reference","id":496,"name":"IgnoreFinderOptions"}],"permalink":"/api/config/interface/BaseFinderOptions","previousId":427,"nextId":462},{"id":462,"name":"ConfigFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":463,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Config content of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":25,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":466,"name":"T"}],"name":"DeepPartial"}},{"id":464,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":18,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":460,"name":"File.path"}},{"id":465,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":20,"character":1}],"type":{"type":"reference","id":458,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":461,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[463,464,465]}],"sources":[{"fileName":"packages/config/src/types.ts","line":23,"character":17}],"typeParameter":[{"id":466,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":459,"name":"File"}],"permalink":"/api/config/interface/ConfigFile","previousId":475,"nextId":478},{"id":478,"name":"ConfigFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":494,"name":"errorIfNoRootFound","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error if the root config cannot be located."},"sources":[{"fileName":"packages/config/src/types.ts","line":45,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":477,"name":"BaseFinderOptions.errorIfNoRootFound"}},{"id":479,"name":"extendsSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config extending\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":50,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":480,"name":"extensions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of extensions, in order, to find config files within each folder. Defaults to built-in file format list."},"sources":[{"fileName":"packages/config/src/types.ts","line":52,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":443,"name":"ExtType"}}},{"id":481,"name":"includeEnv","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Find and load environment based config files (using `NODE_ENV`). Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":54,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":482,"name":"loaders","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of loader functions by type. Defaults to built-in file type loaders."},"sources":[{"fileName":"packages/config/src/types.ts","line":56,"character":1}],"type":{"type":"reflection","declaration":{"id":483,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":484,"name":"cjs","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":445,"typeArguments":[{"type":"reference","id":495,"name":"T"}],"name":"Loader"}},{"id":485,"name":"js","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":445,"typeArguments":[{"type":"reference","id":495,"name":"T"}],"name":"Loader"}},{"id":486,"name":"json","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":445,"typeArguments":[{"type":"reference","id":495,"name":"T"}],"name":"Loader"}},{"id":487,"name":"json5","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":445,"typeArguments":[{"type":"reference","id":495,"name":"T"}],"name":"Loader"}},{"id":488,"name":"mjs","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":445,"typeArguments":[{"type":"reference","id":495,"name":"T"}],"name":"Loader"}},{"id":489,"name":"ts","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":445,"typeArguments":[{"type":"reference","id":495,"name":"T"}],"name":"Loader"}},{"id":490,"name":"yaml","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":445,"typeArguments":[{"type":"reference","id":495,"name":"T"}],"name":"Loader"}}],"groups":[{"title":"Properties","kind":1024,"children":[484,485,486,487,488,489,490]}]}}},{"id":493,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":43,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":476,"name":"BaseFinderOptions.name"}},{"id":491,"name":"overridesSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config overriding\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":58,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":492,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver."},"sources":[{"fileName":"packages/config/src/types.ts","line":60,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}}],"groups":[{"title":"Properties","kind":1024,"children":[494,479,480,481,482,493,491,492]}],"sources":[{"fileName":"packages/config/src/types.ts","line":48,"character":17}],"typeParameter":[{"id":495,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":475,"name":"BaseFinderOptions"}],"permalink":"/api/config/interface/ConfigFinderOptions","previousId":462,"nextId":459},{"id":459,"name":"File","kind":256,"kindString":"Interface","flags":{},"children":[{"id":460,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":18,"character":1}],"type":{"type":"reference","name":"Path"}},{"id":461,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":20,"character":1}],"type":{"type":"reference","id":458,"name":"FileSource"}}],"groups":[{"title":"Properties","kind":1024,"children":[460,461]}],"sources":[{"fileName":"packages/config/src/types.ts","line":16,"character":17}],"extendedBy":[{"type":"reference","id":462,"name":"ConfigFile"},{"type":"reference","id":467,"name":"IgnoreFile"}],"permalink":"/api/config/interface/File","previousId":478,"nextId":467},{"id":467,"name":"IgnoreFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":468,"name":"ignore","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Ignored content of the file, split on new lines."},"sources":[{"fileName":"packages/config/src/types.ts","line":30,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":469,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":18,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":460,"name":"File.path"}},{"id":470,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":20,"character":1}],"type":{"type":"reference","id":458,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":461,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[468,469,470]}],"sources":[{"fileName":"packages/config/src/types.ts","line":28,"character":17}],"extendedTypes":[{"type":"reference","id":459,"name":"File"}],"permalink":"/api/config/interface/IgnoreFile","previousId":459,"nextId":496},{"id":496,"name":"IgnoreFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":498,"name":"errorIfNoRootFound","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error if the root config cannot be located."},"sources":[{"fileName":"packages/config/src/types.ts","line":45,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":477,"name":"BaseFinderOptions.errorIfNoRootFound"}},{"id":497,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":43,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":476,"name":"BaseFinderOptions.name"}}],"groups":[{"title":"Properties","kind":1024,"children":[498,497]}],"sources":[{"fileName":"packages/config/src/types.ts","line":63,"character":17}],"extendedTypes":[{"type":"reference","id":475,"name":"BaseFinderOptions"}],"permalink":"/api/config/interface/IgnoreFinderOptions","previousId":467,"nextId":505},{"id":505,"name":"OverridesSettingItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":506,"name":"exclude","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File path patterns/globs to ignore."},"sources":[{"fileName":"packages/config/src/types.ts","line":84,"character":1}],"type":{"type":"reference","id":503,"name":"FileGlob"}},{"id":507,"name":"include","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"File path patterns/globs to match against."},"sources":[{"fileName":"packages/config/src/types.ts","line":86,"character":1}],"type":{"type":"reference","id":503,"name":"FileGlob"}},{"id":508,"name":"settings","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Settings configured for this specific override."},"sources":[{"fileName":"packages/config/src/types.ts","line":88,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":509,"name":"T"}],"name":"DeepPartial"}}],"groups":[{"title":"Properties","kind":1024,"children":[506,507,508]}],"sources":[{"fileName":"packages/config/src/types.ts","line":82,"character":17}],"typeParameter":[{"id":509,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/OverridesSettingItem","previousId":496,"nextId":471},{"id":471,"name":"ProcessedConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":472,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"All found and loaded config file contents merged and processed into a\\nsingle config object."},"sources":[{"fileName":"packages/config/src/types.ts","line":36,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":474,"name":"T"}],"name":"Required"}},{"id":473,"name":"files","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of config files found and loaded."},"sources":[{"fileName":"packages/config/src/types.ts","line":38,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":462,"typeArguments":[{"type":"reference","id":474,"name":"T"}],"name":"ConfigFile"}}}],"groups":[{"title":"Properties","kind":1024,"children":[472,473]}],"sources":[{"fileName":"packages/config/src/types.ts","line":33,"character":17}],"typeParameter":[{"id":474,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/ProcessedConfig","previousId":505,"nextId":499},{"id":499,"name":"ProcessorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":500,"name":"defaultWhenUndefined","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When a setting has a value of `undefined`, fallback to the\\ndefault/initial value for that setting. Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":70,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":501,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of config files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":72,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":502,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Validate all settings within a config file before processing. Defaults to\\n`true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":75,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[500,501,502]}],"sources":[{"fileName":"packages/config/src/types.ts","line":65,"character":17}],"permalink":"/api/config/interface/ProcessorOptions","previousId":471,"nextId":328},{"id":328,"name":"ConfigErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":15,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/config#ConfigErrorCode","previousId":499,"nextId":443},{"id":443,"name":"ExtType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":4,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"cjs"},{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"json5"},{"type":"literal","value":"mjs"},{"type":"literal","value":"ts"},{"type":"literal","value":"yaml"},{"type":"literal","value":"yml"}]},"permalink":"/api/config#ExtType","previousId":328,"nextId":504},{"id":504,"name":"ExtendsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":80,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#ExtendsSetting","previousId":443,"nextId":503},{"id":503,"name":"FileGlob","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":78,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#FileGlob","previousId":504,"nextId":458},{"id":458,"name":"FileSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":14,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"branch"},{"type":"literal","value":"extended"},{"type":"literal","value":"overridden"},{"type":"literal","value":"root"}]},"permalink":"/api/config#FileSource","previousId":503,"nextId":457},{"id":457,"name":"FileType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":12,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"branch"},{"type":"literal","value":"preset"},{"type":"literal","value":"root-file"},{"type":"literal","value":"root-folder"}]},"permalink":"/api/config#FileType","previousId":458,"nextId":451},{"id":451,"name":"Handler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":10,"character":12}],"typeParameter":[{"id":456,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":452,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":10,"character":25}],"signatures":[{"id":453,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":454,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":456,"name":"T"}},{"id":455,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":456,"name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","id":456,"name":"T"},{"type":"intrinsic","name":"undefined"}]}],"name":"Promise"},{"type":"reference","id":456,"name":"T"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/config#Handler","previousId":457,"nextId":445},{"id":445,"name":"Loader","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":8,"character":12}],"typeParameter":[{"id":450,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":446,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":8,"character":24}],"signatures":[{"id":447,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":448,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":449,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":450,"name":"T"}],"name":"DeepPartial"}],"name":"Promise"}}]}},"permalink":"/api/config#Loader","previousId":451,"nextId":444},{"id":444,"name":"LoaderType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":6,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":443,"name":"ExtType"},{"type":"literal","value":"yml"}],"name":"Exclude"},"permalink":"/api/config#LoaderType","previousId":445,"nextId":510},{"id":510,"name":"OverridesSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":91,"character":12}],"typeParameter":[{"id":511,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"array","elementType":{"type":"reference","id":505,"typeArguments":[{"type":"reference","id":511,"name":"T"}],"name":"OverridesSettingItem"}},"permalink":"/api/config#OverridesSetting","previousId":444,"nextId":513},{"id":513,"name":"PluginEntry","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":97,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":512,"name":"PluginOptions"}]}]},"permalink":"/api/config#PluginEntry","previousId":510,"nextId":512},{"id":512,"name":"PluginOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":95,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/config#PluginOptions","previousId":513,"nextId":516},{"id":516,"name":"PluginsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":103,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":515,"name":"PluginsSettingList"},{"type":"reference","id":514,"name":"PluginsSettingMap"}]},"permalink":"/api/config#PluginsSetting","previousId":512,"nextId":515},{"id":515,"name":"PluginsSettingList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":101,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":513,"name":"PluginEntry"}},"permalink":"/api/config#PluginsSettingList","previousId":516,"nextId":514},{"id":514,"name":"PluginsSettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":99,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":512,"name":"PluginOptions"}],"name":"Record"},"permalink":"/api/config#PluginsSettingMap","previousId":515,"nextId":329},{"id":329,"name":"ConfigError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":17,"character":13}],"type":{"type":"reflection","declaration":{"id":330,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":331,"name":"new ConfigError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":332,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_INVALID_DIR"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}},{"id":333,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_INVALID_DIR"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/config#ConfigError","previousId":514},{"id":432,"name":"createExtendsSchema","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/schemas.ts","line":13,"character":16}],"signatures":[{"id":433,"name":"createExtendsSchema","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` schema for validating the structure of an \\"extends\\" setting."},"parameters":[{"id":434,"name":"schematics","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"},"defaultValue":"schemas"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":504,"name":"ExtendsSetting"}],"name":"UnionSchema"}}],"permalink":"/api/config/function/createExtendsSchema","previousId":334,"nextId":438},{"id":438,"name":"createOverridesSchema","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/schemas.ts","line":39,"character":16}],"signatures":[{"id":439,"name":"createOverridesSchema","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` schema for validating the structure of an \\"overrides\\" setting."},"typeParameter":[{"id":440,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":441,"name":"blueprint","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":440,"name":"T"}],"name":"Blueprint"}},{"id":442,"name":"schematics","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"},"defaultValue":"schemas"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"Object"}],"name":"Required"}}],"name":"ArraySchema"}}],"permalink":"/api/config/function/createOverridesSchema","previousId":432,"nextId":435},{"id":435,"name":"createPluginsSchema","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/schemas.ts","line":24,"character":16}],"signatures":[{"id":436,"name":"createPluginsSchema","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` schema for validating the structure of a \\"plugins\\" setting."},"parameters":[{"id":437,"name":"schematics","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"},"defaultValue":"schemas"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":516,"name":"PluginsSetting"}],"name":"UnionSchema"}}],"permalink":"/api/config/function/createPluginsSchema","previousId":438,"nextId":406},{"id":406,"name":"getEnv","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/getEnv.ts","line":4,"character":16}],"signatures":[{"id":407,"name":"getEnv","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Detect the current environment name from `<project>_ENV` and `NODE_ENV`."},"parameters":[{"id":408,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/config/function/getEnv","previousId":435,"nextId":409},{"id":409,"name":"mergeArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeArray.ts","line":4,"character":16}],"signatures":[{"id":410,"name":"mergeArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next arrays into a new array while removing duplicates (using `Set`)."},"typeParameter":[{"id":411,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"parameters":[{"id":412,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":411,"name":"T"}},{"id":413,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":411,"name":"T"}}],"type":{"type":"reference","id":411,"name":"T"}}],"permalink":"/api/config/function/mergeArray","previousId":406,"nextId":414},{"id":414,"name":"mergeExtends","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeExtends.ts","line":9,"character":16}],"signatures":[{"id":415,"name":"mergeExtends","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next file paths (either a string or array of strings) into a\\nnew list of file paths. This is useful if utilizing config extending."},"parameters":[{"id":416,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":504,"name":"ExtendsSetting"}},{"id":417,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":504,"name":"ExtendsSetting"}}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"permalink":"/api/config/function/mergeExtends","previousId":409,"nextId":418},{"id":418,"name":"mergeObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeObject.ts","line":4,"character":16}],"signatures":[{"id":419,"name":"mergeObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Shallow merges previous and next objects into a new object using object spread."},"typeParameter":[{"id":420,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":421,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":420,"name":"T"}},{"id":422,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":420,"name":"T"}}],"type":{"type":"reference","id":420,"name":"T"}}],"permalink":"/api/config/function/mergeObject","previousId":414,"nextId":423},{"id":423,"name":"mergePlugins","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergePlugins.ts","line":24,"character":16}],"signatures":[{"id":424,"name":"mergePlugins","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next plugin configurations into an object.\\nPlugin configs can either be a list of sources, or list of sources\\nwith flags/options (tuples), or a map of sources to flags/options.\\nThis is useful if utilizing the `@boost/plugin` package."},"parameters":[{"id":425,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":516,"name":"PluginsSetting"}},{"id":426,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":516,"name":"PluginsSetting"}}],"type":{"type":"reference","id":514,"name":"PluginsSettingMap"}}],"permalink":"/api/config/function/mergePlugins","previousId":418,"nextId":427},{"id":427,"name":"overwrite","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/overwrite.ts","line":4,"character":16}],"signatures":[{"id":428,"name":"overwrite","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Overwrite the previous value with the next value."},"typeParameter":[{"id":429,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":430,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":429,"name":"T"}},{"id":431,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":429,"name":"T"}}],"type":{"type":"reference","id":429,"name":"T"}}],"permalink":"/api/config/function/overwrite","previousId":423,"nextId":475}],"groups":[{"title":"Classes","kind":128,"children":[334]},{"title":"Functions","kind":64,"children":[432,438,435,406,409,414,418,423,427]},{"title":"Interfaces","kind":256,"children":[475,462,478,459,467,496,505,471,499]},{"title":"Type aliases","kind":4194304,"children":[328,443,504,503,458,457,451,445,444,510,513,512,516,515,514]},{"title":"Variables","kind":32,"children":[329]}],"sources":[{"fileName":"packages/config/src/index.ts","line":6,"character":0}],"permalink":"/api/config"},"urlSlug":"config"}],"packageName":"@boost/config","packageVersion":"3.2.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":90,"name":"@boost/debug","kind":2,"kindString":"Module","flags":{},"children":[{"id":3100,"name":"CrashReporter","kind":128,"kindString":"Class","flags":{},"children":[{"id":3101,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3102,"name":"new CrashReporter","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3103,"name":"contents","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":3104,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":37,"character":1}],"signatures":[{"id":3105,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a label with a value, or multiple values, to the last added section."},"parameters":[{"id":3106,"name":"label","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3107,"name":"messages","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"PortablePath"}]}}}],"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3108,"name":"addSection","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":47,"character":1}],"signatures":[{"id":3109,"name":"addSection","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Start a new section with a title."},"parameters":[{"id":3110,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3111,"name":"reportBinaries","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":59,"character":1}],"signatures":[{"id":3112,"name":"reportBinaries","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report Node.js related binary versions and paths."},"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3113,"name":"reportEnvVars","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":86,"character":1}],"signatures":[{"id":3114,"name":"reportEnvVars","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report all environment variables."},"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3115,"name":"reportLanguages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":101,"character":1}],"signatures":[{"id":3116,"name":"reportLanguages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report common programming language versions and paths"},"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3124,"name":"reportPackageVersions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":196,"character":1}],"signatures":[{"id":3125,"name":"reportPackageVersions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report npm package versions for all that match the defined pattern.\\nOnly searches in the root node modules folder and _will not_ work with PnP."},"parameters":[{"id":3126,"name":"patterns","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":3127,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'Packages\'"}],"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3117,"name":"reportProcess","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":147,"character":1}],"signatures":[{"id":3118,"name":"reportProcess","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the current `process`."},"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3119,"name":"reportStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":161,"character":1}],"signatures":[{"id":3120,"name":"reportStackTrace","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report the stack trace for a defined `Error`."},"parameters":[{"id":3121,"name":"error","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Error"}}],"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3122,"name":"reportSystem","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":172,"character":1}],"signatures":[{"id":3123,"name":"reportSystem","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the platform and operating system."},"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]},{"id":3128,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":226,"character":1}],"signatures":[{"id":3129,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the reported content to the defined file path."},"parameters":[{"id":3130,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","id":3100,"name":"CrashReporter"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3101]},{"title":"Properties","kind":1024,"children":[3103]},{"title":"Methods","kind":2048,"children":[3104,3108,3111,3113,3115,3124,3117,3119,3122,3128]}],"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":31,"character":13}],"permalink":"/api/debug/class/CrashReporter","nextId":3131},{"id":3134,"name":"Debugger","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3135,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":7,"character":1}],"signatures":[{"id":3136,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all debugger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3137,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":9,"character":1}],"signatures":[{"id":3138,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all debugger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3139,"name":"invariant","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":11,"character":1}],"signatures":[{"id":3140,"name":"invariant","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a pass or fail message based on a conditional."},"parameters":[{"id":3141,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"}},{"id":3142,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3143,"name":"pass","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3144,"name":"fail","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3145,"name":"verbose","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":13,"character":1}],"signatures":[{"id":3146,"name":"verbose","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log verbose messages that only appear when the `BOOSTJS_DEBUG_VERBOSE` is set."},"parameters":[{"id":3147,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3148,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3135,3137,3139,3145]}],"sources":[{"fileName":"packages/debug/src/types.ts","line":3,"character":17}],"signatures":[{"id":3149,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3150,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3151,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3152,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3153,"name":"formatter","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}},{"id":3154,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","name":"IDebugger"}],"permalink":"/api/debug/interface/Debugger","previousId":3131},{"id":3131,"name":"createDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/createDebugger.ts","line":10,"character":16}],"signatures":[{"id":3132,"name":"createDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Debugger` instance with the defined namespace."},"parameters":[{"id":3133,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"type":{"type":"reference","id":3134,"name":"Debugger"}}],"permalink":"/api/debug/function/createDebugger","previousId":3100,"nextId":3134}],"groups":[{"title":"Classes","kind":128,"children":[3100]},{"title":"Functions","kind":64,"children":[3131]},{"title":"Interfaces","kind":256,"children":[3134]}],"sources":[{"fileName":"packages/debug/src/index.ts","line":6,"character":0}],"permalink":"/api/debug"},"urlSlug":"debug"},{"index":false,"label":"Test utilities","reflection":{"id":91,"name":"@boost/debug/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":92,"name":"mockDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/test.ts","line":20,"character":16}],"signatures":[{"id":93,"name":"mockDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createDebugger`.","text":"```ts\\nimport { mockDebugger } from \'@boost/debug/test\';\\n\\nit(\'calls the debugger\', () => {\\n\\tconst debug = mockDebugger();\\n\\n\\tdebug(\'Something is broken!\');\\n\\n\\texpect(debug).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3134,"name":"Debugger"}}],"permalink":"/api/debug-test/function/mockDebugger"}],"groups":[{"title":"Functions","kind":64,"children":[92]}],"sources":[{"fileName":"packages/debug/src/test.ts","line":3,"character":0}],"permalink":"/api/debug-test"},"urlSlug":"debug-test"}],"packageName":"@boost/debug","packageVersion":"3.0.3"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":3,"name":"@boost/decorators","kind":2,"kindString":"Module","flags":{},"children":[{"id":548,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":549,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":17,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":543,"typeArguments":[{"type":"reference","id":552,"name":"T"}],"name":"MemoizeCache"}]}},{"id":550,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":551,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":27,"character":1}],"type":{"type":"reference","id":539,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[549,550,551]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":15,"character":17}],"typeParameter":[{"id":552,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/decorators/interface/MemoizeOptions","previousId":553,"nextId":543},{"id":543,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":7,"character":12}],"typeParameter":[{"id":547,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":544,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":545,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":10,"character":2}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":546,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":11,"character":2}],"type":{"type":"reference","id":547,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[545,546]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":9,"character":1}]}}],"name":"Map"},"permalink":"/api/decorators#MemoizeCache","previousId":548,"nextId":539},{"id":539,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":12}],"type":{"type":"reflection","declaration":{"id":540,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":28}],"signatures":[{"id":541,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":542,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/decorators#MemoizeHasher","previousId":543,"nextId":534},{"id":534,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":12}],"typeParameter":[{"id":538,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":535,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":34}],"signatures":[{"id":536,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":537,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","id":538,"name":"T"}}]}},"permalink":"/api/decorators#MemoizedFunction","previousId":539},{"id":517,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Bind.ts","line":7,"character":16}],"signatures":[{"id":518,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Bind","nextId":519},{"id":519,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Debounce.ts","line":7,"character":16}],"signatures":[{"id":520,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":521,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Debounce","previousId":517,"nextId":522},{"id":522,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Deprecate.ts","line":13,"character":16}],"signatures":[{"id":523,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":524,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":525,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":526,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":527,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Object"},{"type":"reference","name":"Function"}]}},{"id":528,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":529,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/decorators/function/Deprecate","previousId":519,"nextId":530},{"id":530,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":80,"character":16}],"signatures":[{"id":531,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":532,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":533,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":539,"name":"MemoizeHasher"},{"type":"reference","id":548,"typeArguments":[{"type":"reference","id":532,"name":"T"}],"name":"MemoizeOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Memoize","previousId":522,"nextId":553},{"id":553,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Throttle.ts","line":7,"character":16}],"signatures":[{"id":554,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":555,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Throttle","previousId":530,"nextId":548}],"groups":[{"title":"Functions","kind":64,"children":[517,519,522,530,553]},{"title":"Interfaces","kind":256,"children":[548]},{"title":"Type aliases","kind":4194304,"children":[543,539,534]}],"sources":[{"fileName":"packages/decorators/src/index.ts","line":6,"character":0}],"permalink":"/api/decorators"},"urlSlug":"decorators"}],"packageName":"@boost/decorators","packageVersion":"3.0.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":4,"name":"@boost/event","kind":2,"kindString":"Module","flags":{},"children":[{"id":556,"name":"BailEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":557,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":558,"name":"new BailEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":559,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":560,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":561,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":556,"typeArguments":[{"type":"reference","id":559,"name":"Args"},{"type":"reference","id":560,"name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":601,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.constructor"}},{"id":566,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","id":560,"name":"Scope"},{"type":"literal","value":"*"}]},{"type":"reference","typeArguments":[{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":559,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":606,"name":"BaseEvent.listeners"}},{"id":567,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.name"}},{"id":568,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":569,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":570,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":560,"name":"Scope"}}],"type":{"type":"reference","id":556,"typeArguments":[{"type":"reference","id":559,"name":"Args"},{"type":"reference","id":560,"name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":609,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.clearListeners"}},{"id":562,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":14,"character":1}],"signatures":[{"id":563,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments.\\nIf a listener returns `false`, the loop with be aborted early,\\nand the emitter will return `true` (for bailed)."},"parameters":[{"id":564,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":559,"name":"Args"}},{"id":565,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":560,"name":"Scope"}}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","id":638,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":637,"name":"BaseEvent.emit"}},{"id":571,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":572,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":573,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":560,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":559,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":612,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":611,"name":"BaseEvent.getListeners"}},{"id":574,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":575,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":560,"name":"Scope"},{"type":"literal","value":"*"}]}},"inheritedFrom":{"type":"reference","id":615,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":614,"name":"BaseEvent.getScopes"}},{"id":576,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":577,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":578,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":559,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":579,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":560,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":617,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":616,"name":"BaseEvent.listen"}},{"id":580,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":581,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":582,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":559,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":583,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":560,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":621,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":620,"name":"BaseEvent.once"}},{"id":584,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":585,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":586,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":559,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":587,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":560,"name":"Scope"}}],"type":{"type":"reference","id":556,"typeArguments":[{"type":"reference","id":559,"name":"Args"},{"type":"reference","id":560,"name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":625,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":624,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[557]},{"title":"Properties","kind":1024,"children":[566,567]},{"title":"Methods","kind":2048,"children":[568,562,571,574,576,580,584]}],"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":4,"character":13}],"typeParameter":[{"id":597,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":598,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":599,"typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]},{"type":"reference","id":559,"name":"Args"},{"type":"reference","id":560,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/BailEvent","nextId":599},{"id":599,"name":"BaseEvent","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":600,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":11,"character":1}],"signatures":[{"id":601,"name":"new BaseEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":602,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":603,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":604,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":605,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":599,"typeArguments":[{"type":"reference","id":602,"name":"Return"},{"type":"reference","id":603,"name":"Args"},{"type":"reference","id":604,"name":"Scope"}],"name":"BaseEvent"}}]},{"id":606,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","id":604,"name":"Scope"},{"type":"literal","value":"*"}]},{"type":"reference","typeArguments":[{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":603,"name":"Args"},{"type":"reference","id":602,"name":"Return"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"..."},{"id":607,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":608,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":609,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":610,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":604,"name":"Scope"}}],"type":{"type":"reference","id":599,"typeArguments":[{"type":"reference","id":602,"name":"Return"},{"type":"reference","id":603,"name":"Args"},{"type":"reference","id":604,"name":"Scope"}],"name":"BaseEvent"}}]},{"id":637,"name":"emit","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":123,"character":10}],"signatures":[{"id":638,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emit the event by executing all scoped listeners with the defined arguments."},"parameters":[{"id":639,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":640,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":604,"name":"Scope"}}],"type":{"type":"intrinsic","name":"unknown"}}]},{"id":611,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":612,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":613,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":604,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":603,"name":"Args"},{"type":"reference","id":602,"name":"Return"}],"name":"Listener"}],"name":"Set"}}]},{"id":614,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":615,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":604,"name":"Scope"},{"type":"literal","value":"*"}]}}}]},{"id":616,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":617,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":618,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":603,"name":"Args"},{"type":"reference","id":602,"name":"Return"}],"name":"Listener"}},{"id":619,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":604,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"}}]},{"id":620,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":621,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":622,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":603,"name":"Args"},{"type":"reference","id":602,"name":"Return"}],"name":"Listener"}},{"id":623,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":604,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"}}]},{"id":624,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":625,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":626,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":603,"name":"Args"},{"type":"reference","id":602,"name":"Return"}],"name":"Listener"}},{"id":627,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":604,"name":"Scope"}}],"type":{"type":"reference","id":599,"typeArguments":[{"type":"reference","id":602,"name":"Return"},{"type":"reference","id":603,"name":"Args"},{"type":"reference","id":604,"name":"Scope"}],"name":"BaseEvent"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[600]},{"title":"Properties","kind":1024,"children":[606,607]},{"title":"Methods","kind":2048,"children":[608,637,611,614,616,620,624]}],"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":6,"character":22}],"typeParameter":[{"id":641,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":642,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":643,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedBy":[{"type":"reference","id":556,"name":"BailEvent"},{"type":"reference","id":644,"name":"ConcurrentEvent"},{"type":"reference","id":689,"name":"Event"},{"type":"reference","id":773,"name":"WaterfallEvent"}],"permalink":"/api/event/class/BaseEvent","previousId":556,"nextId":644},{"id":644,"name":"ConcurrentEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":645,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":646,"name":"new ConcurrentEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":647,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":648,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":649,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":644,"typeArguments":[{"type":"reference","id":647,"name":"Args"},{"type":"reference","id":648,"name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":601,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.constructor"}},{"id":654,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":648,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":647,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":606,"name":"BaseEvent.listeners"}},{"id":655,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.name"}},{"id":656,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":657,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":658,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":648,"name":"Scope"}}],"type":{"type":"reference","id":644,"typeArguments":[{"type":"reference","id":647,"name":"Args"},{"type":"reference","id":648,"name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":609,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.clearListeners"}},{"id":650,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":12,"character":7}],"signatures":[{"id":651,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Asynchronously execute listeners for with the defined arguments.\\nWill return a promise with an array of each listener result."},"parameters":[{"id":652,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":647,"name":"Args"}},{"id":653,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":648,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}],"name":"Promise"},"overwrites":{"type":"reference","id":638,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":637,"name":"BaseEvent.emit"}},{"id":659,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":660,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":661,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":648,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":647,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":612,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":611,"name":"BaseEvent.getListeners"}},{"id":662,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":663,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":648,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":615,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":614,"name":"BaseEvent.getScopes"}},{"id":664,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":665,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":666,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":647,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":667,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":648,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":617,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":616,"name":"BaseEvent.listen"}},{"id":668,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":669,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":670,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":647,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":671,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":648,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":621,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":620,"name":"BaseEvent.once"}},{"id":672,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":673,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":674,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":647,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":675,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":648,"name":"Scope"}}],"type":{"type":"reference","id":644,"typeArguments":[{"type":"reference","id":647,"name":"Args"},{"type":"reference","id":648,"name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":625,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":624,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[645]},{"title":"Properties","kind":1024,"children":[654,655]},{"title":"Methods","kind":2048,"children":[656,650,659,662,664,668,672]}],"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":4,"character":13}],"typeParameter":[{"id":685,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":686,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":599,"typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"},{"type":"reference","id":647,"name":"Args"},{"type":"reference","id":648,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/ConcurrentEvent","previousId":599,"nextId":689},{"id":689,"name":"Event","kind":128,"kindString":"Class","flags":{},"children":[{"id":690,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":691,"name":"new Event","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":692,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":693,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":694,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":689,"typeArguments":[{"type":"reference","id":692,"name":"Args"},{"type":"reference","id":693,"name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":601,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.constructor"}},{"id":699,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":693,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":692,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":606,"name":"BaseEvent.listeners"}},{"id":700,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.name"}},{"id":701,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":702,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":703,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":693,"name":"Scope"}}],"type":{"type":"reference","id":689,"typeArguments":[{"type":"reference","id":692,"name":"Args"},{"type":"reference","id":693,"name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":609,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.clearListeners"}},{"id":695,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/Event.ts","line":11,"character":1}],"signatures":[{"id":696,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments."},"parameters":[{"id":697,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":692,"name":"Args"}},{"id":698,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":693,"name":"Scope"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":638,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":637,"name":"BaseEvent.emit"}},{"id":704,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":705,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":706,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":693,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":692,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":612,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":611,"name":"BaseEvent.getListeners"}},{"id":707,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":708,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":693,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":615,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":614,"name":"BaseEvent.getScopes"}},{"id":709,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":710,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":711,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":692,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":712,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":693,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":617,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":616,"name":"BaseEvent.listen"}},{"id":713,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":714,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":715,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":692,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":716,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":693,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":621,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":620,"name":"BaseEvent.once"}},{"id":717,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":718,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":719,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":738,"typeArguments":[{"type":"reference","id":692,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":720,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":693,"name":"Scope"}}],"type":{"type":"reference","id":689,"typeArguments":[{"type":"reference","id":692,"name":"Args"},{"type":"reference","id":693,"name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":625,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":624,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[690]},{"title":"Properties","kind":1024,"children":[699,700]},{"title":"Methods","kind":2048,"children":[701,695,704,707,709,713,717]}],"sources":[{"fileName":"packages/event/src/Event.ts","line":3,"character":13}],"typeParameter":[{"id":730,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":731,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":599,"typeArguments":[{"type":"intrinsic","name":"void"},{"type":"reference","id":692,"name":"Args"},{"type":"reference","id":693,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/Event","previousId":644,"nextId":773},{"id":773,"name":"WaterfallEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":774,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":775,"name":"new WaterfallEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":776,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":777,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":778,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":773,"typeArguments":[{"type":"reference","id":776,"name":"Arg"},{"type":"reference","id":777,"name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":601,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.constructor"}},{"id":783,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":777,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":784,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":785,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":786,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":776,"name":"Arg"}}],"type":{"type":"reference","id":776,"name":"Arg"}}]}}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":606,"name":"BaseEvent.listeners"}},{"id":787,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.name"}},{"id":788,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":789,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":790,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":777,"name":"Scope"}}],"type":{"type":"reference","id":773,"typeArguments":[{"type":"reference","id":776,"name":"Arg"},{"type":"reference","id":777,"name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":609,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.clearListeners"}},{"id":779,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":13,"character":1}],"signatures":[{"id":780,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined argument value.\\nThe return value of each listener will be passed as an argument to the next listener."},"parameters":[{"id":781,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":776,"name":"Arg"}},{"id":782,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":777,"name":"Scope"}}],"type":{"type":"reference","id":776,"name":"Arg"},"overwrites":{"type":"reference","id":638,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":637,"name":"BaseEvent.emit"}},{"id":791,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":792,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":793,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":777,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":794,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":795,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":796,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":776,"name":"Arg"}}],"type":{"type":"reference","id":776,"name":"Arg"}}]}}],"name":"Set"},"inheritedFrom":{"type":"reference","id":612,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":611,"name":"BaseEvent.getListeners"}},{"id":797,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":798,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":777,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":615,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":614,"name":"BaseEvent.getScopes"}},{"id":799,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":800,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":801,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":802,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":803,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":804,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":776,"name":"Arg"}}],"type":{"type":"reference","id":776,"name":"Arg"}}]}}},{"id":805,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":777,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":617,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":616,"name":"BaseEvent.listen"}},{"id":806,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":807,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":808,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":809,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":810,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":811,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":776,"name":"Arg"}}],"type":{"type":"reference","id":776,"name":"Arg"}}]}}},{"id":812,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":777,"name":"Scope"}}],"type":{"type":"reference","id":769,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":621,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":620,"name":"BaseEvent.once"}},{"id":813,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":814,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":815,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":816,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":817,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":818,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":776,"name":"Arg"}}],"type":{"type":"reference","id":776,"name":"Arg"}}]}}},{"id":819,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":777,"name":"Scope"}}],"type":{"type":"reference","id":773,"typeArguments":[{"type":"reference","id":776,"name":"Arg"},{"type":"reference","id":777,"name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":625,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":624,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[774]},{"title":"Properties","kind":1024,"children":[783,787]},{"title":"Methods","kind":2048,"children":[788,779,791,797,799,806,813]}],"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":4,"character":13}],"typeParameter":[{"id":829,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":830,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":599,"typeArguments":[{"type":"reference","id":776,"name":"Arg"},{"type":"tuple","elements":[{"type":"reference","id":776,"name":"Arg"}]},{"type":"reference","id":777,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/WaterfallEvent","previousId":689,"nextId":732},{"id":732,"name":"EventErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/EventError.ts","line":9,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/event#EventErrorCode","previousId":773,"nextId":738},{"id":738,"name":"Listener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":1,"character":12}],"typeParameter":[{"id":767,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":768,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":767,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"},{"type":"inferred","name":"A5"}]},"trueType":{"type":"reflection","declaration":{"id":739,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":8,"character":3}],"signatures":[{"id":740,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":741,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":742,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":743,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":744,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}},{"id":745,"name":"a5","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A5"}}],"type":{"type":"reference","id":768,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":767,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"}]},"trueType":{"type":"reflection","declaration":{"id":746,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":10,"character":3}],"signatures":[{"id":747,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":748,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":749,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":750,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":751,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}}],"type":{"type":"reference","id":768,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":767,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"}]},"trueType":{"type":"reflection","declaration":{"id":752,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":12,"character":3}],"signatures":[{"id":753,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":754,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":755,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":756,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}}],"type":{"type":"reference","id":768,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":767,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"}]},"trueType":{"type":"reflection","declaration":{"id":757,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":14,"character":3}],"signatures":[{"id":758,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":759,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":760,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}}],"type":{"type":"reference","id":768,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":767,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"}]},"trueType":{"type":"reflection","declaration":{"id":761,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":16,"character":3}],"signatures":[{"id":762,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":763,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}}],"type":{"type":"reference","id":768,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":767,"name":"A"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reflection","declaration":{"id":764,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":18,"character":3}],"signatures":[{"id":765,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":766,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":767,"name":"A"}}],"type":{"type":"reference","id":768,"name":"R"}}]}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/event#Listener","previousId":732,"nextId":769},{"id":769,"name":"Unlistener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":12}],"type":{"type":"reflection","declaration":{"id":770,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":25}],"signatures":[{"id":771,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/event#Unlistener","previousId":738,"nextId":772},{"id":772,"name":"WildstarScope","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":23,"character":12}],"type":{"type":"literal","value":"*"},"permalink":"/api/event#WildstarScope","previousId":769,"nextId":688},{"id":688,"name":"EVENT_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/event/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/event#EVENT_NAME_PATTERN","previousId":772,"nextId":733},{"id":733,"name":"EventError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/event/src/EventError.ts","line":11,"character":13}],"type":{"type":"reflection","declaration":{"id":734,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":735,"name":"new EventError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":736,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}},{"id":737,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/event#EventError","previousId":688,"nextId":687},{"id":687,"name":"WILDCARD_SCOPE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/event/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":"*"},"defaultValue":"\'*\'","permalink":"/api/event#WILDCARD_SCOPE","previousId":733}],"groups":[{"title":"Classes","kind":128,"children":[556,599,644,689,773]},{"title":"Type aliases","kind":4194304,"children":[732,738,769,772]},{"title":"Variables","kind":32,"children":[688,733,687]}],"sources":[{"fileName":"packages/event/src/index.ts","line":6,"character":0}],"permalink":"/api/event"},"urlSlug":"event"}],"packageName":"@boost/event","packageVersion":"3.0.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":94,"name":"@boost/log","kind":2,"kindString":"Module","flags":{},"children":[{"id":3155,"name":"formats","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":3156,"name":"console","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":18,"character":16}],"signatures":[{"id":3157,"name":"console","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item as if it\'s being logged to `console`.\\n_Only_ inclues the label and message."},"parameters":[{"id":3158,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3159,"name":"debug","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":32,"character":16}],"signatures":[{"id":3160,"name":"debug","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item into a human-readable message with all item fields included.\\nThis is the default format for most transports."},"parameters":[{"id":3161,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3162,"name":"json","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":46,"character":16}],"signatures":[{"id":3163,"name":"json","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the entire item into JSON."},"parameters":[{"id":3164,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3165,"name":"message","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":53,"character":16}],"signatures":[{"id":3166,"name":"message","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item using _only_ the message."},"parameters":[{"id":3167,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Functions","kind":64,"children":[3156,3159,3162,3165]}],"sources":[{"fileName":"packages/log/src/formats.ts","line":1,"character":0}],"permalink":"/api/log/namespace/formats","previousId":3451,"nextId":3455},{"id":3224,"name":"ConsoleTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3225,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":7,"character":1}],"signatures":[{"id":3226,"name":"new ConsoleTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3227,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3466,"name":"TransportOptions"}],"name":"Partial"}}],"type":{"type":"reference","id":3224,"name":"ConsoleTransport"},"overwrites":{"type":"reference","id":3202,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3201,"name":"Transport.constructor"}},{"id":3232,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3205,"name":"Transport.levels"}},{"id":3239,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3466,"name":"TransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3216,"name":"Transport.options"}},{"id":3233,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":20,"character":1}],"signatures":[{"id":3234,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3235,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3466,"name":"TransportOptions"}],"name":"Blueprint"},"inheritedFrom":{"type":"reference","id":3207,"name":"Transport.blueprint"}}],"inheritedFrom":{"type":"reference","id":3206,"name":"Transport.blueprint"}},{"id":3240,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3241,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3242,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3466,"name":"TransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3243,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3244,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3245,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3466,"name":"TransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3466,"name":"TransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3466,"name":"TransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3218,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3217,"name":"Transport.configure"}},{"id":3236,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3237,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3238,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3210,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3209,"name":"Transport.format"}},{"id":3228,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":15,"character":1}],"signatures":[{"id":3229,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3230,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3231,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3213,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3212,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3225]},{"title":"Properties","kind":1024,"children":[3232,3239]},{"title":"Methods","kind":2048,"children":[3233,3240,3236,3228]}],"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":6,"character":13}],"extendedTypes":[{"type":"reference","id":3200,"typeArguments":[{"type":"reference","id":3466,"name":"TransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/ConsoleTransport","nextId":3253},{"id":3253,"name":"FileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3254,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":36,"character":1}],"signatures":[{"id":3255,"name":"new FileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3256,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3246,"name":"FileTransportOptions"},"default":{"type":"reference","id":3246,"name":"FileTransportOptions"}}],"parameters":[{"id":3257,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3256,"name":"Options"}}],"type":{"type":"reference","id":3253,"typeArguments":[{"type":"reference","id":3256,"name":"Options"}],"name":"FileTransport"},"overwrites":{"type":"reference","id":3202,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3201,"name":"Transport.constructor"}},{"id":3292,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3205,"name":"Transport.levels"}},{"id":3296,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3216,"name":"Transport.options"}},{"id":3258,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":24,"character":10}],"type":{"type":"reference","name":"Path"}},{"id":3259,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":26,"character":1}],"type":{"type":"reference","name":"WritableStream"}},{"id":3264,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":44,"character":10}],"signatures":[{"id":3265,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3266,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3246,"name":"FileTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3207,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3206,"name":"Transport.blueprint"}},{"id":3267,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":58,"character":1}],"signatures":[{"id":3268,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3269,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3270,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3271,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3297,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3298,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3299,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3300,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3301,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3302,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3256,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3218,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3217,"name":"Transport.configure"}},{"id":3293,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3294,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3295,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3210,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3209,"name":"Transport.format"}},{"id":3272,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":74,"character":1}],"signatures":[{"id":3273,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","name":"WritableStream"}}]},{"id":3274,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":98,"character":1}],"signatures":[{"id":3275,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3276,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3213,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3212,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3254]},{"title":"Properties","kind":1024,"children":[3292,3296,3258,3259]},{"title":"Methods","kind":2048,"children":[3264,3267,3297,3293,3272,3274]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":21,"character":13}],"typeParameter":[{"id":3303,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3246,"name":"FileTransportOptions"},"default":{"type":"reference","id":3246,"name":"FileTransportOptions"}}],"extendedTypes":[{"type":"reference","id":3200,"typeArguments":[{"type":"reference","id":3256,"name":"Options"}],"name":"Transport"}],"extendedBy":[{"type":"reference","id":3312,"name":"RotatingFileTransport"}],"permalink":"/api/log/class/FileTransport","previousId":3224,"nextId":3174},{"id":3174,"name":"Logger","kind":128,"kindString":"Class","flags":{},"children":[{"id":3175,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":15,"character":1}],"signatures":[{"id":3176,"name":"new Logger","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3177,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3446,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3174,"name":"Logger"},"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}},{"id":3193,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3446,"name":"LoggerOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3179,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":29,"character":1}],"signatures":[{"id":3180,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3181,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3446,"name":"LoggerOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3194,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3195,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3196,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3446,"name":"LoggerOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3197,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3198,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3199,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3446,"name":"LoggerOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3446,"name":"LoggerOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3446,"name":"LoggerOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3182,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":45,"character":1}],"signatures":[{"id":3183,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3184,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":53,"character":1}],"signatures":[{"id":3185,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3186,"name":"isAllowed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":58,"character":1}],"signatures":[{"id":3187,"name":"isAllowed","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3188,"name":"level","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3392,"name":"LogLevel"}},{"id":3189,"name":"maxLevel","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":3392,"name":"LogLevel"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":3190,"name":"log","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":76,"character":1}],"signatures":[{"id":3191,"name":"log","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3192,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3404,"name":"LogOptions"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3175]},{"title":"Properties","kind":1024,"children":[3193]},{"title":"Methods","kind":2048,"children":[3179,3194,3182,3184,3186,3190]}],"sources":[{"fileName":"packages/log/src/Logger.ts","line":12,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":3446,"name":"LoggerOptions"}],"name":"Contract"}],"permalink":"/api/log/class/Logger","previousId":3253,"nextId":3312},{"id":3312,"name":"RotatingFileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3313,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3314,"name":"new RotatingFileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3315,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3304,"name":"RotatingFileTransportOptions"}}],"type":{"type":"reference","id":3312,"name":"RotatingFileTransport"},"inheritedFrom":{"type":"reference","id":3255,"name":"FileTransport.constructor"}}],"inheritedFrom":{"type":"reference","id":3254,"name":"FileTransport.constructor"}},{"id":3354,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3292,"name":"FileTransport.levels"}},{"id":3358,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3304,"name":"RotatingFileTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3296,"name":"FileTransport.options"}},{"id":3329,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":24,"character":10}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":3258,"name":"FileTransport.path"}},{"id":3330,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":26,"character":1}],"type":{"type":"reference","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3259,"name":"FileTransport.stream"}},{"id":3317,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":15,"character":10}],"signatures":[{"id":3318,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3319,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3304,"name":"RotatingFileTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3265,"name":"FileTransport.blueprint"}}],"overwrites":{"type":"reference","id":3264,"name":"FileTransport.blueprint"}},{"id":3335,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":58,"character":1}],"signatures":[{"id":3336,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3337,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3338,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3339,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3268,"name":"FileTransport.close"}}],"inheritedFrom":{"type":"reference","id":3267,"name":"FileTransport.close"}},{"id":3359,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3360,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3361,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3304,"name":"RotatingFileTransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3362,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3363,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3364,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3304,"name":"RotatingFileTransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3304,"name":"RotatingFileTransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3304,"name":"RotatingFileTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3298,"name":"FileTransport.configure"}}],"inheritedFrom":{"type":"reference","id":3297,"name":"FileTransport.configure"}},{"id":3355,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3356,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3357,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3294,"name":"FileTransport.format"}}],"inheritedFrom":{"type":"reference","id":3293,"name":"FileTransport.format"}},{"id":3320,"name":"formatTimestamp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":27,"character":1}],"signatures":[{"id":3321,"name":"formatTimestamp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a `Date` object into a format used within the log file name."},"parameters":[{"id":3322,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3340,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":74,"character":1}],"signatures":[{"id":3341,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3273,"name":"FileTransport.open"}}],"inheritedFrom":{"type":"reference","id":3272,"name":"FileTransport.open"}},{"id":3342,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":98,"character":1}],"signatures":[{"id":3343,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3344,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3275,"name":"FileTransport.write"}}],"inheritedFrom":{"type":"reference","id":3274,"name":"FileTransport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3313]},{"title":"Properties","kind":1024,"children":[3354,3358,3329,3330]},{"title":"Methods","kind":2048,"children":[3317,3335,3359,3355,3320,3340,3342]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":12,"character":13}],"extendedTypes":[{"type":"reference","id":3253,"typeArguments":[{"type":"reference","id":3304,"name":"RotatingFileTransportOptions"}],"name":"FileTransport"}],"permalink":"/api/log/class/RotatingFileTransport","previousId":3174,"nextId":3370},{"id":3370,"name":"StreamTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3371,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":13,"character":1}],"signatures":[{"id":3372,"name":"new StreamTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3373,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3365,"name":"StreamTransportOptions"}}],"type":{"type":"reference","id":3370,"name":"StreamTransport"},"overwrites":{"type":"reference","id":3202,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3201,"name":"Transport.constructor"}},{"id":3381,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3205,"name":"Transport.levels"}},{"id":3385,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3365,"name":"StreamTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3216,"name":"Transport.options"}},{"id":3375,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":19,"character":10}],"signatures":[{"id":3376,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3377,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3365,"name":"StreamTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3207,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3206,"name":"Transport.blueprint"}},{"id":3386,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3387,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3388,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3365,"name":"StreamTransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3389,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3390,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3391,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3365,"name":"StreamTransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3365,"name":"StreamTransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3365,"name":"StreamTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3218,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3217,"name":"Transport.configure"}},{"id":3382,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3383,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3384,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3210,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3209,"name":"Transport.format"}},{"id":3378,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":33,"character":1}],"signatures":[{"id":3379,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3380,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3213,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3212,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3371]},{"title":"Properties","kind":1024,"children":[3381,3385]},{"title":"Methods","kind":2048,"children":[3375,3386,3382,3378]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":10,"character":13}],"extendedTypes":[{"type":"reference","id":3200,"typeArguments":[{"type":"reference","id":3365,"name":"StreamTransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/StreamTransport","previousId":3312,"nextId":3200},{"id":3200,"name":"Transport","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":3201,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":14,"character":1}],"signatures":[{"id":3202,"name":"new Transport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3203,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3466,"name":"TransportOptions"}}],"parameters":[{"id":3204,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3203,"name":"Options"}}],"type":{"type":"reference","id":3200,"typeArguments":[{"type":"reference","id":3203,"name":"Options"}],"name":"Transport"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":3205,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}},"defaultValue":"[]","implementationOf":{"type":"reference","id":3460,"name":"Transportable.levels"}},{"id":3216,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3203,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3206,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":20,"character":1}],"signatures":[{"id":3207,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3208,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3466,"name":"TransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3217,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3218,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3219,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3203,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3220,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3221,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3222,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3203,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3203,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3203,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3209,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3210,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3211,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","name":"Transportable.format"}}],"implementationOf":{"type":"reference","id":3461,"name":"Transportable.format"}},{"id":3212,"name":"write","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":48,"character":10}],"signatures":[{"id":3213,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3214,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3215,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}]},"implementationOf":{"type":"reference","id":3463,"name":"Transportable.write"}}],"implementationOf":{"type":"reference","id":3462,"name":"Transportable.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3201]},{"title":"Properties","kind":1024,"children":[3205,3216]},{"title":"Methods","kind":2048,"children":[3206,3217,3209,3212]}],"sources":[{"fileName":"packages/log/src/Transport.ts","line":8,"character":22}],"typeParameter":[{"id":3223,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3466,"name":"TransportOptions"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":3203,"name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":3224,"name":"ConsoleTransport"},{"type":"reference","id":3253,"name":"FileTransport"},{"type":"reference","id":3370,"name":"StreamTransport"}],"implementedTypes":[{"type":"reference","id":3459,"name":"Transportable"}],"permalink":"/api/log/class/Transport","previousId":3370,"nextId":3171},{"id":3246,"name":"FileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3250,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3467,"name":"TransportOptions.eol"}},{"id":3251,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3455,"name":"Formatter"},"inheritedFrom":{"type":"reference","id":3468,"name":"TransportOptions.format"}},{"id":3247,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3252,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3469,"name":"TransportOptions.levels"}},{"id":3248,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3249,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":18,"character":1}],"type":{"type":"reference","name":"PortablePath"}}],"groups":[{"title":"Properties","kind":1024,"children":[3250,3251,3247,3252,3248,3249]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":9,"character":17}],"extendedTypes":[{"type":"reference","id":3466,"name":"TransportOptions"}],"extendedBy":[{"type":"reference","id":3304,"name":"RotatingFileTransportOptions"}],"permalink":"/api/log/interface/FileTransportOptions","previousId":3171,"nextId":3395},{"id":3395,"name":"LogItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3396,"name":"host","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3397,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a localized or customized label."},"sources":[{"fileName":"packages/log/src/types.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3398,"name":"level","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a string."},"sources":[{"fileName":"packages/log/src/types.ts","line":13,"character":1}],"type":{"type":"reference","id":3392,"name":"LogLevel"}},{"id":3399,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log message with interpolated arguments applied."},"sources":[{"fileName":"packages/log/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3400,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional data to include with a log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":3394,"name":"LogMetadata"}},{"id":3401,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of the logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3402,"name":"pid","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current process ID."},"sources":[{"fileName":"packages/log/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3403,"name":"time","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Timestamp of the log, native to the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":23,"character":1}],"type":{"type":"reference","name":"Date"}}],"groups":[{"title":"Properties","kind":1024,"children":[3396,3397,3398,3399,3400,3401,3402,3403]}],"sources":[{"fileName":"packages/log/src/types.ts","line":7,"character":17}],"permalink":"/api/log/interface/LogItem","previousId":3246,"nextId":3404},{"id":3404,"name":"LogOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3405,"name":"args","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Values to interpolate into the message string."},"sources":[{"fileName":"packages/log/src/types.ts","line":28,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":3406,"name":"level","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Level to log as."},"sources":[{"fileName":"packages/log/src/types.ts","line":30,"character":1}],"type":{"type":"reference","id":3392,"name":"LogLevel"}},{"id":3407,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Message to log to the transports."},"sources":[{"fileName":"packages/log/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3408,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include in the message item/string."},"sources":[{"fileName":"packages/log/src/types.ts","line":34,"character":1}],"type":{"type":"reference","id":3394,"name":"LogMetadata"}}],"groups":[{"title":"Properties","kind":1024,"children":[3405,3406,3407,3408]}],"sources":[{"fileName":"packages/log/src/types.ts","line":26,"character":17}],"permalink":"/api/log/interface/LogOptions","previousId":3395,"nextId":3417},{"id":3417,"name":"Loggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3418,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"}},{"id":3423,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"}},{"id":3425,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"}},{"id":3424,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"}},{"id":3426,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"}},{"id":3427,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"}},{"id":3419,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3420,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3421,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3422,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3418,3423,3425,3424,3426,3427]},{"title":"Methods","kind":2048,"children":[3419,3421]}],"sources":[{"fileName":"packages/log/src/types.ts","line":47,"character":17}],"extendedBy":[{"type":"reference","id":3428,"name":"LoggerFunction"}],"permalink":"/api/log/interface/Loggable","previousId":3404,"nextId":3409},{"id":3409,"name":"LoggableWriter","kind":256,"kindString":"Interface","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":37,"character":17}],"signatures":[{"id":3410,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3411,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3394,"name":"LogMetadata"}},{"id":3412,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3413,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3414,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3415,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3416,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedBy":[{"type":"reference","id":3428,"name":"LoggerFunction"}],"permalink":"/api/log/interface/LoggableWriter","previousId":3417,"nextId":3428},{"id":3428,"name":"LoggerFunction","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3429,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3418,"name":"Loggable.debug"}},{"id":3434,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3423,"name":"Loggable.error"}},{"id":3436,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3425,"name":"Loggable.info"}},{"id":3435,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3424,"name":"Loggable.log"}},{"id":3437,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3426,"name":"Loggable.trace"}},{"id":3438,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3409,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3427,"name":"Loggable.warn"}},{"id":3430,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3431,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3420,"name":"Loggable.disable"}}],"inheritedFrom":{"type":"reference","id":3419,"name":"Loggable.disable"}},{"id":3432,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3433,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3422,"name":"Loggable.enable"}}],"inheritedFrom":{"type":"reference","id":3421,"name":"Loggable.enable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3429,3434,3436,3435,3437,3438]},{"title":"Methods","kind":2048,"children":[3430,3432]}],"sources":[{"fileName":"packages/log/src/types.ts","line":66,"character":17}],"signatures":[{"id":3439,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3440,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3394,"name":"LogMetadata"}},{"id":3441,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3442,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3443,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3444,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3445,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","id":3417,"name":"Loggable"},{"type":"reference","id":3409,"name":"LoggableWriter"}],"permalink":"/api/log/interface/LoggerFunction","previousId":3409,"nextId":3446},{"id":3446,"name":"LoggerOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3447,"name":"labels","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom labels to use for each log type."},"sources":[{"fileName":"packages/log/src/types.ts","line":70,"character":1}],"type":{"type":"reference","id":3393,"name":"LogLevelLabels"}},{"id":3448,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include within each log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":72,"character":1}],"type":{"type":"reference","id":3394,"name":"LogMetadata"}},{"id":3449,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name for this logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":74,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3450,"name":"transports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of transports to write messages to."},"sources":[{"fileName":"packages/log/src/types.ts","line":76,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3459,"name":"Transportable"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3447,3448,3449,3450]}],"sources":[{"fileName":"packages/log/src/types.ts","line":68,"character":17}],"permalink":"/api/log/interface/LoggerOptions","previousId":3428,"nextId":3304},{"id":3304,"name":"RotatingFileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3309,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3250,"name":"FileTransportOptions.eol"}},{"id":3310,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3455,"name":"Formatter"},"inheritedFrom":{"type":"reference","id":3251,"name":"FileTransportOptions.format"}},{"id":3306,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":3247,"name":"FileTransportOptions.gzip"}},{"id":3311,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3252,"name":"FileTransportOptions.levels"}},{"id":3307,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":3248,"name":"FileTransportOptions.maxSize"}},{"id":3308,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":18,"character":1}],"type":{"type":"reference","name":"PortablePath"},"inheritedFrom":{"type":"reference","id":3249,"name":"FileTransportOptions.path"}},{"id":3305,"name":"rotation","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Period in which to rotate files. Will append a timestamp to the rotated log file."},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":9,"character":1}],"type":{"type":"reference","id":3470,"name":"Rotation"}}],"groups":[{"title":"Properties","kind":1024,"children":[3309,3310,3306,3311,3307,3308,3305]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":3246,"name":"FileTransportOptions"}],"permalink":"/api/log/interface/RotatingFileTransportOptions","previousId":3446,"nextId":3365},{"id":3365,"name":"StreamTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3367,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3467,"name":"TransportOptions.eol"}},{"id":3368,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3455,"name":"Formatter"},"inheritedFrom":{"type":"reference","id":3468,"name":"TransportOptions.format"}},{"id":3369,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3469,"name":"TransportOptions.levels"}},{"id":3366,"name":"stream","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The stream to pipe messages to."},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":7,"character":1}],"type":{"type":"reference","id":3451,"name":"Writable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3367,3368,3369,3366]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":5,"character":17}],"extendedTypes":[{"type":"reference","id":3466,"name":"TransportOptions"}],"permalink":"/api/log/interface/StreamTransportOptions","previousId":3304,"nextId":3466},{"id":3466,"name":"TransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3467,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3468,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3455,"name":"Formatter"}},{"id":3469,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3467,3468,3469]}],"sources":[{"fileName":"packages/log/src/types.ts","line":93,"character":17}],"extendedBy":[{"type":"reference","id":3246,"name":"FileTransportOptions"},{"type":"reference","id":3365,"name":"StreamTransportOptions"}],"permalink":"/api/log/interface/TransportOptions","previousId":3365,"nextId":3459},{"id":3459,"name":"Transportable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3461,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":88,"character":1}],"type":{"type":"reference","id":3455,"name":"Formatter"}},{"id":3460,"name":"levels","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":87,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}}},{"id":3462,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":90,"character":1}],"signatures":[{"id":3463,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message and log item to the transport."},"parameters":[{"id":3464,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3465,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}]}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3461,3460]},{"title":"Methods","kind":2048,"children":[3462]}],"sources":[{"fileName":"packages/log/src/types.ts","line":86,"character":17}],"implementedBy":[{"type":"reference","id":3200,"name":"Transport"}],"permalink":"/api/log/interface/Transportable","previousId":3466,"nextId":3451},{"id":3451,"name":"Writable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3452,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":81,"character":1}],"signatures":[{"id":3453,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3454,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3452]}],"sources":[{"fileName":"packages/log/src/types.ts","line":79,"character":17}],"permalink":"/api/log/interface/Writable","previousId":3459,"nextId":3155},{"id":3455,"name":"Formatter","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":12}],"type":{"type":"reflection","declaration":{"id":3456,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":24}],"signatures":[{"id":3457,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3458,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3395,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/log#Formatter","previousId":3155,"nextId":3392},{"id":3392,"name":"LogLevel","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":1,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"debug"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"log"},{"type":"literal","value":"trace"},{"type":"literal","value":"warn"}]},"permalink":"/api/log#LogLevel","previousId":3455,"nextId":3393},{"id":3393,"name":"LogLevelLabels","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":3,"character":12}],"type":{"type":"mapped","parameter":"L","parameterType":{"type":"reference","id":3392,"name":"LogLevel"},"templateType":{"type":"intrinsic","name":"string"},"optionalModifier":"+"},"permalink":"/api/log#LogLevelLabels","previousId":3392,"nextId":3394},{"id":3394,"name":"LogMetadata","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":5,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/log#LogMetadata","previousId":3393,"nextId":3470},{"id":3470,"name":"Rotation","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":102,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"daily"},{"type":"literal","value":"hourly"},{"type":"literal","value":"monthly"},{"type":"literal","value":"weekly"}]},"permalink":"/api/log#Rotation","previousId":3394,"nextId":3169},{"id":3169,"name":"DEFAULT_LABELS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/log/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","id":3393,"name":"LogLevelLabels"},"defaultValue":"...","permalink":"/api/log#DEFAULT_LABELS","previousId":3470,"nextId":3168},{"id":3168,"name":"LOG_LEVELS","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/log/src/constants.ts","line":6,"character":13}],"type":{"type":"array","elementType":{"type":"reference","id":3392,"name":"LogLevel"}},"defaultValue":"...","permalink":"/api/log#LOG_LEVELS","previousId":3169,"nextId":3170},{"id":3170,"name":"MAX_LOG_SIZE","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/log/src/constants.ts","line":17,"character":13}],"type":{"type":"literal","value":10485760},"defaultValue":"10_485_760","permalink":"/api/log#MAX_LOG_SIZE","previousId":3168},{"id":3171,"name":"createLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/createLogger.ts","line":29,"character":16}],"signatures":[{"id":3172,"name":"createLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a logger with any configured transports."},"parameters":[{"id":3173,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3446,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3428,"name":"LoggerFunction"}}],"permalink":"/api/log/function/createLogger","previousId":3200,"nextId":3246}],"groups":[{"title":"Classes","kind":128,"children":[3224,3253,3174,3312,3370,3200]},{"title":"Functions","kind":64,"children":[3171]},{"title":"Interfaces","kind":256,"children":[3246,3395,3404,3417,3409,3428,3446,3304,3365,3466,3459,3451]},{"title":"Namespaces","kind":4,"children":[3155]},{"title":"Type aliases","kind":4194304,"children":[3455,3392,3393,3394,3470]},{"title":"Variables","kind":32,"children":[3169,3168,3170]}],"sources":[{"fileName":"packages/log/src/index.ts","line":6,"character":0}],"permalink":"/api/log"},"urlSlug":"log"},{"index":false,"label":"Test utilities","reflection":{"id":95,"name":"@boost/log/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":96,"name":"mockLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/test.ts","line":20,"character":16}],"signatures":[{"id":97,"name":"mockLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createLogger`.","text":"```ts\\nimport { mockLogger } from \'@boost/log/test\';\\n\\nit(\'calls the logger\', () => {\\n\\tconst log = mockLogger();\\n\\n\\tlog(\'Something has happened\');\\n\\n\\texpect(log).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3428,"name":"LoggerFunction"}}],"permalink":"/api/log-test/function/mockLogger"}],"groups":[{"title":"Functions","kind":64,"children":[96]}],"sources":[{"fileName":"packages/log/src/test.ts","line":3,"character":0}],"permalink":"/api/log-test"},"urlSlug":"log-test"}],"packageName":"@boost/log","packageVersion":"3.0.3"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":98,"name":"@boost/module","kind":2,"kindString":"Module","flags":{},"children":[{"id":3541,"name":"GetFormatResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3542,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":73,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3542]}],"sources":[{"fileName":"packages/module/src/types.ts","line":72,"character":17}],"permalink":"/api/module/interface/GetFormatResult","previousId":3486,"nextId":3523},{"id":3523,"name":"LoadContext","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3524,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":51,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":3525,"name":"importAssertions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":52,"character":1}],"type":{"type":"intrinsic","name":"object"}}],"groups":[{"title":"Properties","kind":1024,"children":[3524,3525]}],"sources":[{"fileName":"packages/module/src/types.ts","line":50,"character":17}],"permalink":"/api/module/interface/LoadContext","previousId":3541,"nextId":3526},{"id":3526,"name":"LoadResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3527,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":56,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3528,"name":"source","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":57,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"ArrayBuffer"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[3527,3528]}],"sources":[{"fileName":"packages/module/src/types.ts","line":55,"character":17}],"permalink":"/api/module/interface/LoadResult","previousId":3523,"nextId":3507},{"id":3507,"name":"ResolveContext","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3508,"name":"conditions","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":31,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":3509,"name":"parentURL","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3508,3509]}],"sources":[{"fileName":"packages/module/src/types.ts","line":30,"character":17}],"permalink":"/api/module/interface/ResolveContext","previousId":3526,"nextId":3510},{"id":3510,"name":"ResolveResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3511,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":36,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3511]}],"sources":[{"fileName":"packages/module/src/types.ts","line":35,"character":17}],"permalink":"/api/module/interface/ResolveResult","previousId":3507,"nextId":3554},{"id":3554,"name":"TransformSourceContext","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3555,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":88,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3556,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":89,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3555,3556]}],"sources":[{"fileName":"packages/module/src/types.ts","line":87,"character":17}],"permalink":"/api/module/interface/TransformSourceContext","previousId":3510,"nextId":3557},{"id":3557,"name":"TransformSourceResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3558,"name":"source","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":93,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3558]}],"sources":[{"fileName":"packages/module/src/types.ts","line":92,"character":17}],"permalink":"/api/module/interface/TransformSourceResult","previousId":3554,"nextId":3540},{"id":3540,"name":"GetFormatContext","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":70,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/module#GetFormatContext","previousId":3557,"nextId":3543},{"id":3543,"name":"LoaderDefaultGetFormat","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":76,"character":12}],"type":{"type":"reflection","declaration":{"id":3544,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":76,"character":37}],"signatures":[{"id":3545,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3546,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3547,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3540,"name":"GetFormatContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3541,"name":"GetFormatResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultGetFormat","previousId":3540,"nextId":3529},{"id":3529,"name":"LoaderDefaultLoad","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":60,"character":12}],"type":{"type":"reflection","declaration":{"id":3530,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":60,"character":32}],"signatures":[{"id":3531,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3532,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3533,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3523,"name":"LoadContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3526,"name":"LoadResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultLoad","previousId":3543,"nextId":3512},{"id":3512,"name":"LoaderDefaultResolve","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":39,"character":12}],"type":{"type":"reflection","declaration":{"id":3513,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":39,"character":35}],"signatures":[{"id":3514,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3515,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3516,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3507,"name":"ResolveContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3510,"name":"ResolveResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultResolve","previousId":3529,"nextId":3560},{"id":3560,"name":"LoaderDefaultTransformSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":98,"character":12}],"type":{"type":"reflection","declaration":{"id":3561,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":98,"character":43}],"signatures":[{"id":3562,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3563,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3559,"name":"TransformSourceType"}},{"id":3564,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3554,"name":"TransformSourceContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3557,"name":"TransformSourceResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultTransformSource","previousId":3512,"nextId":3548},{"id":3548,"name":"LoaderGetFormat","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":81,"character":12}],"type":{"type":"reflection","declaration":{"id":3549,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":81,"character":30}],"signatures":[{"id":3550,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3551,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3552,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3540,"name":"GetFormatContext"}},{"id":3553,"name":"defaultGetFormat","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3543,"name":"LoaderDefaultGetFormat"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3541,"name":"GetFormatResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderGetFormat","previousId":3560,"nextId":3534},{"id":3534,"name":"LoaderLoad","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":62,"character":12}],"type":{"type":"reflection","declaration":{"id":3535,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":62,"character":25}],"signatures":[{"id":3536,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3537,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3538,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3523,"name":"LoadContext"}},{"id":3539,"name":"defaultLoad","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3529,"name":"LoaderDefaultLoad"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3526,"name":"LoadResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderLoad","previousId":3548,"nextId":3517},{"id":3517,"name":"LoaderResolve","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":44,"character":12}],"type":{"type":"reflection","declaration":{"id":3518,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":44,"character":28}],"signatures":[{"id":3519,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3520,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3521,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3507,"name":"ResolveContext"}},{"id":3522,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3512,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3510,"name":"ResolveResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderResolve","previousId":3534,"nextId":3565},{"id":3565,"name":"LoaderTransformSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":103,"character":12}],"type":{"type":"reflection","declaration":{"id":3566,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":103,"character":36}],"signatures":[{"id":3567,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3568,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3559,"name":"TransformSourceType"}},{"id":3569,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3554,"name":"TransformSourceContext"}},{"id":3570,"name":"defaultTransformSource","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3560,"name":"LoaderDefaultTransformSource"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3557,"name":"TransformSourceResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderTransformSource","previousId":3517,"nextId":3496},{"id":3496,"name":"ModuleLike","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Return shape of a module. The default export can be typed with\\nthe `D` generic slot, and the named exports can be typed with\\nan object in the `N` generic slot.","text":"If there is no default export (classic Node.js `exports` pattern),\\nthen `void` can be passed to the `D` generic, which will populate\\nthe `default` property with the named exports.\\n"},"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":12}],"typeParameter":[{"id":3500,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3502,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3501,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":55}]}}}],"type":{"type":"intersection","types":[{"type":"reference","id":3502,"name":"N"},{"type":"reflection","declaration":{"id":3497,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3499,"name":"__esModule","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3498,"name":"default","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":14,"character":1}],"type":{"type":"conditional","checkType":{"type":"reference","id":3500,"name":"D"},"extendsType":{"type":"intrinsic","name":"void"},"trueType":{"type":"reference","id":3502,"name":"N"},"falseType":{"type":"reference","id":3500,"name":"D"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3499,3498]}],"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":65}]}}]},"permalink":"/api/module#ModuleLike","previousId":3565,"nextId":3503},{"id":3503,"name":"PathLike","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":3504,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3505,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":34}],"signatures":[{"id":3506,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3505]}],"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":32}]}}]},"permalink":"/api/module#PathLike","previousId":3496,"nextId":3559},{"id":3559,"name":"TransformSourceType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":96,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"SharedArrayBuffer"},{"type":"reference","name":"Uint8Array"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/module#TransformSourceType","previousId":3503},{"id":3471,"name":"interopModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/interopModule.ts","line":16,"character":16}],"signatures":[{"id":3472,"name":"interopModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Formats the shape of an imported module to align with the\\nES module specification.","text":"For ES or ES-like modules, returns the shape as-is.\\n\\nFor CommonJS modules, returns an object with the following:\\n- `module.exports` under the `default` property.\\n- `exports.<name>` under properties of the same name,\\n  and also under a `default` object.\\n"},"typeParameter":[{"id":3473,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3475,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3474,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3476,"name":"result","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":3496,"typeArguments":[{"type":"reference","id":3473,"name":"D"},{"type":"reference","id":3475,"name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/interopModule","nextId":3484},{"id":3484,"name":"registerExtensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":48,"character":16}],"signatures":[{"id":3485,"name":"registerExtensions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register `.ts` and `.tsx` file extensions into Node.js\'s resolution algorithm."},"type":{"type":"intrinsic","name":"void"}}],"permalink":"/api/module/function/registerExtensions","previousId":3471,"nextId":3477},{"id":3477,"name":"requireModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireModule.ts","line":33,"character":16}],"signatures":[{"id":3478,"name":"requireModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Works in a similar fashion to the native NodeJS `require()`, but can also\\nimport custom file types like TypeScript, and also returns a module shape\\nthat aligns with the ESM loader specification.","text":"When loading custom file types, the extension in the file path is optional,\\nas NodeJS will iterate through each extension until a file is found.\\n\\n```ts\\nimport { requireModule } from \'@boost/module\';\\n\\nconst result = requireModule(\'../../some/module\');\\n```\\n\\nCaveats and differences:\\n\\n- CommonJS files that utilize `module.exports` (default export) will have this\\n  value returned under a `default` property, instead of being returned directly.\\n- CommonJS files that utilize multiple `exports.<name>` (named exports) will\\n  have these values returned as properties on the result object, and will also\\n  be found on the `default` property.\\n- \\"ES module like\\" files will be returned as-is. These are files that are built\\n  with Babel or TypeScript and export an `__esModule` internal property.\\n\\nThese changes align with `import()` and the ES module system. We made this\\ndecision for consistency and reliability.\\n"},"typeParameter":[{"id":3479,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3481,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3480,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3482,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3503,"name":"PathLike"}},{"id":3483,"name":"requirer","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"NodeRequire"},"defaultValue":"require"}],"type":{"type":"reference","id":3496,"typeArguments":[{"type":"reference","id":3479,"name":"D"},{"type":"reference","id":3481,"name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/requireModule","previousId":3484,"nextId":3488},{"id":3488,"name":"requireTSModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":76,"character":16}],"signatures":[{"id":3489,"name":"requireTSModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `requireModule` but for loading TypeScript files ending in `ts` or `tsx`.\\nWhen imported, will transform the file using the `typescript` package,\\nevaluate the code in the current module context, and apply the same process\\nto all child imports.","text":"```ts\\nimport { requireTSModule } from \'@boost/module\';\\n\\nconst result = requireTSModule(\'../../some/module.ts\');\\n```\\n\\n> This helper rarely needs to be used directly as `requireModule` will\\n> call it under the hood based on the file extension.\\n"},"typeParameter":[{"id":3490,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3492,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3491,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3493,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3503,"name":"PathLike"}},{"id":3494,"name":"requirer","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"NodeRequire"},"defaultValue":"require"}],"type":{"type":"reference","id":3496,"typeArguments":[{"type":"reference","id":3490,"name":"D"},{"type":"reference","id":3492,"name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/requireTSModule","previousId":3477,"nextId":3486},{"id":3486,"name":"unregisterExtensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":56,"character":16}],"signatures":[{"id":3487,"name":"unregisterExtensions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister `.ts` and `.tsx` file extensions."},"type":{"type":"intrinsic","name":"void"}}],"permalink":"/api/module/function/unregisterExtensions","previousId":3488,"nextId":3541}],"groups":[{"title":"Functions","kind":64,"children":[3471,3484,3477,3488,3486]},{"title":"Interfaces","kind":256,"children":[3541,3523,3526,3507,3510,3554,3557]},{"title":"Type aliases","kind":4194304,"children":[3540,3543,3529,3512,3560,3548,3534,3517,3565,3496,3503,3559]}],"sources":[{"fileName":"packages/module/src/index.ts","line":6,"character":0}],"permalink":"/api/module"},"urlSlug":"module"},{"index":false,"label":"ESM Loaders","reflection":{"id":99,"name":"@boost/module/loader","kind":2,"kindString":"Module","flags":{},"children":[{"id":3603,"name":"GetFormatContext","kind":16777216,"kindString":"Reference","flags":{},"target":3540,"permalink":"/api/module-loader#GetFormatContext","previousId":3571,"nextId":3604},{"id":3604,"name":"GetFormatResult","kind":16777216,"kindString":"Reference","flags":{},"target":3541,"permalink":"/api/module-loader#GetFormatResult","previousId":3603,"nextId":3599},{"id":3599,"name":"LoadContext","kind":16777216,"kindString":"Reference","flags":{},"target":3523,"permalink":"/api/module-loader#LoadContext","previousId":3604,"nextId":3600},{"id":3600,"name":"LoadResult","kind":16777216,"kindString":"Reference","flags":{},"target":3526,"permalink":"/api/module-loader#LoadResult","previousId":3599,"nextId":3605},{"id":3605,"name":"LoaderDefaultGetFormat","kind":16777216,"kindString":"Reference","flags":{},"target":3543,"permalink":"/api/module-loader#LoaderDefaultGetFormat","previousId":3600,"nextId":3601},{"id":3601,"name":"LoaderDefaultLoad","kind":16777216,"kindString":"Reference","flags":{},"target":3529,"permalink":"/api/module-loader#LoaderDefaultLoad","previousId":3605,"nextId":3597},{"id":3597,"name":"LoaderDefaultResolve","kind":16777216,"kindString":"Reference","flags":{},"target":3512,"permalink":"/api/module-loader#LoaderDefaultResolve","previousId":3601,"nextId":3610},{"id":3610,"name":"LoaderDefaultTransformSource","kind":16777216,"kindString":"Reference","flags":{},"target":3560,"permalink":"/api/module-loader#LoaderDefaultTransformSource","previousId":3597,"nextId":3606},{"id":3606,"name":"LoaderGetFormat","kind":16777216,"kindString":"Reference","flags":{},"target":3548,"permalink":"/api/module-loader#LoaderGetFormat","previousId":3610,"nextId":3602},{"id":3602,"name":"LoaderLoad","kind":16777216,"kindString":"Reference","flags":{},"target":3534,"permalink":"/api/module-loader#LoaderLoad","previousId":3606,"nextId":3598},{"id":3598,"name":"LoaderResolve","kind":16777216,"kindString":"Reference","flags":{},"target":3517,"permalink":"/api/module-loader#LoaderResolve","previousId":3602,"nextId":3611},{"id":3611,"name":"LoaderTransformSource","kind":16777216,"kindString":"Reference","flags":{},"target":3565,"permalink":"/api/module-loader#LoaderTransformSource","previousId":3598,"nextId":3593},{"id":3593,"name":"ModuleLike","kind":16777216,"kindString":"Reference","flags":{},"target":3496,"permalink":"/api/module-loader#ModuleLike","previousId":3611,"nextId":3594},{"id":3594,"name":"PathLike","kind":16777216,"kindString":"Reference","flags":{},"target":3503,"permalink":"/api/module-loader#PathLike","previousId":3593,"nextId":3595},{"id":3595,"name":"ResolveContext","kind":16777216,"kindString":"Reference","flags":{},"target":3507,"permalink":"/api/module-loader#ResolveContext","previousId":3594,"nextId":3596},{"id":3596,"name":"ResolveResult","kind":16777216,"kindString":"Reference","flags":{},"target":3510,"permalink":"/api/module-loader#ResolveResult","previousId":3595,"nextId":3607},{"id":3607,"name":"TransformSourceContext","kind":16777216,"kindString":"Reference","flags":{},"target":3554,"permalink":"/api/module-loader#TransformSourceContext","previousId":3596,"nextId":3608},{"id":3608,"name":"TransformSourceResult","kind":16777216,"kindString":"Reference","flags":{},"target":3557,"permalink":"/api/module-loader#TransformSourceResult","previousId":3607,"nextId":3609},{"id":3609,"name":"TransformSourceType","kind":16777216,"kindString":"Reference","flags":{},"target":3559,"permalink":"/api/module-loader#TransformSourceType","previousId":3608},{"id":3571,"name":"typescript","kind":4,"kindString":"Namespace","flags":{},"comment":{"shortText":"Load TypeScript files based on the ESM loader specification.","tags":[{"tag":"link","text":"https://nodejs.org/api/esm.html#esm_loaders\\n"}]},"children":[{"id":3582,"name":"getFormat","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":88,"character":13}],"signatures":[{"id":3583,"name":"getFormat","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3584,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3585,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3540,"name":"GetFormatContext"}},{"id":3586,"name":"defaultGetFormat","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3543,"name":"LoaderDefaultGetFormat"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3541,"name":"GetFormatResult"}],"name":"Promise"}}]},{"id":3577,"name":"load","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":67,"character":13}],"signatures":[{"id":3578,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3579,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3580,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3523,"name":"LoadContext"}},{"id":3581,"name":"defaultLoad","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3529,"name":"LoaderDefaultLoad"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3526,"name":"LoadResult"}],"name":"Promise"}}]},{"id":3572,"name":"resolve","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":43,"character":13}],"signatures":[{"id":3573,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3574,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3575,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3507,"name":"ResolveContext"}},{"id":3576,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3512,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3510,"name":"ResolveResult"}],"name":"Promise"}}]},{"id":3587,"name":"transformSource","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":98,"character":13}],"signatures":[{"id":3588,"name":"transformSource","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3589,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3559,"name":"TransformSourceType"}},{"id":3590,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3554,"name":"TransformSourceContext"}},{"id":3591,"name":"defaultTransformSource","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3560,"name":"LoaderDefaultTransformSource"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3557,"name":"TransformSourceResult"}],"name":"Promise"}}]}],"groups":[{"title":"Functions","kind":64,"children":[3582,3577,3572,3587]}],"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":3,"character":0}],"permalink":"/api/module-loader/namespace/typescript","previousId":115,"nextId":3603},{"id":100,"name":"getFormat","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":101,"name":"getFormat","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":102,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":103,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3540,"name":"GetFormatContext"}},{"id":104,"name":"defaultGetFormat","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3543,"name":"LoaderDefaultGetFormat"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3541,"name":"GetFormatResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/getFormat","nextId":105},{"id":105,"name":"load","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":106,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":107,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":108,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3523,"name":"LoadContext"}},{"id":109,"name":"defaultLoad","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3529,"name":"LoaderDefaultLoad"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3526,"name":"LoadResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/load","previousId":100,"nextId":110},{"id":110,"name":"resolve","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":111,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":112,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":113,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3507,"name":"ResolveContext"}},{"id":114,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3512,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3510,"name":"ResolveResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/resolve","previousId":105,"nextId":115},{"id":115,"name":"transformSource","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":116,"name":"transformSource","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":117,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3559,"name":"TransformSourceType"}},{"id":118,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3554,"name":"TransformSourceContext"}},{"id":119,"name":"defaultTransformSource","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3560,"name":"LoaderDefaultTransformSource"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3557,"name":"TransformSourceResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/transformSource","previousId":110,"nextId":3571}],"groups":[{"title":"Functions","kind":64,"children":[100,105,110,115]},{"title":"Namespaces","kind":4,"children":[3571]},{"title":"References","kind":16777216,"children":[3603,3604,3599,3600,3605,3601,3597,3610,3606,3602,3598,3611,3593,3594,3595,3596,3607,3608,3609]}],"sources":[{"fileName":"packages/module/src/loaders/index.ts","line":1,"character":0}],"permalink":"/api/module-loader"},"urlSlug":"module-loader"}],"packageName":"@boost/module","packageVersion":"3.1.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":5,"name":"@boost/pipeline","kind":2,"kindString":"Module","flags":{},"children":[{"id":831,"name":"AggregatedPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":833,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":834,"name":"new AggregatedPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":835,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":835,"name":"Ctx"}],"name":"Context"}},{"id":836,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":837,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":836,"name":"Input"}}],"parameters":[{"id":838,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":835,"name":"Ctx"}},{"id":839,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":836,"name":"Input"}},{"id":840,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":841,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":831,"typeArguments":[{"type":"reference","id":835,"name":"Ctx"},{"type":"reference","id":836,"name":"Input"},{"type":"reference","id":837,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":981,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":980,"name":"ParallelPipeline.constructor"}},{"id":860,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":835,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":1007,"name":"ParallelPipeline.context"}},{"id":861,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1008,"name":"ParallelPipeline.debug"}},{"id":858,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1005,"name":"ParallelPipeline.depth"}},{"id":859,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1006,"name":"ParallelPipeline.index"}},{"id":863,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1010,"name":"ParallelPipeline.onAfterRun"}},{"id":864,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":836,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1011,"name":"ParallelPipeline.onBeforeRun"}},{"id":865,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":866,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":836,"name":"Input"},{"type":"reference","id":837,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":836,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1012,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":878,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":879,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1025,"name":"ParallelPipeline.options"}},{"id":862,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":836,"name":"Input"},"inheritedFrom":{"type":"reference","id":1009,"name":"ParallelPipeline.value"}},{"id":870,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":871,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ParallelPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1017,"name":"ParallelPipeline.id"}},{"id":847,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":848,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":849,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":850,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1341,"typeArguments":[{"type":"reference","id":835,"name":"Ctx"},{"type":"reference","id":836,"name":"Input"},{"type":"reference","id":837,"name":"Output"}],"name":"Action"}},{"id":851,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":831,"typeArguments":[{"type":"reference","id":835,"name":"Ctx"},{"type":"reference","id":836,"name":"Input"},{"type":"reference","id":837,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":993,"name":"ParallelPipeline.add"}},{"id":852,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":853,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":854,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":836,"name":"Input"},{"type":"reference","id":837,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":831,"typeArguments":[{"type":"reference","id":835,"name":"Ctx"},{"type":"reference","id":836,"name":"Input"},{"type":"reference","id":837,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":997,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":992,"name":"ParallelPipeline.add"}},{"id":844,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":16,"character":1}],"signatures":[{"id":845,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":846,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":990,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":989,"name":"ParallelPipeline.blueprint"}},{"id":880,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":881,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":882,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":883,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":884,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":885,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":886,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":887,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":888,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":889,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1027,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1026,"name":"ParallelPipeline.configure"}},{"id":872,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":873,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":874,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":836,"name":"Input"},{"type":"reference","id":837,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1020,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1019,"name":"ParallelPipeline.getWorkUnits"}},{"id":875,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":876,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":877,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":966,"name":"Monitor"}}],"type":{"type":"reference","id":831,"typeArguments":[{"type":"reference","id":835,"name":"Ctx"},{"type":"reference","id":836,"name":"Input"},{"type":"reference","id":837,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1023,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1022,"name":"ParallelPipeline.monitor"}},{"id":842,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":15,"character":7}],"signatures":[{"id":843,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1350,"typeArguments":[{"type":"reference","id":837,"name":"Output"}],"name":"AggregatedResult"}],"name":"Promise"},"overwrites":{"type":"reference","id":1004,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":1003,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[833]},{"title":"Properties","kind":1024,"children":[860,861,858,859,863,864,865,878,862],"categories":[{"title":"CATEGORY","children":[860,861,858,859,878,862]},{"title":"Events","children":[863,864,865]}]},{"title":"Accessors","kind":262144,"children":[870]},{"title":"Methods","kind":2048,"children":[847,844,880,872,875,842]}],"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":6,"character":13}],"typeParameter":[{"id":890,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":891,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":892,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":836,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":979,"typeArguments":[{"type":"reflection","declaration":{"id":832,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":10,"character":27}]}},{"type":"reference","id":835,"name":"Ctx"},{"type":"reference","id":836,"name":"Input"},{"type":"reference","id":837,"name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/AggregatedPipeline","nextId":893},{"id":893,"name":"ConcurrentPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":895,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":896,"name":"new ConcurrentPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":897,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":897,"name":"Ctx"}],"name":"Context"}},{"id":898,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":899,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":898,"name":"Input"}}],"parameters":[{"id":900,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":897,"name":"Ctx"}},{"id":901,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":898,"name":"Input"}},{"id":902,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":903,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":893,"typeArguments":[{"type":"reference","id":897,"name":"Ctx"},{"type":"reference","id":898,"name":"Input"},{"type":"reference","id":899,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":981,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":980,"name":"ParallelPipeline.constructor"}},{"id":922,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":897,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":1007,"name":"ParallelPipeline.context"}},{"id":923,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1008,"name":"ParallelPipeline.debug"}},{"id":920,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1005,"name":"ParallelPipeline.depth"}},{"id":921,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1006,"name":"ParallelPipeline.index"}},{"id":925,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1010,"name":"ParallelPipeline.onAfterRun"}},{"id":926,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":898,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1011,"name":"ParallelPipeline.onBeforeRun"}},{"id":927,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":928,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":898,"name":"Input"},{"type":"reference","id":899,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":898,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1012,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":940,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":941,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1025,"name":"ParallelPipeline.options"}},{"id":924,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":898,"name":"Input"},"inheritedFrom":{"type":"reference","id":1009,"name":"ParallelPipeline.value"}},{"id":932,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":933,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ParallelPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1017,"name":"ParallelPipeline.id"}},{"id":909,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":910,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":911,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":912,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1341,"typeArguments":[{"type":"reference","id":897,"name":"Ctx"},{"type":"reference","id":898,"name":"Input"},{"type":"reference","id":899,"name":"Output"}],"name":"Action"}},{"id":913,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":893,"typeArguments":[{"type":"reference","id":897,"name":"Ctx"},{"type":"reference","id":898,"name":"Input"},{"type":"reference","id":899,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":993,"name":"ParallelPipeline.add"}},{"id":914,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":915,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":916,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":898,"name":"Input"},{"type":"reference","id":899,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":893,"typeArguments":[{"type":"reference","id":897,"name":"Ctx"},{"type":"reference","id":898,"name":"Input"},{"type":"reference","id":899,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":997,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":992,"name":"ParallelPipeline.add"}},{"id":906,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":16,"character":1}],"signatures":[{"id":907,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":908,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":990,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":989,"name":"ParallelPipeline.blueprint"}},{"id":942,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":943,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":944,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":945,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":946,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":947,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":948,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":949,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":950,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":951,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1027,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1026,"name":"ParallelPipeline.configure"}},{"id":934,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":935,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":936,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":898,"name":"Input"},{"type":"reference","id":899,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1020,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1019,"name":"ParallelPipeline.getWorkUnits"}},{"id":937,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":938,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":939,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":966,"name":"Monitor"}}],"type":{"type":"reference","id":893,"typeArguments":[{"type":"reference","id":897,"name":"Ctx"},{"type":"reference","id":898,"name":"Input"},{"type":"reference","id":899,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1023,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1022,"name":"ParallelPipeline.monitor"}},{"id":904,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":14,"character":7}],"signatures":[{"id":905,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nIf an error occurs, the pipeline will abort early, otherwise return a list of all results."},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":899,"name":"Output"}}],"name":"Promise"},"overwrites":{"type":"reference","id":1004,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":1003,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[895]},{"title":"Properties","kind":1024,"children":[922,923,920,921,925,926,927,940,924],"categories":[{"title":"CATEGORY","children":[922,923,920,921,940,924]},{"title":"Events","children":[925,926,927]}]},{"title":"Accessors","kind":262144,"children":[932]},{"title":"Methods","kind":2048,"children":[909,906,942,934,937,904]}],"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":5,"character":13}],"typeParameter":[{"id":952,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":953,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":954,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":898,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":979,"typeArguments":[{"type":"reflection","declaration":{"id":894,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":9,"character":27}]}},{"type":"reference","id":897,"name":"Ctx"},{"type":"reference","id":898,"name":"Input"},{"type":"reference","id":899,"name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/ConcurrentPipeline","previousId":831,"nextId":960},{"id":960,"name":"Context","kind":128,"kindString":"Class","flags":{},"children":[{"id":961,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":962,"name":"new Context","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":960,"name":"Context"}}]},{"id":963,"name":"clone","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":15,"character":1}],"signatures":[{"id":964,"name":"clone","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a new instance of the current context and shallow clone all properties."},"parameters":[{"id":965,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":960,"name":"Context"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[961]},{"title":"Methods","kind":2048,"children":[963]}],"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":11,"character":13}],"permalink":"/api/pipeline/class/Context","previousId":893,"nextId":966},{"id":966,"name":"Monitor","kind":128,"kindString":"Class","flags":{},"children":[{"id":967,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":968,"name":"new Monitor","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":966,"name":"Monitor"}}]},{"id":969,"name":"onPipelineAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a pipeline class has ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1366,"name":"AnyPipeline"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":970,"name":"onPipelineBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline class is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1366,"name":"AnyPipeline"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":971,"name":"onPipelineRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline\'s work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":24,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1366,"name":"AnyPipeline"},{"type":"reference","id":1368,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":972,"name":"onWorkUnitFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has failed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":30,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1368,"name":"AnyWorkUnit"},{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":973,"name":"onWorkUnitPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has passed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1368,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":974,"name":"onWorkUnitRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1368,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":975,"name":"onWorkUnitSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is skipped."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1368,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":976,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":54,"character":1}],"signatures":[{"id":977,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor events for the provided pipeline, its work units, and all other\\npipelines and work units down the hierarchical tree."},"parameters":[{"id":978,"name":"pipeline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1366,"name":"AnyPipeline"}}],"type":{"type":"reference","id":966,"name":"Monitor"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[967]},{"title":"Properties","kind":1024,"children":[969,970,971,972,973,974,975],"categories":[{"title":"Events","children":[969,970,971,972,973,974,975]}]},{"title":"Methods","kind":2048,"children":[976]}],"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":7,"character":13}],"permalink":"/api/pipeline/class/Monitor","previousId":960,"nextId":979},{"id":979,"name":"ParallelPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":980,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":981,"name":"new ParallelPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":982,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":983,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":983,"name":"Ctx"}],"name":"Context"}},{"id":984,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":985,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":984,"name":"Input"}}],"parameters":[{"id":986,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":983,"name":"Ctx"}},{"id":987,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":984,"name":"Input"}},{"id":988,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":982,"name":"Options"}}],"type":{"type":"reference","id":979,"typeArguments":[{"type":"reference","id":982,"name":"Options"},{"type":"reference","id":983,"name":"Ctx"},{"type":"reference","id":984,"name":"Input"},{"type":"reference","id":985,"name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":1007,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":983,"name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":1008,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":1005,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":1006,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":1010,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":1011,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":984,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":1012,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1013,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":984,"name":"Input"},{"type":"reference","id":985,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":984,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1025,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":982,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":1009,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":984,"name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1017,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1018,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Pipeline.id"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.id"}},{"id":992,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":993,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":994,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":995,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1341,"typeArguments":[{"type":"reference","id":983,"name":"Ctx"},{"type":"reference","id":984,"name":"Input"},{"type":"reference","id":985,"name":"Output"}],"name":"Action"}},{"id":996,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":979,"typeArguments":[{"type":"reference","id":982,"name":"Options"},{"type":"reference","id":983,"name":"Ctx"},{"type":"reference","id":984,"name":"Input"},{"type":"reference","id":985,"name":"Output"}],"name":"ParallelPipeline"}},{"id":997,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":998,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":999,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":984,"name":"Input"},{"type":"reference","id":985,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":979,"typeArguments":[{"type":"reference","id":982,"name":"Options"},{"type":"reference","id":983,"name":"Ctx"},{"type":"reference","id":984,"name":"Input"},{"type":"reference","id":985,"name":"Output"}],"name":"ParallelPipeline"}}]},{"id":989,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":16,"character":1}],"signatures":[{"id":990,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":991,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1026,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1027,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1028,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":982,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1029,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1030,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1031,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":982,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":982,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":982,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1019,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":1020,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1021,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":984,"name":"Input"},{"type":"reference","id":985,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1022,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1023,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1024,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":966,"name":"Monitor"}}],"type":{"type":"reference","id":979,"typeArguments":[{"type":"reference","id":982,"name":"Options"},{"type":"reference","id":983,"name":"Ctx"},{"type":"reference","id":984,"name":"Input"},{"type":"reference","id":985,"name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":1003,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":61,"character":10}],"signatures":[{"id":1004,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work unit\'s asynchronously."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[980]},{"title":"Properties","kind":1024,"children":[1007,1008,1005,1006,1010,1011,1012,1025,1009],"categories":[{"title":"CATEGORY","children":[1007,1008,1005,1006,1025,1009]},{"title":"Events","children":[1010,1011,1012]}]},{"title":"Accessors","kind":262144,"children":[1017]},{"title":"Methods","kind":2048,"children":[992,989,1026,1019,1022,1003]}],"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":9,"character":22}],"typeParameter":[{"id":1032,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1033,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1034,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1035,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":984,"name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":982,"name":"Options"},{"type":"reference","id":983,"name":"Ctx"},{"type":"reference","id":984,"name":"Input"},{"type":"reference","id":985,"name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":831,"name":"AggregatedPipeline"},{"type":"reference","id":893,"name":"ConcurrentPipeline"},{"type":"reference","id":1046,"name":"PooledPipeline"}],"permalink":"/api/pipeline/class/ParallelPipeline","previousId":966,"nextId":1046},{"id":1046,"name":"PooledPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1047,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1048,"name":"new PooledPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1049,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":1049,"name":"Ctx"}],"name":"Context"}},{"id":1050,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1051,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1050,"name":"Input"}}],"parameters":[{"id":1052,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1049,"name":"Ctx"}},{"id":1053,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1050,"name":"Input"}},{"id":1054,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1042,"name":"PooledOptions"}}],"type":{"type":"reference","id":1046,"typeArguments":[{"type":"reference","id":1049,"name":"Ctx"},{"type":"reference","id":1050,"name":"Input"},{"type":"reference","id":1051,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":981,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":980,"name":"ParallelPipeline.constructor"}},{"id":1084,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":1049,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":1007,"name":"ParallelPipeline.context"}},{"id":1085,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1008,"name":"ParallelPipeline.debug"}},{"id":1082,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1005,"name":"ParallelPipeline.depth"}},{"id":1083,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1006,"name":"ParallelPipeline.index"}},{"id":1087,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1010,"name":"ParallelPipeline.onAfterRun"}},{"id":1088,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1050,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1011,"name":"ParallelPipeline.onBeforeRun"}},{"id":1089,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1090,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1050,"name":"Input"},{"type":"reference","id":1051,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":1050,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1012,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":1102,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1042,"name":"PooledOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1025,"name":"ParallelPipeline.options"}},{"id":1086,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":1050,"name":"Input"},"inheritedFrom":{"type":"reference","id":1009,"name":"ParallelPipeline.value"}},{"id":1094,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1095,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ParallelPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1017,"name":"ParallelPipeline.id"}},{"id":1071,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":1072,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1073,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1074,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1341,"typeArguments":[{"type":"reference","id":1049,"name":"Ctx"},{"type":"reference","id":1050,"name":"Input"},{"type":"reference","id":1051,"name":"Output"}],"name":"Action"}},{"id":1075,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1046,"typeArguments":[{"type":"reference","id":1049,"name":"Ctx"},{"type":"reference","id":1050,"name":"Input"},{"type":"reference","id":1051,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":993,"name":"ParallelPipeline.add"}},{"id":1076,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1077,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1078,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1050,"name":"Input"},{"type":"reference","id":1051,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1046,"typeArguments":[{"type":"reference","id":1049,"name":"Ctx"},{"type":"reference","id":1050,"name":"Input"},{"type":"reference","id":1051,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":997,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":992,"name":"ParallelPipeline.add"}},{"id":1062,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":34,"character":10}],"signatures":[{"id":1063,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1064,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1042,"name":"PooledOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":990,"name":"ParallelPipeline.blueprint"}}],"overwrites":{"type":"reference","id":989,"name":"ParallelPipeline.blueprint"}},{"id":1103,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1104,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1105,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1042,"name":"PooledOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1106,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1107,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1108,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1042,"name":"PooledOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1042,"name":"PooledOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1042,"name":"PooledOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1027,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1026,"name":"ParallelPipeline.configure"}},{"id":1096,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":1097,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1098,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1050,"name":"Input"},{"type":"reference","id":1051,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1020,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1019,"name":"ParallelPipeline.getWorkUnits"}},{"id":1099,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1100,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1101,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":966,"name":"Monitor"}}],"type":{"type":"reference","id":1046,"typeArguments":[{"type":"reference","id":1049,"name":"Ctx"},{"type":"reference","id":1050,"name":"Input"},{"type":"reference","id":1051,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1023,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1022,"name":"ParallelPipeline.monitor"}},{"id":1065,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":49,"character":7}],"signatures":[{"id":1066,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel, in a pool with a max concurrency,\\nwith a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1350,"typeArguments":[{"type":"reference","id":1051,"name":"Output"}],"name":"AggregatedResult"}],"name":"Promise"},"overwrites":{"type":"reference","id":1004,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":1003,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1047]},{"title":"Properties","kind":1024,"children":[1084,1085,1082,1083,1087,1088,1089,1102,1086],"categories":[{"title":"CATEGORY","children":[1084,1085,1082,1083,1102,1086]},{"title":"Events","children":[1087,1088,1089]}]},{"title":"Accessors","kind":262144,"children":[1094]},{"title":"Methods","kind":2048,"children":[1071,1062,1103,1096,1099,1065]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":23,"character":13}],"typeParameter":[{"id":1109,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1110,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1111,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1050,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":979,"typeArguments":[{"type":"reference","id":1042,"name":"PooledOptions"},{"type":"reference","id":1049,"name":"Ctx"},{"type":"reference","id":1050,"name":"Input"},{"type":"reference","id":1051,"name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/PooledPipeline","previousId":979,"nextId":1117},{"id":1117,"name":"Routine","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1118,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":47,"character":1}],"signatures":[{"id":1119,"name":"new Routine","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1120,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1121,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1123,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1122,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1124,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1125,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1126,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1123,"name":"Options"}}],"type":{"type":"reference","id":1117,"typeArguments":[{"type":"reference","id":1120,"name":"Output"},{"type":"reference","id":1121,"name":"Input"},{"type":"reference","id":1123,"name":"Options"}],"name":"Routine"},"overwrites":{"type":"reference","id":1435,"name":"WorkUnit.constructor"}}],"overwrites":{"type":"reference","id":1434,"name":"WorkUnit.constructor"}},{"id":1127,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":29,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1176,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1442,"name":"WorkUnit.depth"}},{"id":1177,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1443,"name":"WorkUnit.index"}},{"id":1179,"name":"input","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"reference","id":1121,"name":"Input"},"inheritedFrom":{"type":"reference","id":1445,"name":"WorkUnit.input"}},{"id":1128,"name":"key","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":31,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1129,"name":"onCommand","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after `execa` was executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":37,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1130,"name":"onCommandData","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called while a command is being executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":43,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1183,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]},{"type":"reference","id":1121,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1449,"name":"WorkUnit.onFail"}},{"id":1184,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1120,"name":"Output"},{"type":"reference","id":1121,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1450,"name":"WorkUnit.onPass"}},{"id":1185,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1121,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1451,"name":"WorkUnit.onRun"}},{"id":1186,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1121,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1452,"name":"WorkUnit.onSkip"}},{"id":1209,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1123,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1477,"name":"WorkUnit.options"}},{"id":1178,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","id":1120,"name":"Output"},"inheritedFrom":{"type":"reference","id":1444,"name":"WorkUnit.output"}},{"id":1180,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1446,"name":"WorkUnit.startTime"}},{"id":1181,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1447,"name":"WorkUnit.statusText"}},{"id":1182,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":30,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1448,"name":"WorkUnit.stopTime"}},{"id":1187,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":56,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1453,"name":"WorkUnit.title"}},{"id":1188,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":84,"character":5}],"getSignature":[{"id":1189,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WorkUnit.id"}}],"inheritedFrom":{"type":"reference","id":1456,"name":"WorkUnit.id"}},{"id":1216,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1217,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1218,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":1219,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1485,"name":"WorkUnit.blueprint"}}],"inheritedFrom":{"type":"reference","id":1484,"name":"WorkUnit.blueprint"}},{"id":1210,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1211,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1212,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1123,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1213,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1214,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1215,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1123,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1123,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1123,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1479,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1478,"name":"WorkUnit.configure"}},{"id":1137,"name":"createAggregatedPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":103,"character":1}],"signatures":[{"id":1138,"name":"createAggregatedPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `AggregatedPipeline`. This pipeline will execute all work units\\nin parallel without interruption. Returns an object with a list of errors and results\\nonce all resolve."},"typeParameter":[{"id":1139,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":1139,"name":"C"}],"name":"Context"}},{"id":1140,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1141,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1140,"name":"I"}}],"parameters":[{"id":1142,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1139,"name":"C"}},{"id":1143,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1140,"name":"I"}}],"type":{"type":"reference","id":831,"typeArguments":[{"type":"reference","id":1139,"name":"C"},{"type":"reference","id":1140,"name":"I"},{"type":"reference","id":1141,"name":"O"}],"name":"AggregatedPipeline"}}]},{"id":1144,"name":"createConcurrentPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":111,"character":1}],"signatures":[{"id":1145,"name":"createConcurrentPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `ConcurrentPipeline`. This pipeline will execute all work units\\nin parallel. Returns a list of values once all resolve."},"typeParameter":[{"id":1146,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":1146,"name":"C"}],"name":"Context"}},{"id":1147,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1148,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1147,"name":"I"}}],"parameters":[{"id":1149,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1146,"name":"C"}},{"id":1150,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1147,"name":"I"}}],"type":{"type":"reference","id":893,"typeArguments":[{"type":"reference","id":1146,"name":"C"},{"type":"reference","id":1147,"name":"I"},{"type":"reference","id":1148,"name":"O"}],"name":"ConcurrentPipeline"}}]},{"id":1151,"name":"createPooledPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":120,"character":1}],"signatures":[{"id":1152,"name":"createPooledPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `PooledPipeline`. This pipeline will execute a distinct set of work units\\nin parallel without interruption, based on a max concurrency, until all work units have ran.\\nReturns a list of errors and results once all resolve."},"typeParameter":[{"id":1153,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":1153,"name":"C"}],"name":"Context"}},{"id":1154,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1155,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1154,"name":"I"}}],"parameters":[{"id":1156,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1153,"name":"C"}},{"id":1157,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1154,"name":"I"}},{"id":1158,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1042,"name":"PooledOptions"}}],"type":{"type":"reference","id":1046,"typeArguments":[{"type":"reference","id":1153,"name":"C"},{"type":"reference","id":1154,"name":"I"},{"type":"reference","id":1155,"name":"O"}],"name":"PooledPipeline"}}]},{"id":1159,"name":"createWaterfallPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":133,"character":1}],"signatures":[{"id":1160,"name":"createWaterfallPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `WaterfallPipeline`. This pipeline will execute each work unit one by one,\\nwith the return value of the previous being passed to the next. Returns the final value once\\nall resolve."},"typeParameter":[{"id":1161,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":1161,"name":"C"}],"name":"Context"}},{"id":1162,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1163,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1161,"name":"C"}},{"id":1164,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1162,"name":"I"}}],"type":{"type":"reference","id":1370,"typeArguments":[{"type":"reference","id":1161,"name":"C"},{"type":"reference","id":1162,"name":"I"}],"name":"WaterfallPipeline"}}]},{"id":1172,"name":"execute","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":163,"character":10}],"signatures":[{"id":1173,"name":"execute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the current routine and return a new value."},"parameters":[{"id":1174,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1175,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1121,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1120,"name":"Output"}],"name":"Promise"}}]},{"id":1132,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":64,"character":7}],"signatures":[{"id":1133,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a command with the given arguments and pass the results through a promise."},"parameters":[{"id":1134,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1135,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":1136,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Options"},{"type":"reference","id":1112,"name":"ExecuteCommandOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaReturnValue"}],"name":"Promise"}}]},{"id":1190,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":91,"character":1}],"signatures":[{"id":1191,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1459,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1458,"name":"WorkUnit.hasFailed"}},{"id":1192,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":98,"character":1}],"signatures":[{"id":1193,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1461,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1460,"name":"WorkUnit.hasPassed"}},{"id":1194,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":105,"character":1}],"signatures":[{"id":1195,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1463,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1462,"name":"WorkUnit.isComplete"}},{"id":1196,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":112,"character":1}],"signatures":[{"id":1197,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1465,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1464,"name":"WorkUnit.isPending"}},{"id":1198,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":119,"character":1}],"signatures":[{"id":1199,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1467,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1466,"name":"WorkUnit.isRunning"}},{"id":1200,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":126,"character":1}],"signatures":[{"id":1201,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1469,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1468,"name":"WorkUnit.isSkipped"}},{"id":1202,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":133,"character":7}],"signatures":[{"id":1203,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1204,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1205,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1121,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1120,"name":"Output"}],"name":"Promise"},"inheritedFrom":{"type":"reference","id":1471,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1470,"name":"WorkUnit.run"}},{"id":1165,"name":"setMonitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":140,"character":1}],"signatures":[{"id":1166,"name":"setMonitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the monitor to pass to nested pipelines."},"parameters":[{"id":1167,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":966,"name":"Monitor"}}],"type":{"type":"reference","id":1117,"typeArguments":[{"type":"reference","id":1120,"name":"Output"},{"type":"reference","id":1121,"name":"Input"},{"type":"reference","id":1123,"name":"Options"}],"name":"Routine"}}]},{"id":1206,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":175,"character":1}],"signatures":[{"id":1207,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1208,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1117,"typeArguments":[{"type":"reference","id":1120,"name":"Output"},{"type":"reference","id":1121,"name":"Input"},{"type":"reference","id":1123,"name":"Options"}],"name":"Routine"},"inheritedFrom":{"type":"reference","id":1475,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1474,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1118]},{"title":"Properties","kind":1024,"children":[1127,1176,1177,1179,1128,1129,1130,1183,1184,1185,1186,1209,1178,1180,1181,1182,1187],"categories":[{"title":"CATEGORY","children":[1127,1176,1177,1179,1128,1209,1178,1180,1181,1182,1187]},{"title":"Events","children":[1129,1130,1183,1184,1185,1186]}]},{"title":"Accessors","kind":262144,"children":[1188]},{"title":"Methods","kind":2048,"children":[1216,1210,1137,1144,1151,1159,1172,1132,1190,1192,1194,1196,1198,1200,1202,1165,1206]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":24,"character":22}],"typeParameter":[{"id":1220,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1221,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1223,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1222,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":27,"character":26}]}}}],"extendedTypes":[{"type":"reference","id":1433,"typeArguments":[{"type":"reference","id":1123,"name":"Options"},{"type":"reference","id":1121,"name":"Input"},{"type":"reference","id":1120,"name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Routine","previousId":1046,"nextId":1224},{"id":1224,"name":"SerialPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1225,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1226,"name":"new SerialPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1227,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1228,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":1228,"name":"Ctx"}],"name":"Context"}},{"id":1229,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1230,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1229,"name":"Input"}}],"parameters":[{"id":1231,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1228,"name":"Ctx"}},{"id":1232,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1229,"name":"Input"}},{"id":1233,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1227,"name":"Options"}}],"type":{"type":"reference","id":1224,"typeArguments":[{"type":"reference","id":1227,"name":"Options"},{"type":"reference","id":1228,"name":"Ctx"},{"type":"reference","id":1229,"name":"Input"},{"type":"reference","id":1230,"name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":1255,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":1228,"name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":1256,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":1253,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":1254,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":1258,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":1259,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1229,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":1260,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1261,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1229,"name":"Input"},{"type":"reference","id":1230,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":1229,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1270,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1227,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":1234,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1224,"typeArguments":[{"type":"reference","id":1227,"name":"Options"},{"type":"reference","id":1228,"name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"..."},{"id":1257,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":1229,"name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1265,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1266,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Pipeline.id"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.id"}},{"id":1235,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1236,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1237,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1271,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1272,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1273,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1227,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1274,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1275,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1276,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1227,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1227,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1227,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1248,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1249,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1250,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1229,"name":"Input"},{"type":"reference","id":1230,"name":"Output"}],"name":"WorkUnit"}},"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1267,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1268,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1269,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":966,"name":"Monitor"}}],"type":{"type":"reference","id":1224,"typeArguments":[{"type":"reference","id":1227,"name":"Options"},{"type":"reference","id":1228,"name":"Ctx"},{"type":"reference","id":1229,"name":"Input"},{"type":"reference","id":1230,"name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":1238,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1239,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1240,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1241,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1242,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1341,"typeArguments":[{"type":"reference","id":1228,"name":"Ctx"},{"type":"reference","id":1229,"name":"Input"},{"type":"reference","id":1240,"name":"O"}],"name":"Action"}},{"id":1243,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1224,"typeArguments":[{"type":"reference","id":1227,"name":"Options"},{"type":"reference","id":1228,"name":"Ctx"},{"type":"reference","id":1240,"name":"O"},{"type":"reference","id":1240,"name":"O"}],"name":"SerialPipeline"}},{"id":1244,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1245,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1246,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1247,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1229,"name":"Input"},{"type":"reference","id":1245,"name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1224,"typeArguments":[{"type":"reference","id":1227,"name":"Options"},{"type":"reference","id":1228,"name":"Ctx"},{"type":"reference","id":1245,"name":"O"},{"type":"reference","id":1245,"name":"O"}],"name":"SerialPipeline"}}]},{"id":1251,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":73,"character":10}],"signatures":[{"id":1252,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work units synchronously."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1230,"name":"Output"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1225]},{"title":"Properties","kind":1024,"children":[1255,1256,1253,1254,1258,1259,1260,1270,1234,1257],"categories":[{"title":"CATEGORY","children":[1255,1256,1253,1254,1270,1234,1257]},{"title":"Events","children":[1258,1259,1260]}]},{"title":"Accessors","kind":262144,"children":[1265]},{"title":"Methods","kind":2048,"children":[1235,1271,1248,1267,1238,1251]}],"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":8,"character":22}],"typeParameter":[{"id":1277,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1278,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1279,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1280,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1229,"name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1227,"name":"Options"},{"type":"reference","id":1228,"name":"Ctx"},{"type":"reference","id":1229,"name":"Input"},{"type":"reference","id":1230,"name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":1370,"name":"WaterfallPipeline"}],"permalink":"/api/pipeline/class/SerialPipeline","previousId":1117,"nextId":1281},{"id":1281,"name":"Task","kind":128,"kindString":"Class","flags":{},"children":[{"id":1283,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1284,"name":"new Task","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1285,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1286,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1285,"name":"Input"}}],"parameters":[{"id":1287,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1288,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1341,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1285,"name":"Input"},{"type":"reference","id":1286,"name":"Output"}],"name":"Action"}},{"id":1289,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1290,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1281,"typeArguments":[{"type":"reference","id":1285,"name":"Input"},{"type":"reference","id":1286,"name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1435,"name":"WorkUnit.constructor"}}],"inheritedFrom":{"type":"reference","id":1434,"name":"WorkUnit.constructor"}},{"id":1294,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1442,"name":"WorkUnit.depth"}},{"id":1295,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1443,"name":"WorkUnit.index"}},{"id":1297,"name":"input","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"reference","id":1285,"name":"Input"},"inheritedFrom":{"type":"reference","id":1445,"name":"WorkUnit.input"}},{"id":1301,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]},{"type":"reference","id":1285,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1449,"name":"WorkUnit.onFail"}},{"id":1302,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1286,"name":"Output"},{"type":"reference","id":1285,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1450,"name":"WorkUnit.onPass"}},{"id":1303,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1285,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1451,"name":"WorkUnit.onRun"}},{"id":1304,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1285,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1452,"name":"WorkUnit.onSkip"}},{"id":1327,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1328,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1477,"name":"WorkUnit.options"}},{"id":1296,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","id":1286,"name":"Output"},"inheritedFrom":{"type":"reference","id":1444,"name":"WorkUnit.output"}},{"id":1298,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1446,"name":"WorkUnit.startTime"}},{"id":1299,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1447,"name":"WorkUnit.statusText"}},{"id":1300,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":30,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1448,"name":"WorkUnit.stopTime"}},{"id":1305,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":56,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1453,"name":"WorkUnit.title"}},{"id":1306,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":84,"character":5}],"getSignature":[{"id":1307,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WorkUnit.id"}}],"inheritedFrom":{"type":"reference","id":1456,"name":"WorkUnit.id"}},{"id":1291,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":7,"character":1}],"signatures":[{"id":1292,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1293,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","id":1485,"name":"WorkUnit.blueprint"}}],"overwrites":{"type":"reference","id":1484,"name":"WorkUnit.blueprint"}},{"id":1329,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1330,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1331,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1332,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1333,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1334,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1335,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1336,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1337,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1338,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1479,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1478,"name":"WorkUnit.configure"}},{"id":1308,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":91,"character":1}],"signatures":[{"id":1309,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1459,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1458,"name":"WorkUnit.hasFailed"}},{"id":1310,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":98,"character":1}],"signatures":[{"id":1311,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1461,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1460,"name":"WorkUnit.hasPassed"}},{"id":1312,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":105,"character":1}],"signatures":[{"id":1313,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1463,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1462,"name":"WorkUnit.isComplete"}},{"id":1314,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":112,"character":1}],"signatures":[{"id":1315,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1465,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1464,"name":"WorkUnit.isPending"}},{"id":1316,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":119,"character":1}],"signatures":[{"id":1317,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1467,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1466,"name":"WorkUnit.isRunning"}},{"id":1318,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":126,"character":1}],"signatures":[{"id":1319,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1469,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1468,"name":"WorkUnit.isSkipped"}},{"id":1320,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":133,"character":7}],"signatures":[{"id":1321,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1322,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1323,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1285,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1286,"name":"Output"}],"name":"Promise"},"inheritedFrom":{"type":"reference","id":1471,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1470,"name":"WorkUnit.run"}},{"id":1324,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":175,"character":1}],"signatures":[{"id":1325,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1326,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1281,"typeArguments":[{"type":"reference","id":1285,"name":"Input"},{"type":"reference","id":1286,"name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1475,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1474,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1283]},{"title":"Properties","kind":1024,"children":[1294,1295,1297,1301,1302,1303,1304,1327,1296,1298,1299,1300,1305],"categories":[{"title":"CATEGORY","children":[1294,1295,1297,1327,1296,1298,1299,1300,1305]},{"title":"Events","children":[1301,1302,1303,1304]}]},{"title":"Accessors","kind":262144,"children":[1306]},{"title":"Methods","kind":2048,"children":[1291,1329,1308,1310,1312,1314,1316,1318,1320,1324]}],"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":13}],"typeParameter":[{"id":1339,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1340,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1285,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1282,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":68}]}},{"type":"reference","id":1285,"name":"Input"},{"type":"reference","id":1286,"name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Task","previousId":1224,"nextId":1370},{"id":1370,"name":"WaterfallPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1372,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1373,"name":"new WaterfallPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1374,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"typeArguments":[{"type":"reference","id":1374,"name":"Ctx"}],"name":"Context"}},{"id":1375,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1376,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1374,"name":"Ctx"}},{"id":1377,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1375,"name":"Input"}},{"id":1378,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1379,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1370,"typeArguments":[{"type":"reference","id":1374,"name":"Ctx"},{"type":"reference","id":1375,"name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1226,"name":"SerialPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1225,"name":"SerialPipeline.constructor"}},{"id":1404,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":1374,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":1255,"name":"SerialPipeline.context"}},{"id":1405,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1256,"name":"SerialPipeline.debug"}},{"id":1402,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1253,"name":"SerialPipeline.depth"}},{"id":1403,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1254,"name":"SerialPipeline.index"}},{"id":1407,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1258,"name":"SerialPipeline.onAfterRun"}},{"id":1408,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1375,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1259,"name":"SerialPipeline.onBeforeRun"}},{"id":1409,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1410,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1375,"name":"Input"},{"type":"reference","id":1375,"name":"Input"}],"name":"WorkUnit"},{"type":"reference","id":1375,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1260,"name":"SerialPipeline.onRunWorkUnit"}},{"id":1419,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1420,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1270,"name":"SerialPipeline.options"}},{"id":1382,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1224,"typeArguments":[{"type":"reflection","declaration":{"id":1383,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1374,"name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1234,"name":"SerialPipeline.root"}},{"id":1406,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":1375,"name":"Input"},"inheritedFrom":{"type":"reference","id":1257,"name":"SerialPipeline.value"}},{"id":1414,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1415,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"SerialPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1265,"name":"SerialPipeline.id"}},{"id":1384,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1385,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1386,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1236,"name":"SerialPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":1235,"name":"SerialPipeline.blueprint"}},{"id":1421,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1422,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1423,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1424,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1425,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1426,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1427,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1428,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1429,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1430,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1272,"name":"SerialPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1271,"name":"SerialPipeline.configure"}},{"id":1399,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1400,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1401,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1375,"name":"Input"},{"type":"reference","id":1375,"name":"Input"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1249,"name":"SerialPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1248,"name":"SerialPipeline.getWorkUnits"}},{"id":1416,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1417,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1418,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":966,"name":"Monitor"}}],"type":{"type":"reference","id":1370,"typeArguments":[{"type":"reference","id":1374,"name":"Ctx"},{"type":"reference","id":1375,"name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1268,"name":"SerialPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1267,"name":"SerialPipeline.monitor"}},{"id":1387,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1388,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1389,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1390,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1391,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1341,"typeArguments":[{"type":"reference","id":1374,"name":"Ctx"},{"type":"reference","id":1375,"name":"Input"},{"type":"reference","id":1240,"name":"O"}],"name":"Action"}},{"id":1392,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1224,"typeArguments":[{"type":"reflection","declaration":{"id":1393,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1374,"name":"Ctx"},{"type":"reference","id":1240,"name":"O"},{"type":"reference","id":1240,"name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1239,"name":"SerialPipeline.pipe"}},{"id":1394,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1395,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1396,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1397,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1375,"name":"Input"},{"type":"reference","id":1245,"name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1224,"typeArguments":[{"type":"reflection","declaration":{"id":1398,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1374,"name":"Ctx"},{"type":"reference","id":1245,"name":"O"},{"type":"reference","id":1245,"name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1244,"name":"SerialPipeline.pipe"}}],"inheritedFrom":{"type":"reference","id":1238,"name":"SerialPipeline.pipe"}},{"id":1380,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":16,"character":7}],"signatures":[{"id":1381,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the pipeline in sequential order with the output of each\\nwork unit being passed to the next work unit in the chain."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1375,"name":"Input"}],"name":"Promise"},"overwrites":{"type":"reference","id":1252,"name":"SerialPipeline.run"}}],"overwrites":{"type":"reference","id":1251,"name":"SerialPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1372]},{"title":"Properties","kind":1024,"children":[1404,1405,1402,1403,1407,1408,1409,1419,1382,1406],"categories":[{"title":"CATEGORY","children":[1404,1405,1402,1403,1419,1382,1406]},{"title":"Events","children":[1407,1408,1409]}]},{"title":"Accessors","kind":262144,"children":[1414]},{"title":"Methods","kind":2048,"children":[1384,1421,1399,1416,1387,1380]}],"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":7,"character":13}],"typeParameter":[{"id":1431,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1432,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","id":1224,"typeArguments":[{"type":"reflection","declaration":{"id":1371,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":8,"character":1}]}},{"type":"reference","id":1374,"name":"Ctx"},{"type":"reference","id":1375,"name":"Input"}],"name":"SerialPipeline"}],"permalink":"/api/pipeline/class/WaterfallPipeline","previousId":1281,"nextId":1433},{"id":1433,"name":"WorkUnit","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1434,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":65,"character":1}],"signatures":[{"id":1435,"name":"new WorkUnit","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1436,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1437,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1438,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1437,"name":"Input"}}],"parameters":[{"id":1439,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1440,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1341,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1437,"name":"Input"},{"type":"reference","id":1438,"name":"Output"}],"name":"Action"}},{"id":1441,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1436,"name":"Options"}}],"type":{"type":"reference","id":1433,"typeArguments":[{"type":"reference","id":1436,"name":"Options"},{"type":"reference","id":1437,"name":"Input"},{"type":"reference","id":1438,"name":"Output"}],"name":"WorkUnit"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1442,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1355,"name":"Hierarchical.depth"}},{"id":1443,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1357,"name":"Hierarchical.index"}},{"id":1445,"name":"input","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"reference","id":1437,"name":"Input"}},{"id":1449,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]},{"type":"reference","id":1437,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1450,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1438,"name":"Output"},{"type":"reference","id":1437,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1451,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1437,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":1452,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1437,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1477,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1436,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1444,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","id":1438,"name":"Output"}},{"id":1446,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1447,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1448,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":30,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1453,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":56,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1456,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":84,"character":5}],"getSignature":[{"id":1457,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":1356,"name":"Hierarchical.id"}}],"implementationOf":{"type":"reference","id":1356,"name":"Hierarchical.id"}},{"id":1484,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1485,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1486,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":1487,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1478,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1479,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1480,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1436,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1481,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1482,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1483,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1436,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1436,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1436,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1458,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":91,"character":1}],"signatures":[{"id":1459,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1460,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":98,"character":1}],"signatures":[{"id":1461,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1462,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":105,"character":1}],"signatures":[{"id":1463,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1464,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":112,"character":1}],"signatures":[{"id":1465,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1466,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":119,"character":1}],"signatures":[{"id":1467,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1468,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":126,"character":1}],"signatures":[{"id":1469,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1470,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":133,"character":7}],"signatures":[{"id":1471,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1472,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1473,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1437,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1438,"name":"Output"}],"name":"Promise"},"implementationOf":{"type":"reference","id":1360,"name":"Runnable.run"}}],"implementationOf":{"type":"reference","id":1359,"name":"Runnable.run"}},{"id":1474,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":175,"character":1}],"signatures":[{"id":1475,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1476,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1433,"typeArguments":[{"type":"reference","id":1436,"name":"Options"},{"type":"reference","id":1437,"name":"Input"},{"type":"reference","id":1438,"name":"Output"}],"name":"WorkUnit"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1434]},{"title":"Properties","kind":1024,"children":[1442,1443,1445,1449,1450,1451,1452,1477,1444,1446,1447,1448,1453],"categories":[{"title":"CATEGORY","children":[1442,1443,1445,1477,1444,1446,1447,1448,1453]},{"title":"Events","children":[1449,1450,1451,1452]}]},{"title":"Accessors","kind":262144,"children":[1456]},{"title":"Methods","kind":2048,"children":[1484,1478,1458,1460,1462,1464,1466,1468,1470,1474]}],"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":14,"character":22}],"typeParameter":[{"id":1488,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1489,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1490,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1437,"name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1436,"name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":1117,"name":"Routine"},{"type":"reference","id":1281,"name":"Task"}],"implementedTypes":[{"type":"reference","id":1358,"typeArguments":[{"type":"reference","id":1437,"name":"Input"},{"type":"reference","id":1438,"name":"Output"}],"name":"Runnable"},{"type":"reference","id":1354,"name":"Hierarchical"}],"permalink":"/api/pipeline/class/WorkUnit","previousId":1370,"nextId":1350},{"id":1350,"name":"AggregatedResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1351,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of `Errors` that occurred during execution."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":13,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":1352,"name":"results","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of successful execution results."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":1353,"name":"T"}}}],"groups":[{"title":"Properties","kind":1024,"children":[1351,1352]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":11,"character":17}],"typeParameter":[{"id":1353,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/pipeline/interface/AggregatedResult","previousId":1433,"nextId":1112},{"id":1112,"name":"ExecuteCommandOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1116,"name":"workUnit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":21,"character":1}],"type":{"type":"reference","id":1368,"name":"AnyWorkUnit"}},{"id":1113,"name":"wrap","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":20,"character":1}],"signatures":[{"id":1114,"name":"wrap","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1115,"name":"process","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaChildProcess"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[1116]},{"title":"Methods","kind":2048,"children":[1113]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":19,"character":17}],"permalink":"/api/pipeline/interface/ExecuteCommandOptions","previousId":1350,"nextId":1354},{"id":1354,"name":"Hierarchical","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1355,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1356,"name":"id","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique ID of the work unit."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1357,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1355,1356,1357]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":18,"character":17}],"implementedBy":[{"type":"reference","id":1433,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Hierarchical","previousId":1112,"nextId":1042},{"id":1042,"name":"PooledOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1043,"name":"concurrency","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"How many work units to process in parallel."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1044,"name":"filo","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Process with first-in-last-out order, instead of first-in-first-out."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1045,"name":"timeout","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Timeout in milliseconds that each work unit may run, or `0` to avoid a\\ntimeout. Defaults to `0`."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1043,1044,1045]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":13,"character":17}],"permalink":"/api/pipeline/interface/PooledOptions","previousId":1354,"nextId":1358},{"id":1358,"name":"Runnable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1359,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":29,"character":1}],"signatures":[{"id":1360,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Accept an input and produce an output."},"parameters":[{"id":1361,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1362,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1363,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1364,"name":"Output"}],"name":"Promise"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[1359]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":27,"character":17}],"typeParameter":[{"id":1363,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1364,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{}}],"implementedBy":[{"type":"reference","id":1433,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Runnable","previousId":1042,"nextId":1341},{"id":1341,"name":"Action","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":12}],"typeParameter":[{"id":1347,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":960,"name":"Context"}},{"id":1348,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1349,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1348,"name":"Input"}}],"type":{"type":"reflection","declaration":{"id":1342,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":75}],"signatures":[{"id":1343,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1344,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1347,"name":"Ctx"}},{"id":1345,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1348,"name":"Input"}},{"id":1346,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1368,"name":"AnyWorkUnit"}}],"type":{"type":"union","types":[{"type":"reference","id":1349,"name":"Output"},{"type":"reference","typeArguments":[{"type":"reference","id":1349,"name":"Output"}],"name":"Promise"}]}}]}},"permalink":"/api/pipeline#Action","previousId":1358,"nextId":1366},{"id":1366,"name":"AnyPipeline","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1367,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":35}]}},{"type":"reference","id":960,"name":"Context"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"Pipeline"},"permalink":"/api/pipeline#AnyPipeline","previousId":1341,"nextId":1368},{"id":1368,"name":"AnyWorkUnit","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":12}],"type":{"type":"reference","id":1433,"typeArguments":[{"type":"reflection","declaration":{"id":1369,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":35}]}},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"WorkUnit"},"permalink":"/api/pipeline#AnyWorkUnit","previousId":1366,"nextId":1036},{"id":1036,"name":"PipelineErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":11,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/pipeline#PipelineErrorCode","previousId":1368,"nextId":1365},{"id":1365,"name":"Status","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":32,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"failed"},{"type":"literal","value":"passed"},{"type":"literal","value":"pending"},{"type":"literal","value":"running"},{"type":"literal","value":"skipped"}]},"permalink":"/api/pipeline#Status","previousId":1036,"nextId":1037},{"id":1037,"name":"PipelineError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":13,"character":13}],"type":{"type":"reflection","declaration":{"id":1038,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1039,"name":"new PipelineError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1040,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}},{"id":1041,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/pipeline#PipelineError","previousId":1365,"nextId":959},{"id":959,"name":"STATUS_FAILED","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":7,"character":13}],"type":{"type":"reference","id":1365,"name":"Status"},"defaultValue":"\'failed\'","permalink":"/api/pipeline#STATUS_FAILED","previousId":1037,"nextId":958},{"id":958,"name":"STATUS_PASSED","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","id":1365,"name":"Status"},"defaultValue":"\'passed\'","permalink":"/api/pipeline#STATUS_PASSED","previousId":959,"nextId":955},{"id":955,"name":"STATUS_PENDING","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","id":1365,"name":"Status"},"defaultValue":"\'pending\'","permalink":"/api/pipeline#STATUS_PENDING","previousId":958,"nextId":956},{"id":956,"name":"STATUS_RUNNING","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","id":1365,"name":"Status"},"defaultValue":"\'running\'","permalink":"/api/pipeline#STATUS_RUNNING","previousId":955,"nextId":957},{"id":957,"name":"STATUS_SKIPPED","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":5,"character":13}],"type":{"type":"reference","id":1365,"name":"Status"},"defaultValue":"\'skipped\'","permalink":"/api/pipeline#STATUS_SKIPPED","previousId":956}],"groups":[{"title":"Classes","kind":128,"children":[831,893,960,966,979,1046,1117,1224,1281,1370,1433]},{"title":"Interfaces","kind":256,"children":[1350,1112,1354,1042,1358]},{"title":"Type aliases","kind":4194304,"children":[1341,1366,1368,1036,1365]},{"title":"Variables","kind":32,"children":[1037,959,958,955,956,957]}],"sources":[{"fileName":"packages/pipeline/src/index.ts","line":6,"character":0}],"permalink":"/api/pipeline"},"urlSlug":"pipeline"}],"packageName":"@boost/pipeline","packageVersion":"3.2.2"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":6,"name":"@boost/plugin","kind":2,"kindString":"Module","flags":{},"children":[{"id":1492,"name":"Plugin","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1493,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1494,"name":"new Plugin","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1495,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1497,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1496,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1498,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1497,"name":"Options"}}],"type":{"type":"reference","id":1492,"typeArguments":[{"type":"reference","id":1495,"name":"T"},{"type":"reference","id":1497,"name":"Options"}],"name":"Plugin"},"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1499,"name":"name","kind":1024,"kindString":"Property","flags":{"isAbstract":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":8,"character":10}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":1613,"name":"Pluggable.name"}},{"id":1506,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1497,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1513,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1514,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1515,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}},{"id":1516,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1507,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1508,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1509,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1497,"name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1510,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1511,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1512,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1497,"name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1497,"name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1497,"name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1503,"name":"shutdown","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":12,"character":1}],"signatures":[{"id":1504,"name":"shutdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1505,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1495,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.shutdown"}}],"implementationOf":{"type":"reference","id":1615,"name":"Pluggable.shutdown"}},{"id":1500,"name":"startup","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":10,"character":1}],"signatures":[{"id":1501,"name":"startup","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1502,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1495,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.startup"}}],"implementationOf":{"type":"reference","id":1616,"name":"Pluggable.startup"}}],"groups":[{"title":"Constructors","kind":512,"children":[1493]},{"title":"Properties","kind":1024,"children":[1499,1506]},{"title":"Methods","kind":2048,"children":[1513,1507,1503,1500]}],"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":22}],"typeParameter":[{"id":1517,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1519,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1518,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":67}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1497,"name":"Options"}],"name":"Contract"}],"implementedTypes":[{"type":"reference","id":1612,"typeArguments":[{"type":"reference","id":1495,"name":"T"}],"name":"Pluggable"}],"permalink":"/api/plugin/class/Plugin","nextId":1526},{"id":1526,"name":"Registry","kind":128,"kindString":"Class","flags":{},"children":[{"id":1527,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":76,"character":1}],"signatures":[{"id":1528,"name":"new Registry","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1529,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1612,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1529,"name":"Plugin"}],"name":"Pluggable"}},{"id":1530,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1531,"name":"projectName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1532,"name":"typeName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1533,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1635,"typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"RegistryOptions"}}],"type":{"type":"reference","id":1526,"typeArguments":[{"type":"reference","id":1529,"name":"Plugin"},{"type":"reference","id":1530,"name":"Tool"}],"name":"Registry"},"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}},{"id":1534,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":34,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1535,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1529,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1536,"name":"onAfterUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1529,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1537,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is registered and the `startup` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1529,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1538,"name":"onBeforeUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is unregistered and the `shutdown` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":58,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1529,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1539,"name":"onLoad","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is loaded but before it\'s registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":64,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1595,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1635,"typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1540,"name":"pluralName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":66,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1541,"name":"projectName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":68,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1542,"name":"singularName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":70,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1545,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":90,"character":1}],"signatures":[{"id":1546,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1547,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1635,"typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":1596,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1597,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1598,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1635,"typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1599,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1600,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1601,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1635,"typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1635,"typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1635,"typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1548,"name":"formatModuleName","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":107,"character":1}],"signatures":[{"id":1549,"name":"formatModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a name into a fully qualified and compatible Node/npm module name,\\nwith the tool and type names being used as scopes and prefixes."},"parameters":[{"id":1550,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1551,"name":"scoped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1552,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":119,"character":1}],"signatures":[{"id":1553,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a single registered plugin by module name. If the plugin cannot be found,\\nan error will be thrown."},"typeParameter":[{"id":1554,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1612,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1554,"name":"T"}],"name":"Pluggable"},"default":{"type":"reference","id":1529,"name":"Plugin"}}],"parameters":[{"id":1555,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1554,"name":"T"}}]},{"id":1556,"name":"getAll","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":132,"character":1}],"signatures":[{"id":1557,"name":"getAll","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all registered plugins."},"type":{"type":"array","elementType":{"type":"reference","id":1529,"name":"Plugin"}}}]},{"id":1558,"name":"getMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":139,"character":1}],"signatures":[{"id":1559,"name":"getMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return multiple registered plugins by module name."},"parameters":[{"id":1560,"name":"names","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"array","elementType":{"type":"reference","id":1529,"name":"Plugin"}}}]},{"id":1570,"name":"isRegistered","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":215,"character":1}],"signatures":[{"id":1571,"name":"isRegistered","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if a plugin has been registered."},"parameters":[{"id":1572,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1561,"name":"load","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":146,"character":7}],"signatures":[{"id":1562,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register a single plugin by name, or with an explicit instance."},"parameters":[{"id":1563,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":1529,"name":"Plugin"}]}},{"id":1564,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"defaultValue":"{}"},{"id":1565,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1625,"typeArguments":[{"type":"reference","id":1530,"name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"Promise"}}]},{"id":1566,"name":"loadMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":183,"character":7}],"signatures":[{"id":1567,"name":"loadMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register multiple plugins based on a list of settings."},"parameters":[{"id":1568,"name":"settings","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":1618,"name":"Setting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":1529,"name":"Plugin"},{"type":"reference","id":1606,"name":"SourceWithOptions"}]}}]}},{"id":1569,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1625,"typeArguments":[{"type":"reference","id":1530,"name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":1529,"name":"Plugin"}}],"name":"Promise"}}]},{"id":1573,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":228,"character":7}],"signatures":[{"id":1574,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a plugin and trigger startup with the provided tool."},"parameters":[{"id":1575,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1576,"name":"plugin","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1529,"name":"Plugin"}},{"id":1577,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","id":1530,"name":"Tool"}]},"defaultValue":"undefined"},{"id":1578,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1625,"typeArguments":[{"type":"reference","id":1530,"name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"Promise"}}]},{"id":1579,"name":"unregister","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":272,"character":7}],"signatures":[{"id":1580,"name":"unregister","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister a plugin by name and trigger shutdown process."},"parameters":[{"id":1581,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1582,"name":"tool","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1530,"name":"Tool"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1527]},{"title":"Properties","kind":1024,"children":[1534,1535,1536,1537,1538,1539,1595,1540,1541,1542],"categories":[{"title":"CATEGORY","children":[1534,1595,1540,1541,1542]},{"title":"Events","children":[1535,1536,1537,1538,1539]}]},{"title":"Methods","kind":2048,"children":[1545,1596,1548,1552,1556,1558,1570,1561,1566,1573,1579]}],"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":31,"character":13}],"typeParameter":[{"id":1602,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1612,"name":"Pluggable"}},{"id":1603,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1635,"typeArguments":[{"type":"reference","id":1529,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Contract"}],"permalink":"/api/plugin/class/Registry","previousId":1492,"nextId":1612},{"id":1612,"name":"Pluggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1613,"name":"name","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":15,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1614,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Priority in which to order the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1615,"name":"shutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":19,"character":1}],"type":{"type":"reference","id":1607,"typeArguments":[{"type":"reference","id":1617,"name":"T"}],"name":"Callback"}},{"id":1616,"name":"startup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":21,"character":1}],"type":{"type":"reference","id":1607,"typeArguments":[{"type":"reference","id":1617,"name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[1613,1614,1615,1616]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":13,"character":17}],"typeParameter":[{"id":1617,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"any"}}],"implementedBy":[{"type":"reference","id":1492,"name":"Plugin"}],"permalink":"/api/plugin/interface/Pluggable","previousId":1526,"nextId":1625},{"id":1625,"name":"RegisterOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1626,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1627,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"reference","id":1628,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[1626,1627]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":30,"character":17}],"typeParameter":[{"id":1628,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedBy":[{"type":"reference","id":1629,"name":"Registration"}],"permalink":"/api/plugin/interface/RegisterOptions","previousId":1612,"nextId":1629},{"id":1629,"name":"Registration","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1630,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1631,"name":"plugin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Plugin instance or object."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":41,"character":1}],"type":{"type":"reference","id":1634,"name":"T"}},{"id":1632,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":1626,"name":"RegisterOptions.priority"}},{"id":1633,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","id":1627,"name":"RegisterOptions.tool"}}],"groups":[{"title":"Properties","kind":1024,"children":[1630,1631,1632,1633]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":37,"character":17}],"typeParameter":[{"id":1634,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1612,"name":"Pluggable"}}],"extendedTypes":[{"type":"reference","id":1625,"name":"RegisterOptions"}],"permalink":"/api/plugin/interface/Registration","previousId":1625,"nextId":1635},{"id":1635,"name":"RegistryOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1636,"name":"afterShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":46,"character":1}],"type":{"type":"reference","id":1607,"typeArguments":[{"type":"reference","id":1642,"name":"T"}],"name":"Callback"}},{"id":1637,"name":"afterStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":48,"character":1}],"type":{"type":"reference","id":1607,"typeArguments":[{"type":"reference","id":1642,"name":"T"}],"name":"Callback"}},{"id":1638,"name":"beforeShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":50,"character":1}],"type":{"type":"reference","id":1607,"typeArguments":[{"type":"reference","id":1642,"name":"T"}],"name":"Callback"}},{"id":1639,"name":"beforeStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":52,"character":1}],"type":{"type":"reference","id":1607,"typeArguments":[{"type":"reference","id":1642,"name":"T"}],"name":"Callback"}},{"id":1640,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":54,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}},{"id":1641,"name":"validate","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Validate the shape of the plugin being registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":56,"character":1}],"type":{"type":"reference","id":1607,"typeArguments":[{"type":"reference","id":1642,"name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[1636,1637,1638,1639,1640,1641]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":44,"character":17}],"typeParameter":[{"id":1642,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1612,"name":"Pluggable"}}],"permalink":"/api/plugin/interface/RegistryOptions","previousId":1629,"nextId":1607},{"id":1607,"name":"Callback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":12}],"typeParameter":[{"id":1611,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reflection","declaration":{"id":1608,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":36}],"signatures":[{"id":1609,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1610,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1611,"name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/plugin#Callback","previousId":1635,"nextId":1619},{"id":1619,"name":"Factory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":1623,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1612,"name":"Pluggable"}},{"id":1624,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":1620,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":70}],"signatures":[{"id":1621,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1622,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1624,"name":"O"}],"name":"Partial"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1623,"name":"T"}],"name":"Promise"},{"type":"reference","id":1623,"name":"T"}]}}]}},"permalink":"/api/plugin#Factory","previousId":1607,"nextId":1520},{"id":1520,"name":"PluginErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":13,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/plugin#PluginErrorCode","previousId":1619,"nextId":1618},{"id":1618,"name":"Setting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":24,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":1605,"name":"SourceOptions"}],"name":"Record"},"permalink":"/api/plugin#Setting","previousId":1520,"nextId":1604},{"id":1604,"name":"Source","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"FilePath"},{"type":"reference","name":"ModuleID"}]},"permalink":"/api/plugin#Source","previousId":1618,"nextId":1605},{"id":1605,"name":"SourceOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/plugin#SourceOptions","previousId":1604,"nextId":1606},{"id":1606,"name":"SourceWithOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":7,"character":12}],"type":{"type":"tuple","elements":[{"type":"reference","id":1604,"name":"Source"},{"type":"reference","id":1605,"name":"SourceOptions"}]},"permalink":"/api/plugin#SourceWithOptions","previousId":1605,"nextId":1491},{"id":1491,"name":"DEFAULT_PRIORITY","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/plugin/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":100},"defaultValue":"100","permalink":"/api/plugin#DEFAULT_PRIORITY","previousId":1606,"nextId":1521},{"id":1521,"name":"PluginError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":15,"character":13}],"type":{"type":"reflection","declaration":{"id":1522,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1523,"name":"new PluginError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1524,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}},{"id":1525,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/plugin#PluginError","previousId":1491}],"groups":[{"title":"Classes","kind":128,"children":[1492,1526]},{"title":"Interfaces","kind":256,"children":[1612,1625,1629,1635]},{"title":"Type aliases","kind":4194304,"children":[1607,1619,1520,1618,1604,1605,1606]},{"title":"Variables","kind":32,"children":[1491,1521]}],"sources":[{"fileName":"packages/plugin/src/index.ts","line":6,"character":0}],"permalink":"/api/plugin"},"urlSlug":"plugin"}],"packageName":"@boost/plugin","packageVersion":"3.0.4"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":7,"name":"@boost/terminal","kind":2,"kindString":"Module","flags":{},"children":[{"id":1643,"name":"cursor","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":1653,"name":"hide","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Hide the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":13,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorHide"},{"id":1654,"name":"nextLine","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Move cursor to the next line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":16,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorNextLine"},{"id":1655,"name":"position","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Return the current cursur position."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":19,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorGetPosition"},{"id":1656,"name":"prevLine","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Move cursor to the previous line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":22,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorPrevLine"},{"id":1657,"name":"restorePosition","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Restores the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":25,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorRestorePosition"},{"id":1658,"name":"savePosition","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Saves the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":28,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorSavePosition"},{"id":1659,"name":"show","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Show the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":31,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorShow"},{"id":1660,"name":"startLine","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Move cursor to the start of the current line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":34,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorLeft"},{"id":1644,"name":"backward","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":4,"character":13}],"signatures":[{"id":1645,"name":"backward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move backward. Defaults to `1`."},"parameters":[{"id":1646,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1647,"name":"down","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":7,"character":13}],"signatures":[{"id":1648,"name":"down","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move down. Defaults to `1`."},"parameters":[{"id":1649,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1650,"name":"forward","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":10,"character":13}],"signatures":[{"id":1651,"name":"forward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move forward. Defaults to `1`."},"parameters":[{"id":1652,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1661,"name":"to","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":37,"character":13}],"signatures":[{"id":1662,"name":"to","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the relative position of the cursor."},"parameters":[{"id":1663,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1664,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1665,"name":"toAbsolute","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":40,"character":13}],"signatures":[{"id":1666,"name":"toAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the absolute position of the cursor, starting from the top left."},"parameters":[{"id":1667,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1668,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1669,"name":"up","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":43,"character":13}],"signatures":[{"id":1670,"name":"up","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move up. Defaults to `1`."},"parameters":[{"id":1671,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Variables","kind":32,"children":[1653,1654,1655,1656,1657,1658,1659,1660]},{"title":"Functions","kind":64,"children":[1644,1647,1650,1661,1665,1669]}],"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/cursor","previousId":1722,"nextId":1672},{"id":1672,"name":"screen","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":1673,"name":"clear","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Clear the terminal screen."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":5,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.clearScreen"},{"id":1674,"name":"clearTerminal","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1675,"name":"erase","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Erase the screen and move the cursor the top left position."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":11,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.eraseScreen"},{"id":1676,"name":"eraseDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1677,"name":"eraseEndLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1678,"name":"eraseLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1682,"name":"eraseStartLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1683,"name":"eraseUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1684,"name":"scrollDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1685,"name":"scrollUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1679,"name":"eraseLines","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":1680,"name":"eraseLines","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Erase from the current cursor position up the specified amount of rows."},"parameters":[{"id":1681,"name":"count","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Count of rows to erase.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1686,"name":"size","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":38,"character":13}],"signatures":[{"id":1687,"name":"size","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Reliably and accurately get the screen size (in `columns` and `rows`)."},"type":{"type":"reference","name":"terminalSize.Size"}}]}],"groups":[{"title":"Variables","kind":32,"children":[1673,1674,1675,1676,1677,1678,1682,1683,1684,1685]},{"title":"Functions","kind":64,"children":[1679,1686]}],"sources":[{"fileName":"packages/terminal/src/screen.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/screen","previousId":1643,"nextId":1721},{"id":1722,"name":"WrapOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1723,"name":"hard","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":123,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1724,"name":"trim","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1725,"name":"wordWrap","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":125,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[1723,1724,1725]}],"sources":[{"fileName":"packages/terminal/src/text.ts","line":122,"character":17}],"permalink":"/api/terminal/interface/WrapOptions","previousId":1715,"nextId":1643},{"id":1721,"name":"TruncateOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":105,"character":12}],"type":{"type":"reference","name":"cliTruncate.Options"},"permalink":"/api/terminal#TruncateOptions","previousId":1672,"nextId":1720},{"id":1720,"name":"ANSI_REGEX","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Regular expression for matching ANSI escape codes."},"sources":[{"fileName":"packages/terminal/src/text.ts","line":11,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/terminal#ANSI_REGEX","previousId":1721},{"id":1688,"name":"annotate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":23,"character":16}],"signatures":[{"id":1689,"name":"annotate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text with a visual annotation _(iTerm only)_. If a terminal doe\\nnot support annotations, it will pass the text through.","text":"```ts\\nimport { annotate } from \'@boost/terminal\';\\n\\nconst text = annotate(\'fileName.js\', absFilePath);\\n```\\n"},"parameters":[{"id":1690,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1691,"name":"annotation","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/annotate","nextId":1692},{"id":1692,"name":"calculateWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":41,"character":16}],"signatures":[{"id":1693,"name":"calculateWidth","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculate and return the visual width of a string (number of terminal columns required).\\nBased on [string-width](https://www.npmjs.com/package/string-width).","text":"```ts\\nimport { calculateWidth } from \'@boost/terminal\';\\n\\ncalculateWidth(\'\u53e4\'); // 2\\n```\\n"},"parameters":[{"id":1694,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/terminal/function/calculateWidth","previousId":1688,"nextId":1695},{"id":1695,"name":"hasAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":55,"character":16}],"signatures":[{"id":1696,"name":"hasAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if the string contains ANSI escape codes.\\nBased on [ansi-regex](https://www.npmjs.com/package/ansi-regex).","text":"```ts\\nimport { hasAnsi } from \'@boost/terminal\';\\n\\nhasAnsi(\'\\\\u001B[4mTest\\\\u001B[0m\'); // true\\n```\\n"},"parameters":[{"id":1697,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/terminal/function/hasAnsi","previousId":1692,"nextId":1698},{"id":1698,"name":"link","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":69,"character":16}],"signatures":[{"id":1699,"name":"link","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text in an ANSI escape code hyperlink.\\nIf a terminal does not support hyperlinks, it will pass the text through.","text":"```ts\\nimport { link } from \'@boost/terminal\';\\n\\nconst text = link(\'Read the manual\', \'https://boostlib.dev\');\\n```\\n"},"parameters":[{"id":1700,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1701,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/link","previousId":1695,"nextId":1702},{"id":1702,"name":"sliceAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":87,"character":16}],"signatures":[{"id":1703,"name":"sliceAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Slice a string while preserving ANSI escape codes.\\nBased on [slice-ansi](https://www.npmjs.com/package/slice-ansi).","text":"```ts\\nimport { sliceAnsi } from \'@boost/terminal\';\\n\\nconst text = sliceAnsi(aStringThatMayContainAnsi, 15, 25);\\n```\\n"},"parameters":[{"id":1704,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1705,"name":"start","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1706,"name":"end","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/sliceAnsi","previousId":1698,"nextId":1707},{"id":1707,"name":"stripAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":101,"character":16}],"signatures":[{"id":1708,"name":"stripAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Strip all ANSI escape codes from the provided string.\\nBased on [strip-ansi](https://www.npmjs.com/package/strip-ansi).","text":"```ts\\nimport { stripAnsi } from \'@boost/terminal\';\\n\\nconst text = stripAnsi(aStringThatContainsAnsi);\\n```\\n"},"parameters":[{"id":1709,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/stripAnsi","previousId":1702,"nextId":1710},{"id":1710,"name":"truncate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":118,"character":16}],"signatures":[{"id":1711,"name":"truncate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Truncate a string to a desired terminal width while preserving ANSI escape codes,\\nUnicode surrogate pairs, and fullwidth characters.\\nBased on [cli-truncate](https://www.npmjs.com/package/cli-truncate).","text":"```ts\\nimport { truncate } from \'@boost/terminal\';\\n\\nconst text = truncate(aStringThatMayContainAnsi, 10, { position: \'middle\' });\\n```\\n"},"parameters":[{"id":1712,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1713,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1714,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/truncate","previousId":1707,"nextId":1715},{"id":1715,"name":"wrapAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":138,"character":16}],"signatures":[{"id":1716,"name":"wrapAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Wrap a string that contains ANSI escape codes to a desired terminal width.\\nBased on [wrap-ansi](https://www.npmjs.com/package/wrap-ansi).","text":"```ts\\nimport { wrapAnsi } from \'@boost/terminal\';\\n\\nconst text = wrapAnsi(aStringThatContainsAnsi, 20);\\n```\\n"},"parameters":[{"id":1717,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1718,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1719,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1722,"name":"WrapOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/wrapAnsi","previousId":1710,"nextId":1722}],"groups":[{"title":"Functions","kind":64,"children":[1688,1692,1695,1698,1702,1707,1710,1715]},{"title":"Interfaces","kind":256,"children":[1722]},{"title":"Namespaces","kind":4,"children":[1643,1672]},{"title":"Type aliases","kind":4194304,"children":[1721]},{"title":"Variables","kind":32,"children":[1720]}],"sources":[{"fileName":"packages/terminal/src/index.ts","line":6,"character":0}],"permalink":"/api/terminal"},"urlSlug":"terminal"}],"packageName":"@boost/terminal","packageVersion":"3.0.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":8,"name":"@boost/translate","kind":2,"kindString":"Module","flags":{},"children":[{"id":1748,"name":"MessageOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1751,"name":"context","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Context used for special parsing (male, female, etc)."},"sources":[{"fileName":"packages/translate/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1750,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Count used to determine plurals."},"sources":[{"fileName":"packages/translate/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1749,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Default value to return if a translation was not found."},"sources":[{"fileName":"packages/translate/src/types.ts","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1752,"name":"interpolation","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Interpolation options to pass down."},"sources":[{"fileName":"packages/translate/src/types.ts","line":19,"character":1}],"type":{"type":"reference","name":"InterpolationOptions"}},{"id":1753,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Force translation to this locale."},"sources":[{"fileName":"packages/translate/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1754,"name":"postProcess","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Post-processors to run on the translation."},"sources":[{"fileName":"packages/translate/src/types.ts","line":23,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[1751,1750,1749,1752,1753,1754]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":11,"character":17}],"permalink":"/api/translate/interface/MessageOptions","previousId":1726,"nextId":1755},{"id":1755,"name":"Translator","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1756,"name":"direction","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":28,"character":1}],"type":{"type":"reference","id":1744,"name":"Direction"}},{"id":1757,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":29,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1758,"name":"changeLocale","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":30,"character":1}],"signatures":[{"id":1759,"name":"changeLocale","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1760,"name":"locale","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[1756,1757]},{"title":"Methods","kind":2048,"children":[1758]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":26,"character":17}],"signatures":[{"id":1762,"name":"Translator","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1763,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1764,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1747,"name":"InterpolationParams"}},{"id":1765,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1748,"name":"MessageOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/translate/interface/Translator","previousId":1748,"nextId":1731},{"id":1731,"name":"TranslatorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1732,"name":"autoDetect","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Automatically detect the locale from the environment. Defaults to `true`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1733,"name":"debug","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable debugging by logging info to the console."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1734,"name":"fallbackLocale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Fallback locale(s) to use when the detected locale isn\'t translated. Defaults to `en`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":24,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1735,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Locale to explicitly use."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1736,"name":"lookupType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Order in which to load and lookup locale translations."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":28,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"all"},{"type":"literal","value":"currentOnly"},{"type":"literal","value":"languageOnly"}]}},{"id":1737,"name":"resourceFormat","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File format resource bundles are written in. Defaults to `yaml`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":30,"character":1}],"type":{"type":"reference","id":1745,"name":"Format"}}],"groups":[{"title":"Properties","kind":1024,"children":[1732,1733,1734,1735,1736,1737]}],"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":18,"character":17}],"permalink":"/api/translate/interface/TranslatorOptions","previousId":1755,"nextId":1744},{"id":1744,"name":"Direction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"ltr"},{"type":"literal","value":"rtl"}]},"permalink":"/api/translate#Direction","previousId":1731,"nextId":1745},{"id":1745,"name":"Format","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"yaml"}]},"permalink":"/api/translate#Format","previousId":1744,"nextId":1747},{"id":1747,"name":"InterpolationParams","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":9,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/translate#InterpolationParams","previousId":1745,"nextId":1746},{"id":1746,"name":"Locale","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":7,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/translate#Locale","previousId":1747,"nextId":1738},{"id":1738,"name":"TranslateErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/translate#TranslateErrorCode","previousId":1746,"nextId":1739},{"id":1739,"name":"TranslateError","kind":32,"kindString":"Variable","flags":{},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":1740,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1741,"name":"new TranslateError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1742,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}},{"id":1743,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/translate#TranslateError","previousId":1738},{"id":1726,"name":"createTranslator","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":37,"character":16}],"signatures":[{"id":1727,"name":"createTranslator","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Translator` instance with the defined namespace.\\nA list of resource paths are required for locating translation files."},"parameters":[{"id":1728,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1729,"name":"resourcePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"PortablePath"},{"type":"array","elementType":{"type":"reference","name":"PortablePath"}}]}},{"id":1730,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1731,"name":"TranslatorOptions"},"defaultValue":"{}"}],"type":{"type":"reference","id":1755,"name":"Translator"}}],"permalink":"/api/translate/function/createTranslator","nextId":1748}],"groups":[{"title":"Functions","kind":64,"children":[1726]},{"title":"Interfaces","kind":256,"children":[1748,1755,1731]},{"title":"Type aliases","kind":4194304,"children":[1744,1745,1747,1746,1738]},{"title":"Variables","kind":32,"children":[1739]}],"sources":[{"fileName":"packages/translate/src/index.ts","line":6,"character":0}],"permalink":"/api/translate"},"urlSlug":"translate"}],"packageName":"@boost/translate","packageVersion":"3.0.3"}]')}}]);