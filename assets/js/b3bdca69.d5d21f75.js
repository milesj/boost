(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5893],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),f=o,d=m["".concat(l,".").concat(f)]||m[f]||c[f]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6235:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},toc:function(){return s},default:function(){return c}});var r=n(9603),o=n(120),a=(n(7378),n(5318)),i=["components"],p={},l=void 0,s=[{value:"Features",id:"features",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Documentation",id:"documentation",children:[]}],u={toc:s};function c(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/milesj/boost/actions?query=branch%3Amaster"},(0,a.kt)("img",{parentName:"a",src:"https://github.com/milesj/boost/workflows/Build/badge.svg",alt:"Build Status"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@boost/pipeline"},(0,a.kt)("img",{parentName:"a",src:"https://badge.fury.io/js/%40boost%25pipeline.svg",alt:"npm version"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@boost/pipeline"},(0,a.kt)("img",{parentName:"a",src:"https://david-dm.org/milesj/boost.svg?path=packages/pipeline",alt:"npm deps"}))),(0,a.kt)("p",null,"Pipe an input through a series of routines and tasks to produce an output, or simply, run logic in a\nseries of stages."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Context, WaterfallPipeline } from '@boost/pipeline';\n\nconst ast = new WaterfallPipeline(new Context(), filePath)\n  .pipe('Parsing AST', parseAst)\n  .pipe('Linting rules', runLintsOnAst)\n  .pipe('Transforming nodes', transformNodesOnAst)\n  .pipe('Writing contents', writeAstToFile)\n  .run();\n")),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Parallel and serial based processing pipelines."),(0,a.kt)("li",{parentName:"ul"},"Supports 2 types of work units: tasks and routines."),(0,a.kt)("li",{parentName:"ul"},"Pooling and aggregated implementations for computation heavy or complex logic."),(0,a.kt)("li",{parentName:"ul"},"Contextually aware executions.")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"yarn add @boost/pipeline\n")),(0,a.kt)("h2",{id:"documentation"},"Documentation"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://boostlib.dev/docs/pipeline"},"https://boostlib.dev/docs/pipeline")))}c.isMDXComponent=!0}}]);