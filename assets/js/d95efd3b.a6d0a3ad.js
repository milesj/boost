(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7002],{6130:function(e){"use strict";e.exports=JSON.parse('[{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":1,"name":"@boost/args","kind":1,"kindString":"Module","flags":{},"children":[{"id":123,"name":"ParseError","kind":128,"kindString":"Class","flags":{},"children":[{"id":124,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":6,"character":1}],"signatures":[{"id":125,"name":"new ParseError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":126,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":127,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":128,"name":"index","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":123,"name":"ParseError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":129,"name":"arg","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":130,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[124]},{"title":"Properties","kind":1024,"children":[129,130]}],"sources":[{"fileName":"packages/args/src/ParseError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/args/class/ParseError","nextId":311},{"id":311,"name":"ValidationError","kind":128,"kindString":"Class","flags":{},"children":[{"id":312,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":6,"character":1}],"signatures":[{"id":313,"name":"new ValidationError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":314,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":315,"name":"option","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"}],"type":{"type":"reference","id":311,"name":"ValidationError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":316,"name":"option","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Constructors","kind":512,"children":[312]},{"title":"Properties","kind":1024,"children":[316]}],"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":3,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/args/class/ValidationError","previousId":123,"nextId":113},{"id":201,"name":"Arg","kind":256,"kindString":"Interface","flags":{},"children":[{"id":202,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","name":"T"}},{"id":212,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":190,"name":"Config.deprecated"}},{"id":213,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":191,"name":"Config.description"}},{"id":203,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":204,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":205,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":206,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]}},{"id":214,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":192,"name":"Config.hidden"}},{"id":207,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":199,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"}},{"id":208,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":209,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":210,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":211,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[202,212,213,203,214,207,208]}],"sources":[{"fileName":"packages/args/src/types.ts","line":150,"character":17}],"typeParameter":[{"id":215,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":189,"name":"Config"}],"extendedBy":[{"type":"reference","id":216,"name":"Option"},{"type":"reference","id":279,"name":"Param"}],"permalink":"/api/args/interface/Arg","previousId":2,"nextId":167},{"id":167,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":168,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":92,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":169,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":94,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":170,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/src/types.ts","line":96,"character":1}],"type":{"type":"reference","name":"O"}},{"id":171,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":98,"character":1}],"type":{"type":"reference","id":151,"typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamType"}},{"id":172,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":100,"character":1}],"type":{"type":"reference","id":139,"name":"ArgList"}},{"id":173,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/src/types.ts","line":102,"character":1}],"type":{"type":"reference","id":145,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[168,169,170,171,172,173]}],"sources":[{"fileName":"packages/args/src/types.ts","line":90,"character":17}],"typeParameter":[{"id":174,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":175,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":142,"name":"PrimitiveType"}},"default":{"type":"reference","id":139,"name":"ArgList"}}],"permalink":"/api/args/interface/Arguments","previousId":201,"nextId":296},{"id":296,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":297,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":205,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":298,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":206,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[297,298]}],"sources":[{"fileName":"packages/args/src/types.ts","line":204,"character":17}],"permalink":"/api/args/interface/Category","previousId":167,"nextId":193},{"id":193,"name":"Command","kind":256,"kindString":"Interface","flags":{},"children":[{"id":194,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/src/types.ts","line":137,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":196,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":190,"name":"Config.deprecated"}},{"id":197,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":191,"name":"Config.description"}},{"id":198,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":192,"name":"Config.hidden"}},{"id":195,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/src/types.ts","line":139,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[194,196,197,198,195]}],"sources":[{"fileName":"packages/args/src/types.ts","line":135,"character":17}],"extendedTypes":[{"type":"reference","id":189,"name":"Config"}],"permalink":"/api/args/interface/Command","previousId":296,"nextId":189},{"id":189,"name":"Config","kind":256,"kindString":"Interface","flags":{},"children":[{"id":190,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":191,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":192,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[190,191,192]}],"sources":[{"fileName":"packages/args/src/types.ts","line":126,"character":17}],"extendedBy":[{"type":"reference","id":193,"name":"Command"},{"type":"reference","id":201,"name":"Arg"}],"permalink":"/api/args/interface/Config","previousId":193,"nextId":271},{"id":271,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":273,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":272,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":193,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":276,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":277,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":278,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":274,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":310,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":275,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[273,272,276,277,278,274,275]}],"sources":[{"fileName":"packages/args/src/types.ts","line":192,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":216,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"name":"Omit"}],"permalink":"/api/args/interface/Flag","previousId":189,"nextId":252},{"id":252,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":253,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/src/types.ts","line":186,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":256,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":217,"name":"Option.category"}},{"id":254,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":187,"character":1}],"type":{"type":"reference","name":"T"},"overwrites":{"type":"reference","id":219,"name":"Option.default"}},{"id":267,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":229,"name":"Option.deprecated"}},{"id":268,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":230,"name":"Option.description"}},{"id":258,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":259,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":260,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":261,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":220,"name":"Option.format"}},{"id":269,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":231,"name":"Option.hidden"}},{"id":255,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/src/types.ts","line":189,"character":1}],"type":{"type":"literal","value":true}},{"id":257,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":310,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":218,"name":"Option.short"}},{"id":262,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":199,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":224,"name":"Option.type"}},{"id":263,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":264,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":265,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":266,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":225,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[253,256,254,267,268,258,269,255,257,262,263]}],"sources":[{"fileName":"packages/args/src/types.ts","line":184,"character":17}],"typeParameter":[{"id":270,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":140,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":216,"typeArguments":[{"type":"reference","name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/MultipleOption","previousId":271,"nextId":216},{"id":216,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":217,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":219,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":202,"name":"Arg.default"}},{"id":229,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":212,"name":"Arg.deprecated"}},{"id":230,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":213,"name":"Arg.description"}},{"id":220,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":221,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":222,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":223,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":203,"name":"Arg.format"}},{"id":231,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":214,"name":"Arg.hidden"}},{"id":218,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":310,"name":"ShortOptionName"}},{"id":224,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":199,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":207,"name":"Arg.type"}},{"id":225,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":226,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":227,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":228,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":208,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[217,219,229,230,220,231,218,224,225]}],"sources":[{"fileName":"packages/args/src/types.ts","line":169,"character":17}],"typeParameter":[{"id":232,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":143,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","id":201,"typeArguments":[{"type":"reference","name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":233,"name":"SingleOption"},{"type":"reference","id":252,"name":"MultipleOption"}],"permalink":"/api/args/interface/Option","previousId":252,"nextId":279},{"id":279,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":282,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":202,"name":"Arg.default"}},{"id":292,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":212,"name":"Arg.deprecated"}},{"id":293,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":213,"name":"Arg.description"}},{"id":283,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":284,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":285,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":286,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":203,"name":"Arg.format"}},{"id":294,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":214,"name":"Arg.hidden"}},{"id":280,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/src/types.ts","line":198,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":281,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":201,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":287,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":199,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":207,"name":"Arg.type"}},{"id":288,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":289,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":290,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":291,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":208,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[282,292,293,283,294,280,281,287,288]}],"sources":[{"fileName":"packages/args/src/types.ts","line":196,"character":17}],"typeParameter":[{"id":295,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":142,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","id":201,"typeArguments":[{"type":"reference","name":"T"}],"name":"Arg"}],"permalink":"/api/args/interface/Param","previousId":216,"nextId":180},{"id":180,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":181,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":157,"name":"CommandChecker"}]}},{"id":184,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":177,"name":"ParserSettings.loose"}},{"id":182,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/src/types.ts","line":119,"character":1}],"type":{"type":"reference","id":155,"typeArguments":[{"type":"reference","name":"O"}],"name":"MapOptionConfig"}},{"id":183,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":149,"typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamConfig"}},{"id":185,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":178,"name":"ParserSettings.unknown"}},{"id":186,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":179,"name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[181,184,182,183,185,186]}],"sources":[{"fileName":"packages/args/src/types.ts","line":114,"character":17}],"typeParameter":[{"id":187,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":188,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":142,"name":"PrimitiveType"}},"default":{"type":"reference","id":139,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","id":176,"name":"ParserSettings"}],"permalink":"/api/args/interface/ParserOptions","previousId":279,"nextId":176},{"id":176,"name":"ParserSettings","kind":256,"kindString":"Interface","flags":{},"children":[{"id":177,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":178,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":179,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[177,178,179]}],"sources":[{"fileName":"packages/args/src/types.ts","line":105,"character":17}],"extendedBy":[{"type":"reference","id":180,"name":"ParserOptions"}],"permalink":"/api/args/interface/ParserSettings","previousId":180,"nextId":233},{"id":233,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":237,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":217,"name":"Option.category"}},{"id":234,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/src/types.ts","line":178,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"id":235,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/src/types.ts","line":180,"character":1}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":236,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":181,"character":1}],"type":{"type":"reference","name":"T"},"overwrites":{"type":"reference","id":219,"name":"Option.default"}},{"id":248,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":229,"name":"Option.deprecated"}},{"id":249,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":230,"name":"Option.description"}},{"id":239,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":240,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":241,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":242,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":220,"name":"Option.format"}},{"id":250,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":231,"name":"Option.hidden"}},{"id":238,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":310,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":218,"name":"Option.short"}},{"id":243,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":199,"typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":224,"name":"Option.type"}},{"id":244,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":245,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":246,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":247,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":225,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[237,234,235,236,248,249,239,250,238,243,244]}],"sources":[{"fileName":"packages/args/src/types.ts","line":176,"character":17}],"typeParameter":[{"id":251,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":141,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":216,"typeArguments":[{"type":"reference","name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/SingleOption","previousId":176,"nextId":146},{"id":146,"name":"AliasMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":19,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/args#AliasMap","previousId":11,"nextId":139},{"id":139,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":5,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#ArgList","previousId":146,"nextId":99},{"id":99,"name":"ArgsErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":35,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/args#ArgsErrorCode","previousId":139,"nextId":138},{"id":138,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#Argv","previousId":99,"nextId":157},{"id":157,"name":"CommandChecker","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":12}],"type":{"type":"reflection","declaration":{"id":158,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":29}],"signatures":[{"id":159,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":160,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"permalink":"/api/args#CommandChecker","previousId":138,"nextId":161},{"id":161,"name":"ContextFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":12}],"type":{"type":"reflection","declaration":{"id":162,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":29}],"signatures":[{"id":163,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":165,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":166,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":138,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":180,"typeArguments":[{"type":"reflection","declaration":{"id":164,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":72}]}}],"name":"ParserOptions"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/args#ContextFactory","previousId":157,"nextId":199},{"id":199,"name":"InferArgType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":144,"character":12}],"typeParameter":[{"id":200,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"literal","value":"boolean"},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"intrinsic","name":"number"}]},"trueType":{"type":"literal","value":"number"},"falseType":{"type":"literal","value":"string"}}},"permalink":"/api/args#InferArgType","previousId":161,"nextId":153},{"id":153,"name":"InferOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type."},"sources":[{"fileName":"packages/args/src/types.ts","line":75,"character":12}],"typeParameter":[{"id":154,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"reference","id":271,"name":"Flag"},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"trueType":{"type":"reference","id":252,"typeArguments":[{"type":"reference","name":"T"}],"name":"MultipleOption"},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"trueType":{"type":"reference","id":233,"typeArguments":[{"type":"reference","name":"T"}],"name":"SingleOption"},"falseType":{"type":"intrinsic","name":"never"}}}},"permalink":"/api/args#InferOptionConfig","previousId":199,"nextId":147},{"id":147,"name":"InferParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type. Only primitives are allowed."},"sources":[{"fileName":"packages/args/src/types.ts","line":22,"character":12}],"typeParameter":[{"id":148,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"reference","id":142,"name":"PrimitiveType"},"trueType":{"type":"reference","id":279,"typeArguments":[{"type":"reference","name":"T"}],"name":"Param"},"falseType":{"type":"intrinsic","name":"never"}},"permalink":"/api/args#InferParamConfig","previousId":153,"nextId":140},{"id":140,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":7,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/args#ListType","previousId":147,"nextId":309},{"id":309,"name":"LongOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Option name without leading \\"--\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":226,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/args#LongOptionName","previousId":140,"nextId":155},{"id":155,"name":"MapOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":84,"character":12}],"typeParameter":[{"id":156,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"mapped","parameter":"K","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"T"}},"templateType":{"type":"reference","id":153,"typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","name":"K"},"objectType":{"type":"reference","name":"T"}}],"name":"InferOptionConfig"}},"permalink":"/api/args#MapOptionConfig","previousId":309,"nextId":149},{"id":149,"name":"MapParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":150,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":142,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"E"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":147,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"reference","id":139,"name":"ArgList"},"trueType":{"type":"array","elementType":{"type":"reference","id":279,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Param"}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamConfig","previousId":155,"nextId":151},{"id":151,"name":"MapParamType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":54,"character":12}],"typeParameter":[{"id":152,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":142,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"reference","name":"E"},{"type":"rest","elementType":{"type":"reference","id":139,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"rest","elementType":{"type":"reference","id":139,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"rest","elementType":{"type":"reference","id":139,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"rest","elementType":{"type":"reference","id":139,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"rest","elementType":{"type":"reference","id":139,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"reference","id":139,"name":"ArgList"},"trueType":{"type":"reference","id":139,"name":"ArgList"},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamType","previousId":149,"nextId":299},{"id":299,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":12}],"type":{"type":"intersection","types":[{"type":"reference","id":216,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":300,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":301,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":211,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":302,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":212,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":142,"name":"PrimitiveType"}}},{"id":303,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":213,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":304,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":214,"character":1}],"type":{"type":"reference","id":143,"name":"ValueType"}},{"id":305,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":215,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[301,302,303,304,305]}],"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":41}]}}]},"permalink":"/api/args#OptionConfig","previousId":151,"nextId":306},{"id":306,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":218,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":299,"name":"OptionConfig"}],"name":"Record"},"permalink":"/api/args#OptionConfigMap","previousId":299,"nextId":144},{"id":144,"name":"OptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":15,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":143,"name":"ValueType"}],"name":"Record"},"permalink":"/api/args#OptionMap","previousId":306,"nextId":307},{"id":307,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":221,"character":12}],"type":{"type":"reference","id":279,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/args#ParamConfig","previousId":144,"nextId":308},{"id":308,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":223,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":307,"name":"ParamConfig"}},"permalink":"/api/args#ParamConfigList","previousId":307,"nextId":142},{"id":142,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":141,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/args#PrimitiveType","previousId":308,"nextId":141},{"id":141,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":9,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/args#ScalarType","previousId":142,"nextId":310},{"id":310,"name":"ShortOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Short option name without leading \\"-\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":229,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"A"},{"type":"literal","value":"a"},{"type":"literal","value":"B"},{"type":"literal","value":"b"},{"type":"literal","value":"C"},{"type":"literal","value":"c"},{"type":"literal","value":"D"},{"type":"literal","value":"d"},{"type":"literal","value":"E"},{"type":"literal","value":"e"},{"type":"literal","value":"F"},{"type":"literal","value":"f"},{"type":"literal","value":"G"},{"type":"literal","value":"g"},{"type":"literal","value":"H"},{"type":"literal","value":"h"},{"type":"literal","value":"I"},{"type":"literal","value":"i"},{"type":"literal","value":"J"},{"type":"literal","value":"j"},{"type":"literal","value":"K"},{"type":"literal","value":"k"},{"type":"literal","value":"L"},{"type":"literal","value":"l"},{"type":"literal","value":"M"},{"type":"literal","value":"m"},{"type":"literal","value":"N"},{"type":"literal","value":"n"},{"type":"literal","value":"O"},{"type":"literal","value":"o"},{"type":"literal","value":"P"},{"type":"literal","value":"p"},{"type":"literal","value":"Q"},{"type":"literal","value":"q"},{"type":"literal","value":"R"},{"type":"literal","value":"r"},{"type":"literal","value":"S"},{"type":"literal","value":"s"},{"type":"literal","value":"T"},{"type":"literal","value":"t"},{"type":"literal","value":"U"},{"type":"literal","value":"u"},{"type":"literal","value":"V"},{"type":"literal","value":"v"},{"type":"literal","value":"W"},{"type":"literal","value":"w"},{"type":"literal","value":"X"},{"type":"literal","value":"x"},{"type":"literal","value":"Y"},{"type":"literal","value":"y"},{"type":"literal","value":"Z"},{"type":"literal","value":"z"}]},"permalink":"/api/args#ShortOptionName","previousId":141,"nextId":145},{"id":145,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":17,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/args#UnknownOptionMap","previousId":310,"nextId":143},{"id":143,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":13,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":140,"name":"ListType"},{"type":"reference","id":142,"name":"PrimitiveType"}]},"permalink":"/api/args#ValueType","previousId":145,"nextId":100},{"id":100,"name":"ArgsError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":37,"character":13}],"type":{"type":"reflection","declaration":{"id":101,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":102,"name":"new ArgsError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":103,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}},{"id":104,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/args#ArgsError","previousId":23,"nextId":108},{"id":108,"name":"COMMAND_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#COMMAND_FORMAT","previousId":100,"nextId":105},{"id":105,"name":"DEFAULT_BOOLEAN_VALUE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":2,"character":13}],"type":{"type":"literal","value":false},"defaultValue":"false","permalink":"/api/args#DEFAULT_BOOLEAN_VALUE","previousId":108,"nextId":106},{"id":106,"name":"DEFAULT_NUMBER_VALUE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":3,"character":13}],"type":{"type":"literal","value":0},"defaultValue":"0","permalink":"/api/args#DEFAULT_NUMBER_VALUE","previousId":105,"nextId":107},{"id":107,"name":"DEFAULT_STRING_VALUE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":4,"character":13}],"type":{"type":"literal","value":""},"defaultValue":"\'\'","permalink":"/api/args#DEFAULT_STRING_VALUE","previousId":106,"nextId":109},{"id":109,"name":"LONG_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":13,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#LONG_OPTION_FORMAT","previousId":107,"nextId":112},{"id":112,"name":"OPTION_LIKE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":25,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#OPTION_LIKE","previousId":109,"nextId":110},{"id":110,"name":"SHORT_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":17,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_FORMAT","previousId":112,"nextId":111},{"id":111,"name":"SHORT_OPTION_GROUP_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":21,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_GROUP_FORMAT","previousId":110},{"id":113,"name":"format","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/format.ts","line":14,"character":16}],"signatures":[{"id":114,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a parsed arguments object back into a command line list of arguments."},"parameters":[{"id":115,"name":"argument","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":167,"typeArguments":[{"type":"reference","id":144,"name":"OptionMap"},{"type":"reference","id":139,"name":"ArgList"}],"name":"Arguments"}],"name":"Partial"}}],"type":{"type":"reference","id":138,"name":"Argv"}}],"permalink":"/api/args/function/format","previousId":1,"nextId":116},{"id":116,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parse.ts","line":59,"character":16}],"signatures":[{"id":117,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject. Will extract commands, options, flags, and params based on the defined parser options."},"typeParameter":[{"id":119,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":118,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":120,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":142,"name":"PrimitiveType"}},"default":{"type":"reference","id":139,"name":"ArgList"}}],"parameters":[{"id":121,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":138,"name":"Argv"}},{"id":122,"name":"parserOptions","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":180,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ParserOptions"}}],"type":{"type":"reference","id":167,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parse","previousId":113,"nextId":131},{"id":131,"name":"parseInContext","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parseInContext.ts","line":10,"character":16}],"signatures":[{"id":132,"name":"parseInContext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject using a context factory. The factory can customize the parser options based on the\\narguments being parsed."},"typeParameter":[{"id":134,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":133,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":135,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":142,"name":"PrimitiveType"}},"default":{"type":"reference","id":139,"name":"ArgList"}}],"parameters":[{"id":136,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":138,"name":"Argv"}},{"id":137,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":161,"name":"ContextFactory"}}],"type":{"type":"reference","id":167,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parseInContext","previousId":116,"nextId":201}],"groups":[{"title":"Classes","kind":128,"children":[123,311]},{"title":"Functions","kind":64,"children":[113,116,131]},{"title":"Interfaces","kind":256,"children":[201,167,296,193,189,271,252,216,279,180,176,233]},{"title":"Type aliases","kind":4194304,"children":[146,139,99,138,157,161,199,153,147,140,309,155,149,151,299,306,144,307,308,142,141,310,145,143]},{"title":"Variables","kind":32,"children":[100,108,105,106,107,109,112,110,111]}],"sources":[{"fileName":"packages/args/src/index.ts","line":6,"character":0}],"permalink":"/api/args"},"urlSlug":"args"}],"packageName":"@boost/args","packageVersion":"2.3.3"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":10,"name":"@boost/cli","kind":1,"kindString":"Module","flags":{},"children":[{"id":2210,"name":"Arg","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":2211,"name":"Flag","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Flag.ts","line":8,"character":16}],"signatures":[{"id":2212,"name":"Flag","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line flag (boolean value)."},"parameters":[{"id":2213,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2214,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2680,"typeArguments":[{"type":"reference","id":2576,"name":"FlagConfig"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":2215,"name":"Number","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Number.ts","line":8,"character":16}],"signatures":[{"id":2216,"name":"Number","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a numeric value."},"parameters":[{"id":2217,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2218,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2680,"typeArguments":[{"type":"reference","id":2659,"typeArguments":[{"type":"intrinsic","name":"number"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":2219,"name":"Numbers","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Numbers.ts","line":8,"character":16}],"signatures":[{"id":2220,"name":"Numbers","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple numeric values."},"parameters":[{"id":2221,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2222,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2680,"typeArguments":[{"type":"reference","id":2585,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":2223,"name":"Params","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Params.ts","line":7,"character":16}],"signatures":[{"id":2224,"name":"Params","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator for declaring command line parameters (positional arguments)."},"typeParameter":[{"id":2225,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":2226,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"MapParamConfig"}}],"type":{"type":"reference","name":"MethodDecorator"}}]},{"id":2227,"name":"String","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/String.ts","line":8,"character":16}],"signatures":[{"id":2228,"name":"String","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a string value."},"parameters":[{"id":2229,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2230,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2680,"typeArguments":[{"type":"reference","id":2659,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]},{"id":2231,"name":"Strings","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Strings.ts","line":8,"character":16}],"signatures":[{"id":2232,"name":"Strings","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple string values."},"parameters":[{"id":2233,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2234,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2680,"typeArguments":[{"type":"reference","id":2585,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","name":"PropertyDecorator"}}]}],"groups":[{"title":"Functions","kind":64,"children":[2211,2215,2219,2223,2227,2231]}],"sources":[{"fileName":"packages/cli/src/decorators/index.ts","line":1,"character":0}],"permalink":"/api/cli/namespace/Arg","previousId":26,"nextId":2562},{"id":2253,"name":"Command","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":2266,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":142,"character":1}],"signatures":[{"id":2267,"name":"new Command","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":2268,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2684,"name":"GlobalOptions"},"default":{"type":"reference","id":2684,"name":"GlobalOptions"}},{"id":2269,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}},"default":{"type":"reference","id":2562,"name":"ArgList"}},{"id":2271,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2270,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":2272,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":2253,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"},{"type":"reference","name":"Options"}],"name":"Command"},"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}},{"id":2278,"name":"exit","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to exit the current program, with an optional error code."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":126,"character":1}],"type":{"type":"reference","id":2694,"name":"ExitHandler"}},{"id":2273,"name":"help","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--help`, `-h` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2274,"name":"locale","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--locale` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":112,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'en\'"},{"id":2279,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to log to the console using a log level."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":129,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2333,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":19,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2764,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":2334,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":25,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2764,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":2357,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":2275,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional arguments passed after `--` on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":2276,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unknown options passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":118,"character":1}],"type":{"type":"reference","id":2678,"name":"UnknownOptionMap"},"defaultValue":"{}"},{"id":2277,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--version`, `-v` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":121,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2254,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":82,"character":8}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":2255,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":84,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2256,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":86,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"defaultValue":"false"},{"id":2257,"name":"categories","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":88,"character":8}],"type":{"type":"reference","id":2692,"name":"Categories"},"defaultValue":"{}"},{"id":2258,"name":"category","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":90,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":2260,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":94,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2259,"name":"description","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":92,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":2261,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":96,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":2262,"name":"options","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":98,"character":8}],"type":{"type":"reference","id":2628,"name":"OptionConfigMap"},"defaultValue":"..."},{"id":2263,"name":"params","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":100,"character":8}],"type":{"type":"reference","id":2647,"name":"ParamConfigList"},"defaultValue":"[]"},{"id":2264,"name":"path","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":102,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":2265,"name":"usage","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":104,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"defaultValue":"\'\'"},{"id":2280,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":169,"character":1}],"signatures":[{"id":2281,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate options passed to the constructor."},"parameters":[{"id":2282,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2283,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":2358,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":2359,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2360,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2361,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2362,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2363,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":2284,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":176,"character":7}],"signatures":[{"id":2285,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a React element based on the Help component."},"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}],"name":"Promise"},"implementationOf":{"type":"reference","id":2766,"name":"Commandable.createHelp"}}],"implementationOf":{"type":"reference","id":2765,"name":"Commandable.createHelp"}},{"id":2286,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":198,"character":1}],"signatures":[{"id":2287,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a system native command with the given arguments\\nand pass the results through a promise. This does *not* execute Boost CLI\\ncommands, use `runProgram()` instead."},"parameters":[{"id":2288,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2289,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2290,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Options"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaChildProcess"}}]},{"id":2291,"name":"getArguments","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":211,"character":1}],"signatures":[{"id":2292,"name":"getArguments","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current command class as an arguments object.\\nOptions and params must be parsed first to operate correctly."},"type":{"type":"reference","id":2563,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Arguments"}}]},{"id":2337,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":34,"character":1}],"signatures":[{"id":2338,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":2340,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2339,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":2341,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}},"default":{"type":"reference","id":2562,"name":"ArgList"}}],"parameters":[{"id":2342,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2764,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":2343,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":49,"character":1}],"signatures":[{"id":2344,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":2293,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":225,"character":1}],"signatures":[{"id":2294,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate and return all metadata registered to this command instance."},"type":{"type":"reference","id":2748,"name":"CommandMetadata"},"implementationOf":{"type":"reference","id":2768,"name":"Commandable.getMetadata"}}],"implementationOf":{"type":"reference","id":2767,"name":"Commandable.getMetadata"}},{"id":2295,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":260,"character":1}],"signatures":[{"id":2296,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return metadata as options for argument parsing."},"type":{"type":"reference","id":2648,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ParserOptions"},"implementationOf":{"type":"reference","id":2770,"name":"Commandable.getParserOptions"}}],"implementationOf":{"type":"reference","id":2769,"name":"Commandable.getParserOptions"}},{"id":2297,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":276,"character":1}],"signatures":[{"id":2298,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the command path (canonical name on the command line)."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2772,"name":"Commandable.getPath"}}],"implementationOf":{"type":"reference","id":2771,"name":"Commandable.getPath"}},{"id":2345,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":57,"character":1}],"signatures":[{"id":2346,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":2347,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2764,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2253,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"},{"type":"reference","name":"Options"}],"name":"Command"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2348,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2349,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2350,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}}}],"parameters":[{"id":2351,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2352,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2781,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandConfig"}},{"id":2353,"name":"runner","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2795,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandRunner"}}],"type":{"type":"reference","id":2253,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"},{"type":"reference","name":"Options"}],"name":"Command"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2299,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":283,"character":7}],"signatures":[{"id":2300,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":2301,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},"implementationOf":{"type":"reference","id":2774,"name":"Commandable.render"}}],"implementationOf":{"type":"reference","id":2773,"name":"Commandable.render"}},{"id":2314,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":318,"character":10}],"signatures":[{"id":2315,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Executed when the command is being ran."},"parameters":[{"id":2316,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2718,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2718,"name":"RunResult"}],"name":"Promise"}]},"implementationOf":{"type":"reference","id":2777,"name":"Commandable.run"}}],"implementationOf":{"type":"reference","id":2776,"name":"Commandable.run"}},{"id":2302,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":290,"character":1}],"signatures":[{"id":2303,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program within itself, by passing a custom command and argv list."},"parameters":[{"id":2304,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2572,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2305,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":296,"character":1}],"signatures":[{"id":2306,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run a task (function) with the defined arguments and\\nthe current command instance bound to the task\'s context."},"typeParameter":[{"id":2307,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":2308,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2309,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2310,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2311,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2312,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}}},{"id":2313,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2266]},{"title":"Properties","kind":1024,"children":[2278,2273,2274,2279,2333,2334,2357,2275,2276,2277,2254,2255,2256,2257,2258,2260,2259,2261,2262,2263,2264,2265],"categories":[{"title":"CATEGORY","children":[2278,2273,2274,2279,2357,2275,2276,2277,2254,2255,2256,2257,2258,2260,2259,2261,2262,2263,2264,2265]},{"title":"Events","children":[2333,2334]}]},{"title":"Methods","kind":2048,"children":[2280,2358,2284,2286,2291,2337,2343,2293,2295,2297,2345,2299,2314,2302,2305]}],"sources":[{"fileName":"packages/cli/src/Command.tsx","line":74,"character":22}],"typeParameter":[{"id":2364,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2684,"name":"GlobalOptions"},"default":{"type":"reference","id":2684,"name":"GlobalOptions"}},{"id":2365,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}},"default":{"type":"reference","id":2562,"name":"ArgList"}},{"id":2367,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2366,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":77,"character":27}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"CommandManager"}],"implementedTypes":[{"type":"reference","id":2764,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Commandable"}],"permalink":"/api/cli/class/Command","nextId":2854},{"id":2854,"name":"Failure","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A React component that renders a failure state for errors and warnings."},"children":[{"id":2855,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2856,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2857,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2847,"name":"FailureProps"},{"type":"reference","typeArguments":[{"type":"reference","id":2847,"name":"FailureProps"}],"name":"Readonly"}]}}],"type":{"type":"reference","id":2854,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2858,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"comment":{"tags":[{"tag":"deprecated","text":""},{"tag":"see","text":"https://reactjs.org/docs/legacy-context.html\\n"}]},"parameters":[{"id":2859,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2847,"name":"FailureProps"}},{"id":2860,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","id":2854,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2869,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":152,"character":10}],"signatures":[{"id":2870,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","name":"Element"},"overwrites":{"type":"reference","name":"React.Component.render"}}],"overwrites":{"type":"reference","name":"React.Component.render"}},{"id":2863,"name":"renderCodeFrame","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":50,"character":1}],"signatures":[{"id":2864,"name":"renderCodeFrame","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2865,"name":"renderStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":105,"character":1}],"signatures":[{"id":2866,"name":"renderStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2867,"name":"renderWarnings","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":127,"character":1}],"signatures":[{"id":2868,"name":"renderWarnings","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element"}]}}]},{"id":2861,"name":"shouldHideStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":36,"character":1}],"signatures":[{"id":2862,"name":"shouldHideStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"boolean"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2855]},{"title":"Methods","kind":2048,"children":[2869,2863,2865,2867,2861]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":35,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2847,"name":"FailureProps"}],"name":"Component"}],"permalink":"/api/cli/class/Failure","previousId":2253,"nextId":2446},{"id":2446,"name":"Program","kind":128,"kindString":"Class","flags":{},"children":[{"id":2447,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":130,"character":1}],"signatures":[{"id":2448,"name":"new Program","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2449,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2699,"name":"ProgramOptions"}},{"id":2450,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2707,"name":"ProgramStreams"}}],"type":{"type":"reference","id":2446,"name":"Program"},"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}},{"id":2531,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":19,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2764,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":2451,"name":"onAfterRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a component has rendered."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":59,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2452,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the program and command have been ran."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":65,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"reference","name":"Error"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2532,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":25,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2764,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":2453,"name":"onBeforeRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has run but before a component will render."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":71,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2718,"name":"RunResult"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2454,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the program and command will run."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":77,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2572,"name":"Argv"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2455,"name":"onCommandFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command has been found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":83,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2572,"name":"Argv"},{"type":"intrinsic","name":"string"},{"type":"reference","id":2764,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2456,"name":"onCommandNotFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command wasn\'t found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":89,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2572,"name":"Argv"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2457,"name":"onExit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the exit() handler is executed but before the process exits."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":95,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2458,"name":"onHelp","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the help menu is rendered."},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":101,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2555,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2699,"name":"ProgramOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":2459,"name":"streams","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":103,"character":10}],"type":{"type":"reference","id":2707,"name":"ProgramStreams"},"defaultValue":"..."},{"id":2468,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":160,"character":1}],"signatures":[{"id":2469,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2470,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2471,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2699,"name":"ProgramOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":2472,"name":"categories","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":178,"character":1}],"signatures":[{"id":2473,"name":"categories","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define option and command categories to supply to the running command,\\nor the program itself."},"parameters":[{"id":2474,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2692,"name":"Categories"}}],"type":{"type":"reference","id":2446,"name":"Program"}}]},{"id":2556,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":2557,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2558,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2699,"name":"ProgramOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2559,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2560,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2561,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2699,"name":"ProgramOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2699,"name":"ProgramOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2699,"name":"ProgramOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":2475,"name":"default","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":188,"character":1}],"signatures":[{"id":2476,"name":"default","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path as the default command.\\nA default command should be used when stand-alone binary is required."},"parameters":[{"id":2477,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2764,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2446,"name":"Program"}}]},{"id":2478,"name":"exit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":203,"character":1}],"signatures":[{"id":2479,"name":"exit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Exit the program with an error code.\\nShould be called within a command or component."},"parameters":[{"id":2480,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"Error"}]}},{"id":2481,"name":"errorCode","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"never"}}]},{"id":2535,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":34,"character":1}],"signatures":[{"id":2536,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":2538,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2537,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":2539,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}},"default":{"type":"reference","id":2562,"name":"ArgList"}}],"parameters":[{"id":2540,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2764,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":2541,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":49,"character":1}],"signatures":[{"id":2542,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":2482,"name":"middleware","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":227,"character":1}],"signatures":[{"id":2483,"name":"middleware","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define a middleware function to apply to the argv list or args object."},"parameters":[{"id":2484,"name":"middleware","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2827,"name":"Middleware"}}],"type":{"type":"reference","id":2446,"name":"Program"}}]},{"id":2485,"name":"parse","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":240,"character":1}],"signatures":[{"id":2486,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse the arguments list according to the number of commands that have been registered."},"typeParameter":[{"id":2487,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2684,"name":"GlobalOptions"}},{"id":2488,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}},"default":{"type":"reference","id":2562,"name":"ArgList"}}],"parameters":[{"id":2489,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2572,"name":"Argv"}}],"type":{"type":"reference","id":2563,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Arguments"}}]},{"id":2543,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":57,"character":1}],"signatures":[{"id":2544,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":2545,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2764,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2446,"name":"Program"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2546,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2547,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2548,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}}}],"parameters":[{"id":2549,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2550,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2781,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandConfig"}},{"id":2551,"name":"runner","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2795,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandRunner"}}],"type":{"type":"reference","id":2446,"name":"Program"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2490,"name":"renderElement","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":269,"character":7}],"signatures":[{"id":2491,"name":"renderElement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":2492,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"id":2493,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":331,"character":7}],"signatures":[{"id":2494,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program in the following steps:\\n- Apply middleware to argv list.\\n- Parse argv into an args object (of options, params, etc).\\n- Determine command to run, or fail.\\n- Run command and render output.\\n- Return exit code."},"parameters":[{"id":2495,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2572,"name":"Argv"}},{"id":2496,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2715,"name":"ProgramBootstrap"}},{"id":2497,"name":"rethrow","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2498,"name":"runAndExit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.tsx","line":363,"character":7}],"signatures":[{"id":2499,"name":"runAndExit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program and also set the process exit code."},"parameters":[{"id":2500,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2572,"name":"Argv"}},{"id":2501,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2715,"name":"ProgramBootstrap"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2447]},{"title":"Properties","kind":1024,"children":[2531,2451,2452,2532,2453,2454,2455,2456,2457,2458,2555,2459],"categories":[{"title":"CATEGORY","children":[2555,2459]},{"title":"Events","children":[2531,2451,2452,2532,2453,2454,2455,2456,2457,2458]}]},{"title":"Methods","kind":2048,"children":[2468,2472,2556,2475,2478,2535,2541,2482,2485,2543,2490,2493,2498]}],"sources":[{"fileName":"packages/cli/src/Program.tsx","line":54,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2699,"name":"ProgramOptions"}],"name":"CommandManager"}],"permalink":"/api/cli/class/Program","previousId":2854,"nextId":2235},{"id":2563,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2564,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":41,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2565,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":43,"character":4}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":2566,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":45,"character":4}],"type":{"type":"reference","name":"O"}},{"id":2567,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":47,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamType"}},{"id":2568,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":49,"character":4}],"type":{"type":"reference","id":2562,"name":"ArgList"}},{"id":2569,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":51,"character":4}],"type":{"type":"reference","id":2678,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[2564,2565,2566,2567,2568,2569]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":39,"character":17}],"typeParameter":[{"id":2570,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2571,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}},"default":{"type":"reference","id":2562,"name":"ArgList"}}],"permalink":"/api/cli/interface/Arguments","previousId":30,"nextId":2573},{"id":2573,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2574,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":133,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2575,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":134,"character":4}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[2574,2575]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":132,"character":17}],"permalink":"/api/cli/interface/Category","previousId":2563,"nextId":2720},{"id":2720,"name":"CommandConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2721,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":114,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2722,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":116,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2723,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":118,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]}},{"id":2724,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":120,"character":1}],"type":{"type":"reference","id":2692,"name":"Categories"}},{"id":2728,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.category"}},{"id":2730,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.deprecated"}},{"id":2731,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.description"}},{"id":2732,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.hidden"}},{"id":2725,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2628,"name":"OptionConfigMap"}},{"id":2726,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":122,"character":1}],"type":{"type":"reference","id":2647,"name":"ParamConfigList"}},{"id":2727,"name":"path","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2729,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2721,2722,2723,2724,2728,2730,2731,2732,2725,2726,2727,2729]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":112,"character":17}],"extendedTypes":[{"type":"reference","name":"BaseCommandConfig"}],"permalink":"/api/cli/interface/CommandConfig","previousId":2573,"nextId":2748},{"id":2748,"name":"CommandMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2751,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":114,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","id":2736,"name":"CommandStaticConfig.aliases"}},{"id":2752,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":116,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2737,"name":"CommandStaticConfig.allowUnknownOptions"}},{"id":2753,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":118,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","id":2738,"name":"CommandStaticConfig.allowVariadicParams"}},{"id":2754,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":120,"character":1}],"type":{"type":"reference","id":2692,"name":"Categories"},"inheritedFrom":{"type":"reference","id":2739,"name":"CommandStaticConfig.categories"}},{"id":2758,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2743,"name":"CommandStaticConfig.category"}},{"id":2749,"name":"commands","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":135,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2764,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}],"name":"Record"}},{"id":2760,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2745,"name":"CommandStaticConfig.deprecated"}},{"id":2761,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2746,"name":"CommandStaticConfig.description"}},{"id":2750,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":131,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2735,"name":"CommandStaticConfig.hasRegisteredOptions"}},{"id":2762,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2747,"name":"CommandStaticConfig.hidden"}},{"id":2755,"name":"options","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2628,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","id":2740,"name":"CommandStaticConfig.options"}},{"id":2756,"name":"params","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":122,"character":1}],"type":{"type":"reference","id":2647,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","id":2741,"name":"CommandStaticConfig.params"}},{"id":2757,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2742,"name":"CommandStaticConfig.path"}},{"id":2759,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","id":2744,"name":"CommandStaticConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2751,2752,2753,2754,2758,2749,2760,2761,2750,2762,2755,2756,2757,2759]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":134,"character":17}],"extendedTypes":[{"type":"reference","id":2734,"name":"CommandStaticConfig"}],"permalink":"/api/cli/interface/CommandMetadata","previousId":2720,"nextId":2734},{"id":2734,"name":"CommandStaticConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2736,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":114,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"Required.aliases"}},{"id":2737,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":116,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.allowUnknownOptions"}},{"id":2738,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":118,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","name":"Required.allowVariadicParams"}},{"id":2739,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":120,"character":1}],"type":{"type":"reference","id":2692,"name":"Categories"},"inheritedFrom":{"type":"reference","name":"Required.categories"}},{"id":2743,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.category"}},{"id":2745,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.deprecated"}},{"id":2746,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.description"}},{"id":2735,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":131,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2747,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.hidden"}},{"id":2740,"name":"options","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2628,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","name":"Required.options"}},{"id":2741,"name":"params","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":122,"character":1}],"type":{"type":"reference","id":2647,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","name":"Required.params"}},{"id":2742,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.path"}},{"id":2744,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Required.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2736,2737,2738,2739,2743,2745,2746,2735,2747,2740,2741,2742,2744]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":130,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2720,"name":"CommandConfig"}],"name":"Required"}],"extendedBy":[{"type":"reference","id":2748,"name":"CommandMetadata"}],"permalink":"/api/cli/interface/CommandStaticConfig","previousId":2748,"nextId":2764},{"id":2764,"name":"Commandable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2765,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":141,"character":1}],"signatures":[{"id":2766,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}]}],"name":"Promise"}}]},{"id":2767,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":142,"character":1}],"signatures":[{"id":2768,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2748,"name":"CommandMetadata"}}]},{"id":2769,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":143,"character":1}],"signatures":[{"id":2770,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2648,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ParserOptions"}}]},{"id":2771,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":144,"character":1}],"signatures":[{"id":2772,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2773,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":145,"character":1}],"signatures":[{"id":2774,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2775,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"JSXElementConstructor"}]}],"name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]},{"id":2776,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":146,"character":1}],"signatures":[{"id":2777,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2778,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2718,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2718,"name":"RunResult"}],"name":"Promise"}]}}]}],"groups":[{"title":"Methods","kind":2048,"children":[2765,2767,2769,2771,2773,2776]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":140,"character":17}],"typeParameter":[{"id":2779,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"any"}},{"id":2780,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"implementedBy":[{"type":"reference","id":2253,"name":"Command"}],"permalink":"/api/cli/interface/Commandable","previousId":2734,"nextId":2838},{"id":2838,"name":"ConfirmProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2839,"name":"invalidError","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Error message to display when an invalid character is pressed. Defaults to a custom message."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":12,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2842,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"Omit.label"}},{"id":2840,"name":"no","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a falsy state when pressed. Defaults to \\"N\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2843,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.prefix"}},{"id":2841,"name":"yes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a truthy state when pressed. Defaults to \\"y\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2844,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2845,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2846,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"groups":[{"title":"Properties","kind":1024,"children":[2839,2842,2840,2843,2841]},{"title":"Methods","kind":2048,"children":[2844]}],"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":10,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"PromptProps"},{"type":"literal","value":"validate"}],"name":"Omit"}],"permalink":"/api/cli/interface/ConfirmProps","previousId":2764,"nextId":2847},{"id":2847,"name":"FailureProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2848,"name":"binName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the binary being executed."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2849,"name":"commandLine","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Full length command line being ran."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2850,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":23,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2851,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The primary error to display in red."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":25,"character":1}],"type":{"type":"reference","name":"Error"}},{"id":2852,"name":"hideStackTrace","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the primary error stack trace. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":27,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2853,"name":"warnings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Optional errors as warnings to display in yellow."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":29,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}}],"groups":[{"title":"Properties","kind":1024,"children":[2848,2849,2850,2851,2852,2853]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":17,"character":17}],"permalink":"/api/cli/interface/FailureProps","previousId":2838,"nextId":2576},{"id":2576,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2578,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":2577,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":123,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":2581,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":2582,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":2583,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":2579,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":2580,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2578,2577,2581,2582,2583,2579,2580]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":122,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2604,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"name":"Omit"}],"permalink":"/api/cli/interface/Flag","previousId":2847,"nextId":2684},{"id":2684,"name":"GlobalOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2685,"name":"help","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":58,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2686,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":59,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2687,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":60,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2685,2686,2687]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":57,"character":17}],"permalink":"/api/cli/interface/GlobalOptions","previousId":2576,"nextId":2874},{"id":2874,"name":"HeaderProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2875,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Text to display for the label."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2877,"name":"marginBottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The top margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2876,"name":"marginTop","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The bottom margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2878,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Customize the background color using Style. Defaults to normal text."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":15,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2833,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2875,2877,2876,2878]}],"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":7,"character":17}],"permalink":"/api/cli/interface/HeaderProps","previousId":2684,"nextId":2882},{"id":2882,"name":"HelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2883,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of categories to use for command and option grouping."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":33,"character":1}],"type":{"type":"reference","id":2692,"name":"Categories"}},{"id":2885,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of commands, typically sub-commands."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":37,"character":1}],"type":{"type":"reference","id":2733,"name":"CommandConfigMap"}},{"id":2884,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Configuration metadata about the current command."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":35,"character":1}],"type":{"type":"reference","id":2720,"name":"CommandConfig"}},{"id":2886,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2887,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A header to display at the top of the output."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":41,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2888,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of command options."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":43,"character":1}],"type":{"type":"reference","id":2628,"name":"OptionConfigMap"}},{"id":2889,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of command params."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":45,"character":1}],"type":{"type":"reference","id":2647,"name":"ParamConfigList"}}],"groups":[{"title":"Properties","kind":1024,"children":[2883,2885,2884,2886,2887,2888,2889]}],"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":31,"character":17}],"permalink":"/api/cli/interface/HelpProps","previousId":2874,"nextId":2897},{"id":2897,"name":"IndexHelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2899,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2700,"name":"ProgramOptions.banner"}},{"id":2900,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":79,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2701,"name":"ProgramOptions.bin"}},{"id":2898,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":8,"character":1}],"type":{"type":"reference","name":"ReactNode"}},{"id":2901,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":81,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2702,"name":"ProgramOptions.delimiter"}},{"id":2902,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":83,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2703,"name":"ProgramOptions.footer"}},{"id":2903,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":85,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2704,"name":"ProgramOptions.header"}},{"id":2904,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":87,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2705,"name":"ProgramOptions.name"}},{"id":2905,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":89,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2706,"name":"ProgramOptions.version"}}],"groups":[{"title":"Properties","kind":1024,"children":[2899,2900,2898,2901,2902,2903,2904,2905]}],"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":2699,"name":"ProgramOptions"}],"permalink":"/api/cli/interface/IndexHelpProps","previousId":2882,"nextId":2909},{"id":2909,"name":"InputProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2910,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A default value. If none provided, will use an empty state."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2911,"name":"hideCursor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the cursor in the terminal. Will remove the background color, but still functions."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2917,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2912,"name":"mask","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mask to replace every inputted character with."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2916,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom string to display when the value is empty and non-dirty."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2918,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2913,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":15,"character":1}],"signatures":[{"id":2914,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value changes."},"parameters":[{"id":2915,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2919,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2920,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2921,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2922,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2923,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2924,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2910,2911,2917,2912,2916,2918]},{"title":"Methods","kind":2048,"children":[2913,2919,2922]}],"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"PromptProps"}],"permalink":"/api/cli/interface/InputProps","previousId":2897,"nextId":2929},{"id":2929,"name":"MultiSelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2930,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of option values selected by default."},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}},"overwrites":{"type":"reference","id":2975,"name":"SelectProps.defaultSelected"}},{"id":2935,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","id":2977,"name":"SelectProps.label"}},{"id":2943,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":2985,"name":"SelectProps.limit"}},{"id":2934,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","name":"T"},{"type":"reference","id":2960,"typeArguments":[{"type":"reference","name":"T"}],"name":"SelectOptionLike"}]}},"inheritedFrom":{"type":"reference","id":2976,"name":"SelectProps.options"}},{"id":2944,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2986,"name":"SelectProps.overflowAfterLabel"}},{"id":2945,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2987,"name":"SelectProps.overflowBeforeLabel"}},{"id":2936,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2978,"name":"SelectProps.prefix"}},{"id":2946,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","id":2988,"name":"SelectProps.scrollType"}},{"id":2931,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":17,"character":1}],"signatures":[{"id":2932,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when a value is selected or unselected."},"parameters":[{"id":2933,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2937,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2938,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2939,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2980,"name":"SelectProps.onSubmit"}}],"inheritedFrom":{"type":"reference","id":2979,"name":"SelectProps.onSubmit"}},{"id":2940,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2941,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2942,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2983,"name":"SelectProps.validate"}}],"inheritedFrom":{"type":"reference","id":2982,"name":"SelectProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2930,2935,2943,2934,2944,2945,2936,2946]},{"title":"Methods","kind":2048,"children":[2931,2937,2940]}],"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":13,"character":17}],"typeParameter":[{"id":2947,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":2974,"typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T"}},{"type":"reference","name":"T"}],"name":"SelectProps"}],"permalink":"/api/cli/interface/MultiSelectProps","previousId":2909,"nextId":2585},{"id":2585,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2586,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":117,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2589,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2605,"name":"Option.category"}},{"id":2587,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":118,"character":4}],"type":{"type":"reference","name":"T"},"overwrites":{"type":"reference","id":2607,"name":"Option.default"}},{"id":2600,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2617,"name":"Option.deprecated"}},{"id":2601,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2618,"name":"Option.description"}},{"id":2591,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2592,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2593,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2594,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":2608,"name":"Option.format"}},{"id":2602,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2619,"name":"Option.hidden"}},{"id":2588,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":120,"character":4}],"type":{"type":"literal","value":true}},{"id":2590,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2606,"name":"Option.short"}},{"id":2595,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2612,"name":"Option.type"}},{"id":2596,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2597,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2598,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2599,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":2613,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2586,2589,2587,2600,2601,2591,2602,2588,2590,2595,2596]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":115,"character":17}],"typeParameter":[{"id":2603,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2584,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":2604,"typeArguments":[{"type":"reference","name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/MultipleOption","previousId":2929,"nextId":2604},{"id":2604,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2605,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2607,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2617,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2618,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2608,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2609,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2610,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2611,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2619,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2606,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"}},{"id":2612,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2613,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2614,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2615,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2616,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2605,2607,2617,2618,2608,2619,2606,2612,2613]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":102,"character":17}],"typeParameter":[{"id":2620,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2679,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":2585,"name":"MultipleOption"},{"type":"reference","id":2659,"name":"SingleOption"}],"permalink":"/api/cli/interface/Option","previousId":2585,"nextId":2629},{"id":2629,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2632,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2642,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2643,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2633,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2634,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2635,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2636,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2644,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2630,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":127,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2631,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":130,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2637,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2638,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2639,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2640,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2641,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2632,2642,2643,2633,2644,2630,2631,2637,2638]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":125,"character":17}],"typeParameter":[{"id":2645,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2657,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Arg"}],"permalink":"/api/cli/interface/Param","previousId":2604,"nextId":2648},{"id":2648,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2649,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":63,"character":4}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"CommandChecker"}]}},{"id":2652,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":55,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.loose"}},{"id":2650,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"O"}],"name":"MapOptionConfig"}},{"id":2651,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":67,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamConfig"}},{"id":2653,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":57,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.unknown"}},{"id":2654,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":59,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[2649,2652,2650,2651,2653,2654]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":61,"character":17}],"typeParameter":[{"id":2655,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2656,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}},"default":{"type":"reference","id":2562,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","name":"ParserSettings"}],"permalink":"/api/cli/interface/ParserOptions","previousId":2629,"nextId":2711},{"id":2711,"name":"ProgramContextType","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2712,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":99,"character":1}],"type":{"type":"reference","id":2694,"name":"ExitHandler"}},{"id":2713,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":100,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2714,"name":"program","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":101,"character":1}],"type":{"type":"reference","id":2699,"name":"ProgramOptions"}}],"groups":[{"title":"Properties","kind":1024,"children":[2712,2713,2714]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":98,"character":17}],"permalink":"/api/cli/interface/ProgramContextType","previousId":2648,"nextId":2699},{"id":2699,"name":"ProgramOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2700,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2701,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":79,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2702,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":81,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2703,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":83,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2704,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":85,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2705,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":87,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2706,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":89,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2700,2701,2702,2703,2704,2705,2706]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":75,"character":17}],"extendedBy":[{"type":"reference","id":2897,"name":"IndexHelpProps"}],"permalink":"/api/cli/interface/ProgramOptions","previousId":2711,"nextId":2707},{"id":2707,"name":"ProgramStreams","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2708,"name":"stderr","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":93,"character":1}],"type":{"type":"reference","name":"WriteStream"}},{"id":2709,"name":"stdin","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":94,"character":1}],"type":{"type":"reference","name":"ReadStream"}},{"id":2710,"name":"stdout","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":95,"character":1}],"type":{"type":"reference","name":"WriteStream"}}],"groups":[{"title":"Properties","kind":1024,"children":[2708,2709,2710]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":92,"character":17}],"permalink":"/api/cli/interface/ProgramStreams","previousId":2699,"nextId":2781},{"id":2781,"name":"ProxyCommandConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2788,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":114,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"Omit.aliases"}},{"id":2789,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":116,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.allowUnknownOptions"}},{"id":2790,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":118,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","name":"Omit.allowVariadicParams"}},{"id":2791,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":120,"character":1}],"type":{"type":"reference","id":2692,"name":"Categories"},"inheritedFrom":{"type":"reference","name":"Omit.categories"}},{"id":2784,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":2785,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":2786,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":2787,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":2782,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":153,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"O"}],"name":"MapOptionConfig"}},{"id":2783,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":154,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"P"}],"name":"MapParamConfig"}},{"id":2792,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Omit.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2788,2789,2790,2791,2784,2785,2786,2787,2782,2783,2792]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":151,"character":17}],"typeParameter":[{"id":2793,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2794,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2720,"name":"CommandConfig"},{"type":"union","types":[{"type":"literal","value":"options"},{"type":"literal","value":"params"},{"type":"literal","value":"path"}]}],"name":"Omit"}],"permalink":"/api/cli/interface/ProxyCommandConfig","previousId":2707,"nextId":2968},{"id":2968,"name":"SelectOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2969,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2970,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2971,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":19,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]}},{"id":2972,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":20,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2969,2970,2971,2972]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":16,"character":17}],"typeParameter":[{"id":2973,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/cli/interface/SelectOption","previousId":2781,"nextId":2974},{"id":2974,"name":"SelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2975,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Option value selected by default."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":25,"character":1}],"type":{"type":"reference","name":"T"}},{"id":2977,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2985,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.limit"}},{"id":2976,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","name":"V"},{"type":"reference","id":2960,"typeArguments":[{"type":"reference","name":"V"}],"name":"SelectOptionLike"}]}}},{"id":2986,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowAfterLabel"}},{"id":2987,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowBeforeLabel"}},{"id":2978,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2988,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.scrollType"}},{"id":2979,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2980,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2981,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2982,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2983,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2984,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2975,2977,2985,2976,2986,2987,2978,2988]},{"title":"Methods","kind":2048,"children":[2979,2982]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":23,"character":17}],"typeParameter":[{"id":2989,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}},{"id":2990,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"T"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"PromptProps"},{"type":"reference","name":"ScrollableListProps"}],"extendedBy":[{"type":"reference","id":2929,"name":"MultiSelectProps"}],"permalink":"/api/cli/interface/SelectProps","previousId":2968,"nextId":2659},{"id":2659,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2663,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2605,"name":"Option.category"}},{"id":2660,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":110,"character":4}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"id":2661,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":112,"character":4}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":2662,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":113,"character":4}],"type":{"type":"reference","name":"T"},"overwrites":{"type":"reference","id":2607,"name":"Option.default"}},{"id":2674,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2617,"name":"Option.deprecated"}},{"id":2675,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2618,"name":"Option.description"}},{"id":2665,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2666,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2667,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2668,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]}}]},"inheritedFrom":{"type":"reference","id":2608,"name":"Option.format"}},{"id":2676,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2619,"name":"Option.hidden"}},{"id":2664,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2606,"name":"Option.short"}},{"id":2669,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2612,"name":"Option.type"}},{"id":2670,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An optional function to validate the provided value."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2671,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2672,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2673,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}}]},"inheritedFrom":{"type":"reference","id":2613,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2663,2660,2661,2662,2674,2675,2665,2676,2664,2669,2670]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":108,"character":17}],"typeParameter":[{"id":2677,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2658,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":2604,"typeArguments":[{"type":"reference","name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/SingleOption","previousId":2974,"nextId":2994},{"id":2994,"name":"StyleProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2995,"name":"children","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":7,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"ReactChild"},{"type":"reference","name":"ReactFragment"},{"type":"reference","name":"ReactPortal"}]}},{"id":2996,"name":"inverted","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Invert the colors to style the background instead of foreground. Defaults\\nto `false`."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":10,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2997,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Theme palette name to style with. Defaults to \\"none\\"."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2833,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2995,2996,2997]}],"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":6,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"TextProps"},{"type":"union","types":[{"type":"literal","value":"bold"},{"type":"literal","value":"italic"},{"type":"literal","value":"underline"},{"type":"literal","value":"wrap"}]}],"name":"Pick"}],"permalink":"/api/cli/interface/StyleProps","previousId":2659,"nextId":2210},{"id":2562,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":2,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ArgList","nextId":2572},{"id":2572,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":1,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#Argv","previousId":2562,"nextId":2240},{"id":2240,"name":"CLIErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":23,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/cli#CLIErrorCode","previousId":2572,"nextId":2692},{"id":2692,"name":"Categories","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":67,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"reference","id":2573,"name":"Category"},{"type":"intrinsic","name":"string"}]}],"name":"Record"},"permalink":"/api/cli#Categories","previousId":2240,"nextId":2424},{"id":2424,"name":"CategoryItemMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":3,"character":12}],"typeParameter":[{"id":2428,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":2425,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2426,"name":"items","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":6,"character":2}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"id":2427,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2426,2427]}],"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":5,"character":1}]}}],"name":"Record"},"permalink":"/api/cli#CategoryItemMap","previousId":2692,"nextId":2733},{"id":2733,"name":"CommandConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2720,"name":"CommandConfig"}],"name":"Record"},"permalink":"/api/cli#CommandConfigMap","previousId":2424,"nextId":2763},{"id":2763,"name":"CommandMetadataMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":138,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2748,"name":"CommandMetadata"}],"name":"Record"},"permalink":"/api/cli#CommandMetadataMap","previousId":2733,"nextId":2719},{"id":2719,"name":"CommandPath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":110,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/cli#CommandPath","previousId":2763,"nextId":2693},{"id":2693,"name":"ExitCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":71,"character":12}],"type":{"type":"intrinsic","name":"number"},"permalink":"/api/cli#ExitCode","previousId":2719,"nextId":2694},{"id":2694,"name":"ExitHandler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":73,"character":12}],"type":{"type":"reflection","declaration":{"id":2695,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":73,"character":26}],"signatures":[{"id":2696,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2697,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"Error"},{"type":"intrinsic","name":"string"}]}},{"id":2698,"name":"code","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2693,"name":"ExitCode"}}],"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/cli#ExitHandler","previousId":2693,"nextId":2893},{"id":2893,"name":"HiddenInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2909,"name":"InputProps"},{"type":"union","types":[{"type":"literal","value":"hideCursor"},{"type":"literal","value":"mask"}]}],"name":"Omit"},"permalink":"/api/cli#HiddenInputProps","previousId":2694,"nextId":2584},{"id":2584,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":3,"character":20}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/cli#ListType","previousId":2893,"nextId":2827},{"id":2827,"name":"Middleware","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":181,"character":12}],"type":{"type":"reflection","declaration":{"id":2828,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":181,"character":25}],"signatures":[{"id":2829,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2830,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2572,"name":"Argv"}},{"id":2831,"name":"parse","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2823,"name":"MiddlewareCallback"}},{"id":2832,"name":"logger","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Loggable"}}],"type":{"type":"union","types":[{"type":"reference","id":2822,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2822,"name":"MiddlewareArguments"}],"name":"Promise"}]}}]}},"permalink":"/api/cli#Middleware","previousId":2584,"nextId":2822},{"id":2822,"name":"MiddlewareArguments","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":177,"character":12}],"type":{"type":"reference","id":2563,"typeArguments":[{"type":"reference","id":2684,"name":"GlobalOptions"},{"type":"reference","id":2562,"name":"ArgList"}],"name":"Arguments"},"permalink":"/api/cli#MiddlewareArguments","previousId":2827,"nextId":2823},{"id":2823,"name":"MiddlewareCallback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":179,"character":12}],"type":{"type":"reflection","declaration":{"id":2824,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":179,"character":33}],"signatures":[{"id":2825,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2826,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2572,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":2822,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2822,"name":"MiddlewareArguments"}],"name":"Promise"}]}}]}},"permalink":"/api/cli#MiddlewareCallback","previousId":2822,"nextId":2621},{"id":2621,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":20}],"type":{"type":"intersection","types":[{"type":"reference","id":2604,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":2622,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2623,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":138,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2624,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":139,"character":4}],"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}}},{"id":2625,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":140,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2626,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":141,"character":4}],"type":{"type":"reference","id":2679,"name":"ValueType"}},{"id":2627,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":142,"character":4}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2623,2624,2625,2626,2627]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":49}]}}]},"permalink":"/api/cli#OptionConfig","previousId":2823,"nextId":2628},{"id":2628,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":144,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2621,"name":"OptionConfig"}],"name":"Record"},"permalink":"/api/cli#OptionConfigMap","previousId":2621,"nextId":2688},{"id":2688,"name":"Options","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":63,"character":12}],"typeParameter":[{"id":2689,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":2684,"name":"GlobalOptions"}}],"name":"Omit"}],"name":"MapOptionConfig"},"permalink":"/api/cli#Options","previousId":2628,"nextId":2646},{"id":2646,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":146,"character":20}],"type":{"type":"reference","id":2629,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/cli#ParamConfig","previousId":2688,"nextId":2647},{"id":2647,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":147,"character":20}],"type":{"type":"array","elementType":{"type":"reference","id":2646,"name":"ParamConfig"}},"permalink":"/api/cli#ParamConfigList","previousId":2646,"nextId":2690},{"id":2690,"name":"Params","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":65,"character":12}],"typeParameter":[{"id":2691,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"MapParamConfig"},"permalink":"/api/cli#Params","previousId":2647,"nextId":2680},{"id":2680,"name":"PartialConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":53,"character":12}],"typeParameter":[{"id":2681,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"},{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"description"},{"type":"literal","value":"multiple"},{"type":"literal","value":"path"},{"type":"literal","value":"type"}]}],"name":"Omit"},"permalink":"/api/cli#PartialConfig","previousId":2690,"nextId":2951},{"id":2951,"name":"PasswordInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2909,"name":"InputProps"},{"type":"literal","value":"mask"}],"name":"Omit"},"permalink":"/api/cli#PasswordInputProps","previousId":2680,"nextId":2657},{"id":2657,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":5,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2658,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/cli#PrimitiveType","previousId":2951,"nextId":2715},{"id":2715,"name":"ProgramBootstrap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":104,"character":12}],"type":{"type":"reflection","declaration":{"id":2716,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":104,"character":31}],"signatures":[{"id":2717,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/cli#ProgramBootstrap","previousId":2657,"nextId":2795},{"id":2795,"name":"ProxyCommandRunner","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":157,"character":12}],"typeParameter":[{"id":2801,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2802,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}}}],"type":{"type":"reflection","declaration":{"id":2796,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":157,"character":78}],"signatures":[{"id":2797,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2798,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"O"}},{"id":2799,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"P"}},{"id":2800,"name":"rest","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2718,"name":"RunResult"}],"name":"Promise"},{"type":"reference","id":2718,"name":"RunResult"}]}}]}},"permalink":"/api/cli#ProxyCommandRunner","previousId":2715,"nextId":2718},{"id":2718,"name":"RunResult","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":108,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"React.ReactElement"},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"void"}]},"permalink":"/api/cli#RunResult","previousId":2795,"nextId":2658},{"id":2658,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":4,"character":20}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/cli#ScalarType","previousId":2718,"nextId":2960},{"id":2960,"name":"SelectOptionLike","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":12,"character":12}],"typeParameter":[{"id":2967,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2961,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2962,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":5}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2963,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":23}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"React.ReactNode"}],"name":"NonNullable"}}],"groups":[{"title":"Properties","kind":1024,"children":[2962,2963]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":3}]}},{"type":"reflection","declaration":{"id":2964,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2965,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":5}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"React.ReactNode"}],"name":"NonNullable"}},{"id":2966,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":42}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2965,2966]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":3}]}}]},"permalink":"/api/cli#SelectOptionLike","previousId":2658,"nextId":2833},{"id":2833,"name":"StyleType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":189,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"failure"},{"type":"literal","value":"info"},{"type":"literal","value":"inverted"},{"type":"literal","value":"muted"},{"type":"literal","value":"notice"},{"type":"literal","value":"success"},{"type":"literal","value":"warning"}]},"permalink":"/api/cli#StyleType","previousId":2960,"nextId":2803},{"id":2803,"name":"TaskContext","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":165,"character":12}],"typeParameter":[{"id":2821,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2684,"name":"GlobalOptions"},"default":{"type":"reference","id":2684,"name":"GlobalOptions"}}],"type":{"type":"intersection","types":[{"type":"reference","name":"O"},{"type":"reflection","declaration":{"id":2804,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2805,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":166,"character":1}],"type":{"type":"reference","id":2694,"name":"ExitHandler"}},{"id":2806,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":167,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2807,"name":"rest","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":168,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2808,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":169,"character":1}],"type":{"type":"reference","id":2678,"name":"UnknownOptionMap"}},{"id":2809,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":171,"character":1}],"signatures":[{"id":2810,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2811,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2572,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise"}}]},{"id":2812,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":172,"character":1}],"signatures":[{"id":2813,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2814,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":2815,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2816,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2817,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2818,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2819,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}}},{"id":2820,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2805,2806,2807,2808]},{"title":"Methods","kind":2048,"children":[2809,2812]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":165,"character":71}]}}]},"permalink":"/api/cli#TaskContext","previousId":2833,"nextId":2834},{"id":2834,"name":"ThemePalette","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":199,"character":12}],"type":{"type":"mapped","parameter":"T","parameterType":{"type":"reference","id":2833,"name":"StyleType"},"templateType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ThemePalette","previousId":2803,"nextId":2678},{"id":2678,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":8,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/cli#UnknownOptionMap","previousId":2834,"nextId":2679},{"id":2679,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":6,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2584,"name":"ListType"},{"type":"reference","id":2657,"name":"PrimitiveType"}]},"permalink":"/api/cli#ValueType","previousId":2678,"nextId":2682},{"id":2682,"name":"Writeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":55,"character":12}],"typeParameter":[{"id":2683,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"mapped","parameter":"P","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"T"}},"templateType":{"type":"indexedAccess","indexType":{"type":"reference","name":"P"},"objectType":{"type":"reference","name":"T"}},"readonlyModifier":"-"},"permalink":"/api/cli#Writeable","previousId":2679,"nextId":2241},{"id":2241,"name":"CLIError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":25,"character":13}],"type":{"type":"reflection","declaration":{"id":2242,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2243,"name":"new CLIError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2244,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}},{"id":2245,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/cli#CLIError","previousId":34,"nextId":2379},{"id":2379,"name":"DELIMITER","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":38,"character":13}],"type":{"type":"literal","value":"$ "},"defaultValue":"\'$ \'","permalink":"/api/cli#DELIMITER","previousId":2241,"nextId":2371},{"id":2371,"name":"EXIT_FAIL","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":11,"character":13}],"type":{"type":"reference","id":2693,"name":"ExitCode"},"defaultValue":"1","permalink":"/api/cli#EXIT_FAIL","previousId":2379,"nextId":2370},{"id":2370,"name":"EXIT_PASS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":10,"character":13}],"type":{"type":"reference","id":2693,"name":"ExitCode"},"defaultValue":"0","permalink":"/api/cli#EXIT_PASS","previousId":2371,"nextId":2372},{"id":2372,"name":"INTERNAL_OPTIONS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":13,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":2372,"name":"INTERNAL_OPTIONS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_OPTIONS","previousId":2370,"nextId":2373},{"id":2373,"name":"INTERNAL_PARAMS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":14,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":2373,"name":"INTERNAL_PARAMS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PARAMS","previousId":2372,"nextId":2374},{"id":2374,"name":"INTERNAL_PROGRAM","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":15,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":2374,"name":"INTERNAL_PROGRAM"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PROGRAM","previousId":2373,"nextId":2369},{"id":2369,"name":"LOCALE_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#LOCALE_FORMAT","previousId":2374,"nextId":3033},{"id":3033,"name":"ProgramContext","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/ProgramContext.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2711,"name":"ProgramContextType"}],"name":"Context"},"defaultValue":"...","permalink":"/api/cli#ProgramContext","previousId":2369,"nextId":2375},{"id":2375,"name":"RESERVED_OPTIONS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":17,"character":13}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"...","permalink":"/api/cli#RESERVED_OPTIONS","previousId":3033,"nextId":2376},{"id":2376,"name":"SPACING_COL","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":34,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_COL","previousId":2375,"nextId":2377},{"id":2377,"name":"SPACING_COL_WIDE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":35,"character":13}],"type":{"type":"literal","value":2},"defaultValue":"2","permalink":"/api/cli#SPACING_COL_WIDE","previousId":2376,"nextId":2378},{"id":2378,"name":"SPACING_ROW","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":36,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_ROW","previousId":2377,"nextId":2368},{"id":2368,"name":"VERSION_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#VERSION_FORMAT","previousId":2378},{"id":2235,"name":"Config","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Config.ts","line":16,"character":16}],"signatures":[{"id":2236,"name":"Config","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A class decorator for defining the following metadata on a `Command`.\\n- path\\n- description\\n- aliases\\n- allowUnknownOptions\\n- allowVariadicParams\\n- categories\\n- category\\n- deprecated\\n- hidden\\n- usage"},"parameters":[{"id":2237,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2238,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2239,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2680,"typeArguments":[{"type":"reference","id":2734,"name":"CommandStaticConfig"}],"name":"PartialConfig"}],"name":"Partial"},"defaultValue":"{}"}],"type":{"type":"reference","name":"ClassDecorator"}}],"permalink":"/api/cli/function/Config","previousId":2,"nextId":2835},{"id":2835,"name":"Confirm","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":22,"character":16}],"signatures":[{"id":2836,"name":"Confirm","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a yes/no confirmation prompt."},"parameters":[{"id":2837,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2838,"name":"ConfirmProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Confirm","previousId":2235,"nextId":2871},{"id":2871,"name":"Header","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":21,"character":16}],"signatures":[{"id":2872,"name":"Header","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a header/title within a terminal menu."},"parameters":[{"id":2873,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2874,"name":"HeaderProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Header","previousId":2835,"nextId":2879},{"id":2879,"name":"Help","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":53,"character":16}],"signatures":[{"id":2880,"name":"Help","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for a command.\\nIncludes all sub-commands, options, params, and more."},"parameters":[{"id":2881,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2882,"name":"HelpProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Help","previousId":2871,"nextId":2890},{"id":2890,"name":"HiddenInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":9,"character":16}],"signatures":[{"id":2891,"name":"HiddenInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field that hides its content from the terminal."},"parameters":[{"id":2892,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2893,"name":"HiddenInputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/HiddenInput","previousId":2879,"nextId":2894},{"id":2894,"name":"IndexHelp","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":14,"character":16}],"signatures":[{"id":2895,"name":"IndexHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for the entire program."},"parameters":[{"id":2896,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2897,"name":"IndexHelpProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/IndexHelp","previousId":2890,"nextId":2906},{"id":2906,"name":"Input","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":23,"character":16}],"signatures":[{"id":2907,"name":"Input","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field, allowing the user to enter information."},"parameters":[{"id":2908,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2909,"name":"InputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Input","previousId":2894,"nextId":2925},{"id":2925,"name":"MultiSelect","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":24,"character":16}],"signatures":[{"id":2926,"name":"MultiSelect","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where multiple options can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2927,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2928,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2929,"typeArguments":[{"type":"reference","name":"T"}],"name":"MultiSelectProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/MultiSelect","previousId":2906,"nextId":2948},{"id":2948,"name":"PasswordInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":9,"character":16}],"signatures":[{"id":2949,"name":"PasswordInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field with characters masked with \\"*\\"."},"parameters":[{"id":2950,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2951,"name":"PasswordInputProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/PasswordInput","previousId":2925,"nextId":2956},{"id":2956,"name":"Select","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":55,"character":16}],"signatures":[{"id":2957,"name":"Select","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where a single option can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2958,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":2959,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2974,"typeArguments":[{"type":"reference","name":"T"}],"name":"SelectProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Select","previousId":2948,"nextId":2991},{"id":2991,"name":"Style","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":18,"character":16}],"signatures":[{"id":2992,"name":"Style","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that styles text and backgrounds based on the current Boost theme."},"parameters":[{"id":2993,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2994,"name":"StyleProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/api/cli/function/Style","previousId":2956,"nextId":2380},{"id":2380,"name":"applyMarkdown","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyMarkdown.ts","line":3,"character":16}],"signatures":[{"id":2381,"name":"applyMarkdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2382,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyMarkdown","previousId":2991,"nextId":2383},{"id":2383,"name":"applyStyle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyStyle.ts","line":5,"character":16}],"signatures":[{"id":2384,"name":"applyStyle","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2385,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2386,"name":"type","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2833,"name":"StyleType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyStyle","previousId":2380,"nextId":2438},{"id":2438,"name":"checkNodeRequirement","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkNodeRequirement.ts","line":8,"character":16}],"signatures":[{"id":2439,"name":"checkNodeRequirement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that the currently running Node.js process.version satisfies the given semver range.\\nIf not, a console error will be logged, or an error will be thrown."},"parameters":[{"id":2440,"name":"range","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2441,"name":"throws","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":2827,"name":"Middleware"}}],"permalink":"/api/cli/function/checkNodeRequirement","previousId":2383,"nextId":2442},{"id":2442,"name":"checkPackageOutdated","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkPackageOutdated.ts","line":33,"character":16}],"signatures":[{"id":2443,"name":"checkPackageOutdated","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that a package and its provided version is using the latest distribution\\nversion by checking against the npm registry. If not, a console message will be logged."},"parameters":[{"id":2444,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2445,"name":"version","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2827,"name":"Middleware"}}],"permalink":"/api/cli/function/checkPackageOutdated","previousId":2438,"nextId":2246},{"id":2246,"name":"createProxyCommand","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/Command.tsx","line":48,"character":16}],"signatures":[{"id":2247,"name":"createProxyCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a proxy command using itself as the super class."},"typeParameter":[{"id":2248,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2684,"name":"GlobalOptions"}},{"id":2249,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}}}],"parameters":[{"id":2250,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2719,"name":"CommandPath"}},{"id":2251,"name":"proxyConfig","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2781,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandConfig"}},{"id":2252,"name":"runner","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2795,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"ProxyCommandRunner"}}],"type":{"type":"reference","id":2253,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Command"}}],"permalink":"/api/cli/function/createProxyCommand","previousId":2442,"nextId":2387},{"id":2387,"name":"formatCommandCall","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatCommandCall.ts","line":4,"character":16}],"signatures":[{"id":2388,"name":"formatCommandCall","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2389,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2390,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2720,"name":"CommandConfig"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatCommandCall","previousId":2246,"nextId":2391},{"id":2391,"name":"formatDescription","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":7,"character":16}],"signatures":[{"id":2392,"name":"formatDescription","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2393,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2394,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2395,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":9,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}}},{"id":2396,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":10,"character":2}],"type":{"type":"reference","id":2657,"name":"PrimitiveType"}},{"id":2398,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":12,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2397,"name":"description","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":11,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2395,2396,2398,2397]}],"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":8,"character":9}]}}},{"id":2399,"name":"tags","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatDescription","previousId":2387,"nextId":2400},{"id":2400,"name":"formatType","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":3,"character":16}],"signatures":[{"id":2401,"name":"formatType","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2402,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2403,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2404,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":5,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":2405,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":6,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2406,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2407,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":8,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2404,2405,2406,2407]}],"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":4,"character":9}]}}},{"id":2408,"name":"inline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatType","previousId":2391,"nextId":2409},{"id":2409,"name":"formatValue","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatValue.ts","line":3,"character":16}],"signatures":[{"id":2410,"name":"formatValue","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2411,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2657,"name":"PrimitiveType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatValue","previousId":2400,"nextId":2412},{"id":2412,"name":"getLongestWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/getLongestWidth.ts","line":3,"character":16}],"signatures":[{"id":2413,"name":"getLongestWidth","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2414,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/cli/function/getLongestWidth","previousId":2409,"nextId":2415},{"id":2415,"name":"groupByCategory","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":16}],"signatures":[{"id":2416,"name":"groupByCategory","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2421,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2417,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2418,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":44}],"type":{"type":"intrinsic","name":"string"}},{"id":2419,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":63}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2420,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":81}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2418,2419,2420]}]}}}],"parameters":[{"id":2422,"name":"items","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","name":"T"}}},{"id":2423,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2692,"name":"Categories"}}],"type":{"type":"reference","id":2424,"typeArguments":[{"type":"reference","name":"T"}],"name":"CategoryItemMap"}}],"permalink":"/api/cli/function/groupByCategory","previousId":2412,"nextId":2429},{"id":2429,"name":"isArgvSize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/isArgvSize.ts","line":4,"character":16}],"signatures":[{"id":2430,"name":"isArgvSize","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2431,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2572,"name":"Argv"}},{"id":2432,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/cli/function/isArgvSize","previousId":2415,"nextId":2433},{"id":2433,"name":"loadTheme","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/loadTheme.ts","line":9,"character":16}],"signatures":[{"id":2434,"name":"loadTheme","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2834,"name":"ThemePalette"}}],"permalink":"/api/cli/function/loadTheme","previousId":2429,"nextId":2435},{"id":2435,"name":"mapCommandMetadata","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/mapCommandMetadata.ts","line":3,"character":16}],"signatures":[{"id":2436,"name":"mapCommandMetadata","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2437,"name":"commands","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2764,"name":"Commandable"}],"name":"Record"}}],"type":{"type":"reference","id":2763,"name":"CommandMetadataMap"}}],"permalink":"/api/cli/function/mapCommandMetadata","previousId":2433,"nextId":2952},{"id":2952,"name":"normalizeOptions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":30,"character":16}],"signatures":[{"id":2953,"name":"normalizeOptions","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2954,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2955,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"indexedAccess","indexType":{"type":"literal","value":"options"},"objectType":{"type":"reference","id":2974,"typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"SelectProps"}}}],"type":{"type":"array","elementType":{"type":"reference","id":2968,"typeArguments":[{"type":"reference","name":"T"}],"name":"SelectOption"}}}],"permalink":"/api/cli/function/normalizeOptions","previousId":2435,"nextId":2998},{"id":2998,"name":"useDimensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":16}],"signatures":[{"id":2999,"name":"useDimensions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reflection","declaration":{"id":3000,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3001,"name":"height","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":35}],"type":{"type":"intrinsic","name":"number"}},{"id":3002,"name":"width","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":51}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[3001,3002]}],"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":33}]}}}],"permalink":"/api/cli/function/useDimensions","previousId":2952,"nextId":3003},{"id":3003,"name":"useIsMounted","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useIsMounted.ts","line":3,"character":16}],"signatures":[{"id":3004,"name":"useIsMounted","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"MutableRefObject"}}],"permalink":"/api/cli/function/useIsMounted","previousId":2998,"nextId":3005},{"id":3005,"name":"useListNavigation","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":3,"character":16}],"signatures":[{"id":3006,"name":"useListNavigation","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3007,"name":"list","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":3008,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3009,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":9}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3010,"name":"divider","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":29}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[3009,3010]}],"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":7}]}}}},{"id":3011,"name":"defaultIndex","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reflection","declaration":{"id":3012,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3013,"name":"highlightedIndex","kind":1024,"kindString":"Property","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":3014,"name":"onKeyDown","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":3015,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3016,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":3017,"name":"onKeyLeft","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":3018,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3019,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":3020,"name":"onKeyRight","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":3021,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3022,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":3023,"name":"onKeyUp","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":3024,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3025,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"groups":[{"title":"Properties","kind":1024,"children":[3013,3014,3017,3020,3023]}]}}}],"permalink":"/api/cli/function/useListNavigation","previousId":3003,"nextId":3026},{"id":3026,"name":"useProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useProgram.ts","line":8,"character":16}],"signatures":[{"id":3027,"name":"useProgram","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2711,"name":"ProgramContextType"}}],"permalink":"/api/cli/function/useProgram","previousId":3005,"nextId":3028},{"id":3028,"name":"useRenderLoop","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":6,"character":16}],"signatures":[{"id":3029,"name":"useRenderLoop","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3030,"name":"fps","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"},"defaultValue":"..."}],"type":{"type":"reflection","declaration":{"id":3031,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":6,"character":58}],"signatures":[{"id":3032,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/cli/function/useRenderLoop","previousId":3026,"nextId":2563}],"groups":[{"title":"Classes","kind":128,"children":[2253,2854,2446]},{"title":"Functions","kind":64,"children":[2235,2835,2871,2879,2890,2894,2906,2925,2948,2956,2991,2380,2383,2438,2442,2246,2387,2391,2400,2409,2412,2415,2429,2433,2435,2952,2998,3003,3005,3026,3028]},{"title":"Interfaces","kind":256,"children":[2563,2573,2720,2748,2734,2764,2838,2847,2576,2684,2874,2882,2897,2909,2929,2585,2604,2629,2648,2711,2699,2707,2781,2968,2974,2659,2994]},{"title":"Namespaces","kind":2,"children":[2210]},{"title":"Type aliases","kind":4194304,"children":[2562,2572,2240,2692,2424,2733,2763,2719,2693,2694,2893,2584,2827,2822,2823,2621,2628,2688,2646,2647,2690,2680,2951,2657,2715,2795,2718,2658,2960,2833,2803,2834,2678,2679,2682]},{"title":"Variables","kind":32,"children":[2241,2379,2371,2370,2372,2373,2374,2369,3033,2375,2376,2377,2378,2368]}],"sources":[{"fileName":"packages/cli/src/index.ts","line":6,"character":0}],"permalink":"/api/cli"},"urlSlug":"cli"},{"index":false,"label":"Components & hooks","reflection":{"id":11,"name":"@boost/cli/react","kind":1,"kindString":"Module","flags":{},"children":[{"id":3034,"name":"Confirm","kind":16777216,"kindString":"Reference","flags":{},"target":2835,"permalink":"/api/cli-react#Confirm","nextId":3035},{"id":3035,"name":"ConfirmProps","kind":16777216,"kindString":"Reference","flags":{},"target":2838,"permalink":"/api/cli-react#ConfirmProps","previousId":3034,"nextId":3037},{"id":3037,"name":"Failure","kind":16777216,"kindString":"Reference","flags":{},"target":2854,"permalink":"/api/cli-react#Failure","previousId":3035,"nextId":3036},{"id":3036,"name":"FailureProps","kind":16777216,"kindString":"Reference","flags":{},"target":2847,"permalink":"/api/cli-react#FailureProps","previousId":3037,"nextId":3038},{"id":3038,"name":"Header","kind":16777216,"kindString":"Reference","flags":{},"target":2871,"permalink":"/api/cli-react#Header","previousId":3036,"nextId":3039},{"id":3039,"name":"HeaderProps","kind":16777216,"kindString":"Reference","flags":{},"target":2874,"permalink":"/api/cli-react#HeaderProps","previousId":3038,"nextId":3040},{"id":3040,"name":"Help","kind":16777216,"kindString":"Reference","flags":{},"target":2879,"permalink":"/api/cli-react#Help","previousId":3039,"nextId":3041},{"id":3041,"name":"HelpProps","kind":16777216,"kindString":"Reference","flags":{},"target":2882,"permalink":"/api/cli-react#HelpProps","previousId":3040,"nextId":3042},{"id":3042,"name":"HiddenInput","kind":16777216,"kindString":"Reference","flags":{},"target":2890,"permalink":"/api/cli-react#HiddenInput","previousId":3041,"nextId":3043},{"id":3043,"name":"HiddenInputProps","kind":16777216,"kindString":"Reference","flags":{},"target":2893,"permalink":"/api/cli-react#HiddenInputProps","previousId":3042,"nextId":3044},{"id":3044,"name":"IndexHelp","kind":16777216,"kindString":"Reference","flags":{},"target":2894,"permalink":"/api/cli-react#IndexHelp","previousId":3043,"nextId":3045},{"id":3045,"name":"IndexHelpProps","kind":16777216,"kindString":"Reference","flags":{},"target":2897,"permalink":"/api/cli-react#IndexHelpProps","previousId":3044,"nextId":3046},{"id":3046,"name":"Input","kind":16777216,"kindString":"Reference","flags":{},"target":2906,"permalink":"/api/cli-react#Input","previousId":3045,"nextId":3047},{"id":3047,"name":"InputProps","kind":16777216,"kindString":"Reference","flags":{},"target":2909,"permalink":"/api/cli-react#InputProps","previousId":3046,"nextId":3048},{"id":3048,"name":"MultiSelect","kind":16777216,"kindString":"Reference","flags":{},"target":2925,"permalink":"/api/cli-react#MultiSelect","previousId":3047,"nextId":3049},{"id":3049,"name":"MultiSelectProps","kind":16777216,"kindString":"Reference","flags":{},"target":2929,"permalink":"/api/cli-react#MultiSelectProps","previousId":3048,"nextId":3050},{"id":3050,"name":"PasswordInput","kind":16777216,"kindString":"Reference","flags":{},"target":2948,"permalink":"/api/cli-react#PasswordInput","previousId":3049,"nextId":3051},{"id":3051,"name":"PasswordInputProps","kind":16777216,"kindString":"Reference","flags":{},"target":2951,"permalink":"/api/cli-react#PasswordInputProps","previousId":3050,"nextId":3064},{"id":3064,"name":"ProgramContext","kind":16777216,"kindString":"Reference","flags":{},"target":3033,"permalink":"/api/cli-react#ProgramContext","previousId":3051,"nextId":3053},{"id":3053,"name":"Select","kind":16777216,"kindString":"Reference","flags":{},"target":2956,"permalink":"/api/cli-react#Select","previousId":3064,"nextId":3055},{"id":3055,"name":"SelectOption","kind":16777216,"kindString":"Reference","flags":{},"target":2968,"permalink":"/api/cli-react#SelectOption","previousId":3053,"nextId":3054},{"id":3054,"name":"SelectOptionLike","kind":16777216,"kindString":"Reference","flags":{},"target":2960,"permalink":"/api/cli-react#SelectOptionLike","previousId":3055,"nextId":3056},{"id":3056,"name":"SelectProps","kind":16777216,"kindString":"Reference","flags":{},"target":2974,"permalink":"/api/cli-react#SelectProps","previousId":3054,"nextId":3057},{"id":3057,"name":"Style","kind":16777216,"kindString":"Reference","flags":{},"target":2991,"permalink":"/api/cli-react#Style","previousId":3056,"nextId":3058},{"id":3058,"name":"StyleProps","kind":16777216,"kindString":"Reference","flags":{},"target":2994,"permalink":"/api/cli-react#StyleProps","previousId":3057,"nextId":3052},{"id":3052,"name":"normalizeOptions","kind":16777216,"kindString":"Reference","flags":{},"target":2952,"permalink":"/api/cli-react#normalizeOptions","previousId":3058,"nextId":3059},{"id":3059,"name":"useDimensions","kind":16777216,"kindString":"Reference","flags":{},"target":2998,"permalink":"/api/cli-react#useDimensions","previousId":3052,"nextId":3060},{"id":3060,"name":"useIsMounted","kind":16777216,"kindString":"Reference","flags":{},"target":3003,"permalink":"/api/cli-react#useIsMounted","previousId":3059,"nextId":3061},{"id":3061,"name":"useListNavigation","kind":16777216,"kindString":"Reference","flags":{},"target":3005,"permalink":"/api/cli-react#useListNavigation","previousId":3060,"nextId":3062},{"id":3062,"name":"useProgram","kind":16777216,"kindString":"Reference","flags":{},"target":3026,"permalink":"/api/cli-react#useProgram","previousId":3061,"nextId":3063},{"id":3063,"name":"useRenderLoop","kind":16777216,"kindString":"Reference","flags":{},"target":3028,"permalink":"/api/cli-react#useRenderLoop","previousId":3062}],"groups":[{"title":"References","kind":16777216,"children":[3034,3035,3037,3036,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3064,3053,3055,3054,3056,3057,3058,3052,3059,3060,3061,3062,3063]}],"sources":[{"fileName":"packages/cli/src/react.ts","line":1,"character":0}],"permalink":"/api/cli-react"},"urlSlug":"cli-react"},{"index":false,"label":"Test utilities","reflection":{"id":12,"name":"@boost/cli/test","kind":1,"kindString":"Module","flags":{},"children":[{"id":54,"name":"MockReadStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":55,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":56,"name":"new MockReadStream","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":54,"name":"MockReadStream"}}]},{"id":57,"name":"isTTY","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"groups":[{"title":"Constructors","kind":512,"children":[55]},{"title":"Properties","kind":1024,"children":[57]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":19,"character":13}],"permalink":"/api/cli-test/class/MockReadStream","nextId":58},{"id":58,"name":"MockWriteStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":59,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":30,"character":1}],"signatures":[{"id":60,"name":"new MockWriteStream","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":61,"name":"append","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":58,"name":"MockWriteStream"}}]},{"id":62,"name":"append","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":63,"name":"columns","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"80"},{"id":64,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":68,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":43,"character":1}],"signatures":[{"id":69,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":72,"name":"off","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":49,"character":1}],"signatures":[{"id":73,"name":"off","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":70,"name":"on","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":47,"character":1}],"signatures":[{"id":71,"name":"on","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":65,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":35,"character":1}],"signatures":[{"id":66,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":67,"name":"string","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[59]},{"title":"Properties","kind":1024,"children":[62,63,64]},{"title":"Methods","kind":2048,"children":[68,72,70,65]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":23,"character":13}],"permalink":"/api/cli-test/class/MockWriteStream","previousId":54,"nextId":16},{"id":16,"name":"mockProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":80,"character":16}],"signatures":[{"id":17,"name":"mockProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a `Program` instance with required options pre-filled and streams mocked\\n(unless manually provided).","text":"```ts\\nimport { mockProgram } from \'@boost/cli/test\';\\n\\nconst program = mockProgram({ name: \'Example\' });\\n```\\n"},"parameters":[{"id":18,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2699,"name":"ProgramOptions"}],"name":"Partial"}},{"id":19,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2707,"name":"ProgramStreams"}}],"type":{"type":"reference","id":2446,"name":"Program"}}],"permalink":"/api/cli-test/function/mockProgram","previousId":1,"nextId":13},{"id":13,"name":"mockStreams","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":62,"character":16}],"signatures":[{"id":14,"name":"mockStreams","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns mocked `stderr`, `stdout`, and `stdin` streams that can be passed to a `Program`.\\nThis does not mock all stream functionality, only those required by Boost and Ink.","text":"```ts\\nimport { mockStreams } from \'@boost/cli/test\';\\n\\nconst streams = mockStreams();\\n```\\n"},"parameters":[{"id":15,"name":"append","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","id":2707,"name":"ProgramStreams"}}],"permalink":"/api/cli-test/function/mockStreams","previousId":16,"nextId":20},{"id":20,"name":"renderComponent","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":109,"character":22}],"signatures":[{"id":21,"name":"renderComponent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to render a React component with Ink and return the rendered result\\nas a terminal compatible string. If `stripped` is true, it will strip ANSI\\nescape escape sequences.","text":"```tsx\\nimport { renderComponent } from \'@boost/cli/test\';\\nimport TestComponent from \'../src/components/TestComponent\';\\n\\nit(\'renders a component\', async () => {\\n\\texpect(await renderComponent(<TestComponent />)).toMatchSnapshot();\\n});\\n```\\n\\n> As an alternative, we also suggest using the official\\n> [ink-testing-library](https://github.com/vadimdemedes/ink-testing-library).\\n"},"parameters":[{"id":22,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"React.ReactElement"}},{"id":23,"name":"stripped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}],"permalink":"/api/cli-test/function/renderComponent","previousId":13,"nextId":24},{"id":24,"name":"runCommand","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":156,"character":22}],"signatures":[{"id":25,"name":"runCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Command` outside the context of a `Program`, but mimics similar functionality,\\nincluding React component rendering. Params are required as they\'re passed to the run method,\\nwhile options are optional and assume class properties have been defined. Also, the `exit`\\nand `log` methods have been mocked with Jest spies so that they can be asserted.","text":"```ts\\nimport { runCommand } from \'@boost/cli/test\';\\nimport TestCommand from \'../src/commands/TestCommand\';\\n\\nit(\'runs a command\', async () => {\\n\\tconst command = new TestCommand();\\n\\n\\texpect(await runCommand(command, [\'foo\', \'bar\', \'baz\'])).toMatchSnapshot();\\n\\texpect(command.log).toHaveBeenCalled();\\n});\\n```\\n\\n> Since there is no `Program` context, any functionality that requires a program will fail. If\\n> needed, use `runProgram()` instead.\\n"},"typeParameter":[{"id":26,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2684,"name":"GlobalOptions"}},{"id":27,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2657,"name":"PrimitiveType"}}}],"parameters":[{"id":28,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2253,"typeArguments":[{"type":"reference","name":"O"},{"type":"reference","name":"P"}],"name":"Command"}},{"id":29,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"P"}},{"id":30,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"O"}],"name":"Partial"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise"}}],"permalink":"/api/cli-test/function/runCommand","previousId":20,"nextId":43},{"id":43,"name":"runProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":257,"character":22}],"signatures":[{"id":44,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Program` as if it were ran on the command line, including middleware,\\ncommands, success and failure states, and more. Utilizes mocked streams to capture\\nand return standard output and ANSI stripped output. Failed runs will not throw\\nand instead will render a failure output.","text":"```ts\\nimport { runProgram } from \'@boost/cli/test\';\\nimport Program from \'../src/program\';\\n\\nit(\'runs a program\', async () => {\\n\\tconst program = new Program();\\n\\n\\tconst { code, output } = await runProgram(program, [\'cmd\', \'--foo\', \'123\', \'bar\']);\\n\\n\\texpect(output).toMatchSnapshot();\\n\\texpect(code).toBe(0);\\n});\\n```\\n"},"parameters":[{"id":45,"name":"program","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2446,"name":"Program"}},{"id":46,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":47,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":48,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":49,"name":"append","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/test.ts","line":260,"character":12}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[49]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":260,"character":10}]}},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":50,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":51,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":13}],"type":{"type":"reference","id":2693,"name":"ExitCode"}},{"id":52,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":29}],"type":{"type":"intrinsic","name":"string"}},{"id":53,"name":"outputStripped","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":45}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[51,52,53]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":11}]}}],"name":"Promise"}}],"permalink":"/api/cli-test/function/runProgram","previousId":24,"nextId":31},{"id":31,"name":"runTask","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":205,"character":16}],"signatures":[{"id":32,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a task function outside the context of a `Command`, in complete isolation.\\nA mock command context is provided with standard defaults, and can be customized\\nthrough the 3rd argument.","text":"```ts\\nimport { runTask } from \'@boost/cli/test\';\\nimport testTask from \'../src/tasks/testTask\';\\n\\nit(\'runs a task\', async () => {\\n\\tconst context = {\\n\\t\\tlog: jest.fn(),\\n\\t};\\n\\n\\texpect(await runTask(testTask, [\'foo\', \'bar\', \'baz\'], context)).toMatchSnapshot();\\n\\texpect(context.log).toHaveBeenCalled();\\n});\\n```\\n"},"typeParameter":[{"id":33,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":34,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}},{"id":35,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2803,"typeArguments":[{"type":"reference","id":2684,"name":"GlobalOptions"}],"name":"TaskContext"}}],"parameters":[{"id":36,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":37,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":206,"character":7}],"signatures":[{"id":38,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":39,"name":"this","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":40,"name":"argz","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}}},{"id":41,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A"}},{"id":42,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}}],"type":{"type":"reference","name":"R"}}],"permalink":"/api/cli-test/function/runTask","previousId":43}],"groups":[{"title":"Classes","kind":128,"children":[54,58]},{"title":"Functions","kind":64,"children":[16,13,20,24,43,31]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":3,"character":0}],"permalink":"/api/cli-test"},"urlSlug":"cli-test"}],"packageName":"@boost/cli","packageVersion":"2.11.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":2,"name":"@boost/common","kind":1,"kindString":"Module","flags":{},"children":[{"id":317,"name":"json","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":332,"name":"JSONStringifyOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":334,"name":"quote","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":7,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":335,"name":"replacer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":8,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},{"type":"reflection","declaration":{"id":336,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":337,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":338,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":339,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]}},{"id":333,"name":"space","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":6,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[334,335,333]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":5,"character":17}]},{"id":327,"name":"JSONReviver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":3,"character":12}],"type":{"type":"reflection","declaration":{"id":328,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":3,"character":26}],"signatures":[{"id":329,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":330,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":331,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}},{"id":318,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":11,"character":16}],"signatures":[{"id":319,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":320,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":321,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":322,"name":"reviver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":327,"name":"JSONReviver"}}],"type":{"type":"reference","name":"T"}}]},{"id":323,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":15,"character":16}],"signatures":[{"id":324,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":325,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":326,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":332,"name":"JSONStringifyOptions"},"defaultValue":"{}"}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[332]},{"title":"Type aliases","kind":4194304,"children":[327]},{"title":"Functions","kind":64,"children":[318,323]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":1,"character":0}],"permalink":"/api/common/namespace/json","previousId":15,"nextId":340},{"id":340,"name":"yaml","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":341,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":3,"character":16}],"signatures":[{"id":342,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":343,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":344,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":345,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"YAML.Options"}}],"type":{"type":"reference","name":"T"}}]},{"id":346,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":7,"character":16}],"signatures":[{"id":347,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":348,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":349,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"YAML.Options"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Functions","kind":64,"children":[341,346]}],"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":1,"character":0}],"permalink":"/api/common/namespace/yaml","previousId":317,"nextId":598},{"id":587,"name":"LookupType","kind":4,"kindString":"Enumeration","flags":{},"children":[{"id":588,"name":"FILE_SYSTEM","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":15,"character":1}],"defaultValue":"\\"FILE_SYSTEM\\""},{"id":589,"name":"NODE_MODULE","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":16,"character":1}],"defaultValue":"\\"NODE_MODULE\\""}],"groups":[{"title":"Enumeration members","kind":16,"children":[588,589]}],"sources":[{"fileName":"packages/common/src/types.ts","line":14,"character":12}],"permalink":"/api/common/enum/LookupType","previousId":5,"nextId":715},{"id":358,"name":"Contract","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":359,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":8,"character":1}],"signatures":[{"id":360,"name":"new Contract","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":362,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":361,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":363,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","id":358,"typeArguments":[{"type":"reference","name":"T"}],"name":"Contract"}}]},{"id":364,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":6,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}],"name":"Readonly"},"implementationOf":{"type":"reference","id":616,"name":"Optionable.options"}},{"id":371,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":55,"character":10}],"signatures":[{"id":372,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":373,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":374,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":375,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"implementationOf":{"type":"reference","name":"Optionable.blueprint"}}],"implementationOf":{"type":"reference","id":617,"name":"Optionable.blueprint"}},{"id":365,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":28,"character":1}],"signatures":[{"id":366,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":367,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"},{"type":"reflection","declaration":{"id":368,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":369,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":370,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}],"name":"Readonly"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[359]},{"title":"Properties","kind":1024,"children":[364]},{"title":"Methods","kind":2048,"children":[371,365]}],"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":22}],"typeParameter":[{"id":377,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":376,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":50}]}}}],"implementedTypes":[{"type":"reference","id":615,"typeArguments":[{"type":"reference","name":"T"}],"name":"Optionable"}],"permalink":"/api/common/class/Contract","nextId":378},{"id":378,"name":"ExitError","kind":128,"kindString":"Class","flags":{},"children":[{"id":379,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":4,"character":1}],"signatures":[{"id":380,"name":"new ExitError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":381,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":382,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":378,"name":"ExitError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":383,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[379]},{"title":"Properties","kind":1024,"children":[383]}],"sources":[{"fileName":"packages/common/src/ExitError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","name":"Error"}],"permalink":"/api/common/class/ExitError","previousId":358,"nextId":447},{"id":447,"name":"PackageGraph","kind":128,"kindString":"Class","flags":{},"children":[{"id":448,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":24,"character":1}],"signatures":[{"id":449,"name":"new PackageGraph","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":450,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":646,"name":"PackageStructure"},"default":{"type":"reference","id":646,"name":"PackageStructure"}}],"parameters":[{"id":451,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":447,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraph"}}]},{"id":455,"name":"addPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":33,"character":1}],"signatures":[{"id":456,"name":"addPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a package by name with an associated `package.json` object.\\nWill map a dependency between the package and its dependees\\nfound in `dependencies` and `peerDependencies`."},"parameters":[{"id":457,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","id":447,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraph"}}]},{"id":458,"name":"addPackages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":50,"character":1}],"signatures":[{"id":459,"name":"addPackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add multiple packages."},"parameters":[{"id":460,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":447,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraph"}}]},{"id":465,"name":"resolveBatchList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":153,"character":1}],"signatures":[{"id":466,"name":"resolveBatchList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of batched `package.json` objects\\n(array of arrays) in the order they are depended on.","text":"```ts\\ngraph.resolveBatchList().forEach((pkgs) => {\\n\\tpkgs.forEach((pkg) => {\\n\\t\\tconsole.log(pkg.name);\\n\\t});\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"array","elementType":{"type":"reference","name":"T"}}}}]},{"id":461,"name":"resolveList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":68,"character":1}],"signatures":[{"id":462,"name":"resolveList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of all\\n`package.json` objects in the order they are depended on.","text":"```ts\\ngraph.resolveList().forEach((pkg) => {\\n\\tconsole.log(pkg.name);\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}]},{"id":463,"name":"resolveTree","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":90,"character":1}],"signatures":[{"id":464,"name":"resolveTree","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a tree of nodes for all\\n`package.json` objects and their dependency mappings.","text":"```ts\\ngraph.resolveTree().nodes.forEach((node) => {\\n\\tconsole.log(node.package.name);\\n\\n\\tif (node.nodes) {\\n\\t\\t// Dependents\\n\\t}\\n});\\n```\\n"},"type":{"type":"reference","id":701,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraphTree"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[448]},{"title":"Methods","kind":2048,"children":[455,458,465,461,463]}],"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":17,"character":13}],"typeParameter":[{"id":485,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":646,"name":"PackageStructure"},"default":{"type":"reference","id":646,"name":"PackageStructure"}}],"permalink":"/api/common/class/PackageGraph","previousId":378,"nextId":486},{"id":486,"name":"Path","kind":128,"kindString":"Class","flags":{},"children":[{"id":496,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":12,"character":1}],"signatures":[{"id":497,"name":"new Path","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":498,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":586,"name":"PortablePath"}}}],"type":{"type":"reference","id":486,"name":"Path"}}]},{"id":487,"name":"DELIMITER","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":6,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":488,"name":"SEP","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":8,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'/\'"},{"id":500,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":36,"character":1}],"signatures":[{"id":501,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `Path` instance."},"parameters":[{"id":502,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":586,"name":"PortablePath"}}}],"type":{"type":"reference","id":486,"name":"Path"}}]},{"id":503,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":43,"character":1}],"signatures":[{"id":504,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if both paths are equal using strict equality."},"parameters":[{"id":505,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":509,"name":"exists","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":59,"character":1}],"signatures":[{"id":510,"name":"exists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path exists."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":506,"name":"ext","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":50,"character":1}],"signatures":[{"id":507,"name":"ext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the extension (if applicable) with or without leading period."},"parameters":[{"id":508,"name":"withoutPeriod","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":511,"name":"isAbsolute","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":66,"character":1}],"signatures":[{"id":512,"name":"isAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is absolute."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":513,"name":"isDirectory","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":73,"character":1}],"signatures":[{"id":514,"name":"isDirectory","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a folder."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":515,"name":"isFile","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":80,"character":1}],"signatures":[{"id":516,"name":"isFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a file."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":517,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":87,"character":1}],"signatures":[{"id":518,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the file name (with optional extension) or folder name."},"parameters":[{"id":519,"name":"withoutExtension","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":520,"name":"parent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":100,"character":1}],"signatures":[{"id":521,"name":"parent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the parent folder as a new `Path` instance."},"type":{"type":"reference","id":486,"name":"Path"}}]},{"id":522,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":107,"character":1}],"signatures":[{"id":523,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current path as a normalized string."},"type":{"type":"intrinsic","name":"string"}}]},{"id":524,"name":"prepend","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":115,"character":1}],"signatures":[{"id":525,"name":"prepend","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Prepend path parts to the beginning of the current path\\nand return a new `Path` instance."},"parameters":[{"id":526,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":586,"name":"PortablePath"}}}],"type":{"type":"reference","id":486,"name":"Path"}}]},{"id":527,"name":"realPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":123,"character":1}],"signatures":[{"id":528,"name":"realPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a canonical path by resolving directories and symlinks."},"type":{"type":"intrinsic","name":"string"}}]},{"id":529,"name":"relativeTo","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":131,"character":1}],"signatures":[{"id":530,"name":"relativeTo","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new relative `Path` instance from the current\\n\\"from\\" path to the defined \\"to\\" path."},"parameters":[{"id":531,"name":"to","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","id":486,"name":"Path"}}]},{"id":532,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":139,"character":1}],"signatures":[{"id":533,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new `Path` instance where the current path is accurately\\nresolved against the defined current working directory."},"parameters":[{"id":534,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","id":486,"name":"Path"}}]},{"id":535,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":143,"character":1}],"signatures":[{"id":536,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":537,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":147,"character":1}],"signatures":[{"id":538,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":489,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":21,"character":8}],"signatures":[{"id":490,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `Path` instance if a string.\\nIf already a `Path`, return as is."},"parameters":[{"id":491,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","id":486,"name":"Path"}}]},{"id":492,"name":"resolve","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":28,"character":8}],"signatures":[{"id":493,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `create()` but also resolves the path against CWD."},"parameters":[{"id":494,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}},{"id":495,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","id":486,"name":"Path"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[496]},{"title":"Properties","kind":1024,"children":[487,488]},{"title":"Methods","kind":2048,"children":[500,503,509,506,511,513,515,517,520,522,524,527,529,532,535,537,489,492]}],"sources":[{"fileName":"packages/common/src/Path.ts","line":5,"character":13}],"permalink":"/api/common/class/Path","previousId":447,"nextId":539},{"id":539,"name":"PathResolver","kind":128,"kindString":"Class","flags":{},"children":[{"id":540,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":10,"character":1}],"signatures":[{"id":541,"name":"new PathResolver","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":542,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":594,"name":"ModuleResolver"}}],"type":{"type":"reference","id":539,"name":"PathResolver"}}]},{"id":545,"name":"getLookupPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":17,"character":1}],"signatures":[{"id":546,"name":"getLookupPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all lookup paths."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":547,"name":"lookupFilePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":25,"character":1}],"signatures":[{"id":548,"name":"lookupFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a file system path to look for, resolved against the defined current\\nworking directory (or `process.cwd()` otherwise)."},"parameters":[{"id":549,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}},{"id":550,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","id":539,"name":"PathResolver"}}]},{"id":551,"name":"lookupNodeModule","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":38,"character":1}],"signatures":[{"id":552,"name":"lookupNodeModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a Node.js module, either by name or relative path, to look for."},"parameters":[{"id":553,"name":"modulePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","id":539,"name":"PathResolver"}}]},{"id":554,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":55,"character":1}],"signatures":[{"id":555,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a list of lookups, attempt to find the first real/existing path and\\nreturn a resolved absolute path. If a file system path, will check using `fs.exists`.\\nIf a node module path, will check using `require.resolve`."},"type":{"type":"reflection","declaration":{"id":556,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":557,"name":"originalPath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":56,"character":2}],"type":{"type":"reference","id":486,"name":"Path"}},{"id":558,"name":"resolvedPath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":57,"character":2}],"type":{"type":"reference","id":486,"name":"Path"}},{"id":559,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":58,"character":2}],"type":{"type":"reference","id":587,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[557,558,559]}]}}}]},{"id":560,"name":"resolvePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":103,"character":1}],"signatures":[{"id":561,"name":"resolvePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `resolve()` but only returns the resolved path."},"type":{"type":"reference","id":486,"name":"Path"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[540]},{"title":"Methods","kind":2048,"children":[545,547,551,554,560]}],"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":5,"character":13}],"permalink":"/api/common/class/PathResolver","previousId":486,"nextId":564},{"id":564,"name":"Project","kind":128,"kindString":"Class","flags":{},"children":[{"id":565,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":23,"character":1}],"signatures":[{"id":566,"name":"new Project","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":567,"name":"root","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","id":564,"name":"Project"}}]},{"id":568,"name":"root","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":21,"character":10}],"type":{"type":"reference","id":486,"name":"Path"}},{"id":569,"name":"createWorkspaceMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":30,"character":1}],"signatures":[{"id":570,"name":"createWorkspaceMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a workspace metadata object composed of absolute file paths."},"parameters":[{"id":571,"name":"jsonPath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","id":705,"name":"WorkspaceMetadata"}}]},{"id":572,"name":"getPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":48,"character":1}],"signatures":[{"id":573,"name":"getPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the contents of the root `package.json`."},"typeParameter":[{"id":574,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":646,"name":"PackageStructure"}}],"type":{"type":"reference","name":"T"}}]},{"id":575,"name":"getWorkspaceGlobs","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":728,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":64,"character":1}],"signatures":[{"id":576,"name":"getWorkspaceGlobs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace globs as they are configured\\nin `package.json` or `lerna.json`."},"parameters":[{"id":577,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":562,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":581,"name":"getWorkspacePackagePaths","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":728,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":134,"character":1}],"signatures":[{"id":582,"name":"getWorkspacePackagePaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace package paths, resolved against the file system."},"parameters":[{"id":583,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":562,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":578,"name":"getWorkspacePackages","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":728,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":113,"character":1}],"signatures":[{"id":579,"name":"getWorkspacePackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all `package.json`s across all workspaces and their packages.\\nOnce loaded, append workspace path metadata."},"typeParameter":[{"id":580,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":646,"name":"PackageStructure"}}],"type":{"type":"array","elementType":{"type":"reference","id":711,"typeArguments":[{"type":"reference","name":"T"}],"name":"WorkspacePackage"}}}]}],"groups":[{"title":"Constructors","kind":512,"children":[565]},{"title":"Properties","kind":1024,"children":[568]},{"title":"Methods","kind":2048,"children":[569,572,575,581,578]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":20,"character":13}],"permalink":"/api/common/class/Project","previousId":539,"nextId":587},{"id":625,"name":"BugSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":627,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":65,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":626,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":64,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[627,626]}],"sources":[{"fileName":"packages/common/src/types.ts","line":63,"character":17}],"permalink":"/api/common/interface/BugSetting","previousId":18,"nextId":629},{"id":629,"name":"DependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":630,"name":"built","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":71,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":631,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":72,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":632,"name":"unplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":73,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[630,631,632]}],"sources":[{"fileName":"packages/common/src/types.ts","line":70,"character":17}],"permalink":"/api/common/interface/DependencyMetaSetting","previousId":625,"nextId":590},{"id":590,"name":"Lookup","kind":256,"kindString":"Interface","flags":{},"children":[{"id":591,"name":"path","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":20,"character":1}],"type":{"type":"reference","id":486,"name":"Path"}},{"id":592,"name":"raw","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":21,"character":1}],"type":{"type":"reference","id":486,"name":"Path"}},{"id":593,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":22,"character":1}],"type":{"type":"reference","id":587,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[591,592,593]}],"sources":[{"fileName":"packages/common/src/types.ts","line":19,"character":17}],"permalink":"/api/common/interface/Lookup","previousId":629,"nextId":746},{"id":746,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":747,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":9,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":741,"typeArguments":[{"type":"reference","name":"T"}],"name":"MemoizeCache"}]}},{"id":748,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":14,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":749,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":19,"character":4}],"type":{"type":"reference","id":737,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[747,748,749]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":7,"character":17}],"typeParameter":[{"id":750,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/common/interface/MemoizeOptions","previousId":590,"nextId":615},{"id":615,"name":"Optionable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":617,"name":"blueprint","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/types.ts","line":50,"character":1}],"type":{"type":"reference","id":609,"typeArguments":[{"type":"intrinsic","name":"object"}],"name":"BlueprintFactory"}},{"id":616,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/types.ts","line":44,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}}],"groups":[{"title":"Properties","kind":1024,"children":[617,616]}],"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":17}],"typeParameter":[{"id":619,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":618,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":47}]}}}],"implementedBy":[{"type":"reference","id":358,"name":"Contract"}],"permalink":"/api/common/interface/Optionable","previousId":746,"nextId":701},{"id":701,"name":"PackageGraphTree","kind":256,"kindString":"Interface","flags":{},"children":[{"id":702,"name":"nodes","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":163,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":697,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":703,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":164,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[702,703]}],"sources":[{"fileName":"packages/common/src/types.ts","line":162,"character":17}],"typeParameter":[{"id":704,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":646,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTree","previousId":615,"nextId":697},{"id":697,"name":"PackageGraphTreeNode","kind":256,"kindString":"Interface","flags":{},"children":[{"id":698,"name":"nodes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":158,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":697,"typeArguments":[{"type":"reference","name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":699,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":159,"character":1}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[698,699]}],"sources":[{"fileName":"packages/common/src/types.ts","line":157,"character":17}],"typeParameter":[{"id":700,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":646,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTreeNode","previousId":701,"nextId":646},{"id":646,"name":"PackageStructure","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Shape of `package.json`, with support for third-party properties\\nlike Yarn, Webpack, and TypeScript."},"children":[{"id":647,"name":"author","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":100,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":638,"name":"PeopleSetting"}]}},{"id":648,"name":"bin","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":101,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":622,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}},{"id":649,"name":"browser","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":102,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":650,"name":"browserslist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":103,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":651,"name":"bugs","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":104,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":625,"name":"BugSetting"}]}},{"id":652,"name":"bundledDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":105,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":653,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":106,"character":1}],"type":{"type":"reference","id":624,"name":"ConfigSetting"}},{"id":654,"name":"contributors","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":107,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"array","elementType":{"type":"reference","id":638,"name":"PeopleSetting"}}]}},{"id":655,"name":"cpu","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":108,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":656,"name":"dependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":109,"character":1}],"type":{"type":"reference","id":628,"name":"DependencyMap"}},{"id":657,"name":"dependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":110,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":629,"name":"DependencyMetaSetting"}],"name":"Record"}},{"id":658,"name":"description","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":659,"name":"devDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":112,"character":1}],"type":{"type":"reference","id":628,"name":"DependencyMap"}},{"id":660,"name":"directories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":113,"character":1}],"type":{"type":"reference","id":622,"typeArguments":[{"type":"union","types":[{"type":"literal","value":"bin"},{"type":"literal","value":"doc"},{"type":"literal","value":"example"},{"type":"literal","value":"lib"},{"type":"literal","value":"man"},{"type":"literal","value":"test"}]}],"name":"SettingMap"}},{"id":661,"name":"engines","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":114,"character":1}],"type":{"type":"reference","id":622,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":662,"name":"exports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":115,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":622,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}],"name":"Record"}]}},{"id":663,"name":"files","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":116,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":664,"name":"funding","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":633,"name":"TypeSetting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":633,"name":"TypeSetting"}]}}]}},{"id":665,"name":"homepage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":118,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":666,"name":"imports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":119,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":622,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}],"name":"Record"}},{"id":687,"name":"installConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":143,"character":1}],"type":{"type":"reflection","declaration":{"id":688,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":689,"name":"hoistingLimits","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":144,"character":2}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[689]}]}}},{"id":667,"name":"keywords","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":120,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":690,"name":"languageName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":146,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":668,"name":"license","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":121,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":633,"name":"TypeSetting"},{"type":"array","elementType":{"type":"reference","id":633,"name":"TypeSetting"}}]}},{"id":669,"name":"main","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":122,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":670,"name":"man","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":123,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":685,"name":"module","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":140,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":671,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":672,"name":"optionalDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":628,"name":"DependencyMap"}},{"id":673,"name":"os","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":126,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":674,"name":"peerDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":127,"character":1}],"type":{"type":"reference","id":628,"name":"DependencyMap"}},{"id":675,"name":"peerDependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":128,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":636,"name":"PeerDependencyMetaSetting"}],"name":"Record"}},{"id":691,"name":"preferUnplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":147,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":676,"name":"private","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":129,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":677,"name":"publishConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":130,"character":1}],"type":{"type":"reference","id":624,"name":"ConfigSetting"}},{"id":678,"name":"repository","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":131,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":642,"name":"RepositorySetting"}]}},{"id":692,"name":"resolutions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":148,"character":1}],"type":{"type":"reference","id":628,"name":"DependencyMap"}},{"id":679,"name":"scripts","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":132,"character":1}],"type":{"type":"reference","id":622,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":686,"name":"sideEffects","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":141,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":680,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":133,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"commonjs"},{"type":"literal","value":"module"}]}},{"id":682,"name":"types","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":136,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":683,"name":"typesVersions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":137,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"Record"}],"name":"Record"}},{"id":684,"name":"typings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":138,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":681,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":134,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":693,"name":"workspaces","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":149,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reflection","declaration":{"id":694,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":696,"name":"nohoist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":153,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":695,"name":"packages","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":152,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"groups":[{"title":"Properties","kind":1024,"children":[696,695]}]}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,687,667,690,668,669,670,685,671,672,673,674,675,691,676,677,678,692,679,686,680,682,683,684,681,693]}],"sources":[{"fileName":"packages/common/src/types.ts","line":99,"character":17}],"permalink":"/api/common/interface/PackageStructure","previousId":697,"nextId":636},{"id":636,"name":"PeerDependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":637,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":82,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[637]}],"sources":[{"fileName":"packages/common/src/types.ts","line":81,"character":17}],"permalink":"/api/common/interface/PeerDependencyMetaSetting","previousId":646,"nextId":638},{"id":638,"name":"PeopleSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":640,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":87,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":639,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":641,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":88,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[640,639,641]}],"sources":[{"fileName":"packages/common/src/types.ts","line":85,"character":17}],"permalink":"/api/common/interface/PeopleSetting","previousId":636,"nextId":562},{"id":562,"name":"ProjectSearchOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":563,"name":"relative","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[563]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":16,"character":17}],"permalink":"/api/common/interface/ProjectSearchOptions","previousId":638,"nextId":642},{"id":642,"name":"RepositorySetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":643,"name":"directory","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":92,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":644,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":634,"name":"TypeSetting.type"}},{"id":645,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":635,"name":"TypeSetting.url"}}],"groups":[{"title":"Properties","kind":1024,"children":[643,644,645]}],"sources":[{"fileName":"packages/common/src/types.ts","line":91,"character":17}],"extendedTypes":[{"type":"reference","id":633,"name":"TypeSetting"}],"permalink":"/api/common/interface/RepositorySetting","previousId":562,"nextId":620},{"id":620,"name":"Toolable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":621,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":54,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[621]}],"sources":[{"fileName":"packages/common/src/types.ts","line":53,"character":17}],"permalink":"/api/common/interface/Toolable","previousId":642,"nextId":633},{"id":633,"name":"TypeSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":634,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":635,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[634,635]}],"sources":[{"fileName":"packages/common/src/types.ts","line":76,"character":17}],"extendedBy":[{"type":"reference","id":642,"name":"RepositorySetting"}],"permalink":"/api/common/interface/TypeSetting","previousId":620,"nextId":705},{"id":705,"name":"WorkspaceMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":706,"name":"jsonPath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":170,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":708,"name":"packageName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":172,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":707,"name":"packagePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":710,"name":"workspaceName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":174,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":709,"name":"workspacePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":173,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[706,708,707,710,709]}],"sources":[{"fileName":"packages/common/src/types.ts","line":169,"character":17}],"permalink":"/api/common/interface/WorkspaceMetadata","previousId":633,"nextId":711},{"id":711,"name":"WorkspacePackage","kind":256,"kindString":"Interface","flags":{},"children":[{"id":712,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":178,"character":1}],"type":{"type":"reference","id":705,"name":"WorkspaceMetadata"}},{"id":713,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":179,"character":1}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[712,713]}],"sources":[{"fileName":"packages/common/src/types.ts","line":177,"character":17}],"typeParameter":[{"id":714,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":646,"name":"PackageStructure"},"default":{"type":"reference","id":646,"name":"PackageStructure"}}],"permalink":"/api/common/interface/WorkspacePackage","previousId":705,"nextId":317},{"id":598,"name":"AbstractConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":29,"character":12}],"typeParameter":[{"id":601,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Function"},{"type":"reflection","declaration":{"id":599,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":600,"name":"prototype","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":29,"character":50}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[600]}],"sources":[{"fileName":"packages/common/src/types.ts","line":29,"character":48}]}}]},"permalink":"/api/common#AbstractConstructor","previousId":1,"nextId":609},{"id":609,"name":"BlueprintFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":37,"character":12}],"typeParameter":[{"id":614,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":610,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":37,"character":49}],"signatures":[{"id":611,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":612,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Predicates"}},{"id":613,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Blueprint"}}]}},"permalink":"/api/common#BlueprintFactory","previousId":598,"nextId":350},{"id":350,"name":"CommonErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/common#CommonErrorCode","previousId":609,"nextId":602},{"id":602,"name":"ConcreteConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":31,"character":12}],"typeParameter":[{"id":606,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":603,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":31,"character":37}],"signatures":[{"id":604,"name":"__type","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":605,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","name":"T"}}]}},"permalink":"/api/common#ConcreteConstructor","previousId":350,"nextId":624},{"id":624,"name":"ConfigSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":61,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Record"},"permalink":"/api/common#ConfigSetting","previousId":602,"nextId":607},{"id":607,"name":"Constructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":33,"character":12}],"typeParameter":[{"id":608,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reference","id":598,"typeArguments":[{"type":"reference","name":"T"}],"name":"AbstractConstructor"},{"type":"reference","id":602,"typeArguments":[{"type":"reference","name":"T"}],"name":"ConcreteConstructor"}]},"permalink":"/api/common#Constructor","previousId":624,"nextId":628},{"id":628,"name":"DependencyMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":68,"character":12}],"type":{"type":"reference","id":622,"name":"SettingMap"},"permalink":"/api/common#DependencyMap","previousId":607,"nextId":585},{"id":585,"name":"FilePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":10,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#FilePath","previousId":628,"nextId":401},{"id":401,"name":"InferMergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":6,"character":12}],"typeParameter":[{"id":402,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reference","id":398,"name":"MergableArray"},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"T"},"extendsType":{"type":"intrinsic","name":"object"},"trueType":{"type":"reference","id":399,"name":"MergableObject"},"falseType":{"type":"intrinsic","name":"never"}}},"permalink":"/api/common#InferMergeable","previousId":585,"nextId":741},{"id":741,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":20}],"typeParameter":[{"id":745,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":742,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":743,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":4,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":744,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":5,"character":4}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[743,744]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":50}]}}],"name":"Map"},"permalink":"/api/common#MemoizeCache","previousId":401,"nextId":737},{"id":737,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":20}],"type":{"type":"reflection","declaration":{"id":738,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":36}],"signatures":[{"id":739,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":740,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/common#MemoizeHasher","previousId":741,"nextId":732},{"id":732,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":20}],"typeParameter":[{"id":736,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":733,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":42}],"signatures":[{"id":734,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":735,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","name":"T"}}]}},"permalink":"/api/common#MemoizedFunction","previousId":737,"nextId":398},{"id":398,"name":"MergableArray","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"permalink":"/api/common#MergableArray","previousId":732,"nextId":399},{"id":399,"name":"MergableObject","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/common#MergableObject","previousId":398,"nextId":400},{"id":400,"name":"Mergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":398,"name":"MergableArray"},{"type":"reference","id":399,"name":"MergableObject"}]},"permalink":"/api/common#Mergeable","previousId":399,"nextId":584},{"id":584,"name":"ModuleName","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":6,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#ModuleName","previousId":400,"nextId":594},{"id":594,"name":"ModuleResolver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":25,"character":12}],"type":{"type":"reflection","declaration":{"id":595,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":25,"character":29}],"signatures":[{"id":596,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":597,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":584,"name":"ModuleName"}}],"type":{"type":"reference","id":585,"name":"FilePath"}}]}},"permalink":"/api/common#ModuleResolver","previousId":584,"nextId":586},{"id":586,"name":"PortablePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":12,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":585,"name":"FilePath"},{"type":"reference","id":486,"name":"Path"}]},"permalink":"/api/common#PortablePath","previousId":594,"nextId":622},{"id":622,"name":"SettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":59,"character":12}],"typeParameter":[{"id":623,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"},{"type":"intrinsic","name":"string"}],"name":"Record"},"permalink":"/api/common#SettingMap","previousId":586,"nextId":351},{"id":351,"name":"CommonError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":352,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":353,"name":"new CommonError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":354,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}},{"id":355,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/common#CommonError","previousId":18,"nextId":356},{"id":356,"name":"MODULE_NAME_PART","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/common/src/constants.ts","line":2,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PART","previousId":351,"nextId":357},{"id":357,"name":"MODULE_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/common/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PATTERN","previousId":356},{"id":715,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Bind.d.ts","line":5,"character":24}],"signatures":[{"id":716,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Bind","nextId":717},{"id":717,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Debounce.d.ts","line":5,"character":24}],"signatures":[{"id":718,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":719,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Debounce","previousId":715,"nextId":720},{"id":720,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":24}],"signatures":[{"id":721,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":722,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":723,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":53}],"signatures":[{"id":724,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":725,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Function"},{"type":"reference","name":"Object"}]}},{"id":726,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":727,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/common/function/Deprecate","previousId":717,"nextId":728},{"id":728,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"decorates":[{"type":"reference","id":575,"name":"getWorkspaceGlobs"},{"type":"reference","id":578,"name":"getWorkspacePackages"},{"type":"reference","id":581,"name":"getWorkspacePackagePaths"}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":25,"character":24}],"signatures":[{"id":729,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":730,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":731,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":737,"name":"MemoizeHasher"},{"type":"reference","id":746,"typeArguments":[{"type":"reference","name":"T"}],"name":"MemoizeOptions"}]}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Memoize","previousId":720,"nextId":751},{"id":751,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Throttle.d.ts","line":5,"character":24}],"signatures":[{"id":752,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":753,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/common/function/Throttle","previousId":728,"nextId":384},{"id":384,"name":"createBlueprint","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/createBlueprint.ts","line":20,"character":16}],"signatures":[{"id":385,"name":"createBlueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to generate a blueprint object for use within\\n[optimal](https://github.com/milesj/optimal) checks. All supported optimal\\npredicates are passed as an object to the factory.","text":"```ts\\nimport { optimal, createBlueprint } from \'@boost/common\';\\n\\nconst blueprint = createBlueprint(({ string, number }) => ({\\n\\tname: string().required(),\\n\\tage: number().gt(0),\\n}));\\n\\nconst data = optimal({}, blueprint);\\n```\\n"},"typeParameter":[{"id":386,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":387,"name":"factory","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":609,"typeArguments":[{"type":"reference","name":"T"}],"name":"BlueprintFactory"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Blueprint"}}],"permalink":"/api/common/function/createBlueprint","previousId":751,"nextId":388},{"id":388,"name":"deepFreeze","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepFreeze.ts","line":15,"character":16}],"signatures":[{"id":389,"name":"deepFreeze","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively freeze plain objects with `Object.freeze`.","text":"```ts\\nimport { deepFreeze } from \'@boost/common\';\\n\\nconst obj = deepFreeze({ foo: 123 });\\n\\n// Errors!\\nobj.foo = 456;\\n```\\n"},"typeParameter":[{"id":390,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":391,"name":"obj","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/deepFreeze","previousId":384,"nextId":392},{"id":392,"name":"deepMerge","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":44,"character":16}],"signatures":[{"id":393,"name":"deepMerge","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively merge objects and arrays, where values on the\\nright-hand side will overwrite values on the left-hand based on the key\\nor index respectively. Furthermore, if the 2nd argument is not provided,\\nit will simply clone the base value.","text":"```ts\\nimport { deepMerge } from \'@boost/common\';\\n\\nconst obj = deepMerge({ foo: 123, bar: \'abc\' }, { foo: 456, baz: true });\\n\\n// -> { foo: 456, bar: \'abc\', baz: true }\\n```\\n"},"typeParameter":[{"id":394,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":400,"name":"Mergeable"}},{"id":395,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":400,"name":"Mergeable"}}],"parameters":[{"id":396,"name":"base","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":397,"name":"other","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"V"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/deepMerge","previousId":388,"nextId":403},{"id":403,"name":"formatMs","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/formatMs.ts","line":14,"character":16}],"signatures":[{"id":404,"name":"formatMs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to format a UNIX timestamp in milliseconds into a shorthand human readable format.\\nWraps the [pretty-ms](https://www.npmjs.com/package/pretty-ms) package to handle infinite\\nnumbers, zeros, and more.","text":"```ts\\nimport { formatMs } from \'@boost/common\';\\n\\nformatMs(1337000000); // 15d 11h 23m 20s\\n```\\n"},"parameters":[{"id":405,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":406,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/common/function/formatMs","previousId":392,"nextId":407},{"id":407,"name":"instanceOf","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/instanceOf.ts","line":32,"character":16}],"signatures":[{"id":408,"name":"instanceOf","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Performs a loose instance check by comparing class names up the prototype\\nchain if `instanceof` initially fails. To disable this loose check,\\npass `false` as the 3rd argument.","text":"```ts\\nimport { instanceOf } from \'@boost/common\';\\n\\nif (instanceOf(error, Error)) {\\n\\tconsole.log(error.stack);\\n}\\n```\\n\\nGenerics can be used to type the object being checked. This will default\\nto the declaration passed to the 2nd argument.\\n\\n```ts\\ninstanceOf<ParseError>(error, Error);\\n```\\n\\n> Loose checks can be useful if multiple copies of the same class declaration\\n> exists in the module tree. For example, multiple versions of the same package are imported.\\n"},"typeParameter":[{"id":409,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":410,"name":"object","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":411,"name":"declaration","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":607,"typeArguments":[{"type":"reference","name":"T"}],"name":"Constructor"}},{"id":412,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"predicate","name":"object","asserts":false,"targetType":{"type":"reference","name":"T"}}}],"permalink":"/api/common/function/instanceOf","previousId":403,"nextId":413},{"id":413,"name":"isEmpty","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isEmpty.ts","line":17,"character":16}],"signatures":[{"id":414,"name":"isEmpty","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if an object has no properties, an array has no items,\\nor the value is falsy, otherwise, it returns `false`.","text":"```ts\\nimport { isEmpty } from \'@boost/common\';\\n\\nisEmpty({}); // true\\nisEmpty({ name: \'Boost\' }); // false\\n\\nisEmpty([]); // true\\nisEmpty([\'Boost\']); // false\\n```\\n"},"parameters":[{"id":415,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isEmpty","previousId":407,"nextId":416},{"id":416,"name":"isFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isFilePath.ts","line":21,"character":16}],"signatures":[{"id":417,"name":"isFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string or `Path` instance looks like a file system path,\\nby checking for absolute or relative path markers, or the existence of\\npath separating slashes. Will return `false` for values that are only\\nthe file or folder name.","text":"```ts\\nimport { isFilePath } from \'@boost/common\';\\n\\nisFilePath(\'./path/to/file.ts\'); // true\\nisFilePath(new Path(\'/path/to/folder\')); // true\\nisFilePath(\'file.ts\'); // false\\n```\\n"},"parameters":[{"id":418,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isFilePath","previousId":413,"nextId":419},{"id":419,"name":"isModuleName","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isModuleName.ts","line":21,"character":16}],"signatures":[{"id":420,"name":"isModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string is a valid Node module package name,\\naccording to the rules defined in\\n[validate-npm-package-name](https://github.com/npm/validate-npm-package-name).\\nWill `return` false for native builtin modules, like `fs`, and for the old name format.","text":"```ts\\nimport { isModuleName } from \'@boost/common\';\\n\\nisModuleName(\'boost\'); // true\\nisModuleName(\'@boost/common\'); // true\\nisModuleName(\'fs\'); // false\\n```\\n"},"parameters":[{"id":421,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":584,"name":"ModuleName"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isModuleName","previousId":416,"nextId":422},{"id":422,"name":"isObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isObject.ts","line":24,"character":16}],"signatures":[{"id":423,"name":"isObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if the value is an object.","text":"```ts\\nimport { isObject } from \'@boost/common\';\\n\\nisObject({}); // true\\nisObject(new Foo()); // true\\nisObject([]); // false\\n```\\n\\nGenerics can be used to type the return value of the object (when necessary).\\n\\n```ts\\ninterface Person {\\n\\tname: string;\\n}\\n\\nif (isObject<Person>(person)) {\\n\\tconsole.log(person.name);\\n}\\n```\\n"},"typeParameter":[{"id":424,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":425,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","name":"T"}}}],"permalink":"/api/common/function/isObject","previousId":419,"nextId":426},{"id":426,"name":"isPlainObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isPlainObject.ts","line":17,"character":16}],"signatures":[{"id":427,"name":"isPlainObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `isObject` but only returns true if the value is a plain object\\n(no class instances, built-ins, etc). It achieves this by comparing\\nthe value\'s prototype to the built-in `Object` types. If you need to\\nrun these checks for cross-realm objects, pass true to the `loose` argument.","text":"```ts\\nimport { isPlainObject } from \'@boost/common\';\\n\\nisPlainObject({}); // true\\nisPlainObject(new Foo()); // false\\nisPlainObject([]); // false\\n```\\n"},"typeParameter":[{"id":428,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":429,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":430,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","name":"T"}}}],"permalink":"/api/common/function/isPlainObject","previousId":422,"nextId":431},{"id":431,"name":"parseFile","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/parseFile.ts","line":23,"character":16}],"signatures":[{"id":432,"name":"parseFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to *sync*hronously parse and return an object for the following\\nfile types & extensions: `js`, `ts`, `tsx`, `json`, `json5`, `yaml`, `yml`.\\nThe function requires an absolute file path, and any unsupported file type will throw an error.","text":"```ts\\nimport { parseFile } from \'@boost/common\';\\n\\nconst data: ReturnShape = parseFile(\'/absolute/file/path\');\\n```\\n\\n> TypeScript files require the `typescript` package to be installed.\\n"},"typeParameter":[{"id":433,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":434,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/parseFile","previousId":426,"nextId":435},{"id":435,"name":"requireModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/requireModule.ts","line":27,"character":16}],"signatures":[{"id":436,"name":"requireModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Works in a similar fashion to the native NodeJS `require()`, but also handles\\nfiles built with Babel or TypeScript by properly returning the `default` export\\nif an \\"ES module\\", and also allowing the expected type to be defined.","text":"```ts\\nimport { requireModule } from \'@boost/common\';\\n\\nconst result: ReturnShape = requireModule(\'../../some/module\');\\n```\\n\\nThere are some caveats to be aware of in regards to default and named exports\\nin the file being required, they are:\\n\\n- When only a default export, the exported value is returned directly instead\\nof on an object with a `default` property.\\n- When only named exports, the returned value is an object with all the named\\nexports as properties on the object.\\n- When a default export and named exports together, the returned value is an\\nobject with a `default` property, and an additional property for every named\\nexport. It\'s best to stay away from this pattern.\\n"},"typeParameter":[{"id":437,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":438,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/requireModule","previousId":431,"nextId":439},{"id":439,"name":"requireTypedModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/requireTypedModule.ts","line":83,"character":16}],"signatures":[{"id":440,"name":"requireTypedModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `requireModule` but for importing TypeScript files ending in `ts` or `tsx`.\\nWhen imported, will transform the file using the `typescript` package (must be installed),\\nevaluate the code in the current module context, and apply the same process to all child imports.","text":"```ts\\nimport { requireTypedModule } from \'@boost/common\';\\n\\nconst result: ReturnShape = requireTypedModule(\'../../some/module.ts\');\\n```\\n\\n> This helper rarely needs to be used directly as `parseFile` and `requireModule` will\\n> call it under the hood based on the file extension.\\n"},"typeParameter":[{"id":441,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":442,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":586,"name":"PortablePath"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/common/function/requireTypedModule","previousId":435,"nextId":443},{"id":443,"name":"toArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/toArray.ts","line":14,"character":16}],"signatures":[{"id":444,"name":"toArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts a non-array to an array. If the provided value is falsy,\\nan empty array is returned. If the provided value is truthy and a\\nnon-array, an array of 1 item is returned.","text":"```ts\\nimport { toArray } from \'@boost/common\';\\n\\ntoArray(123); // [123]\\ntoArray(\'abc\'); // [\'abc\']\\ntoArray([\'a\', \'b\', \'c\']); // [\'a\', \'b\', \'c\']\\n```\\n"},"typeParameter":[{"id":445,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":446,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"T"},{"type":"array","elementType":{"type":"reference","name":"T"}}]}}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}],"permalink":"/api/common/function/toArray","previousId":439,"nextId":625}],"groups":[{"title":"Classes","kind":128,"children":[358,378,447,486,539,564]},{"title":"Enumerations","kind":4,"children":[587]},{"title":"Functions","kind":64,"children":[715,717,720,728,751,384,388,392,403,407,413,416,419,422,426,431,435,439,443]},{"title":"Interfaces","kind":256,"children":[625,629,590,746,615,701,697,646,636,638,562,642,620,633,705,711]},{"title":"Namespaces","kind":2,"children":[317,340]},{"title":"Type aliases","kind":4194304,"children":[598,609,350,602,624,607,628,585,401,741,737,732,398,399,400,584,594,586,622]},{"title":"Variables","kind":32,"children":[351,356,357]}],"sources":[{"fileName":"packages/common/src/index.ts","line":6,"character":0}],"permalink":"/api/common"},"urlSlug":"common"}],"packageName":"@boost/common","packageVersion":"2.8.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":3,"name":"@boost/config","kind":1,"kindString":"Module","flags":{},"children":[{"id":760,"name":"Configuration","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":761,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":43,"character":1}],"signatures":[{"id":762,"name":"new Configuration","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":763,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":764,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":765,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"ModuleResolver"}}],"type":{"type":"reference","id":760,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"},"overwrites":{"type":"reference","name":"Contract<T>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<T>.constructor"}},{"id":766,"name":"onLoadedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded but before processed. Can modify config file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":21,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":882,"typeArguments":[{"type":"reference","name":"T"}],"name":"ConfigFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":767,"name":"onLoadedIgnore","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after ignore files are loaded. Can modify ignore file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":27,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":887,"name":"IgnoreFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":768,"name":"onProcessedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded and processed."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":33,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":814,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":791,"name":"addProcessHandler","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":128,"character":11}],"signatures":[{"id":792,"name":"addProcessHandler","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Add a process handler to customize the processing of key-value setting pairs.\\nMay only run a processor on settings found in the root of the configuration object."},"typeParameter":[{"id":793,"name":"K","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"symbol"}]}},{"id":794,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"indexedAccess","indexType":{"type":"reference","name":"K"},"objectType":{"type":"reference","name":"T"}}}],"parameters":[{"id":795,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"K"}},{"id":796,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":872,"typeArguments":[{"type":"reference","name":"V"}],"name":"Handler"}}],"type":{"type":"reference","id":760,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":821,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":822,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":823,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":824,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":825,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":797,"name":"bootstrap","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":138,"character":11}],"signatures":[{"id":798,"name":"bootstrap","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Life cycle called on initialization."},"type":{"type":"intrinsic","name":"void"}}]},{"id":773,"name":"clearCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":56,"character":1}],"signatures":[{"id":774,"name":"clearCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cache."},"type":{"type":"reference","id":760,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":775,"name":"clearFileCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":66,"character":1}],"signatures":[{"id":776,"name":"clearFileCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached file contents."},"type":{"type":"reference","id":760,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":777,"name":"clearFinderCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":75,"character":1}],"signatures":[{"id":778,"name":"clearFinderCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached directory and file path information."},"type":{"type":"reference","id":760,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":815,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":816,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":817,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"},{"type":"reflection","declaration":{"id":818,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":819,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":820,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":799,"name":"configureFinder","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":144,"character":11}],"signatures":[{"id":800,"name":"configureFinder","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the finder instance."},"parameters":[{"id":801,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":895,"typeArguments":[{"type":"reference","name":"T"}],"name":"ConfigFinderOptions"},{"type":"literal","value":"name"}],"name":"Omit"}}],"type":{"type":"reference","id":760,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":802,"name":"configureProcessor","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":154,"character":11}],"signatures":[{"id":803,"name":"configureProcessor","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the processor instance."},"parameters":[{"id":804,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":935,"name":"ProcessorOptions"},{"type":"literal","value":"name"}],"name":"Omit"}}],"type":{"type":"reference","id":760,"typeArguments":[{"type":"reference","name":"T"}],"name":"Configuration"}}]},{"id":779,"name":"loadConfigFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":86,"character":7}],"signatures":[{"id":780,"name":"loadConfigFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all config files\\nwithin each branch directory, and the root."},"parameters":[{"id":781,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":891,"typeArguments":[{"type":"reference","name":"T"}],"name":"ProcessedConfig"}],"name":"Promise"}}]},{"id":782,"name":"loadConfigFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":96,"character":7}],"signatures":[{"id":783,"name":"loadConfigFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load config files from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":784,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":891,"typeArguments":[{"type":"reference","name":"T"}],"name":"ProcessedConfig"}],"name":"Promise"}}]},{"id":785,"name":"loadIgnoreFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":107,"character":7}],"signatures":[{"id":786,"name":"loadIgnoreFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all ignore files\\nwithin each branch directory, and the root."},"parameters":[{"id":787,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":887,"name":"IgnoreFile"}}],"name":"Promise"}}]},{"id":788,"name":"loadIgnoreFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":117,"character":7}],"signatures":[{"id":789,"name":"loadIgnoreFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load ignore file from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":790,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":887,"name":"IgnoreFile"}}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[761]},{"title":"Properties","kind":1024,"children":[766,767,768,814],"categories":[{"title":"CATEGORY","children":[814]},{"title":"Events","children":[766,767,768]}]},{"title":"Methods","kind":2048,"children":[791,821,797,773,775,777,815,799,802,779,782,785,788]}],"sources":[{"fileName":"packages/config/src/Configuration.ts","line":16,"character":22}],"typeParameter":[{"id":826,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Contract"}],"permalink":"/api/config/class/Configuration","nextId":853},{"id":882,"name":"ConfigFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":883,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Config content of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":22,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}},{"id":884,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":15,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":880,"name":"File.path"}},{"id":885,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":878,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":881,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[883,884,885]}],"sources":[{"fileName":"packages/config/src/types.ts","line":20,"character":17}],"typeParameter":[{"id":886,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":879,"name":"File"}],"permalink":"/api/config/interface/ConfigFile","previousId":8,"nextId":895},{"id":895,"name":"ConfigFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":896,"name":"extendsSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config extending\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":40,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":897,"name":"extensions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of extensions, in order, to find config files within each folder. Defaults to built-in file format list."},"sources":[{"fileName":"packages/config/src/types.ts","line":42,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":864,"name":"ExtType"}}},{"id":898,"name":"includeEnv","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Find and load environment based config files (using `NODE_ENV`). Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":44,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":899,"name":"loaders","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of loader functions by type. Defaults to built-in file type loaders."},"sources":[{"fileName":"packages/config/src/types.ts","line":46,"character":1}],"type":{"type":"reflection","declaration":{"id":900,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":901,"name":"cjs","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":902,"name":"cjs","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":903,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":904,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":905,"name":"js","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":906,"name":"js","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":907,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":908,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":909,"name":"json","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":910,"name":"json","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":911,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":912,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":913,"name":"json5","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":914,"name":"json5","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":915,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":916,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":917,"name":"mjs","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":918,"name":"mjs","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":919,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":920,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":921,"name":"ts","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":922,"name":"ts","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":923,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":924,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]},{"id":925,"name":"yaml","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":926,"name":"yaml","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":927,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":928,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[901,905,909,913,917,921,925]}]}}},{"id":929,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of config files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":48,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":930,"name":"overridesSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config overriding\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":50,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":931,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver instead of `require.resolve`."},"sources":[{"fileName":"packages/config/src/types.ts","line":52,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}}],"groups":[{"title":"Properties","kind":1024,"children":[896,897,898,899,929,930,931]}],"sources":[{"fileName":"packages/config/src/types.ts","line":38,"character":17}],"typeParameter":[{"id":932,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/ConfigFinderOptions","previousId":882,"nextId":879},{"id":879,"name":"File","kind":256,"kindString":"Interface","flags":{},"children":[{"id":880,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":15,"character":1}],"type":{"type":"reference","name":"Path"}},{"id":881,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":878,"name":"FileSource"}}],"groups":[{"title":"Properties","kind":1024,"children":[880,881]}],"sources":[{"fileName":"packages/config/src/types.ts","line":13,"character":17}],"extendedBy":[{"type":"reference","id":882,"name":"ConfigFile"},{"type":"reference","id":887,"name":"IgnoreFile"}],"permalink":"/api/config/interface/File","previousId":895,"nextId":887},{"id":887,"name":"IgnoreFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":888,"name":"ignore","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Ignored content of the file, split on new lines."},"sources":[{"fileName":"packages/config/src/types.ts","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":889,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":15,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":880,"name":"File.path"}},{"id":890,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":878,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":881,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[888,889,890]}],"sources":[{"fileName":"packages/config/src/types.ts","line":25,"character":17}],"extendedTypes":[{"type":"reference","id":879,"name":"File"}],"permalink":"/api/config/interface/IgnoreFile","previousId":879,"nextId":933},{"id":933,"name":"IgnoreFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":934,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of ignore files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":57,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[934]}],"sources":[{"fileName":"packages/config/src/types.ts","line":55,"character":17}],"permalink":"/api/config/interface/IgnoreFinderOptions","previousId":887,"nextId":941},{"id":941,"name":"OverridesSettingItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":942,"name":"exclude","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File path patterns/globs to ignore."},"sources":[{"fileName":"packages/config/src/types.ts","line":79,"character":1}],"type":{"type":"reference","id":939,"name":"FileGlob"}},{"id":943,"name":"include","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"File path patterns/globs to match against."},"sources":[{"fileName":"packages/config/src/types.ts","line":81,"character":1}],"type":{"type":"reference","id":939,"name":"FileGlob"}},{"id":944,"name":"settings","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Settings configured for this specific override."},"sources":[{"fileName":"packages/config/src/types.ts","line":83,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}}],"groups":[{"title":"Properties","kind":1024,"children":[942,943,944]}],"sources":[{"fileName":"packages/config/src/types.ts","line":77,"character":17}],"typeParameter":[{"id":945,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/OverridesSettingItem","previousId":933,"nextId":891},{"id":891,"name":"ProcessedConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":892,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"All found and loaded config file contents merged and processed into a\\nsingle config object."},"sources":[{"fileName":"packages/config/src/types.ts","line":33,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Required"}},{"id":893,"name":"files","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of config files found and loaded."},"sources":[{"fileName":"packages/config/src/types.ts","line":35,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":882,"typeArguments":[{"type":"reference","name":"T"}],"name":"ConfigFile"}}}],"groups":[{"title":"Properties","kind":1024,"children":[892,893]}],"sources":[{"fileName":"packages/config/src/types.ts","line":30,"character":17}],"typeParameter":[{"id":894,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/ProcessedConfig","previousId":941,"nextId":935},{"id":935,"name":"ProcessorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":936,"name":"defaultWhenUndefined","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When a setting has a value of `undefined`, fallback to the\\ndefault/initial value for that setting. Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":65,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":937,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of config files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":67,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":938,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Validate all settings within a config file before processing. Defaults to\\n`true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":70,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[936,937,938]}],"sources":[{"fileName":"packages/config/src/types.ts","line":60,"character":17}],"permalink":"/api/config/interface/ProcessorOptions","previousId":891,"nextId":754},{"id":754,"name":"ConfigErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":14,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/config#ConfigErrorCode","previousId":7,"nextId":864},{"id":864,"name":"ExtType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"cjs"},{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"json5"},{"type":"literal","value":"mjs"},{"type":"literal","value":"ts"},{"type":"literal","value":"yaml"},{"type":"literal","value":"yml"}]},"permalink":"/api/config#ExtType","previousId":754,"nextId":940},{"id":940,"name":"ExtendsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":75,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#ExtendsSetting","previousId":864,"nextId":939},{"id":939,"name":"FileGlob","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":73,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#FileGlob","previousId":940,"nextId":878},{"id":878,"name":"FileSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"branch"},{"type":"literal","value":"extended"},{"type":"literal","value":"overridden"},{"type":"literal","value":"root"}]},"permalink":"/api/config#FileSource","previousId":939,"nextId":872},{"id":872,"name":"Handler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":9,"character":12}],"typeParameter":[{"id":877,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":873,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":9,"character":25}],"signatures":[{"id":874,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":875,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":876,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"T"},{"type":"intrinsic","name":"undefined"}]}],"name":"Promise"},{"type":"reference","name":"T"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/config#Handler","previousId":878,"nextId":866},{"id":866,"name":"Loader","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":7,"character":12}],"typeParameter":[{"id":871,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":867,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":7,"character":24}],"signatures":[{"id":868,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":869,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":870,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Partial"}],"name":"Promise"}}]}},"permalink":"/api/config#Loader","previousId":872,"nextId":865},{"id":865,"name":"LoaderType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":5,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":864,"name":"ExtType"},{"type":"literal","value":"yml"}],"name":"Exclude"},"permalink":"/api/config#LoaderType","previousId":866,"nextId":946},{"id":946,"name":"OverridesSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":86,"character":12}],"typeParameter":[{"id":947,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"array","elementType":{"type":"reference","id":941,"typeArguments":[{"type":"reference","name":"T"}],"name":"OverridesSettingItem"}},"permalink":"/api/config#OverridesSetting","previousId":865,"nextId":949},{"id":949,"name":"PluginEntry","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":92,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":948,"name":"PluginOptions"}]}]},"permalink":"/api/config#PluginEntry","previousId":946,"nextId":948},{"id":948,"name":"PluginOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":90,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/config#PluginOptions","previousId":949,"nextId":952},{"id":952,"name":"PluginsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":98,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":951,"name":"PluginsSettingList"},{"type":"reference","id":950,"name":"PluginsSettingMap"}]},"permalink":"/api/config#PluginsSetting","previousId":948,"nextId":951},{"id":951,"name":"PluginsSettingList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":96,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":949,"name":"PluginEntry"}},"permalink":"/api/config#PluginsSettingList","previousId":952,"nextId":950},{"id":950,"name":"PluginsSettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":94,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":948,"name":"PluginOptions"}],"name":"Record"},"permalink":"/api/config#PluginsSettingMap","previousId":951,"nextId":755},{"id":755,"name":"ConfigError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":16,"character":13}],"type":{"type":"reflection","declaration":{"id":756,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":757,"name":"new ConfigError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":758,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}},{"id":759,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/config#ConfigError","previousId":13},{"id":853,"name":"createExtendsPredicate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/predicates.ts","line":13,"character":16}],"signatures":[{"id":854,"name":"createExtendsPredicate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` predicate for validating the structure of an \\"extends\\" setting."},"parameters":[{"id":855,"name":"preds","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Predicates"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":940,"name":"ExtendsSetting"}],"name":"default"}}],"permalink":"/api/config/function/createExtendsPredicate","nextId":859},{"id":859,"name":"createOverridesPredicate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/predicates.ts","line":37,"character":16}],"signatures":[{"id":860,"name":"createOverridesPredicate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` predicate for validating the structure of an \\"overrides\\" setting."},"typeParameter":[{"id":861,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":862,"name":"blueprint","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Blueprint"}},{"id":863,"name":"preds","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Predicates"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":941,"typeArguments":[{"type":"reference","name":"T"}],"name":"OverridesSettingItem"}],"name":"ArrayOf"}],"name":"default"}}],"permalink":"/api/config/function/createOverridesPredicate","previousId":853,"nextId":856},{"id":856,"name":"createPluginsPredicate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/predicates.ts","line":22,"character":16}],"signatures":[{"id":857,"name":"createPluginsPredicate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` predicate for validating the structure of a \\"plugins\\" setting."},"parameters":[{"id":858,"name":"preds","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Predicates"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":952,"name":"PluginsSetting"}],"name":"default"}}],"permalink":"/api/config/function/createPluginsPredicate","previousId":859,"nextId":827},{"id":827,"name":"getEnv","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/getEnv.ts","line":4,"character":16}],"signatures":[{"id":828,"name":"getEnv","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Detect the current environment name from `<project>_ENV` and `NODE_ENV`."},"parameters":[{"id":829,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/config/function/getEnv","previousId":856,"nextId":830},{"id":830,"name":"mergeArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeArray.ts","line":4,"character":16}],"signatures":[{"id":831,"name":"mergeArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next arrays into a new array while removing duplicates (using `Set`)."},"typeParameter":[{"id":832,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"parameters":[{"id":833,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":834,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/config/function/mergeArray","previousId":827,"nextId":835},{"id":835,"name":"mergeExtends","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeExtends.ts","line":9,"character":16}],"signatures":[{"id":836,"name":"mergeExtends","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next file paths (either a string or array of strings) into a\\nnew list of file paths. This is useful if utilizing config extending."},"parameters":[{"id":837,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":940,"name":"ExtendsSetting"}},{"id":838,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":940,"name":"ExtendsSetting"}}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"permalink":"/api/config/function/mergeExtends","previousId":830,"nextId":839},{"id":839,"name":"mergeObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeObject.ts","line":4,"character":16}],"signatures":[{"id":840,"name":"mergeObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Shallow merges previous and next objects into a new object using object spread."},"typeParameter":[{"id":841,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":842,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":843,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/config/function/mergeObject","previousId":835,"nextId":844},{"id":844,"name":"mergePlugins","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergePlugins.ts","line":24,"character":16}],"signatures":[{"id":845,"name":"mergePlugins","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next plugin configurations into an object.\\nPlugin configs can either be a list of sources, or list of sources\\nwith flags/options (tuples), or a map of sources to flags/options.\\nThis is useful if utilizing the `@boost/plugin` package."},"parameters":[{"id":846,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":952,"name":"PluginsSetting"}},{"id":847,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":952,"name":"PluginsSetting"}}],"type":{"type":"reference","id":950,"name":"PluginsSettingMap"}}],"permalink":"/api/config/function/mergePlugins","previousId":839,"nextId":848},{"id":848,"name":"overwrite","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/overwrite.ts","line":4,"character":16}],"signatures":[{"id":849,"name":"overwrite","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Overwrite the previous value with the next value."},"typeParameter":[{"id":850,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":851,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}},{"id":852,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}],"permalink":"/api/config/function/overwrite","previousId":844,"nextId":882}],"groups":[{"title":"Classes","kind":128,"children":[760]},{"title":"Functions","kind":64,"children":[853,859,856,827,830,835,839,844,848]},{"title":"Interfaces","kind":256,"children":[882,895,879,887,933,941,891,935]},{"title":"Type aliases","kind":4194304,"children":[754,864,940,939,878,872,866,865,946,949,948,952,951,950]},{"title":"Variables","kind":32,"children":[755]}],"sources":[{"fileName":"packages/config/src/index.ts","line":6,"character":0}],"permalink":"/api/config"},"urlSlug":"config"}],"packageName":"@boost/config","packageVersion":"2.5.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":74,"name":"@boost/debug","kind":1,"kindString":"Module","flags":{},"children":[{"id":3065,"name":"CrashReporter","kind":128,"kindString":"Class","flags":{},"children":[{"id":3066,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3067,"name":"new CrashReporter","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3068,"name":"contents","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":3069,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":37,"character":1}],"signatures":[{"id":3070,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a label with a value, or multiple values, to the last added section."},"parameters":[{"id":3071,"name":"label","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3072,"name":"messages","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"PortablePath"}]}}}],"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3073,"name":"addSection","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":47,"character":1}],"signatures":[{"id":3074,"name":"addSection","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Start a new section with a title."},"parameters":[{"id":3075,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3076,"name":"reportBinaries","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":59,"character":1}],"signatures":[{"id":3077,"name":"reportBinaries","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report Node.js related binary versions and paths."},"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3078,"name":"reportEnvVars","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":86,"character":1}],"signatures":[{"id":3079,"name":"reportEnvVars","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report all environment variables."},"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3080,"name":"reportLanguages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":101,"character":1}],"signatures":[{"id":3081,"name":"reportLanguages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report common programming language versions and paths"},"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3089,"name":"reportPackageVersions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":196,"character":1}],"signatures":[{"id":3090,"name":"reportPackageVersions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report npm package versions for all that match the defined pattern.\\nOnly searches in the root node modules folder and _will not_ work with PnP."},"parameters":[{"id":3091,"name":"patterns","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":3092,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'Packages\'"}],"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3082,"name":"reportProcess","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":147,"character":1}],"signatures":[{"id":3083,"name":"reportProcess","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the current `process`."},"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3084,"name":"reportStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":161,"character":1}],"signatures":[{"id":3085,"name":"reportStackTrace","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report the stack trace for a defined `Error`."},"parameters":[{"id":3086,"name":"error","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Error"}}],"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3087,"name":"reportSystem","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":172,"character":1}],"signatures":[{"id":3088,"name":"reportSystem","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the platform and operating system."},"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]},{"id":3093,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":226,"character":1}],"signatures":[{"id":3094,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the reported content to the defined file path."},"parameters":[{"id":3095,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","id":3065,"name":"CrashReporter"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3066]},{"title":"Properties","kind":1024,"children":[3068]},{"title":"Methods","kind":2048,"children":[3069,3073,3076,3078,3080,3089,3082,3084,3087,3093]}],"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":31,"character":13}],"permalink":"/api/debug/class/CrashReporter","nextId":3096},{"id":3099,"name":"Debugger","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3100,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":7,"character":1}],"signatures":[{"id":3101,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all debugger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3102,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":9,"character":1}],"signatures":[{"id":3103,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all debugger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3104,"name":"invariant","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":11,"character":1}],"signatures":[{"id":3105,"name":"invariant","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a pass or fail message based on a conditional."},"parameters":[{"id":3106,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"}},{"id":3107,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3108,"name":"pass","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3109,"name":"fail","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3110,"name":"verbose","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":13,"character":1}],"signatures":[{"id":3111,"name":"verbose","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log verbose messages that only appear when the `BOOSTJS_DEBUG_VERBOSE` is set."},"parameters":[{"id":3112,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3113,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3100,3102,3104,3110]}],"sources":[{"fileName":"packages/debug/src/types.ts","line":3,"character":17}],"signatures":[{"id":3114,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3115,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3116,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3117,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3118,"name":"formatter","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}},{"id":3119,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","name":"IDebugger"}],"permalink":"/api/debug/interface/Debugger"},{"id":3096,"name":"createDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/createDebugger.ts","line":10,"character":16}],"signatures":[{"id":3097,"name":"createDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Debugger` instance with the defined namespace."},"parameters":[{"id":3098,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","id":3099,"name":"Debugger"}}],"permalink":"/api/debug/function/createDebugger","nextId":3099}],"groups":[{"title":"Classes","kind":128,"children":[3065]},{"title":"Functions","kind":64,"children":[3096]},{"title":"Interfaces","kind":256,"children":[3099]}],"sources":[{"fileName":"packages/debug/src/index.ts","line":6,"character":0}],"permalink":"/api/debug"},"urlSlug":"debug"},{"index":false,"label":"Test utilities","reflection":{"id":75,"name":"@boost/debug/test","kind":1,"kindString":"Module","flags":{},"children":[{"id":76,"name":"mockDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/test.ts","line":20,"character":16}],"signatures":[{"id":77,"name":"mockDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createDebugger`.","text":"```ts\\nimport { mockDebugger } from \'@boost/debug/test\';\\n\\nit(\'calls the debugger\', () => {\\n\\tconst debug = mockDebugger();\\n\\n\\tdebug(\'Something is broken!\');\\n\\n\\texpect(debug).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3099,"name":"Debugger"}}],"permalink":"/api/debug-test/function/mockDebugger"}],"groups":[{"title":"Functions","kind":64,"children":[76]}],"sources":[{"fileName":"packages/debug/src/test.ts","line":3,"character":0}],"permalink":"/api/debug-test"},"urlSlug":"debug-test"}],"packageName":"@boost/debug","packageVersion":"2.2.7"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":4,"name":"@boost/decorators","kind":1,"kindString":"Module","flags":{},"children":[{"id":984,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":985,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":17,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":979,"typeArguments":[{"type":"reference","name":"T"}],"name":"MemoizeCache"}]}},{"id":986,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":987,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":27,"character":1}],"type":{"type":"reference","id":975,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[985,986,987]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":15,"character":17}],"typeParameter":[{"id":988,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/decorators/interface/MemoizeOptions","previousId":4,"nextId":979},{"id":979,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":7,"character":12}],"typeParameter":[{"id":983,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":980,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":981,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":10,"character":2}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":982,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":11,"character":2}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[981,982]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":9,"character":1}]}}],"name":"Map"},"permalink":"/api/decorators#MemoizeCache","nextId":975},{"id":975,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":12}],"type":{"type":"reflection","declaration":{"id":976,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":28}],"signatures":[{"id":977,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":978,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/decorators#MemoizeHasher","previousId":979,"nextId":970},{"id":970,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":12}],"typeParameter":[{"id":974,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":971,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":34}],"signatures":[{"id":972,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":973,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","name":"T"}}]}},"permalink":"/api/decorators#MemoizedFunction","previousId":975},{"id":953,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Bind.ts","line":7,"character":16}],"signatures":[{"id":954,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Bind","nextId":955},{"id":955,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Debounce.ts","line":7,"character":16}],"signatures":[{"id":956,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":957,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Debounce","previousId":953,"nextId":958},{"id":958,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Deprecate.ts","line":13,"character":16}],"signatures":[{"id":959,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":960,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":961,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":962,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":963,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Object"},{"type":"reference","name":"Function"}]}},{"id":964,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":965,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/decorators/function/Deprecate","previousId":955,"nextId":966},{"id":966,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":80,"character":16}],"signatures":[{"id":967,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":968,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":969,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":975,"name":"MemoizeHasher"},{"type":"reference","id":984,"typeArguments":[{"type":"reference","name":"T"}],"name":"MemoizeOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Memoize","previousId":958,"nextId":989},{"id":989,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Throttle.ts","line":7,"character":16}],"signatures":[{"id":990,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":991,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Throttle","previousId":966,"nextId":984}],"groups":[{"title":"Functions","kind":64,"children":[953,955,958,966,989]},{"title":"Interfaces","kind":256,"children":[984]},{"title":"Type aliases","kind":4194304,"children":[979,975,970]}],"sources":[{"fileName":"packages/decorators/src/index.ts","line":6,"character":0}],"permalink":"/api/decorators"},"urlSlug":"decorators"}],"packageName":"@boost/decorators","packageVersion":"2.1.3"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":5,"name":"@boost/event","kind":1,"kindString":"Module","flags":{},"children":[{"id":992,"name":"BailEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":993,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":994,"name":"new BailEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":995,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":996,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":997,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":992,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":1037,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":1036,"name":"BaseEvent.constructor"}},{"id":1002,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Scope"},{"type":"literal","value":"*"}]},{"type":"reference","typeArguments":[{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1042,"name":"BaseEvent.listeners"}},{"id":1003,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1043,"name":"BaseEvent.name"}},{"id":1004,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":1005,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":1006,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":992,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":1045,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":1044,"name":"BaseEvent.clearListeners"}},{"id":998,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":14,"character":1}],"signatures":[{"id":999,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments.\\nIf a listener returns `false`, the loop with be aborted early,\\nand the emitter will return `true` (for bailed)."},"parameters":[{"id":1000,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Args"}},{"id":1001,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","id":1074,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":1073,"name":"BaseEvent.emit"}},{"id":1007,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":1008,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":1009,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":1048,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":1047,"name":"BaseEvent.getListeners"}},{"id":1010,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":1011,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","name":"Scope"},{"type":"literal","value":"*"}]}},"inheritedFrom":{"type":"reference","id":1051,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":1050,"name":"BaseEvent.getScopes"}},{"id":1012,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":1013,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":1014,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":1015,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1053,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":1052,"name":"BaseEvent.listen"}},{"id":1016,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1017,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1018,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":1019,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1057,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":1056,"name":"BaseEvent.once"}},{"id":1020,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1021,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1022,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":1023,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":992,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":1061,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":1060,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[993]},{"title":"Properties","kind":1024,"children":[1002,1003]},{"title":"Methods","kind":2048,"children":[1004,998,1007,1010,1012,1016,1020]}],"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":4,"character":13}],"typeParameter":[{"id":1033,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1034,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":1035,"typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/BailEvent","nextId":1035},{"id":1035,"name":"BaseEvent","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1036,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":11,"character":1}],"signatures":[{"id":1037,"name":"new BaseEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1038,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1039,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1040,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1041,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1035,"typeArguments":[{"type":"reference","name":"Return"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}}]},{"id":1042,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"Scope"},{"type":"literal","value":"*"}]},{"type":"reference","typeArguments":[{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"..."},{"id":1043,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1044,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":1045,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":1046,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1035,"typeArguments":[{"type":"reference","name":"Return"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}}]},{"id":1073,"name":"emit","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":123,"character":10}],"signatures":[{"id":1074,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emit the event by executing all scoped listeners with the defined arguments."},"parameters":[{"id":1075,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":1076,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"intrinsic","name":"unknown"}}]},{"id":1047,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":1048,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":1049,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}],"name":"Set"}}]},{"id":1050,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":1051,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","name":"Scope"},{"type":"literal","value":"*"}]}}}]},{"id":1052,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":1053,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":1054,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}},{"id":1055,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"}}]},{"id":1056,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1057,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1058,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}},{"id":1059,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"}}]},{"id":1060,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1061,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1062,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Return"}],"name":"Listener"}},{"id":1063,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1035,"typeArguments":[{"type":"reference","name":"Return"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1036]},{"title":"Properties","kind":1024,"children":[1042,1043]},{"title":"Methods","kind":2048,"children":[1044,1073,1047,1050,1052,1056,1060]}],"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":6,"character":22}],"typeParameter":[{"id":1077,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1078,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1079,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedBy":[{"type":"reference","id":992,"name":"BailEvent"},{"type":"reference","id":1080,"name":"ConcurrentEvent"},{"type":"reference","id":1125,"name":"Event"},{"type":"reference","id":1209,"name":"WaterfallEvent"}],"permalink":"/api/event/class/BaseEvent","previousId":992,"nextId":1080},{"id":1080,"name":"ConcurrentEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":1081,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1082,"name":"new ConcurrentEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1083,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1084,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1085,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1080,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":1037,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":1036,"name":"BaseEvent.constructor"}},{"id":1090,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1042,"name":"BaseEvent.listeners"}},{"id":1091,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1043,"name":"BaseEvent.name"}},{"id":1092,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":1093,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":1094,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1080,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":1045,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":1044,"name":"BaseEvent.clearListeners"}},{"id":1086,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":12,"character":7}],"signatures":[{"id":1087,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Asynchronously execute listeners for with the defined arguments.\\nWill return a promise with an array of each listener result."},"parameters":[{"id":1088,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Args"}},{"id":1089,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}],"name":"Promise"},"overwrites":{"type":"reference","id":1074,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":1073,"name":"BaseEvent.emit"}},{"id":1095,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":1096,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":1097,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":1048,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":1047,"name":"BaseEvent.getListeners"}},{"id":1098,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":1099,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":1051,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":1050,"name":"BaseEvent.getScopes"}},{"id":1100,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":1101,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":1102,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":1103,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1053,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":1052,"name":"BaseEvent.listen"}},{"id":1104,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1105,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1106,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":1107,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1057,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":1056,"name":"BaseEvent.once"}},{"id":1108,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1109,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1110,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}],"name":"Listener"}},{"id":1111,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1080,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":1061,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":1060,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[1081]},{"title":"Properties","kind":1024,"children":[1090,1091]},{"title":"Methods","kind":2048,"children":[1092,1086,1095,1098,1100,1104,1108]}],"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":4,"character":13}],"typeParameter":[{"id":1121,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1122,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":1035,"typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/ConcurrentEvent","previousId":1035,"nextId":1125},{"id":1125,"name":"Event","kind":128,"kindString":"Class","flags":{},"children":[{"id":1126,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1127,"name":"new Event","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1128,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1129,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1130,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1125,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":1037,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":1036,"name":"BaseEvent.constructor"}},{"id":1135,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1042,"name":"BaseEvent.listeners"}},{"id":1136,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1043,"name":"BaseEvent.name"}},{"id":1137,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":1138,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":1139,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1125,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":1045,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":1044,"name":"BaseEvent.clearListeners"}},{"id":1131,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/Event.ts","line":11,"character":1}],"signatures":[{"id":1132,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments."},"parameters":[{"id":1133,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Args"}},{"id":1134,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":1074,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":1073,"name":"BaseEvent.emit"}},{"id":1140,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":1141,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":1142,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"name":"Set"},"inheritedFrom":{"type":"reference","id":1048,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":1047,"name":"BaseEvent.getListeners"}},{"id":1143,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":1144,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":1051,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":1050,"name":"BaseEvent.getScopes"}},{"id":1145,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":1146,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":1147,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":1148,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1053,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":1052,"name":"BaseEvent.listen"}},{"id":1149,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1150,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1151,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":1152,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1057,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":1056,"name":"BaseEvent.once"}},{"id":1153,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1154,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1155,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1174,"typeArguments":[{"type":"reference","name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":1156,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1125,"typeArguments":[{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":1061,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":1060,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[1126]},{"title":"Properties","kind":1024,"children":[1135,1136]},{"title":"Methods","kind":2048,"children":[1137,1131,1140,1143,1145,1149,1153]}],"sources":[{"fileName":"packages/event/src/Event.ts","line":3,"character":13}],"typeParameter":[{"id":1166,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1167,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":1035,"typeArguments":[{"type":"intrinsic","name":"void"},{"type":"reference","name":"Args"},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/Event","previousId":1080,"nextId":1209},{"id":1209,"name":"WaterfallEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":1210,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1211,"name":"new WaterfallEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1212,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1213,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1214,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1209,"typeArguments":[{"type":"reference","name":"Arg"},{"type":"reference","name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":1037,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":1036,"name":"BaseEvent.constructor"}},{"id":1219,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1220,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1221,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1222,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}],"name":"Set"}],"name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1042,"name":"BaseEvent.listeners"}},{"id":1223,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1043,"name":"BaseEvent.name"}},{"id":1224,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":1225,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":1226,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1209,"typeArguments":[{"type":"reference","name":"Arg"},{"type":"reference","name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":1045,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":1044,"name":"BaseEvent.clearListeners"}},{"id":1215,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":13,"character":1}],"signatures":[{"id":1216,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined argument value.\\nThe return value of each listener will be passed as an argument to the next listener."},"parameters":[{"id":1217,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}},{"id":1218,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","name":"Arg"},"overwrites":{"type":"reference","id":1074,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":1073,"name":"BaseEvent.emit"}},{"id":1227,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":1228,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":1229,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1230,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1231,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1232,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}],"name":"Set"},"inheritedFrom":{"type":"reference","id":1048,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":1047,"name":"BaseEvent.getListeners"}},{"id":1233,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":1234,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":1051,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":1050,"name":"BaseEvent.getScopes"}},{"id":1235,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":1236,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":1237,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1238,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1239,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1240,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}},{"id":1241,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1053,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":1052,"name":"BaseEvent.listen"}},{"id":1242,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":1243,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":1244,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1245,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1246,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1247,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}},{"id":1248,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1205,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":1057,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":1056,"name":"BaseEvent.once"}},{"id":1249,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":1250,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":1251,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1252,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1253,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1254,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Arg"}}],"type":{"type":"reference","name":"Arg"}}]}}},{"id":1255,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Scope"}}],"type":{"type":"reference","id":1209,"typeArguments":[{"type":"reference","name":"Arg"},{"type":"reference","name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":1061,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":1060,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[1210]},{"title":"Properties","kind":1024,"children":[1219,1223]},{"title":"Methods","kind":2048,"children":[1224,1215,1227,1233,1235,1242,1249]}],"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":4,"character":13}],"typeParameter":[{"id":1265,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1266,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":1035,"typeArguments":[{"type":"reference","name":"Arg"},{"type":"tuple","elements":[{"type":"reference","name":"Arg"}]},{"type":"reference","name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/WaterfallEvent","previousId":1125,"nextId":1168},{"id":1168,"name":"EventErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/EventError.ts","line":9,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/event#EventErrorCode","previousId":4,"nextId":1174},{"id":1174,"name":"Listener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":1,"character":12}],"typeParameter":[{"id":1203,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1204,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"},{"type":"inferred","name":"A5"}]},"trueType":{"type":"reflection","declaration":{"id":1175,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":8,"character":3}],"signatures":[{"id":1176,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1177,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":1178,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":1179,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":1180,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}},{"id":1181,"name":"a5","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A5"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"}]},"trueType":{"type":"reflection","declaration":{"id":1182,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":10,"character":3}],"signatures":[{"id":1183,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1184,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":1185,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":1186,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":1187,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"}]},"trueType":{"type":"reflection","declaration":{"id":1188,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":12,"character":3}],"signatures":[{"id":1189,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1190,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":1191,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":1192,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"}]},"trueType":{"type":"reflection","declaration":{"id":1193,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":14,"character":3}],"signatures":[{"id":1194,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1195,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":1196,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"}]},"trueType":{"type":"reflection","declaration":{"id":1197,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":16,"character":3}],"signatures":[{"id":1198,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1199,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","name":"A"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reflection","declaration":{"id":1200,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":18,"character":3}],"signatures":[{"id":1201,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1202,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","name":"A"}}],"type":{"type":"reference","name":"R"}}]}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/event#Listener","previousId":1168,"nextId":1205},{"id":1205,"name":"Unlistener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":12}],"type":{"type":"reflection","declaration":{"id":1206,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":25}],"signatures":[{"id":1207,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/event#Unlistener","previousId":1174,"nextId":1208},{"id":1208,"name":"WildstarScope","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":23,"character":12}],"type":{"type":"literal","value":"*"},"permalink":"/api/event#WildstarScope","previousId":1205,"nextId":1124},{"id":1124,"name":"EVENT_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/event/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/event#EVENT_NAME_PATTERN","previousId":3,"nextId":1169},{"id":1169,"name":"EventError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/event/src/EventError.ts","line":11,"character":13}],"type":{"type":"reflection","declaration":{"id":1170,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1171,"name":"new EventError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1172,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}},{"id":1173,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/event#EventError","previousId":1124,"nextId":1123},{"id":1123,"name":"WILDCARD_SCOPE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/event/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":"*"},"defaultValue":"\'*\'","permalink":"/api/event#WILDCARD_SCOPE","previousId":1169}],"groups":[{"title":"Classes","kind":128,"children":[992,1035,1080,1125,1209]},{"title":"Type aliases","kind":4194304,"children":[1168,1174,1205,1208]},{"title":"Variables","kind":32,"children":[1124,1169,1123]}],"sources":[{"fileName":"packages/event/src/index.ts","line":6,"character":0}],"permalink":"/api/event"},"urlSlug":"event"}],"packageName":"@boost/event","packageVersion":"2.3.3"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":78,"name":"@boost/log","kind":1,"kindString":"Module","flags":{},"children":[{"id":3120,"name":"formats","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":3121,"name":"console","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":18,"character":16}],"signatures":[{"id":3122,"name":"console","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item as if it\'s being logged to `console`.\\n_Only_ inclues the label and message."},"parameters":[{"id":3123,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3124,"name":"debug","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":32,"character":16}],"signatures":[{"id":3125,"name":"debug","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item into a human-readable message with all item fields included.\\nThis is the default format for most transports."},"parameters":[{"id":3126,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3127,"name":"json","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":46,"character":16}],"signatures":[{"id":3128,"name":"json","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the entire item into JSON."},"parameters":[{"id":3129,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3130,"name":"message","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":53,"character":16}],"signatures":[{"id":3131,"name":"message","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item using _only_ the message."},"parameters":[{"id":3132,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Functions","kind":64,"children":[3121,3124,3127,3130]}],"sources":[{"fileName":"packages/log/src/formats.ts","line":1,"character":0}],"permalink":"/api/log/namespace/formats","previousId":11,"nextId":3426},{"id":3191,"name":"ConsoleTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3192,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":7,"character":1}],"signatures":[{"id":3193,"name":"new ConsoleTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3194,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3437,"name":"TransportOptions"}],"name":"Partial"}}],"type":{"type":"reference","id":3191,"name":"ConsoleTransport"},"overwrites":{"type":"reference","id":3168,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3167,"name":"Transport.constructor"}},{"id":3199,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3171,"name":"Transport.levels"}},{"id":3207,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3437,"name":"TransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3183,"name":"Transport.options"}},{"id":3200,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":19,"character":1}],"signatures":[{"id":3201,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3202,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3203,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3437,"name":"TransportOptions"}],"name":"Blueprint"},"inheritedFrom":{"type":"reference","id":3173,"name":"Transport.blueprint"}}],"inheritedFrom":{"type":"reference","id":3172,"name":"Transport.blueprint"}},{"id":3208,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3209,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3210,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3437,"name":"TransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3211,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3212,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3213,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3437,"name":"TransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3437,"name":"TransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3437,"name":"TransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3185,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3184,"name":"Transport.configure"}},{"id":3204,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3205,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3206,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3177,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3176,"name":"Transport.format"}},{"id":3195,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":15,"character":1}],"signatures":[{"id":3196,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3197,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3198,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3180,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3179,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3192]},{"title":"Properties","kind":1024,"children":[3199,3207]},{"title":"Methods","kind":2048,"children":[3200,3208,3204,3195]}],"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":6,"character":13}],"extendedTypes":[{"type":"reference","id":3166,"typeArguments":[{"type":"reference","id":3437,"name":"TransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/ConsoleTransport","nextId":3221},{"id":3221,"name":"FileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3222,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":35,"character":1}],"signatures":[{"id":3223,"name":"new FileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3224,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3214,"name":"FileTransportOptions"},"default":{"type":"reference","id":3214,"name":"FileTransportOptions"}}],"parameters":[{"id":3225,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":3221,"typeArguments":[{"type":"reference","name":"Options"}],"name":"FileTransport"},"overwrites":{"type":"reference","id":3168,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3167,"name":"Transport.constructor"}},{"id":3261,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3171,"name":"Transport.levels"}},{"id":3265,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3183,"name":"Transport.options"}},{"id":3226,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":23,"character":10}],"type":{"type":"reference","name":"Path"}},{"id":3227,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":25,"character":1}],"type":{"type":"reference","name":"WritableStream"}},{"id":3232,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":43,"character":10}],"signatures":[{"id":3233,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3234,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3235,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3214,"name":"FileTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3173,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3172,"name":"Transport.blueprint"}},{"id":3236,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":57,"character":1}],"signatures":[{"id":3237,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3238,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3239,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3240,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3266,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3267,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3268,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3269,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3270,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3271,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3185,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3184,"name":"Transport.configure"}},{"id":3262,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3263,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3264,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3177,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3176,"name":"Transport.format"}},{"id":3241,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":73,"character":1}],"signatures":[{"id":3242,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","name":"WritableStream"}}]},{"id":3243,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":97,"character":1}],"signatures":[{"id":3244,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3245,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3180,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3179,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3222]},{"title":"Properties","kind":1024,"children":[3261,3265,3226,3227]},{"title":"Methods","kind":2048,"children":[3232,3236,3266,3262,3241,3243]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":20,"character":13}],"typeParameter":[{"id":3272,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3214,"name":"FileTransportOptions"},"default":{"type":"reference","id":3214,"name":"FileTransportOptions"}}],"extendedTypes":[{"type":"reference","id":3166,"typeArguments":[{"type":"reference","name":"Options"}],"name":"Transport"}],"extendedBy":[{"type":"reference","id":3281,"name":"RotatingFileTransport"}],"permalink":"/api/log/class/FileTransport","previousId":3191,"nextId":3139},{"id":3139,"name":"Logger","kind":128,"kindString":"Class","flags":{},"children":[{"id":3140,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":14,"character":1}],"signatures":[{"id":3141,"name":"new Logger","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3142,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3417,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3139,"name":"Logger"},"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}},{"id":3159,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3417,"name":"LoggerOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3144,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":28,"character":1}],"signatures":[{"id":3145,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3146,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3147,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3417,"name":"LoggerOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3160,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3161,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3162,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3417,"name":"LoggerOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3163,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3164,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3165,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3417,"name":"LoggerOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3417,"name":"LoggerOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3417,"name":"LoggerOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3148,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":42,"character":1}],"signatures":[{"id":3149,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3150,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":50,"character":1}],"signatures":[{"id":3151,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3152,"name":"isAllowed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":55,"character":1}],"signatures":[{"id":3153,"name":"isAllowed","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3154,"name":"level","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3363,"name":"LogLevel"}},{"id":3155,"name":"maxLevel","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":3363,"name":"LogLevel"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":3156,"name":"log","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":73,"character":1}],"signatures":[{"id":3157,"name":"log","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3158,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3375,"name":"LogOptions"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3140]},{"title":"Properties","kind":1024,"children":[3159]},{"title":"Methods","kind":2048,"children":[3144,3160,3148,3150,3152,3156]}],"sources":[{"fileName":"packages/log/src/Logger.ts","line":11,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":3417,"name":"LoggerOptions"}],"name":"Contract"}],"permalink":"/api/log/class/Logger","previousId":3221,"nextId":3281},{"id":3281,"name":"RotatingFileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3282,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3283,"name":"new RotatingFileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3284,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3273,"name":"RotatingFileTransportOptions"}}],"type":{"type":"reference","id":3281,"name":"RotatingFileTransport"},"inheritedFrom":{"type":"reference","id":3223,"name":"FileTransport.constructor"}}],"inheritedFrom":{"type":"reference","id":3222,"name":"FileTransport.constructor"}},{"id":3324,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3261,"name":"FileTransport.levels"}},{"id":3328,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3273,"name":"RotatingFileTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3265,"name":"FileTransport.options"}},{"id":3299,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":23,"character":10}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":3226,"name":"FileTransport.path"}},{"id":3300,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":25,"character":1}],"type":{"type":"reference","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3227,"name":"FileTransport.stream"}},{"id":3286,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":15,"character":10}],"signatures":[{"id":3287,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3288,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3289,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3273,"name":"RotatingFileTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3233,"name":"FileTransport.blueprint"}}],"overwrites":{"type":"reference","id":3232,"name":"FileTransport.blueprint"}},{"id":3305,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":57,"character":1}],"signatures":[{"id":3306,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3307,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3308,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3309,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3237,"name":"FileTransport.close"}}],"inheritedFrom":{"type":"reference","id":3236,"name":"FileTransport.close"}},{"id":3329,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3330,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3331,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3273,"name":"RotatingFileTransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3332,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3333,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3334,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3273,"name":"RotatingFileTransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3273,"name":"RotatingFileTransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3273,"name":"RotatingFileTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3267,"name":"FileTransport.configure"}}],"inheritedFrom":{"type":"reference","id":3266,"name":"FileTransport.configure"}},{"id":3325,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3326,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3327,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3263,"name":"FileTransport.format"}}],"inheritedFrom":{"type":"reference","id":3262,"name":"FileTransport.format"}},{"id":3290,"name":"formatTimestamp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":27,"character":1}],"signatures":[{"id":3291,"name":"formatTimestamp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a `Date` object into a format used within the log file name."},"parameters":[{"id":3292,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3310,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":73,"character":1}],"signatures":[{"id":3311,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3242,"name":"FileTransport.open"}}],"inheritedFrom":{"type":"reference","id":3241,"name":"FileTransport.open"}},{"id":3312,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":97,"character":1}],"signatures":[{"id":3313,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3314,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3244,"name":"FileTransport.write"}}],"inheritedFrom":{"type":"reference","id":3243,"name":"FileTransport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3282]},{"title":"Properties","kind":1024,"children":[3324,3328,3299,3300]},{"title":"Methods","kind":2048,"children":[3286,3305,3329,3325,3290,3310,3312]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":12,"character":13}],"extendedTypes":[{"type":"reference","id":3221,"typeArguments":[{"type":"reference","id":3273,"name":"RotatingFileTransportOptions"}],"name":"FileTransport"}],"permalink":"/api/log/class/RotatingFileTransport","previousId":3139,"nextId":3340},{"id":3340,"name":"StreamTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3341,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":13,"character":1}],"signatures":[{"id":3342,"name":"new StreamTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3343,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3335,"name":"StreamTransportOptions"}}],"type":{"type":"reference","id":3340,"name":"StreamTransport"},"overwrites":{"type":"reference","id":3168,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3167,"name":"Transport.constructor"}},{"id":3352,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3171,"name":"Transport.levels"}},{"id":3356,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3335,"name":"StreamTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3183,"name":"Transport.options"}},{"id":3345,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":19,"character":10}],"signatures":[{"id":3346,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3347,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3348,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3335,"name":"StreamTransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":3173,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3172,"name":"Transport.blueprint"}},{"id":3357,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3358,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3359,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3335,"name":"StreamTransportOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3360,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3361,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3362,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3335,"name":"StreamTransportOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3335,"name":"StreamTransportOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3335,"name":"StreamTransportOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":3185,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3184,"name":"Transport.configure"}},{"id":3353,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3354,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3355,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3177,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3176,"name":"Transport.format"}},{"id":3349,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":33,"character":1}],"signatures":[{"id":3350,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3351,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3180,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3179,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3341]},{"title":"Properties","kind":1024,"children":[3352,3356]},{"title":"Methods","kind":2048,"children":[3345,3357,3353,3349]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":10,"character":13}],"extendedTypes":[{"type":"reference","id":3166,"typeArguments":[{"type":"reference","id":3335,"name":"StreamTransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/StreamTransport","previousId":3281,"nextId":3166},{"id":3166,"name":"Transport","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":3167,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":13,"character":1}],"signatures":[{"id":3168,"name":"new Transport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3169,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3437,"name":"TransportOptions"}}],"parameters":[{"id":3170,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":3166,"typeArguments":[{"type":"reference","name":"Options"}],"name":"Transport"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":3171,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":11,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}},"defaultValue":"[]","implementationOf":{"type":"reference","id":3431,"name":"Transportable.levels"}},{"id":3183,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3172,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":19,"character":1}],"signatures":[{"id":3173,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3174,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":3175,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3437,"name":"TransportOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3184,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3185,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3186,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":3187,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3188,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3189,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3176,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":32,"character":1}],"signatures":[{"id":3177,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3178,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","name":"Transportable.format"}}],"implementationOf":{"type":"reference","id":3432,"name":"Transportable.format"}},{"id":3179,"name":"write","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":47,"character":10}],"signatures":[{"id":3180,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3181,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3182,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}]},"implementationOf":{"type":"reference","id":3434,"name":"Transportable.write"}}],"implementationOf":{"type":"reference","id":3433,"name":"Transportable.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3167]},{"title":"Properties","kind":1024,"children":[3171,3183]},{"title":"Methods","kind":2048,"children":[3172,3184,3176,3179]}],"sources":[{"fileName":"packages/log/src/Transport.ts","line":7,"character":22}],"typeParameter":[{"id":3190,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3437,"name":"TransportOptions"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":3191,"name":"ConsoleTransport"},{"type":"reference","id":3221,"name":"FileTransport"},{"type":"reference","id":3340,"name":"StreamTransport"}],"implementedTypes":[{"type":"reference","id":3430,"name":"Transportable"}],"permalink":"/api/log/class/Transport","previousId":3340,"nextId":3136},{"id":3214,"name":"FileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3218,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3438,"name":"TransportOptions.eol"}},{"id":3219,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3426,"name":"Formatter"}]},"inheritedFrom":{"type":"reference","id":3439,"name":"TransportOptions.format"}},{"id":3215,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":10,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3220,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3440,"name":"TransportOptions.levels"}},{"id":3216,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3217,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":17,"character":1}],"type":{"type":"reference","name":"PortablePath"}}],"groups":[{"title":"Properties","kind":1024,"children":[3218,3219,3215,3220,3216,3217]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":8,"character":17}],"extendedTypes":[{"type":"reference","id":3437,"name":"TransportOptions"}],"extendedBy":[{"type":"reference","id":3273,"name":"RotatingFileTransportOptions"}],"permalink":"/api/log/interface/FileTransportOptions","nextId":3366},{"id":3366,"name":"LogItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3367,"name":"host","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3368,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a localized or customized label."},"sources":[{"fileName":"packages/log/src/types.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3369,"name":"level","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a string."},"sources":[{"fileName":"packages/log/src/types.ts","line":13,"character":1}],"type":{"type":"reference","id":3363,"name":"LogLevel"}},{"id":3370,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log message with interpolated arguments applied."},"sources":[{"fileName":"packages/log/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3371,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional data to include with a log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":3365,"name":"LogMetadata"}},{"id":3372,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of the logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3373,"name":"pid","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current process ID."},"sources":[{"fileName":"packages/log/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3374,"name":"time","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Timestamp of the log, native to the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":23,"character":1}],"type":{"type":"reference","name":"Date"}}],"groups":[{"title":"Properties","kind":1024,"children":[3367,3368,3369,3370,3371,3372,3373,3374]}],"sources":[{"fileName":"packages/log/src/types.ts","line":7,"character":17}],"permalink":"/api/log/interface/LogItem","previousId":3214,"nextId":3375},{"id":3375,"name":"LogOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3376,"name":"args","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Values to interpolate into the message string."},"sources":[{"fileName":"packages/log/src/types.ts","line":28,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":3377,"name":"level","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Level to log as."},"sources":[{"fileName":"packages/log/src/types.ts","line":30,"character":1}],"type":{"type":"reference","id":3363,"name":"LogLevel"}},{"id":3378,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Message to log to the transports."},"sources":[{"fileName":"packages/log/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3379,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include in the message item/string."},"sources":[{"fileName":"packages/log/src/types.ts","line":34,"character":1}],"type":{"type":"reference","id":3365,"name":"LogMetadata"}}],"groups":[{"title":"Properties","kind":1024,"children":[3376,3377,3378,3379]}],"sources":[{"fileName":"packages/log/src/types.ts","line":26,"character":17}],"permalink":"/api/log/interface/LogOptions","previousId":3366,"nextId":3388},{"id":3388,"name":"Loggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3389,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"}},{"id":3394,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"}},{"id":3396,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"}},{"id":3395,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"}},{"id":3397,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"}},{"id":3398,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"}},{"id":3390,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3391,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3392,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3393,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3389,3394,3396,3395,3397,3398]},{"title":"Methods","kind":2048,"children":[3390,3392]}],"sources":[{"fileName":"packages/log/src/types.ts","line":47,"character":17}],"extendedBy":[{"type":"reference","id":3399,"name":"LoggerFunction"}],"permalink":"/api/log/interface/Loggable","previousId":3375,"nextId":3380},{"id":3380,"name":"LoggableWriter","kind":256,"kindString":"Interface","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":37,"character":17}],"signatures":[{"id":3381,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3382,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3365,"name":"LogMetadata"}},{"id":3383,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3384,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3385,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3386,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3387,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedBy":[{"type":"reference","id":3399,"name":"LoggerFunction"}],"permalink":"/api/log/interface/LoggableWriter","previousId":3388,"nextId":3399},{"id":3399,"name":"LoggerFunction","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3400,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3389,"name":"Loggable.debug"}},{"id":3405,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3394,"name":"Loggable.error"}},{"id":3407,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3396,"name":"Loggable.info"}},{"id":3406,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3395,"name":"Loggable.log"}},{"id":3408,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3397,"name":"Loggable.trace"}},{"id":3409,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3380,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3398,"name":"Loggable.warn"}},{"id":3401,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3402,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3391,"name":"Loggable.disable"}}],"inheritedFrom":{"type":"reference","id":3390,"name":"Loggable.disable"}},{"id":3403,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3404,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3393,"name":"Loggable.enable"}}],"inheritedFrom":{"type":"reference","id":3392,"name":"Loggable.enable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3400,3405,3407,3406,3408,3409]},{"title":"Methods","kind":2048,"children":[3401,3403]}],"sources":[{"fileName":"packages/log/src/types.ts","line":66,"character":17}],"signatures":[{"id":3410,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3411,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3365,"name":"LogMetadata"}},{"id":3412,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3413,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3414,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3415,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3416,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","id":3388,"name":"Loggable"},{"type":"reference","id":3380,"name":"LoggableWriter"}],"permalink":"/api/log/interface/LoggerFunction","previousId":3380,"nextId":3417},{"id":3417,"name":"LoggerOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3418,"name":"labels","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom labels to use for each log type."},"sources":[{"fileName":"packages/log/src/types.ts","line":70,"character":1}],"type":{"type":"reference","id":3364,"name":"LogLevelLabels"}},{"id":3419,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include within each log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":72,"character":1}],"type":{"type":"reference","id":3365,"name":"LogMetadata"}},{"id":3420,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name for this logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":74,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3421,"name":"transports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of transports to write messages to."},"sources":[{"fileName":"packages/log/src/types.ts","line":76,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3430,"name":"Transportable"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3418,3419,3420,3421]}],"sources":[{"fileName":"packages/log/src/types.ts","line":68,"character":17}],"permalink":"/api/log/interface/LoggerOptions","previousId":3399,"nextId":3273},{"id":3273,"name":"RotatingFileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3278,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3218,"name":"FileTransportOptions.eol"}},{"id":3279,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3426,"name":"Formatter"}]},"inheritedFrom":{"type":"reference","id":3219,"name":"FileTransportOptions.format"}},{"id":3275,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":10,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":3215,"name":"FileTransportOptions.gzip"}},{"id":3280,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3220,"name":"FileTransportOptions.levels"}},{"id":3276,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":3216,"name":"FileTransportOptions.maxSize"}},{"id":3277,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":17,"character":1}],"type":{"type":"reference","name":"PortablePath"},"inheritedFrom":{"type":"reference","id":3217,"name":"FileTransportOptions.path"}},{"id":3274,"name":"rotation","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Period in which to rotate files. Will append a timestamp to the rotated log file."},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":9,"character":1}],"type":{"type":"reference","id":3441,"name":"Rotation"}}],"groups":[{"title":"Properties","kind":1024,"children":[3278,3279,3275,3280,3276,3277,3274]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":3214,"name":"FileTransportOptions"}],"permalink":"/api/log/interface/RotatingFileTransportOptions","previousId":3417,"nextId":3335},{"id":3335,"name":"StreamTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3337,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3438,"name":"TransportOptions.eol"}},{"id":3338,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3426,"name":"Formatter"}]},"inheritedFrom":{"type":"reference","id":3439,"name":"TransportOptions.format"}},{"id":3339,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3440,"name":"TransportOptions.levels"}},{"id":3336,"name":"stream","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The stream to pipe messages to."},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":7,"character":1}],"type":{"type":"reference","id":3422,"name":"Writable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3337,3338,3339,3336]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":5,"character":17}],"extendedTypes":[{"type":"reference","id":3437,"name":"TransportOptions"}],"permalink":"/api/log/interface/StreamTransportOptions","previousId":3273,"nextId":3437},{"id":3437,"name":"TransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3438,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3439,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3426,"name":"Formatter"}]}},{"id":3440,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3438,3439,3440]}],"sources":[{"fileName":"packages/log/src/types.ts","line":93,"character":17}],"extendedBy":[{"type":"reference","id":3214,"name":"FileTransportOptions"},{"type":"reference","id":3335,"name":"StreamTransportOptions"}],"permalink":"/api/log/interface/TransportOptions","previousId":3335,"nextId":3430},{"id":3430,"name":"Transportable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3432,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":88,"character":1}],"type":{"type":"reference","id":3426,"name":"Formatter"}},{"id":3431,"name":"levels","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":87,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}}},{"id":3433,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":90,"character":1}],"signatures":[{"id":3434,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message and log item to the transport."},"parameters":[{"id":3435,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3436,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}]}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3432,3431]},{"title":"Methods","kind":2048,"children":[3433]}],"sources":[{"fileName":"packages/log/src/types.ts","line":86,"character":17}],"implementedBy":[{"type":"reference","id":3166,"name":"Transport"}],"permalink":"/api/log/interface/Transportable","previousId":3437,"nextId":3422},{"id":3422,"name":"Writable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3423,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":81,"character":1}],"signatures":[{"id":3424,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3425,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3423]}],"sources":[{"fileName":"packages/log/src/types.ts","line":79,"character":17}],"permalink":"/api/log/interface/Writable","previousId":3430,"nextId":3120},{"id":3426,"name":"Formatter","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":12}],"type":{"type":"reflection","declaration":{"id":3427,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":24}],"signatures":[{"id":3428,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3429,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3366,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/log#Formatter","nextId":3363},{"id":3363,"name":"LogLevel","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":1,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"debug"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"log"},{"type":"literal","value":"trace"},{"type":"literal","value":"warn"}]},"permalink":"/api/log#LogLevel","previousId":3426,"nextId":3364},{"id":3364,"name":"LogLevelLabels","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":3,"character":12}],"type":{"type":"mapped","parameter":"L","parameterType":{"type":"reference","id":3363,"name":"LogLevel"},"templateType":{"type":"intrinsic","name":"string"},"optionalModifier":"+"},"permalink":"/api/log#LogLevelLabels","previousId":3363,"nextId":3365},{"id":3365,"name":"LogMetadata","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":5,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/log#LogMetadata","previousId":3364,"nextId":3441},{"id":3441,"name":"Rotation","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":102,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"daily"},{"type":"literal","value":"hourly"},{"type":"literal","value":"monthly"},{"type":"literal","value":"weekly"}]},"permalink":"/api/log#Rotation","previousId":3365,"nextId":3134},{"id":3134,"name":"DEFAULT_LABELS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/log/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","id":3364,"name":"LogLevelLabels"},"defaultValue":"...","permalink":"/api/log#DEFAULT_LABELS","previousId":4,"nextId":3133},{"id":3133,"name":"LOG_LEVELS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/log/src/constants.ts","line":6,"character":13}],"type":{"type":"array","elementType":{"type":"reference","id":3363,"name":"LogLevel"}},"defaultValue":"...","permalink":"/api/log#LOG_LEVELS","previousId":3134,"nextId":3135},{"id":3135,"name":"MAX_LOG_SIZE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/log/src/constants.ts","line":17,"character":13}],"type":{"type":"literal","value":10485760},"defaultValue":"10_485_760","permalink":"/api/log#MAX_LOG_SIZE","previousId":3133},{"id":3136,"name":"createLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/createLogger.ts","line":29,"character":16}],"signatures":[{"id":3137,"name":"createLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a logger with any configured transports."},"parameters":[{"id":3138,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3417,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3399,"name":"LoggerFunction"}}],"permalink":"/api/log/function/createLogger","previousId":5,"nextId":3214}],"groups":[{"title":"Classes","kind":128,"children":[3191,3221,3139,3281,3340,3166]},{"title":"Functions","kind":64,"children":[3136]},{"title":"Interfaces","kind":256,"children":[3214,3366,3375,3388,3380,3399,3417,3273,3335,3437,3430,3422]},{"title":"Namespaces","kind":2,"children":[3120]},{"title":"Type aliases","kind":4194304,"children":[3426,3363,3364,3365,3441]},{"title":"Variables","kind":32,"children":[3134,3133,3135]}],"sources":[{"fileName":"packages/log/src/index.ts","line":6,"character":0}],"permalink":"/api/log"},"urlSlug":"log"},{"index":false,"label":"Test utilities","reflection":{"id":79,"name":"@boost/log/test","kind":1,"kindString":"Module","flags":{},"children":[{"id":80,"name":"mockLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/test.ts","line":20,"character":16}],"signatures":[{"id":81,"name":"mockLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createLogger`.","text":"```ts\\nimport { mockLogger } from \'@boost/log/test\';\\n\\nit(\'calls the logger\', () => {\\n\\tconst log = mockLogger();\\n\\n\\tlog(\'Something has happened\');\\n\\n\\texpect(log).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3399,"name":"LoggerFunction"}}],"permalink":"/api/log-test/function/mockLogger"}],"groups":[{"title":"Functions","kind":64,"children":[80]}],"sources":[{"fileName":"packages/log/src/test.ts","line":3,"character":0}],"permalink":"/api/log-test"},"urlSlug":"log-test"}],"packageName":"@boost/log","packageVersion":"2.2.7"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":82,"name":"@boost/module","kind":1,"kindString":"Module","flags":{},"children":[{"id":3495,"name":"GetFormatResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3496,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":53,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3496]}],"sources":[{"fileName":"packages/module/src/types.ts","line":52,"character":17}],"permalink":"/api/module/interface/GetFormatResult","previousId":4,"nextId":3478},{"id":3478,"name":"ResolveContext","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3479,"name":"conditions","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":31,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":3480,"name":"parentURL","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3479,3480]}],"sources":[{"fileName":"packages/module/src/types.ts","line":30,"character":17}],"permalink":"/api/module/interface/ResolveContext","previousId":3495,"nextId":3481},{"id":3481,"name":"ResolveResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3482,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":36,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3482]}],"sources":[{"fileName":"packages/module/src/types.ts","line":35,"character":17}],"permalink":"/api/module/interface/ResolveResult","previousId":3478,"nextId":3508},{"id":3508,"name":"TransformSourceContext","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3509,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":68,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3510,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":69,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3509,3510]}],"sources":[{"fileName":"packages/module/src/types.ts","line":67,"character":17}],"permalink":"/api/module/interface/TransformSourceContext","previousId":3481,"nextId":3511},{"id":3511,"name":"TransformSourceResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3512,"name":"source","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":73,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3512]}],"sources":[{"fileName":"packages/module/src/types.ts","line":72,"character":17}],"permalink":"/api/module/interface/TransformSourceResult","previousId":3508,"nextId":3494},{"id":3494,"name":"GetFormatContext","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":50,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/module#GetFormatContext","previousId":4,"nextId":3497},{"id":3497,"name":"LoaderDefaultGetFormat","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":56,"character":12}],"type":{"type":"reflection","declaration":{"id":3498,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":56,"character":37}],"signatures":[{"id":3499,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3500,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3501,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3494,"name":"GetFormatContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3495,"name":"GetFormatResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultGetFormat","previousId":3494,"nextId":3483},{"id":3483,"name":"LoaderDefaultResolve","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":39,"character":12}],"type":{"type":"reflection","declaration":{"id":3484,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":39,"character":35}],"signatures":[{"id":3485,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3486,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3487,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3478,"name":"ResolveContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3481,"name":"ResolveResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultResolve","previousId":3497,"nextId":3514},{"id":3514,"name":"LoaderDefaultTransformSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":78,"character":12}],"type":{"type":"reflection","declaration":{"id":3515,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":78,"character":43}],"signatures":[{"id":3516,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3517,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3513,"name":"TransformSourceType"}},{"id":3518,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3508,"name":"TransformSourceContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3511,"name":"TransformSourceResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultTransformSource","previousId":3483,"nextId":3502},{"id":3502,"name":"LoaderGetFormat","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":61,"character":12}],"type":{"type":"reflection","declaration":{"id":3503,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":61,"character":30}],"signatures":[{"id":3504,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3505,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3506,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3494,"name":"GetFormatContext"}},{"id":3507,"name":"defaultGetFormat","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3497,"name":"LoaderDefaultGetFormat"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3495,"name":"GetFormatResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderGetFormat","previousId":3514,"nextId":3488},{"id":3488,"name":"LoaderResolve","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":44,"character":12}],"type":{"type":"reflection","declaration":{"id":3489,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":44,"character":28}],"signatures":[{"id":3490,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3491,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3492,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3478,"name":"ResolveContext"}},{"id":3493,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3483,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3481,"name":"ResolveResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderResolve","previousId":3502,"nextId":3519},{"id":3519,"name":"LoaderTransformSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":83,"character":12}],"type":{"type":"reflection","declaration":{"id":3520,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":83,"character":36}],"signatures":[{"id":3521,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3522,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3513,"name":"TransformSourceType"}},{"id":3523,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3508,"name":"TransformSourceContext"}},{"id":3524,"name":"defaultTransformSource","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3514,"name":"LoaderDefaultTransformSource"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3511,"name":"TransformSourceResult"}],"name":"Promise"}}]}},"permalink":"/api/module#LoaderTransformSource","previousId":3488,"nextId":3467},{"id":3467,"name":"ModuleLike","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Return shape of a module. The default export can be typed with\\nthe `D` generic slot, and the named exports can be typed with\\nan object in the `N` generic slot.","text":"If there is no default export (classic Node.js `exports` pattern),\\nthen `void` can be passed to the `D` generic, which will populate\\nthe `default` property with the named exports.\\n"},"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":12}],"typeParameter":[{"id":3471,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3473,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3472,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":55}]}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"N"},{"type":"reflection","declaration":{"id":3468,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3470,"name":"__esModule","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3469,"name":"default","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":14,"character":1}],"type":{"type":"conditional","checkType":{"type":"reference","name":"D"},"extendsType":{"type":"intrinsic","name":"void"},"trueType":{"type":"reference","name":"N"},"falseType":{"type":"reference","name":"D"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3470,3469]}],"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":65}]}}]},"permalink":"/api/module#ModuleLike","previousId":3519,"nextId":3474},{"id":3474,"name":"PathLike","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":3475,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3476,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":34}],"signatures":[{"id":3477,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3476]}],"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":32}]}}]},"permalink":"/api/module#PathLike","previousId":3467,"nextId":3513},{"id":3513,"name":"TransformSourceType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":76,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"SharedArrayBuffer"},{"type":"reference","name":"Uint8Array"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/module#TransformSourceType","previousId":3474},{"id":3442,"name":"interopModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/interopModule.ts","line":16,"character":16}],"signatures":[{"id":3443,"name":"interopModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Formats the shape of an imported module to align with the\\nES module specification.","text":"For ES or ES-like modules, returns the shape as-is.\\n\\nFor CommonJS modules, returns an object with the following:\\n- `module.exports` under the `default` property.\\n- `exports.<name>` under properties of the same name,\\n  and also under a `default` object.\\n"},"typeParameter":[{"id":3444,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3446,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3445,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3447,"name":"result","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":3467,"typeArguments":[{"type":"reference","name":"D"},{"type":"reference","name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/interopModule","nextId":3455},{"id":3455,"name":"registerExtensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":57,"character":16}],"signatures":[{"id":3456,"name":"registerExtensions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register `.ts` and `.tsx` file extensions into Node.js\'s resolution algorithm."},"type":{"type":"intrinsic","name":"void"}}],"permalink":"/api/module/function/registerExtensions","previousId":3442,"nextId":3448},{"id":3448,"name":"requireModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireModule.ts","line":33,"character":16}],"signatures":[{"id":3449,"name":"requireModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Works in a similar fashion to the native NodeJS `require()`, but can also\\nimport custom file types like TypeScript, and also returns a module shape\\nthat aligns with the ESM loader specification.","text":"When loading custom file types, the extension in the file path is optional,\\nas NodeJS will iterate through each extension until a file is found.\\n\\n```ts\\nimport { requireModule } from \'@boost/module\';\\n\\nconst result = requireModule(\'../../some/module\');\\n```\\n\\nCaveats and differences:\\n\\n- CommonJS files that utilize `module.exports` (default export) will have this\\n  value returned under a `default` property, instead of being returned directly.\\n- CommonJS files that utilize multiple `exports.<name>` (named exports) will\\n  have these values returned as properties on the result object, and will also\\n  be found on the `default` property.\\n- \\"ES module like\\" files will be returned as-is. These are files that are built\\n  with Babel or TypeScript and export an `__esModule` internal property.\\n\\nThese changes align with `import()` and the ES module system. We made this\\ndecision for consistency and reliability.\\n"},"typeParameter":[{"id":3450,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3452,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3451,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3453,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3474,"name":"PathLike"}},{"id":3454,"name":"requirer","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"NodeRequire"},"defaultValue":"..."}],"type":{"type":"reference","id":3467,"typeArguments":[{"type":"reference","name":"D"},{"type":"reference","name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/requireModule","previousId":3455,"nextId":3459},{"id":3459,"name":"requireTSModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":85,"character":16}],"signatures":[{"id":3460,"name":"requireTSModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `requireModule` but for loading TypeScript files ending in `ts` or `tsx`.\\nWhen imported, will transform the file using the `typescript` package,\\nevaluate the code in the current module context, and apply the same process\\nto all child imports.","text":"```ts\\nimport { requireTSModule } from \'@boost/module\';\\n\\nconst result = requireTSModule(\'../../some/module.ts\');\\n```\\n\\n> This helper rarely needs to be used directly as `requireModule` will\\n> call it under the hood based on the file extension.\\n"},"typeParameter":[{"id":3461,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3463,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3462,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3464,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3474,"name":"PathLike"}},{"id":3465,"name":"requirer","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"NodeRequire"},"defaultValue":"..."}],"type":{"type":"reference","id":3467,"typeArguments":[{"type":"reference","name":"D"},{"type":"reference","name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/requireTSModule","previousId":3448,"nextId":3457},{"id":3457,"name":"unregisterExtensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":65,"character":16}],"signatures":[{"id":3458,"name":"unregisterExtensions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister `.ts` and `.tsx` file extensions."},"type":{"type":"intrinsic","name":"void"}}],"permalink":"/api/module/function/unregisterExtensions","previousId":3459,"nextId":3495}],"groups":[{"title":"Functions","kind":64,"children":[3442,3455,3448,3459,3457]},{"title":"Interfaces","kind":256,"children":[3495,3478,3481,3508,3511]},{"title":"Type aliases","kind":4194304,"children":[3494,3497,3483,3514,3502,3488,3519,3467,3474,3513]}],"sources":[{"fileName":"packages/module/src/index.ts","line":6,"character":0}],"permalink":"/api/module"},"urlSlug":"module"},{"index":false,"label":"ESM Loaders","reflection":{"id":83,"name":"@boost/module/loader","kind":1,"kindString":"Module","flags":{},"children":[{"id":3548,"name":"GetFormatContext","kind":16777216,"kindString":"Reference","flags":{},"target":3494,"permalink":"/api/module-loader#GetFormatContext","nextId":3549},{"id":3549,"name":"GetFormatResult","kind":16777216,"kindString":"Reference","flags":{},"target":3495,"permalink":"/api/module-loader#GetFormatResult","previousId":3548,"nextId":3550},{"id":3550,"name":"LoaderDefaultGetFormat","kind":16777216,"kindString":"Reference","flags":{},"target":3497,"permalink":"/api/module-loader#LoaderDefaultGetFormat","previousId":3549,"nextId":3546},{"id":3546,"name":"LoaderDefaultResolve","kind":16777216,"kindString":"Reference","flags":{},"target":3483,"permalink":"/api/module-loader#LoaderDefaultResolve","previousId":3550,"nextId":3555},{"id":3555,"name":"LoaderDefaultTransformSource","kind":16777216,"kindString":"Reference","flags":{},"target":3514,"permalink":"/api/module-loader#LoaderDefaultTransformSource","previousId":3546,"nextId":3551},{"id":3551,"name":"LoaderGetFormat","kind":16777216,"kindString":"Reference","flags":{},"target":3502,"permalink":"/api/module-loader#LoaderGetFormat","previousId":3555,"nextId":3547},{"id":3547,"name":"LoaderResolve","kind":16777216,"kindString":"Reference","flags":{},"target":3488,"permalink":"/api/module-loader#LoaderResolve","previousId":3551,"nextId":3556},{"id":3556,"name":"LoaderTransformSource","kind":16777216,"kindString":"Reference","flags":{},"target":3519,"permalink":"/api/module-loader#LoaderTransformSource","previousId":3547,"nextId":3542},{"id":3542,"name":"ModuleLike","kind":16777216,"kindString":"Reference","flags":{},"target":3467,"permalink":"/api/module-loader#ModuleLike","previousId":3556,"nextId":3543},{"id":3543,"name":"PathLike","kind":16777216,"kindString":"Reference","flags":{},"target":3474,"permalink":"/api/module-loader#PathLike","previousId":3542,"nextId":3544},{"id":3544,"name":"ResolveContext","kind":16777216,"kindString":"Reference","flags":{},"target":3478,"permalink":"/api/module-loader#ResolveContext","previousId":3543,"nextId":3545},{"id":3545,"name":"ResolveResult","kind":16777216,"kindString":"Reference","flags":{},"target":3481,"permalink":"/api/module-loader#ResolveResult","previousId":3544,"nextId":3552},{"id":3552,"name":"TransformSourceContext","kind":16777216,"kindString":"Reference","flags":{},"target":3508,"permalink":"/api/module-loader#TransformSourceContext","previousId":3545,"nextId":3553},{"id":3553,"name":"TransformSourceResult","kind":16777216,"kindString":"Reference","flags":{},"target":3511,"permalink":"/api/module-loader#TransformSourceResult","previousId":3552,"nextId":3554},{"id":3554,"name":"TransformSourceType","kind":16777216,"kindString":"Reference","flags":{},"target":3513,"permalink":"/api/module-loader#TransformSourceType","previousId":3553},{"id":3525,"name":"typescript","kind":2,"kindString":"Namespace","flags":{},"comment":{"shortText":"Load TypeScript files based on the ESM loader specification.","tags":[{"tag":"link","text":"https://nodejs.org/api/esm.html#esm_loaders\\n"}]},"children":[{"id":3531,"name":"getFormat","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":46,"character":13}],"signatures":[{"id":3532,"name":"getFormat","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3533,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3534,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3494,"name":"GetFormatContext"}},{"id":3535,"name":"defaultGetFormat","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3497,"name":"LoaderDefaultGetFormat"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3495,"name":"GetFormatResult"}],"name":"Promise"}}]},{"id":3526,"name":"resolve","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":22,"character":13}],"signatures":[{"id":3527,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3528,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3529,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3478,"name":"ResolveContext"}},{"id":3530,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3483,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3481,"name":"ResolveResult"}],"name":"Promise"}}]},{"id":3536,"name":"transformSource","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":56,"character":13}],"signatures":[{"id":3537,"name":"transformSource","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3538,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3513,"name":"TransformSourceType"}},{"id":3539,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3508,"name":"TransformSourceContext"}},{"id":3540,"name":"defaultTransformSource","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3514,"name":"LoaderDefaultTransformSource"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3511,"name":"TransformSourceResult"}],"name":"Promise"}}]}],"groups":[{"title":"Functions","kind":64,"children":[3531,3526,3536]}],"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":3,"character":0}],"permalink":"/api/module-loader/namespace/typescript","previousId":2,"nextId":3548},{"id":89,"name":"getFormat","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":90,"name":"getFormat","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":91,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":92,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3494,"name":"GetFormatContext"}},{"id":93,"name":"defaultGetFormat","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3497,"name":"LoaderDefaultGetFormat"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3495,"name":"GetFormatResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/getFormat","nextId":84},{"id":84,"name":"resolve","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":85,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":86,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":87,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3478,"name":"ResolveContext"}},{"id":88,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3483,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3481,"name":"ResolveResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/resolve","previousId":89,"nextId":94},{"id":94,"name":"transformSource","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":95,"name":"transformSource","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":96,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3513,"name":"TransformSourceType"}},{"id":97,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3508,"name":"TransformSourceContext"}},{"id":98,"name":"defaultTransformSource","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3514,"name":"LoaderDefaultTransformSource"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3511,"name":"TransformSourceResult"}],"name":"Promise"}}],"permalink":"/api/module-loader/function/transformSource","previousId":84,"nextId":3525}],"groups":[{"title":"Functions","kind":64,"children":[89,84,94]},{"title":"Namespaces","kind":2,"children":[3525]},{"title":"References","kind":16777216,"children":[3548,3549,3550,3546,3555,3551,3547,3556,3542,3543,3544,3545,3552,3553,3554]}],"sources":[{"fileName":"packages/module/src/loaders/index.ts","line":1,"character":0}],"permalink":"/api/module-loader"},"urlSlug":"module-loader"}],"packageName":"@boost/module","packageVersion":"2.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":6,"name":"@boost/pipeline","kind":1,"kindString":"Module","flags":{},"children":[{"id":1267,"name":"AggregatedPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1269,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1270,"name":"new AggregatedPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1271,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1272,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1273,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1274,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1275,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1276,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1277,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1267,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1419,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1418,"name":"ParallelPipeline.constructor"}},{"id":1297,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","id":1446,"name":"ParallelPipeline.context"}},{"id":1298,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1447,"name":"ParallelPipeline.debug"}},{"id":1295,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1444,"name":"ParallelPipeline.depth"}},{"id":1296,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1445,"name":"ParallelPipeline.index"}},{"id":1300,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1449,"name":"ParallelPipeline.onAfterRun"}},{"id":1301,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1450,"name":"ParallelPipeline.onBeforeRun"}},{"id":1302,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1303,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1451,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":1315,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1316,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1464,"name":"ParallelPipeline.options"}},{"id":1299,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","id":1448,"name":"ParallelPipeline.value"}},{"id":1310,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1311,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1459,"name":"ParallelPipeline.id"}},{"id":1284,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":22,"character":1}],"signatures":[{"id":1285,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1286,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1287,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1782,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1288,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1267,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1432,"name":"ParallelPipeline.add"}},{"id":1289,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1290,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1291,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1267,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1436,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":1431,"name":"ParallelPipeline.add"}},{"id":1280,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":15,"character":1}],"signatures":[{"id":1281,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1282,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1283,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1428,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":1427,"name":"ParallelPipeline.blueprint"}},{"id":1317,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1318,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1319,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1320,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1321,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1322,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1323,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1324,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1325,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1326,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1466,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1465,"name":"ParallelPipeline.configure"}},{"id":1307,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":1}],"signatures":[{"id":1308,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1309,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1457,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1456,"name":"ParallelPipeline.getWorkUnits"}},{"id":1312,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1313,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1314,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1404,"name":"Monitor"}}],"type":{"type":"reference","id":1267,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1462,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1461,"name":"ParallelPipeline.monitor"}},{"id":1278,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":15,"character":7}],"signatures":[{"id":1279,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1791,"typeArguments":[{"type":"reference","name":"Output"}],"name":"AggregatedResult"}],"name":"Promise"},"overwrites":{"type":"reference","id":1443,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":1442,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1269]},{"title":"Properties","kind":1024,"children":[1297,1298,1295,1296,1300,1301,1302,1315,1299],"categories":[{"title":"CATEGORY","children":[1297,1298,1295,1296,1315,1299]},{"title":"Events","children":[1300,1301,1302]}]},{"title":"Accessors","kind":262144,"children":[1310]},{"title":"Methods","kind":2048,"children":[1284,1280,1317,1307,1312,1278]}],"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":6,"character":13}],"typeParameter":[{"id":1327,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1328,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1329,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","id":1417,"typeArguments":[{"type":"reflection","declaration":{"id":1268,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":10,"character":27}]}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/AggregatedPipeline","nextId":1330},{"id":1330,"name":"ConcurrentPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1332,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1333,"name":"new ConcurrentPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1334,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1335,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1336,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1337,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1338,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1339,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1340,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1330,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1419,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1418,"name":"ParallelPipeline.constructor"}},{"id":1360,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","id":1446,"name":"ParallelPipeline.context"}},{"id":1361,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1447,"name":"ParallelPipeline.debug"}},{"id":1358,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1444,"name":"ParallelPipeline.depth"}},{"id":1359,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1445,"name":"ParallelPipeline.index"}},{"id":1363,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1449,"name":"ParallelPipeline.onAfterRun"}},{"id":1364,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1450,"name":"ParallelPipeline.onBeforeRun"}},{"id":1365,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1366,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1451,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":1378,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1379,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1464,"name":"ParallelPipeline.options"}},{"id":1362,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","id":1448,"name":"ParallelPipeline.value"}},{"id":1373,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1374,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1459,"name":"ParallelPipeline.id"}},{"id":1347,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":22,"character":1}],"signatures":[{"id":1348,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1349,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1350,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1782,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1351,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1330,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1432,"name":"ParallelPipeline.add"}},{"id":1352,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1353,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1354,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1330,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1436,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":1431,"name":"ParallelPipeline.add"}},{"id":1343,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":15,"character":1}],"signatures":[{"id":1344,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1345,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1346,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1428,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":1427,"name":"ParallelPipeline.blueprint"}},{"id":1380,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1381,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1382,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1383,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1384,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1385,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1386,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1387,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1388,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1389,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1466,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1465,"name":"ParallelPipeline.configure"}},{"id":1370,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":1}],"signatures":[{"id":1371,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1372,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1457,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1456,"name":"ParallelPipeline.getWorkUnits"}},{"id":1375,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1376,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1377,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1404,"name":"Monitor"}}],"type":{"type":"reference","id":1330,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1462,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1461,"name":"ParallelPipeline.monitor"}},{"id":1341,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":14,"character":7}],"signatures":[{"id":1342,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nIf an error occurs, the pipeline will abort early, otherwise return a list of all results."},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"Output"}}],"name":"Promise"},"overwrites":{"type":"reference","id":1443,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":1442,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1332]},{"title":"Properties","kind":1024,"children":[1360,1361,1358,1359,1363,1364,1365,1378,1362],"categories":[{"title":"CATEGORY","children":[1360,1361,1358,1359,1378,1362]},{"title":"Events","children":[1363,1364,1365]}]},{"title":"Accessors","kind":262144,"children":[1373]},{"title":"Methods","kind":2048,"children":[1347,1343,1380,1370,1375,1341]}],"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":5,"character":13}],"typeParameter":[{"id":1390,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1391,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1392,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","id":1417,"typeArguments":[{"type":"reflection","declaration":{"id":1331,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":9,"character":27}]}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/ConcurrentPipeline","previousId":1267,"nextId":1398},{"id":1398,"name":"Context","kind":128,"kindString":"Class","flags":{},"children":[{"id":1399,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1400,"name":"new Context","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}}]},{"id":1401,"name":"clone","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":15,"character":1}],"signatures":[{"id":1402,"name":"clone","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a new instance of the current context and shallow clone all properties."},"parameters":[{"id":1403,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":1398,"name":"Context"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1399]},{"title":"Methods","kind":2048,"children":[1401]}],"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":11,"character":13}],"permalink":"/api/pipeline/class/Context","previousId":1330,"nextId":1404},{"id":1404,"name":"Monitor","kind":128,"kindString":"Class","flags":{},"children":[{"id":1405,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1406,"name":"new Monitor","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":1404,"name":"Monitor"}}]},{"id":1407,"name":"onPipelineAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a pipeline class has ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1807,"name":"AnyPipeline"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1408,"name":"onPipelineBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline class is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1807,"name":"AnyPipeline"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1409,"name":"onPipelineRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline\'s work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":24,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1807,"name":"AnyPipeline"},{"type":"reference","id":1809,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1410,"name":"onWorkUnitFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has failed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":30,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1809,"name":"AnyWorkUnit"},{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1411,"name":"onWorkUnitPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has passed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1809,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1412,"name":"onWorkUnitRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1809,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":1413,"name":"onWorkUnitSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is skipped."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1809,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1414,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":54,"character":1}],"signatures":[{"id":1415,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor events for the provided pipeline, its work units, and all other\\npipelines and work units down the hierarchical tree."},"parameters":[{"id":1416,"name":"pipeline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1807,"name":"AnyPipeline"}}],"type":{"type":"reference","id":1404,"name":"Monitor"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1405]},{"title":"Properties","kind":1024,"children":[1407,1408,1409,1410,1411,1412,1413],"categories":[{"title":"Events","children":[1407,1408,1409,1410,1411,1412,1413]}]},{"title":"Methods","kind":2048,"children":[1414]}],"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":7,"character":13}],"permalink":"/api/pipeline/class/Monitor","previousId":1398,"nextId":1417},{"id":1417,"name":"ParallelPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1418,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1419,"name":"new ParallelPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1420,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1421,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1422,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1423,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1424,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1425,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1426,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1417,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":1446,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":1447,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":1444,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":1445,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":1449,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":1450,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":1451,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1452,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1464,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":1448,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1459,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1460,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}]},{"id":1431,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":22,"character":1}],"signatures":[{"id":1432,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1433,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1434,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1782,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1435,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1417,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}},{"id":1436,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1437,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1438,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1417,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}}]},{"id":1427,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":15,"character":1}],"signatures":[{"id":1428,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1429,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1430,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1465,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1466,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1467,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1468,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1469,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1470,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1456,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":1}],"signatures":[{"id":1457,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1458,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1461,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1462,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1463,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1404,"name":"Monitor"}}],"type":{"type":"reference","id":1417,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":1442,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":60,"character":10}],"signatures":[{"id":1443,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work unit\'s asynchronously."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1418]},{"title":"Properties","kind":1024,"children":[1446,1447,1444,1445,1449,1450,1451,1464,1448],"categories":[{"title":"CATEGORY","children":[1446,1447,1444,1445,1464,1448]},{"title":"Events","children":[1449,1450,1451]}]},{"title":"Accessors","kind":262144,"children":[1459]},{"title":"Methods","kind":2048,"children":[1431,1427,1465,1456,1461,1442]}],"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":8,"character":22}],"typeParameter":[{"id":1471,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1472,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1473,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1474,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":1267,"name":"AggregatedPipeline"},{"type":"reference","id":1330,"name":"ConcurrentPipeline"},{"type":"reference","id":1485,"name":"PooledPipeline"}],"permalink":"/api/pipeline/class/ParallelPipeline","previousId":1404,"nextId":1485},{"id":1485,"name":"PooledPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1486,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1487,"name":"new PooledPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1488,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1489,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1490,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1491,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1492,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1493,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1481,"name":"PooledOptions"}}],"type":{"type":"reference","id":1485,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1419,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1418,"name":"ParallelPipeline.constructor"}},{"id":1524,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","id":1446,"name":"ParallelPipeline.context"}},{"id":1525,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1447,"name":"ParallelPipeline.debug"}},{"id":1522,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1444,"name":"ParallelPipeline.depth"}},{"id":1523,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1445,"name":"ParallelPipeline.index"}},{"id":1527,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1449,"name":"ParallelPipeline.onAfterRun"}},{"id":1528,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1450,"name":"ParallelPipeline.onBeforeRun"}},{"id":1529,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1530,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1451,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":1542,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1481,"name":"PooledOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1464,"name":"ParallelPipeline.options"}},{"id":1526,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","id":1448,"name":"ParallelPipeline.value"}},{"id":1537,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1538,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1459,"name":"ParallelPipeline.id"}},{"id":1511,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":22,"character":1}],"signatures":[{"id":1512,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1513,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1514,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1782,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1515,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1485,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1432,"name":"ParallelPipeline.add"}},{"id":1516,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1517,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1518,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1485,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1436,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":1431,"name":"ParallelPipeline.add"}},{"id":1501,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":34,"character":10}],"signatures":[{"id":1502,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1503,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1504,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1481,"name":"PooledOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","id":1428,"name":"ParallelPipeline.blueprint"}}],"overwrites":{"type":"reference","id":1427,"name":"ParallelPipeline.blueprint"}},{"id":1543,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1544,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1545,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1481,"name":"PooledOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1546,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1547,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1548,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1481,"name":"PooledOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1481,"name":"PooledOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1481,"name":"PooledOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1466,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1465,"name":"ParallelPipeline.configure"}},{"id":1534,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":1}],"signatures":[{"id":1535,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1536,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1457,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1456,"name":"ParallelPipeline.getWorkUnits"}},{"id":1539,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1540,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1541,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1404,"name":"Monitor"}}],"type":{"type":"reference","id":1485,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1462,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1461,"name":"ParallelPipeline.monitor"}},{"id":1505,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":49,"character":7}],"signatures":[{"id":1506,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel, in a pool with a max concurrency,\\nwith a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1791,"typeArguments":[{"type":"reference","name":"Output"}],"name":"AggregatedResult"}],"name":"Promise"},"overwrites":{"type":"reference","id":1443,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":1442,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1486]},{"title":"Properties","kind":1024,"children":[1524,1525,1522,1523,1527,1528,1529,1542,1526],"categories":[{"title":"CATEGORY","children":[1524,1525,1522,1523,1542,1526]},{"title":"Events","children":[1527,1528,1529]}]},{"title":"Accessors","kind":262144,"children":[1537]},{"title":"Methods","kind":2048,"children":[1511,1501,1543,1534,1539,1505]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":23,"character":13}],"typeParameter":[{"id":1549,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1550,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1551,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","id":1417,"typeArguments":[{"type":"reference","id":1481,"name":"PooledOptions"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/PooledPipeline","previousId":1417,"nextId":1557},{"id":1557,"name":"Routine","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1558,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":47,"character":1}],"signatures":[{"id":1559,"name":"new Routine","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1560,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1561,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1563,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1562,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1564,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1565,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1566,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1557,"typeArguments":[{"type":"reference","name":"Output"},{"type":"reference","name":"Input"},{"type":"reference","name":"Options"}],"name":"Routine"},"overwrites":{"type":"reference","id":1877,"name":"WorkUnit.constructor"}}],"overwrites":{"type":"reference","id":1876,"name":"WorkUnit.constructor"}},{"id":1567,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":29,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1616,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1884,"name":"WorkUnit.depth"}},{"id":1617,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1885,"name":"WorkUnit.index"}},{"id":1568,"name":"key","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":31,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1569,"name":"onCommand","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after `execa` was executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":37,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1570,"name":"onCommandData","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called while a command is being executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":43,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1622,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":34,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1890,"name":"WorkUnit.onFail"}},{"id":1623,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Output"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1891,"name":"WorkUnit.onPass"}},{"id":1624,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1892,"name":"WorkUnit.onRun"}},{"id":1625,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1893,"name":"WorkUnit.onSkip"}},{"id":1648,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1918,"name":"WorkUnit.options"}},{"id":1618,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","name":"Output"},"inheritedFrom":{"type":"reference","id":1886,"name":"WorkUnit.output"}},{"id":1619,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1887,"name":"WorkUnit.startTime"}},{"id":1620,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1888,"name":"WorkUnit.statusText"}},{"id":1621,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1889,"name":"WorkUnit.stopTime"}},{"id":1626,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1894,"name":"WorkUnit.title"}},{"id":1631,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":96,"character":5}],"getSignature":[{"id":1632,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1901,"name":"WorkUnit.id"}},{"id":1655,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1656,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1657,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1658,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":1659,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1926,"name":"WorkUnit.blueprint"}}],"inheritedFrom":{"type":"reference","id":1925,"name":"WorkUnit.blueprint"}},{"id":1649,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1650,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1651,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1652,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1653,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1654,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1920,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1919,"name":"WorkUnit.configure"}},{"id":1577,"name":"createAggregatedPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":103,"character":1}],"signatures":[{"id":1578,"name":"createAggregatedPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `AggregatedPipeline`. This pipeline will execute all work units\\nin parallel without interruption. Returns an object with a list of errors and results\\nonce all resolve."},"typeParameter":[{"id":1579,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"C"}],"name":"Context"}},{"id":1580,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1581,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"I"}}],"parameters":[{"id":1582,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"C"}},{"id":1583,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"I"}}],"type":{"type":"reference","id":1267,"typeArguments":[{"type":"reference","name":"C"},{"type":"reference","name":"I"},{"type":"reference","name":"O"}],"name":"AggregatedPipeline"}}]},{"id":1584,"name":"createConcurrentPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":111,"character":1}],"signatures":[{"id":1585,"name":"createConcurrentPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `ConcurrentPipeline`. This pipeline will execute all work units\\nin parallel. Returns a list of values once all resolve."},"typeParameter":[{"id":1586,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"C"}],"name":"Context"}},{"id":1587,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1588,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"I"}}],"parameters":[{"id":1589,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"C"}},{"id":1590,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"I"}}],"type":{"type":"reference","id":1330,"typeArguments":[{"type":"reference","name":"C"},{"type":"reference","name":"I"},{"type":"reference","name":"O"}],"name":"ConcurrentPipeline"}}]},{"id":1591,"name":"createPooledPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":120,"character":1}],"signatures":[{"id":1592,"name":"createPooledPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `PooledPipeline`. This pipeline will execute a distinct set of work units\\nin parallel without interruption, based on a max concurrency, until all work units have ran.\\nReturns a list of errors and results once all resolve."},"typeParameter":[{"id":1593,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"C"}],"name":"Context"}},{"id":1594,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1595,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"I"}}],"parameters":[{"id":1596,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"C"}},{"id":1597,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"I"}},{"id":1598,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1481,"name":"PooledOptions"}}],"type":{"type":"reference","id":1485,"typeArguments":[{"type":"reference","name":"C"},{"type":"reference","name":"I"},{"type":"reference","name":"O"}],"name":"PooledPipeline"}}]},{"id":1599,"name":"createWaterfallPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":133,"character":1}],"signatures":[{"id":1600,"name":"createWaterfallPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `WaterfallPipeline`. This pipeline will execute each work unit one by one,\\nwith the return value of the previous being passed to the next. Returns the final value once\\nall resolve."},"typeParameter":[{"id":1601,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"C"}],"name":"Context"}},{"id":1602,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1603,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"C"}},{"id":1604,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"I"}}],"type":{"type":"reference","id":1811,"typeArguments":[{"type":"reference","name":"C"},{"type":"reference","name":"I"}],"name":"WaterfallPipeline"}}]},{"id":1612,"name":"execute","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":163,"character":10}],"signatures":[{"id":1613,"name":"execute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the current routine and return a new value."},"parameters":[{"id":1614,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1615,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"}}]},{"id":1572,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":64,"character":7}],"signatures":[{"id":1573,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a command with the given arguments and pass the results through a promise."},"parameters":[{"id":1574,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1575,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":1576,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Options"},{"type":"reference","id":1552,"name":"ExecuteCommandOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaReturnValue"}],"name":"Promise"}}]},{"id":1627,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":82,"character":1}],"signatures":[{"id":1628,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1898,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1897,"name":"WorkUnit.hasFailed"}},{"id":1629,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":89,"character":1}],"signatures":[{"id":1630,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1900,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1899,"name":"WorkUnit.hasPassed"}},{"id":1633,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":103,"character":1}],"signatures":[{"id":1634,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1904,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1903,"name":"WorkUnit.isComplete"}},{"id":1635,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":110,"character":1}],"signatures":[{"id":1636,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1906,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1905,"name":"WorkUnit.isPending"}},{"id":1637,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":117,"character":1}],"signatures":[{"id":1638,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1908,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1907,"name":"WorkUnit.isRunning"}},{"id":1639,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":124,"character":1}],"signatures":[{"id":1640,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1910,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1909,"name":"WorkUnit.isSkipped"}},{"id":1641,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":131,"character":7}],"signatures":[{"id":1642,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1643,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1644,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"},"inheritedFrom":{"type":"reference","id":1912,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1911,"name":"WorkUnit.run"}},{"id":1605,"name":"setMonitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":140,"character":1}],"signatures":[{"id":1606,"name":"setMonitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the monitor to pass to nested pipelines."},"parameters":[{"id":1607,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1404,"name":"Monitor"}}],"type":{"type":"reference","id":1557,"typeArguments":[{"type":"reference","name":"Output"},{"type":"reference","name":"Input"},{"type":"reference","name":"Options"}],"name":"Routine"}}]},{"id":1645,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":172,"character":1}],"signatures":[{"id":1646,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1647,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1557,"typeArguments":[{"type":"reference","name":"Output"},{"type":"reference","name":"Input"},{"type":"reference","name":"Options"}],"name":"Routine"},"inheritedFrom":{"type":"reference","id":1916,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1915,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1558]},{"title":"Properties","kind":1024,"children":[1567,1616,1617,1568,1569,1570,1622,1623,1624,1625,1648,1618,1619,1620,1621,1626],"categories":[{"title":"CATEGORY","children":[1567,1616,1617,1568,1648,1618,1619,1620,1621,1626]},{"title":"Events","children":[1569,1570,1622,1623,1624,1625]}]},{"title":"Accessors","kind":262144,"children":[1631]},{"title":"Methods","kind":2048,"children":[1655,1649,1577,1584,1591,1599,1612,1572,1627,1629,1633,1635,1637,1639,1641,1605,1645]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":24,"character":22}],"typeParameter":[{"id":1660,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1661,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1663,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1662,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":27,"character":26}]}}}],"extendedTypes":[{"type":"reference","id":1875,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Routine","previousId":1485,"nextId":1664},{"id":1664,"name":"SerialPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1665,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1666,"name":"new SerialPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1667,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1668,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1669,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1670,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1671,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1672,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1673,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1664,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":1696,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":1697,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":1694,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":1695,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":1699,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":1700,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":1701,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1702,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1711,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":1674,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1664,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"..."},{"id":1698,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1706,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1707,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}]},{"id":1675,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1676,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1677,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1678,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1712,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1713,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1714,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1715,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1716,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1717,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1689,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1690,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1691,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}},"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1708,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1709,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1710,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1404,"name":"Monitor"}}],"type":{"type":"reference","id":1664,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":1679,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1680,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1681,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1682,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1683,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1782,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"O"}],"name":"Action"}},{"id":1684,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1664,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"O"},{"type":"reference","name":"O"}],"name":"SerialPipeline"}},{"id":1685,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1686,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1687,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1688,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1664,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"O"},{"type":"reference","name":"O"}],"name":"SerialPipeline"}}]},{"id":1692,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":73,"character":10}],"signatures":[{"id":1693,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work units synchronously."},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1665]},{"title":"Properties","kind":1024,"children":[1696,1697,1694,1695,1699,1700,1701,1711,1674,1698],"categories":[{"title":"CATEGORY","children":[1696,1697,1694,1695,1711,1674,1698]},{"title":"Events","children":[1699,1700,1701]}]},{"title":"Accessors","kind":262144,"children":[1706]},{"title":"Methods","kind":2048,"children":[1675,1712,1689,1708,1679,1692]}],"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":8,"character":22}],"typeParameter":[{"id":1718,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1719,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1720,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1721,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":1811,"name":"WaterfallPipeline"}],"permalink":"/api/pipeline/class/SerialPipeline","previousId":1557,"nextId":1722},{"id":1722,"name":"Task","kind":128,"kindString":"Class","flags":{},"children":[{"id":1724,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1725,"name":"new Task","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1726,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1727,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1728,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1729,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1782,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1730,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1731,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1722,"typeArguments":[{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1877,"name":"WorkUnit.constructor"}}],"inheritedFrom":{"type":"reference","id":1876,"name":"WorkUnit.constructor"}},{"id":1736,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1884,"name":"WorkUnit.depth"}},{"id":1737,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1885,"name":"WorkUnit.index"}},{"id":1742,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":34,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1890,"name":"WorkUnit.onFail"}},{"id":1743,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Output"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1891,"name":"WorkUnit.onPass"}},{"id":1744,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1892,"name":"WorkUnit.onRun"}},{"id":1745,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1893,"name":"WorkUnit.onSkip"}},{"id":1768,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1769,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1918,"name":"WorkUnit.options"}},{"id":1738,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","name":"Output"},"inheritedFrom":{"type":"reference","id":1886,"name":"WorkUnit.output"}},{"id":1739,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1887,"name":"WorkUnit.startTime"}},{"id":1740,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1888,"name":"WorkUnit.statusText"}},{"id":1741,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1889,"name":"WorkUnit.stopTime"}},{"id":1746,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1894,"name":"WorkUnit.title"}},{"id":1751,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":96,"character":5}],"getSignature":[{"id":1752,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1901,"name":"WorkUnit.id"}},{"id":1732,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":7,"character":1}],"signatures":[{"id":1733,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1734,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1735,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","id":1926,"name":"WorkUnit.blueprint"}}],"overwrites":{"type":"reference","id":1925,"name":"WorkUnit.blueprint"}},{"id":1770,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1771,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1772,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1773,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1774,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1775,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1776,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1777,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1778,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1779,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1920,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1919,"name":"WorkUnit.configure"}},{"id":1747,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":82,"character":1}],"signatures":[{"id":1748,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1898,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1897,"name":"WorkUnit.hasFailed"}},{"id":1749,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":89,"character":1}],"signatures":[{"id":1750,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1900,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1899,"name":"WorkUnit.hasPassed"}},{"id":1753,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":103,"character":1}],"signatures":[{"id":1754,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1904,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1903,"name":"WorkUnit.isComplete"}},{"id":1755,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":110,"character":1}],"signatures":[{"id":1756,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1906,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1905,"name":"WorkUnit.isPending"}},{"id":1757,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":117,"character":1}],"signatures":[{"id":1758,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1908,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1907,"name":"WorkUnit.isRunning"}},{"id":1759,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":124,"character":1}],"signatures":[{"id":1760,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1910,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1909,"name":"WorkUnit.isSkipped"}},{"id":1761,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":131,"character":7}],"signatures":[{"id":1762,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1763,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1764,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"},"inheritedFrom":{"type":"reference","id":1912,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1911,"name":"WorkUnit.run"}},{"id":1765,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":172,"character":1}],"signatures":[{"id":1766,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1767,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1722,"typeArguments":[{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1916,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1915,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1724]},{"title":"Properties","kind":1024,"children":[1736,1737,1742,1743,1744,1745,1768,1738,1739,1740,1741,1746],"categories":[{"title":"CATEGORY","children":[1736,1737,1768,1738,1739,1740,1741,1746]},{"title":"Events","children":[1742,1743,1744,1745]}]},{"title":"Accessors","kind":262144,"children":[1751]},{"title":"Methods","kind":2048,"children":[1732,1770,1747,1749,1753,1755,1757,1759,1761,1765]}],"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":13}],"typeParameter":[{"id":1780,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1781,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1723,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":68}]}},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Task","previousId":1664,"nextId":1811},{"id":1811,"name":"WaterfallPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1813,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1814,"name":"new WaterfallPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1815,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"typeArguments":[{"type":"reference","name":"Ctx"}],"name":"Context"}},{"id":1816,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1817,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1818,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Input"}},{"id":1819,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1820,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1811,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1666,"name":"SerialPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1665,"name":"SerialPipeline.constructor"}},{"id":1846,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","name":"Ctx"},"inheritedFrom":{"type":"reference","id":1696,"name":"SerialPipeline.context"}},{"id":1847,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1697,"name":"SerialPipeline.debug"}},{"id":1844,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1694,"name":"SerialPipeline.depth"}},{"id":1845,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1695,"name":"SerialPipeline.index"}},{"id":1849,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1699,"name":"SerialPipeline.onAfterRun"}},{"id":1850,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1700,"name":"SerialPipeline.onBeforeRun"}},{"id":1851,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1852,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Input"}],"name":"WorkUnit"},{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1701,"name":"SerialPipeline.onRunWorkUnit"}},{"id":1861,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1862,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1711,"name":"SerialPipeline.options"}},{"id":1823,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1664,"typeArguments":[{"type":"reflection","declaration":{"id":1824,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1674,"name":"SerialPipeline.root"}},{"id":1848,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","name":"Input"},"inheritedFrom":{"type":"reference","id":1698,"name":"SerialPipeline.value"}},{"id":1856,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":5}],"getSignature":[{"id":1857,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"}}],"inheritedFrom":{"type":"reference","id":1706,"name":"SerialPipeline.id"}},{"id":1825,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1826,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1827,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1828,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1676,"name":"SerialPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":1675,"name":"SerialPipeline.blueprint"}},{"id":1863,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1864,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1865,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1866,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"},{"type":"reflection","declaration":{"id":1867,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1868,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1869,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1870,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1871,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1872,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","id":1713,"name":"SerialPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1712,"name":"SerialPipeline.configure"}},{"id":1841,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1842,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1843,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"Input"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1690,"name":"SerialPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1689,"name":"SerialPipeline.getWorkUnits"}},{"id":1858,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1859,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1860,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1404,"name":"Monitor"}}],"type":{"type":"reference","id":1811,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1709,"name":"SerialPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1708,"name":"SerialPipeline.monitor"}},{"id":1829,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1830,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1831,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1832,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1833,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1782,"typeArguments":[{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"},{"type":"reference","name":"O"}],"name":"Action"}},{"id":1834,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1664,"typeArguments":[{"type":"reflection","declaration":{"id":1835,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"O"},{"type":"reference","name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1680,"name":"SerialPipeline.pipe"}},{"id":1836,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1837,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1838,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1839,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Input"},{"type":"reference","name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1664,"typeArguments":[{"type":"reflection","declaration":{"id":1840,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"O"},{"type":"reference","name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1685,"name":"SerialPipeline.pipe"}}],"inheritedFrom":{"type":"reference","id":1679,"name":"SerialPipeline.pipe"}},{"id":1821,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":16,"character":7}],"signatures":[{"id":1822,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the pipeline in sequential order with the output of each\\nwork unit being passed to the next work unit in the chain."},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Input"}],"name":"Promise"},"overwrites":{"type":"reference","id":1693,"name":"SerialPipeline.run"}}],"overwrites":{"type":"reference","id":1692,"name":"SerialPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1813]},{"title":"Properties","kind":1024,"children":[1846,1847,1844,1845,1849,1850,1851,1861,1823,1848],"categories":[{"title":"CATEGORY","children":[1846,1847,1844,1845,1861,1823,1848]},{"title":"Events","children":[1849,1850,1851]}]},{"title":"Accessors","kind":262144,"children":[1856]},{"title":"Methods","kind":2048,"children":[1825,1863,1841,1858,1829,1821]}],"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":7,"character":13}],"typeParameter":[{"id":1873,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1874,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","id":1664,"typeArguments":[{"type":"reflection","declaration":{"id":1812,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":8,"character":1}]}},{"type":"reference","name":"Ctx"},{"type":"reference","name":"Input"}],"name":"SerialPipeline"}],"permalink":"/api/pipeline/class/WaterfallPipeline","previousId":1722,"nextId":1875},{"id":1875,"name":"WorkUnit","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1876,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":63,"character":1}],"signatures":[{"id":1877,"name":"new WorkUnit","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1878,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1879,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1880,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"parameters":[{"id":1881,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1882,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1782,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Action"}},{"id":1883,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1875,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1884,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1796,"name":"Hierarchical.depth"}},{"id":1885,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1798,"name":"Hierarchical.index"}},{"id":1890,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":34,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1891,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Output"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1892,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":1893,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1918,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1886,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","name":"Output"}},{"id":1887,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1888,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1889,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1894,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1901,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":96,"character":5}],"getSignature":[{"id":1902,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":1797,"name":"Hierarchical.id"}}],"implementationOf":{"type":"reference","id":1797,"name":"Hierarchical.id"}},{"id":1925,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1926,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1927,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1928,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":1929,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1919,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1920,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1921,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1922,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1923,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1924,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1897,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":82,"character":1}],"signatures":[{"id":1898,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1899,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":89,"character":1}],"signatures":[{"id":1900,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1903,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":103,"character":1}],"signatures":[{"id":1904,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1905,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":110,"character":1}],"signatures":[{"id":1906,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1907,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":117,"character":1}],"signatures":[{"id":1908,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1909,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":124,"character":1}],"signatures":[{"id":1910,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1911,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":131,"character":7}],"signatures":[{"id":1912,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1913,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1914,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"},"implementationOf":{"type":"reference","id":1801,"name":"Runnable.run"}}],"implementationOf":{"type":"reference","id":1800,"name":"Runnable.run"}},{"id":1915,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":172,"character":1}],"signatures":[{"id":1916,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1917,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1875,"typeArguments":[{"type":"reference","name":"Options"},{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"WorkUnit"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1876]},{"title":"Properties","kind":1024,"children":[1884,1885,1890,1891,1892,1893,1918,1886,1887,1888,1889,1894],"categories":[{"title":"CATEGORY","children":[1884,1885,1918,1886,1887,1888,1889,1894]},{"title":"Events","children":[1890,1891,1892,1893]}]},{"title":"Accessors","kind":262144,"children":[1901]},{"title":"Methods","kind":2048,"children":[1925,1919,1897,1899,1903,1905,1907,1909,1911,1915]}],"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":14,"character":22}],"typeParameter":[{"id":1930,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1931,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1932,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":1557,"name":"Routine"},{"type":"reference","id":1722,"name":"Task"}],"implementedTypes":[{"type":"reference","id":1799,"typeArguments":[{"type":"reference","name":"Input"},{"type":"reference","name":"Output"}],"name":"Runnable"},{"type":"reference","id":1795,"name":"Hierarchical"}],"permalink":"/api/pipeline/class/WorkUnit","previousId":1811,"nextId":1791},{"id":1791,"name":"AggregatedResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1792,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of `Errors` that occurred during execution."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":13,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"Error"}}},{"id":1793,"name":"results","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of successful execution results."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","name":"T"}}}],"groups":[{"title":"Properties","kind":1024,"children":[1792,1793]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":11,"character":17}],"typeParameter":[{"id":1794,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/pipeline/interface/AggregatedResult","previousId":10,"nextId":1552},{"id":1552,"name":"ExecuteCommandOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1556,"name":"workUnit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":21,"character":1}],"type":{"type":"reference","id":1809,"name":"AnyWorkUnit"}},{"id":1553,"name":"wrap","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":20,"character":1}],"signatures":[{"id":1554,"name":"wrap","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1555,"name":"process","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"ExecaChildProcess"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[1556]},{"title":"Methods","kind":2048,"children":[1553]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":19,"character":17}],"permalink":"/api/pipeline/interface/ExecuteCommandOptions","previousId":1791,"nextId":1795},{"id":1795,"name":"Hierarchical","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1796,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1797,"name":"id","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique ID of the work unit."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1798,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1796,1797,1798]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":18,"character":17}],"implementedBy":[{"type":"reference","id":1875,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Hierarchical","previousId":1552,"nextId":1481},{"id":1481,"name":"PooledOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1482,"name":"concurrency","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"How many work units to process in parallel."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1483,"name":"filo","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Process with first-in-last-out order, instead of first-in-first-out."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1484,"name":"timeout","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Timeout in milliseconds that each work unit may run, or `0` to avoid a\\ntimeout. Defaults to `0`."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1482,1483,1484]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":13,"character":17}],"permalink":"/api/pipeline/interface/PooledOptions","previousId":1795,"nextId":1799},{"id":1799,"name":"Runnable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1800,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":29,"character":1}],"signatures":[{"id":1801,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Accept an input and produce an output."},"parameters":[{"id":1802,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1803,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[1800]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":27,"character":17}],"typeParameter":[{"id":1804,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1805,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{}}],"implementedBy":[{"type":"reference","id":1875,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Runnable","previousId":1481,"nextId":1782},{"id":1782,"name":"Action","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":12}],"typeParameter":[{"id":1788,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1398,"name":"Context"}},{"id":1789,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1790,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","name":"Input"}}],"type":{"type":"reflection","declaration":{"id":1783,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":75}],"signatures":[{"id":1784,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1785,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Ctx"}},{"id":1786,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Input"}},{"id":1787,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1809,"name":"AnyWorkUnit"}}],"type":{"type":"union","types":[{"type":"reference","name":"Output"},{"type":"reference","typeArguments":[{"type":"reference","name":"Output"}],"name":"Promise"}]}}]}},"permalink":"/api/pipeline#Action","previousId":4,"nextId":1807},{"id":1807,"name":"AnyPipeline","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1808,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":35}]}},{"type":"reference","id":1398,"name":"Context"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"Pipeline"},"permalink":"/api/pipeline#AnyPipeline","previousId":1782,"nextId":1809},{"id":1809,"name":"AnyWorkUnit","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":12}],"type":{"type":"reference","id":1875,"typeArguments":[{"type":"reflection","declaration":{"id":1810,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":35}]}},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"WorkUnit"},"permalink":"/api/pipeline#AnyWorkUnit","previousId":1807,"nextId":1475},{"id":1475,"name":"PipelineErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":11,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/pipeline#PipelineErrorCode","previousId":1809,"nextId":1806},{"id":1806,"name":"Status","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":32,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"failed"},{"type":"literal","value":"passed"},{"type":"literal","value":"pending"},{"type":"literal","value":"running"},{"type":"literal","value":"skipped"}]},"permalink":"/api/pipeline#Status","previousId":1475,"nextId":1476},{"id":1476,"name":"PipelineError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":13,"character":13}],"type":{"type":"reflection","declaration":{"id":1477,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1478,"name":"new PipelineError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1479,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}},{"id":1480,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/pipeline#PipelineError","previousId":4,"nextId":1397},{"id":1397,"name":"STATUS_FAILED","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":7,"character":13}],"type":{"type":"reference","id":1806,"name":"Status"},"defaultValue":"\'failed\'","permalink":"/api/pipeline#STATUS_FAILED","previousId":1476,"nextId":1396},{"id":1396,"name":"STATUS_PASSED","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","id":1806,"name":"Status"},"defaultValue":"\'passed\'","permalink":"/api/pipeline#STATUS_PASSED","previousId":1397,"nextId":1393},{"id":1393,"name":"STATUS_PENDING","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","id":1806,"name":"Status"},"defaultValue":"\'pending\'","permalink":"/api/pipeline#STATUS_PENDING","previousId":1396,"nextId":1394},{"id":1394,"name":"STATUS_RUNNING","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","id":1806,"name":"Status"},"defaultValue":"\'running\'","permalink":"/api/pipeline#STATUS_RUNNING","previousId":1393,"nextId":1395},{"id":1395,"name":"STATUS_SKIPPED","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":5,"character":13}],"type":{"type":"reference","id":1806,"name":"Status"},"defaultValue":"\'skipped\'","permalink":"/api/pipeline#STATUS_SKIPPED","previousId":1394}],"groups":[{"title":"Classes","kind":128,"children":[1267,1330,1398,1404,1417,1485,1557,1664,1722,1811,1875]},{"title":"Interfaces","kind":256,"children":[1791,1552,1795,1481,1799]},{"title":"Type aliases","kind":4194304,"children":[1782,1807,1809,1475,1806]},{"title":"Variables","kind":32,"children":[1476,1397,1396,1393,1394,1395]}],"sources":[{"fileName":"packages/pipeline/src/index.ts","line":6,"character":0}],"permalink":"/api/pipeline"},"urlSlug":"pipeline"}],"packageName":"@boost/pipeline","packageVersion":"2.2.7"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":7,"name":"@boost/plugin","kind":1,"kindString":"Module","flags":{},"children":[{"id":1934,"name":"Plugin","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1935,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1936,"name":"new Plugin","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1937,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1939,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1938,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1940,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Options"}}],"type":{"type":"reference","id":1934,"typeArguments":[{"type":"reference","name":"T"},{"type":"reference","name":"Options"}],"name":"Plugin"},"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1941,"name":"name","kind":1024,"kindString":"Property","flags":{"isAbstract":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":8,"character":10}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2057,"name":"Pluggable.name"}},{"id":1948,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1955,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1956,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1957,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1958,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":1959,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1949,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1950,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1951,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"},{"type":"reflection","declaration":{"id":1952,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1953,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1954,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1945,"name":"shutdown","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":12,"character":1}],"signatures":[{"id":1946,"name":"shutdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1947,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.shutdown"}}],"implementationOf":{"type":"reference","id":2059,"name":"Pluggable.shutdown"}},{"id":1942,"name":"startup","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":10,"character":1}],"signatures":[{"id":1943,"name":"startup","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1944,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.startup"}}],"implementationOf":{"type":"reference","id":2060,"name":"Pluggable.startup"}}],"groups":[{"title":"Constructors","kind":512,"children":[1935]},{"title":"Properties","kind":1024,"children":[1941,1948]},{"title":"Methods","kind":2048,"children":[1955,1949,1945,1942]}],"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":22}],"typeParameter":[{"id":1960,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1962,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1961,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":67}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"Options"}],"name":"Contract"}],"implementedTypes":[{"type":"reference","id":2056,"typeArguments":[{"type":"reference","name":"T"}],"name":"Pluggable"}],"permalink":"/api/plugin/class/Plugin","nextId":1969},{"id":1969,"name":"Registry","kind":128,"kindString":"Class","flags":{},"children":[{"id":1970,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":76,"character":1}],"signatures":[{"id":1971,"name":"new Registry","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1972,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2056,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","name":"Plugin"}],"name":"Pluggable"}},{"id":1973,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1974,"name":"projectName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1975,"name":"typeName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1976,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2079,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}}],"type":{"type":"reference","id":1969,"typeArguments":[{"type":"reference","name":"Plugin"},{"type":"reference","name":"Tool"}],"name":"Registry"},"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}},{"id":1977,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":34,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1978,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1979,"name":"onAfterUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1980,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is registered and the `startup` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1981,"name":"onBeforeUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is unregistered and the `shutdown` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":58,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1982,"name":"onLoad","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is loaded but before it\'s registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":64,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2039,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2079,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1983,"name":"pluralName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":66,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1984,"name":"projectName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":68,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1985,"name":"singularName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":70,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1988,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":90,"character":1}],"signatures":[{"id":1989,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1990,"name":"predicates","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1991,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2079,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":2040,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":2041,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2042,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2079,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Partial"},{"type":"reflection","declaration":{"id":2043,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2044,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2045,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2079,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2079,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2079,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Required"}],"name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1992,"name":"formatModuleName","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":107,"character":1}],"signatures":[{"id":1993,"name":"formatModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a name into a fully qualified and compatible Node/npm module name,\\nwith the tool and type names being used as scopes and prefixes."},"parameters":[{"id":1994,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1995,"name":"scoped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1996,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":119,"character":1}],"signatures":[{"id":1997,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a single registered plugin by module name. If the plugin cannot be found,\\nan error will be thrown."},"typeParameter":[{"id":1998,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2056,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","name":"T"}],"name":"Pluggable"},"default":{"type":"reference","name":"Plugin"}}],"parameters":[{"id":1999,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"T"}}]},{"id":2000,"name":"getAll","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":132,"character":1}],"signatures":[{"id":2001,"name":"getAll","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all registered plugins."},"type":{"type":"array","elementType":{"type":"reference","name":"Plugin"}}}]},{"id":2002,"name":"getMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":139,"character":1}],"signatures":[{"id":2003,"name":"getMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return multiple registered plugins by module name."},"parameters":[{"id":2004,"name":"names","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"array","elementType":{"type":"reference","name":"Plugin"}}}]},{"id":2014,"name":"isRegistered","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":215,"character":1}],"signatures":[{"id":2015,"name":"isRegistered","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if a plugin has been registered."},"parameters":[{"id":2016,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2005,"name":"load","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":146,"character":7}],"signatures":[{"id":2006,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register a single plugin by name, or with an explicit instance."},"parameters":[{"id":2007,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"Plugin"}]}},{"id":2008,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"defaultValue":"{}"},{"id":2009,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2069,"typeArguments":[{"type":"reference","name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Plugin"}],"name":"Promise"}}]},{"id":2010,"name":"loadMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":183,"character":7}],"signatures":[{"id":2011,"name":"loadMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register multiple plugins based on a list of settings."},"parameters":[{"id":2012,"name":"settings","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2062,"name":"Setting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"Plugin"},{"type":"reference","id":2050,"name":"SourceWithOptions"}]}}]}},{"id":2013,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2069,"typeArguments":[{"type":"reference","name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"Plugin"}}],"name":"Promise"}}]},{"id":2017,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":228,"character":7}],"signatures":[{"id":2018,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a plugin and trigger startup with the provided tool."},"parameters":[{"id":2019,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2020,"name":"plugin","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Plugin"}},{"id":2021,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","name":"Tool"}]},"defaultValue":"..."},{"id":2022,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2069,"typeArguments":[{"type":"reference","name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Plugin"}],"name":"Promise"}}]},{"id":2023,"name":"unregister","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":272,"character":7}],"signatures":[{"id":2024,"name":"unregister","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister a plugin by name and trigger shutdown process."},"parameters":[{"id":2025,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2026,"name":"tool","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"Tool"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Plugin"}],"name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1970]},{"title":"Properties","kind":1024,"children":[1977,1978,1979,1980,1981,1982,2039,1983,1984,1985],"categories":[{"title":"CATEGORY","children":[1977,2039,1983,1984,1985]},{"title":"Events","children":[1978,1979,1980,1981,1982]}]},{"title":"Methods","kind":2048,"children":[1988,2040,1992,1996,2000,2002,2014,2005,2010,2017,2023]}],"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":31,"character":13}],"typeParameter":[{"id":2046,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2056,"name":"Pluggable"}},{"id":2047,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2079,"typeArguments":[{"type":"reference","name":"Plugin"}],"name":"RegistryOptions"}],"name":"Contract"}],"permalink":"/api/plugin/class/Registry","previousId":1934,"nextId":2056},{"id":2056,"name":"Pluggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2057,"name":"name","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":15,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":2058,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Priority in which to order the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2059,"name":"shutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":19,"character":1}],"type":{"type":"reference","id":2051,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}},{"id":2060,"name":"startup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":21,"character":1}],"type":{"type":"reference","id":2051,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[2057,2058,2059,2060]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":13,"character":17}],"typeParameter":[{"id":2061,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"any"}}],"implementedBy":[{"type":"reference","id":1934,"name":"Plugin"}],"permalink":"/api/plugin/interface/Pluggable","previousId":1,"nextId":2069},{"id":2069,"name":"RegisterOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2070,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2071,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"reference","name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2070,2071]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":30,"character":17}],"typeParameter":[{"id":2072,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedBy":[{"type":"reference","id":2073,"name":"Registration"}],"permalink":"/api/plugin/interface/RegisterOptions","previousId":2056,"nextId":2073},{"id":2073,"name":"Registration","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2074,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2075,"name":"plugin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Plugin instance or object."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":41,"character":1}],"type":{"type":"reference","name":"T"}},{"id":2076,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":2070,"name":"RegisterOptions.priority"}},{"id":2077,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","id":2071,"name":"RegisterOptions.tool"}}],"groups":[{"title":"Properties","kind":1024,"children":[2074,2075,2076,2077]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":37,"character":17}],"typeParameter":[{"id":2078,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2056,"name":"Pluggable"}}],"extendedTypes":[{"type":"reference","id":2069,"name":"RegisterOptions"}],"permalink":"/api/plugin/interface/Registration","previousId":2069,"nextId":2079},{"id":2079,"name":"RegistryOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2080,"name":"afterShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":46,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2051,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}]}},{"id":2081,"name":"afterStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":48,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2051,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}]}},{"id":2082,"name":"beforeShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":50,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2051,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}]}},{"id":2083,"name":"beforeStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":52,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2051,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}]}},{"id":2084,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver instead of `require.resolve`."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":54,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}},{"id":2085,"name":"validate","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Validate the shape of the plugin being registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":56,"character":1}],"type":{"type":"reference","id":2051,"typeArguments":[{"type":"reference","name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[2080,2081,2082,2083,2084,2085]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":44,"character":17}],"typeParameter":[{"id":2086,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2056,"name":"Pluggable"}}],"permalink":"/api/plugin/interface/RegistryOptions","previousId":2073,"nextId":2051},{"id":2051,"name":"Callback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":12}],"typeParameter":[{"id":2055,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reflection","declaration":{"id":2052,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":36}],"signatures":[{"id":2053,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2054,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/plugin#Callback","previousId":3,"nextId":2063},{"id":2063,"name":"Factory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":2067,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2056,"name":"Pluggable"}},{"id":2068,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":2064,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":70}],"signatures":[{"id":2065,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2066,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"O"}],"name":"Partial"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"name":"Promise"},{"type":"reference","name":"T"}]}}]}},"permalink":"/api/plugin#Factory","previousId":2051,"nextId":1963},{"id":1963,"name":"PluginErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":13,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/plugin#PluginErrorCode","previousId":2063,"nextId":2062},{"id":2062,"name":"Setting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":24,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2049,"name":"SourceOptions"}],"name":"Record"},"permalink":"/api/plugin#Setting","previousId":1963,"nextId":2048},{"id":2048,"name":"Source","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"FilePath"},{"type":"reference","name":"ModuleName"}]},"permalink":"/api/plugin#Source","previousId":2062,"nextId":2049},{"id":2049,"name":"SourceOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/plugin#SourceOptions","previousId":2048,"nextId":2050},{"id":2050,"name":"SourceWithOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":7,"character":12}],"type":{"type":"tuple","elements":[{"type":"reference","id":2048,"name":"Source"},{"type":"reference","id":2049,"name":"SourceOptions"}]},"permalink":"/api/plugin#SourceWithOptions","previousId":2049,"nextId":1933},{"id":1933,"name":"DEFAULT_PRIORITY","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/plugin/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":100},"defaultValue":"100","permalink":"/api/plugin#DEFAULT_PRIORITY","previousId":6,"nextId":1964},{"id":1964,"name":"PluginError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":15,"character":13}],"type":{"type":"reflection","declaration":{"id":1965,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1966,"name":"new PluginError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1967,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}},{"id":1968,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/plugin#PluginError","previousId":1933}],"groups":[{"title":"Classes","kind":128,"children":[1934,1969]},{"title":"Interfaces","kind":256,"children":[2056,2069,2073,2079]},{"title":"Type aliases","kind":4194304,"children":[2051,2063,1963,2062,2048,2049,2050]},{"title":"Variables","kind":32,"children":[1933,1964]}],"sources":[{"fileName":"packages/plugin/src/index.ts","line":6,"character":0}],"permalink":"/api/plugin"},"urlSlug":"plugin"}],"packageName":"@boost/plugin","packageVersion":"2.4.1"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":8,"name":"@boost/terminal","kind":1,"kindString":"Module","flags":{},"children":[{"id":2087,"name":"cursor","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":2097,"name":"hide","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Hide the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":13,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2098,"name":"nextLine","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Move cursor to the next line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":16,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2099,"name":"position","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Return the current cursur position."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":19,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2100,"name":"prevLine","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Move cursor to the previous line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":22,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2101,"name":"restorePosition","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Restores the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":25,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2102,"name":"savePosition","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Saves the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":28,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2103,"name":"show","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Show the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":31,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2104,"name":"startLine","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Move cursor to the start of the current line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":34,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2088,"name":"backward","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":4,"character":13}],"signatures":[{"id":2089,"name":"backward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move backward. Defaults to `1`."},"parameters":[{"id":2090,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2091,"name":"down","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":7,"character":13}],"signatures":[{"id":2092,"name":"down","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move down. Defaults to `1`."},"parameters":[{"id":2093,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2094,"name":"forward","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":10,"character":13}],"signatures":[{"id":2095,"name":"forward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move forward. Defaults to `1`."},"parameters":[{"id":2096,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2105,"name":"to","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":37,"character":13}],"signatures":[{"id":2106,"name":"to","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the relative position of the cursor."},"parameters":[{"id":2107,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2108,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2109,"name":"toAbsolute","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":40,"character":13}],"signatures":[{"id":2110,"name":"toAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the absolute position of the cursor, starting from the top left."},"parameters":[{"id":2111,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2112,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2113,"name":"up","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":43,"character":13}],"signatures":[{"id":2114,"name":"up","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move up. Defaults to `1`."},"parameters":[{"id":2115,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Variables","kind":32,"children":[2097,2098,2099,2100,2101,2102,2103,2104]},{"title":"Functions","kind":64,"children":[2088,2091,2094,2105,2109,2113]}],"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/cursor","nextId":2116},{"id":2116,"name":"screen","kind":2,"kindString":"Namespace","flags":{},"children":[{"id":2117,"name":"clear","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Clear the terminal screen."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":5,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2118,"name":"clearTerminal","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2119,"name":"erase","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Erase the screen and move the cursor the top left position."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":11,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"id":2120,"name":"eraseDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2121,"name":"eraseEndLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2122,"name":"eraseLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2126,"name":"eraseStartLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2127,"name":"eraseUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2128,"name":"scrollDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2129,"name":"scrollUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2123,"name":"eraseLines","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":2124,"name":"eraseLines","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Erase from the current cursor position up the specified amount of rows."},"parameters":[{"id":2125,"name":"count","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"Count of rows to erase.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2130,"name":"size","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":38,"character":13}],"signatures":[{"id":2131,"name":"size","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Reliably and accurately get the screen size (in `columns` and `rows`)."},"type":{"type":"reference","name":"terminalSize.Size"}}]}],"groups":[{"title":"Variables","kind":32,"children":[2117,2118,2119,2120,2121,2122,2126,2127,2128,2129]},{"title":"Functions","kind":64,"children":[2123,2130]}],"sources":[{"fileName":"packages/terminal/src/screen.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/screen","previousId":2087,"nextId":2165},{"id":2166,"name":"WrapOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2167,"name":"hard","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":126,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2168,"name":"trim","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2169,"name":"wordWrap","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2167,2168,2169]}],"sources":[{"fileName":"packages/terminal/src/text.ts","line":125,"character":17}],"permalink":"/api/terminal/interface/WrapOptions","previousId":7,"nextId":2087},{"id":2165,"name":"TruncateOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":108,"character":12}],"type":{"type":"reference","name":"cliTruncate.Options"},"permalink":"/api/terminal#TruncateOptions","previousId":1,"nextId":2164},{"id":2164,"name":"ANSI_REGEX","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Regular expression for matching ANSI escape codes."},"sources":[{"fileName":"packages/terminal/src/text.ts","line":14,"character":13}],"type":{"type":"reference","name":"RegExp"},"defaultValue":"...","permalink":"/api/terminal#ANSI_REGEX"},{"id":2132,"name":"annotate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":26,"character":16}],"signatures":[{"id":2133,"name":"annotate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text with a visual annotation _(iTerm only)_. If a terminal doe\\nnot support annotations, it will pass the text through.","text":"```ts\\nimport { annotate } from \'@boost/terminal\';\\n\\nconst text = annotate(\'fileName.js\', absFilePath);\\n```\\n"},"parameters":[{"id":2134,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2135,"name":"annotation","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/annotate","nextId":2136},{"id":2136,"name":"calculateWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":44,"character":16}],"signatures":[{"id":2137,"name":"calculateWidth","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculate and return the visual width of a string (number of terminal columns required).\\nBased on [string-width](https://www.npmjs.com/package/string-width).","text":"```ts\\nimport { calculateWidth } from \'@boost/terminal\';\\n\\ncalculateWidth(\'\u53e4\'); // 2\\n```\\n"},"parameters":[{"id":2138,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/terminal/function/calculateWidth","previousId":2132,"nextId":2139},{"id":2139,"name":"hasAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":58,"character":16}],"signatures":[{"id":2140,"name":"hasAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if the string contains ANSI escape codes.\\nBased on [ansi-regex](https://www.npmjs.com/package/ansi-regex).","text":"```ts\\nimport { hasAnsi } from \'@boost/terminal\';\\n\\nhasAnsi(\'\\\\u001B[4mTest\\\\u001B[0m\'); // true\\n```\\n"},"parameters":[{"id":2141,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/terminal/function/hasAnsi","previousId":2136,"nextId":2142},{"id":2142,"name":"link","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":72,"character":16}],"signatures":[{"id":2143,"name":"link","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text in an ANSI escape code hyperlink.\\nIf a terminal does not support hyperlinks, it will pass the text through.","text":"```ts\\nimport { link } from \'@boost/terminal\';\\n\\nconst text = link(\'Read the manual\', \'https://boostlib.dev\');\\n```\\n"},"parameters":[{"id":2144,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2145,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/link","previousId":2139,"nextId":2146},{"id":2146,"name":"sliceAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":90,"character":16}],"signatures":[{"id":2147,"name":"sliceAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Slice a string while preserving ANSI escape codes.\\nBased on [slice-ansi](https://www.npmjs.com/package/slice-ansi).","text":"```ts\\nimport { sliceAnsi } from \'@boost/terminal\';\\n\\nconst text = sliceAnsi(aStringThatMayContainAnsi, 15, 25);\\n```\\n"},"parameters":[{"id":2148,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2149,"name":"start","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2150,"name":"end","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/sliceAnsi","previousId":2142,"nextId":2151},{"id":2151,"name":"stripAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":104,"character":16}],"signatures":[{"id":2152,"name":"stripAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Strip all ANSI escape codes from the provided string.\\nBased on [strip-ansi](https://www.npmjs.com/package/strip-ansi).","text":"```ts\\nimport { stripAnsi } from \'@boost/terminal\';\\n\\nconst text = stripAnsi(aStringThatContainsAnsi);\\n```\\n"},"parameters":[{"id":2153,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/stripAnsi","previousId":2146,"nextId":2154},{"id":2154,"name":"truncate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":121,"character":16}],"signatures":[{"id":2155,"name":"truncate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Truncate a string to a desired terminal width while preserving ANSI escape codes,\\nUnicode surrogate pairs, and fullwidth characters.\\nBased on [cli-truncate](https://www.npmjs.com/package/cli-truncate).","text":"```ts\\nimport { truncate } from \'@boost/terminal\';\\n\\nconst text = truncate(aStringThatMayContainAnsi, 10, { position: \'middle\' });\\n```\\n"},"parameters":[{"id":2156,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2157,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2158,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2165,"name":"TruncateOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/truncate","previousId":2151,"nextId":2159},{"id":2159,"name":"wrapAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":141,"character":16}],"signatures":[{"id":2160,"name":"wrapAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Wrap a string that contains ANSI escape codes to a desired terminal width.\\nBased on [wrap-ansi](https://www.npmjs.com/package/wrap-ansi).","text":"```ts\\nimport { wrapAnsi } from \'@boost/terminal\';\\n\\nconst text = wrapAnsi(aStringThatContainsAnsi, 20);\\n```\\n"},"parameters":[{"id":2161,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2162,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2163,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2166,"name":"WrapOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/wrapAnsi","previousId":2154,"nextId":2166}],"groups":[{"title":"Functions","kind":64,"children":[2132,2136,2139,2142,2146,2151,2154,2159]},{"title":"Interfaces","kind":256,"children":[2166]},{"title":"Namespaces","kind":2,"children":[2087,2116]},{"title":"Type aliases","kind":4194304,"children":[2165]},{"title":"Variables","kind":32,"children":[2164]}],"sources":[{"fileName":"packages/terminal/src/index.ts","line":6,"character":0}],"permalink":"/api/terminal"},"urlSlug":"terminal"}],"packageName":"@boost/terminal","packageVersion":"2.2.2"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":9,"name":"@boost/translate","kind":1,"kindString":"Module","flags":{},"children":[{"id":2192,"name":"MessageOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2195,"name":"context","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Context used for special parsing (male, female, etc)."},"sources":[{"fileName":"packages/translate/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2194,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Count used to determine plurals."},"sources":[{"fileName":"packages/translate/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2193,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Default value to return if a translation was not found."},"sources":[{"fileName":"packages/translate/src/types.ts","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2196,"name":"interpolation","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Interpolation options to pass down."},"sources":[{"fileName":"packages/translate/src/types.ts","line":19,"character":1}],"type":{"type":"reference","name":"InterpolationOptions"}},{"id":2197,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Force translation to this locale."},"sources":[{"fileName":"packages/translate/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2198,"name":"postProcess","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Post-processors to run on the translation."},"sources":[{"fileName":"packages/translate/src/types.ts","line":23,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2195,2194,2193,2196,2197,2198]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":11,"character":17}],"permalink":"/api/translate/interface/MessageOptions","nextId":2199},{"id":2199,"name":"Translator","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2200,"name":"direction","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":28,"character":1}],"type":{"type":"reference","id":2188,"name":"Direction"}},{"id":2201,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":29,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2202,"name":"changeLocale","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":30,"character":1}],"signatures":[{"id":2203,"name":"changeLocale","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2204,"name":"locale","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2200,2201]},{"title":"Methods","kind":2048,"children":[2202]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":26,"character":17}],"signatures":[{"id":2206,"name":"Translator","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2207,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2208,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2191,"name":"InterpolationParams"}},{"id":2209,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2192,"name":"MessageOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/translate/interface/Translator","previousId":2192,"nextId":2175},{"id":2175,"name":"TranslatorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2176,"name":"autoDetect","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Automatically detect the locale from the environment. Defaults to `true`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2177,"name":"debug","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable debugging by logging info to the console."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2178,"name":"fallbackLocale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Fallback locale(s) to use when the detected locale isn\'t translated. Defaults to `en`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":24,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2179,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Locale to explicitly use."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2180,"name":"lookupType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Order in which to load and lookup locale translations."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":28,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"all"},{"type":"literal","value":"currentOnly"},{"type":"literal","value":"languageOnly"}]}},{"id":2181,"name":"resourceFormat","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File format resource bundles are written in. Defaults to `yaml`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":30,"character":1}],"type":{"type":"reference","id":2189,"name":"Format"}}],"groups":[{"title":"Properties","kind":1024,"children":[2176,2177,2178,2179,2180,2181]}],"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":18,"character":17}],"permalink":"/api/translate/interface/TranslatorOptions","previousId":2199,"nextId":2188},{"id":2188,"name":"Direction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"ltr"},{"type":"literal","value":"rtl"}]},"permalink":"/api/translate#Direction","previousId":2,"nextId":2189},{"id":2189,"name":"Format","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"yaml"}]},"permalink":"/api/translate#Format","previousId":2188,"nextId":2191},{"id":2191,"name":"InterpolationParams","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":9,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record"},"permalink":"/api/translate#InterpolationParams","previousId":2189,"nextId":2190},{"id":2190,"name":"Locale","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":7,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/translate#Locale","previousId":2191,"nextId":2182},{"id":2182,"name":"TranslateErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/translate#TranslateErrorCode","previousId":2190,"nextId":2183},{"id":2183,"name":"TranslateError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":2184,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2185,"name":"new TranslateError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2186,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}},{"id":2187,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/translate#TranslateError","previousId":4},{"id":2170,"name":"createTranslator","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":37,"character":16}],"signatures":[{"id":2171,"name":"createTranslator","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Translator` instance with the defined namespace.\\nA list of resource paths are required for locating translation files."},"parameters":[{"id":2172,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]}},{"id":2173,"name":"resourcePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"PortablePath"},{"type":"array","elementType":{"type":"reference","name":"PortablePath"}}]}},{"id":2174,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2175,"name":"TranslatorOptions"},"defaultValue":"{}"}],"type":{"type":"reference","id":2199,"name":"Translator"}}],"permalink":"/api/translate/function/createTranslator","nextId":2192}],"groups":[{"title":"Functions","kind":64,"children":[2170]},{"title":"Interfaces","kind":256,"children":[2192,2199,2175]},{"title":"Type aliases","kind":4194304,"children":[2188,2189,2191,2190,2182]},{"title":"Variables","kind":32,"children":[2183]}],"sources":[{"fileName":"packages/translate/src/index.ts","line":6,"character":0}],"permalink":"/api/translate"},"urlSlug":"translate"}],"packageName":"@boost/translate","packageVersion":"2.2.7"}]')}}]);