(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[384],{5318:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||l;return t?a.createElement(g,o(o({ref:n},d),{},{components:t})):a.createElement(g,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=c;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},517:function(e,n,t){"use strict";var a=t(7378);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},4535:function(e,n,t){"use strict";t.d(n,{Z:function(){return u}});var a=t(7378),r=t(4956);var l=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=t(8944),i="tabItem_c0e5",s="tabItemActive_28AG";var p=37,d=39;var u=function(e){var n=e.lazy,t=e.block,r=e.defaultValue,u=e.values,c=e.groupId,m=e.className,g=l(),k=g.tabGroupChoices,b=g.setTabGroupChoices,f=(0,a.useState)(r),h=f[0],y=f[1],N=a.Children.toArray(e.children),v=[];if(null!=c){var w=k[c];null!=w&&w!==h&&u.some((function(e){return e.value===w}))&&y(w)}var x=function(e){var n=e.currentTarget,t=v.indexOf(n),a=u[t].value;y(a),null!=c&&(b(c,a),setTimeout((function(){var e,t,a,r,l,o,i,p;(e=n.getBoundingClientRect(),t=e.top,a=e.left,r=e.bottom,l=e.right,o=window,i=o.innerHeight,p=o.innerWidth,t>=0&&l<=p&&r<=i&&a>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(s),setTimeout((function(){return n.classList.remove(s)}),2e3))}),150))},T=function(e){var n,t;switch(e.keyCode){case d:var a=v.indexOf(e.target)+1;t=v[a]||v[0];break;case p:var r=v.indexOf(e.target)-1;t=v[r]||v[v.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},m)},u.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:h===n?0:-1,"aria-selected":h===n,className:(0,o.Z)("tabs__item",i,{"tabs__item--active":h===n}),key:n,ref:function(e){return v.push(e)},onKeyDown:T,onFocus:x,onClick:x},t)}))),n?(0,a.cloneElement)(N.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},N.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==h})}))))}},4956:function(e,n,t){"use strict";var a=(0,t(7378).createContext)(void 0);n.Z=a},297:function(e,n,t){"use strict";t.d(n,{Z:function(){return r}});var a=t(7378);function r(e){var n=e.children,t=e.type;return a.createElement("span",{className:"badge badge--"+t},n)}},7586:function(e,n,t){"use strict";t.d(n,{Z:function(){return i}});var a=t(7378),r=t(297),l="badgeGroup_2HOO";function o(e){var n=e.children;return a.createElement("span",{className:l},n)}function i(e){var n=e.backend,t=e.frontend,l=e.tooling;return a.createElement(o,null,n&&a.createElement(r.Z,{type:"warning"},"Backend"),t&&a.createElement(r.Z,{type:"success"},"Frontend"),l&&a.createElement(r.Z,{type:"primary"},"Tooling"))}},5815:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return m},default:function(){return k}});var a=t(9603),r=t(120),l=(t(7378),t(5318)),o=t(7586),i=t(4535),s=t(517),p=["components"],d={title:"Plugins"},u=void 0,c={unversionedId:"plugin",id:"plugin",isDocsHomePage:!1,title:"Plugins",description:"Plugin based architecture that supports module loading, custom types, scopes, and more.",source:"@site/docs/plugin.mdx",sourceDirName:".",slug:"/plugin",permalink:"/docs/plugin",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/plugin.mdx",version:"current",frontMatter:{title:"Plugins"},sidebar:"docs",previous:{title:"Pipelines",permalink:"/docs/pipeline"},next:{title:"Terminal utilities",permalink:"/docs/terminal"}},m=[{value:"Installation",id:"installation",children:[]},{value:"Events",id:"events",children:[]},{value:"Preface",id:"preface",children:[]},{value:"Registries",id:"registries",children:[]},{value:"Plugins",id:"plugins",children:[{value:"Priority",id:"priority",children:[]},{value:"Life cycles",id:"life-cycles",children:[]}]},{value:"Modules",id:"modules",children:[{value:"Naming guidelines",id:"naming-guidelines",children:[]}]},{value:"Loading plugins",id:"loading-plugins",children:[{value:"Tool instances",id:"tool-instances",children:[]},{value:"Configuration files",id:"configuration-files",children:[]}]},{value:"Ecosystem",id:"ecosystem",children:[]}],g={toc:m};function k(e){var n=e.components,t=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(o.Z,{backend:!0,tooling:!0,mdxType:"EnvBadges"}),(0,l.kt)("p",null,"Plugin based architecture that supports module loading, custom types, scopes, and more."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)(i.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/plugin\n"))),(0,l.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/plugin\n")))),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Event"),(0,l.kt)("th",{parentName:"tr",align:null},"Arguments"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Registry#onAfterRegister")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Plugin")),(0,l.kt)("td",{parentName:"tr",align:null},"Called after a plugin is registered.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Registry#onAfterUnregister")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Plugin")),(0,l.kt)("td",{parentName:"tr",align:null},"Called after a plugin is unregistered.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Registry#onBeforeRegister")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Plugin")),(0,l.kt)("td",{parentName:"tr",align:null},"Called before a plugin is registered and the ",(0,l.kt)("inlineCode",{parentName:"td"},"startup")," life-cycle.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Registry#onBeforeUnregister")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Plugin")),(0,l.kt)("td",{parentName:"tr",align:null},"Called before a plugin is unregistered and the ",(0,l.kt)("inlineCode",{parentName:"td"},"shutdown")," life-cycle.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Registry#onLoad")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string, object")),(0,l.kt)("td",{parentName:"tr",align:null},"Called after a plugin is loaded but before it's registered.")))),(0,l.kt)("h2",{id:"preface"},"Preface"),(0,l.kt)("p",null,"The plugin system is comprised of 2 parts -- one for projects or libraries that want plugins, and\nthe other for plugin authors. ",(0,l.kt)("a",{parentName:"p",href:"#registries"},"Project owners")," can integrate into the system using a\nregistry, which is based around the idea of loading plugins from third-party packages or file system\npaths. ",(0,l.kt)("a",{parentName:"p",href:"#plugins"},"Plugin authors")," can create and provide packages that register and hook into the\nproject."),(0,l.kt)("p",null,"Our system is generic and robust enough to be integrated into any and all projects, with the ability\nto handle multiple plugins in parallel through configuration and setting based approaches."),(0,l.kt)("h2",{id:"registries"},"Registries"),(0,l.kt)("p",null,'For project authors, we begin by defining a unique plugin type, like "renderer", "engine", "asset",\nor simply "plugin" if you\'re not looking to be creative. We can accomplish this with the ',(0,l.kt)("inlineCode",{parentName:"p"},"Registry"),"\nclass, which requires a project name (used as a ",(0,l.kt)("a",{parentName:"p",href:"#naming-guidelines"},"package prefix and scope"),"),\nplugin type name, and customizable options."),(0,l.kt)("p",null,'In our examples moving forward, we will use "renderer" as our plugin type.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Registry, Pluggable } from '@boost/plugin';\n\nexport interface Renderable<T = unknown> extends Pluggable<T> {\n    render(): string | Promise<string>;\n}\n\nconst rendererRegistry = new Registry<Renderable>('boost', 'renderer', {\n    validate(plugin) {\n        if (typeof plugin.render !== 'function') {\n            throw new TypeError('Renderers require a `render()` method.');\n        }\n    },\n});\n\nexport default rendererRegistry;\n")),(0,l.kt)("p",null,"You may have noticed the ",(0,l.kt)("inlineCode",{parentName:"p"},"validate")," option above. This option is required as it forces you to verify\na plugin being loaded or registered abides the contract you expect. In the example above, we expect\nall our renderers to have a ",(0,l.kt)("inlineCode",{parentName:"p"},"render"),' method, otherwise, what would happen if an "engine" plugin was\npassed instead? Nothing good.'),(0,l.kt)("p",null,"Besides ",(0,l.kt)("inlineCode",{parentName:"p"},"validate"),", the following options can be passed, all of which are optional. For more\ninformation on life cycles, continue to the next ",(0,l.kt)("a",{parentName:"p",href:"#plugins"},"plugins")," chapter."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"beforeStartup")," (",(0,l.kt)("inlineCode",{parentName:"li"},"async (plugin: T) => void"),") - Callback fired before a plugin's ",(0,l.kt)("inlineCode",{parentName:"li"},"startup")," life\ncycle is executed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"beforeShutdown")," (",(0,l.kt)("inlineCode",{parentName:"li"},"async (plugin: T) => void"),") - Callback fired before a plugin's ",(0,l.kt)("inlineCode",{parentName:"li"},"shutdown")," life\ncycle is executed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"afterStartup")," (",(0,l.kt)("inlineCode",{parentName:"li"},"async (plugin: T) => void"),") - Callback fired after a plugin's ",(0,l.kt)("inlineCode",{parentName:"li"},"startup")," life\ncycle is executed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"afterShutdown")," (",(0,l.kt)("inlineCode",{parentName:"li"},"async (plugin: T) => void"),") - Callback fired after a plugin's ",(0,l.kt)("inlineCode",{parentName:"li"},"shutdown")," life\ncycle is executed.")),(0,l.kt)("h2",{id:"plugins"},"Plugins"),(0,l.kt)("p",null,"For both project owners and plugin authors, we keep talking about plugins, but what exactly is a\nplugin? In the context of this system, a plugin is either a plain object, or class instance that\nextends ",(0,l.kt)("inlineCode",{parentName:"p"},"Plugin"),", with both abiding a defined contract (the ",(0,l.kt)("inlineCode",{parentName:"p"},"validate")," option). A plugin must also\nhave a unique ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," property, which is typically the NPM package name."),(0,l.kt)(i.Z,{groupId:"plugin-format",defaultValue:"class",values:[{label:"Class",value:"class"},{label:"Object",value:"object"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"class",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Plugin } from '@boost/plugin';\nimport { Renderable } from './registry';\n\nexport default class Renderer extends Plugin implements Renderable {\n    // Using private scope\n    readonly name = '@boost/renderer-example';\n\n    render() {\n        return 'Something rendered here?';\n    }\n}\n"))),(0,l.kt)(s.Z,{value:"object",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Renderable } from './registry';\n\nconst renderer: Renderable = {\n    // Using public scope\n    name: 'boost-renderer-example',\n\n    render() {\n        return 'Something rendered here?';\n    },\n};\n\nexport default renderer;\n")))),(0,l.kt)("p",null,"Now why would we use a class instead of an object, as an object seems much simpler? For 2 reasons,\nthe 1st being that ",(0,l.kt)("inlineCode",{parentName:"p"},"Plugin")," extends from ",(0,l.kt)("a",{parentName:"p",href:"/docs/common/contract"},(0,l.kt)("inlineCode",{parentName:"a"},"Contract")),", which allows the plugin\nto inherit options through its constructor. This automatically happens when loading plugins from a\nconfiguration file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Blueprint, Predicates } from '@boost/common';\nimport { Plugin } from '@boost/plugin';\nimport { Renderable } from './registry';\n\nexport interface RendererOptions {\n    async?: boolean;\n}\n\nexport default class Renderer extends Plugin<unknown, RendererOptions> implements Renderable {\n    // ...\n\n    blueprint({ bool }: Predicates): Blueprint<RendererOptions> {\n        return {\n            async: bool(),\n        };\n    }\n}\n\n// Example\nconst renderer = new Renderer({ async: true });\n")),(0,l.kt)("p",null,"The 2nd reason is for TypeScript, as we can type our ",(0,l.kt)("a",{parentName:"p",href:"#tool-instances"},"tool")," that is passed to\n",(0,l.kt)("a",{parentName:"p",href:"#life-cycles"},"life cycles")," -- more specifically, the ",(0,l.kt)("inlineCode",{parentName:"p"},"Pluggable")," type. More information on the tool\ncan be found in later chapters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Plugin } from '@boost/plugin';\nimport { Renderable } from './registry';\nimport Tool from './Tool';\n\nexport default class Renderer extends Plugin<Tool> implements Renderable<Tool> {\n    // ...\n}\n")),(0,l.kt)("h3",{id:"priority"},"Priority"),(0,l.kt)("p",null,'After a plugin is loaded, the current plugins list is sorted based on priority. Priority is simply a\nnumber, in ascending order, that determines the order and precedence of plugins. Priority enables\nplugin authors and consumers to "mark" as high or low priority.'),(0,l.kt)("p",null,"Plugin authors can set a priority using the ",(0,l.kt)("inlineCode",{parentName:"p"},"priority")," property."),(0,l.kt)(i.Z,{groupId:"plugin-format",defaultValue:"class",values:[{label:"Class",value:"class"},{label:"Object",value:"object"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"class",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Plugin } from '@boost/plugin';\nimport { Renderable } from './registry';\n\nexport default class Renderer extends Plugin implements Renderable {\n    readonly name = '@boost/renderer-example';\n\n    priority = 50;\n\n    render() {\n        return 'Something rendered here?';\n    }\n}\n"))),(0,l.kt)(s.Z,{value:"object",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Renderable } from './registry';\n\nconst renderer: Renderable = {\n    name: 'boost-renderer-example',\n\n    priority: 50,\n\n    render() {\n        return 'Something rendered here?';\n    },\n};\n\nexport default renderer;\n")))),(0,l.kt)("p",null,"While ",(0,l.kt)("a",{parentName:"p",href:"#loading-plugins"},"consumers can override")," the priority using the ",(0,l.kt)("inlineCode",{parentName:"p"},"priority")," option."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"rendererRegistry.load('boost-renderer-example', {}, { priority: 50 });\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The default priority for all plugins is ",(0,l.kt)("inlineCode",{parentName:"p"},"100"),".")),(0,l.kt)("h3",{id:"life-cycles"},"Life cycles"),(0,l.kt)("p",null,"A life cycle is an optional method on a plugin that is executed at specific points in the life of a\nplugin. Currently, plugins support 2 life cycles, ",(0,l.kt)("inlineCode",{parentName:"p"},"startup")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"shutdown"),". Startup is executed\nafter a plugin is loaded and validated, but before it's registered in the registry. Shutdown on the\notherhand is executed before a plugin is unregistered from the registry."),(0,l.kt)("p",null,"All life cycles are asynchronouse and receive a ",(0,l.kt)("a",{parentName:"p",href:"#tool-instances"},"tool")," as its only argument."),(0,l.kt)(i.Z,{groupId:"plugin-format",defaultValue:"class",values:[{label:"Class",value:"class"},{label:"Object",value:"object"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"class",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Plugin } from '@boost/plugin';\nimport { Renderable } from './registry';\nimport Tool from './Tool';\n\nexport default class Renderer extends Plugin<Tool> implements Renderable<Tool> {\n    // ...\n\n    async startup(tool: Tool) {\n        // Do something\n    }\n\n    async shutdown(tool: Tool) {\n        // Do something\n    }\n}\n"))),(0,l.kt)(s.Z,{value:"object",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import Tool from './Tool';\n\nconst renderer = {\n    // ...\n\n    async startup(tool: Tool) {\n        // Do something\n    },\n\n    async shutdown(tool: Tool) {\n        // Do something\n    },\n};\n\nexport default renderer;\n")))),(0,l.kt)("h2",{id:"modules"},"Modules"),(0,l.kt)("p",null,"Typically plugins are represented as an NPM package or file module for easy consumption. This\npattern is first class in Boost, but there are specific requirements to be followed. The 1st is that\nall plugin modules ",(0,l.kt)("em",{parentName:"p"},"must")," return a factory function from the default index import. Using a factory\nfunction provides the following benefits:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The return value of the factory may change without breaking the import contract."),(0,l.kt)("li",{parentName:"ul"},"Option objects are passed to the factory, which allows implementors to handle it however they\nplease."),(0,l.kt)("li",{parentName:"ul"},"Runtime and boostrap based logic is encapsulated within the function."),(0,l.kt)("li",{parentName:"ul"},"Multiple instances can be created from a single imported package."),(0,l.kt)("li",{parentName:"ul"},"Asynchronous aware and compatible.")),(0,l.kt)("p",null,"Using our renderer examples, we would have the following factories. One sync and the other async."),(0,l.kt)(i.Z,{groupId:"plugin-format",defaultValue:"class",values:[{label:"Class (async)",value:"class"},{label:"Object (sync)",value:"object"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"class",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="@boost/renderer-example/src/index.ts"',title:'"@boost/renderer-example/src/index.ts"'},"import { Renderable } from './registry';\nimport Renderer, { RendererOptions } from './Renderer';\n\nexport default async function (options: RendererOptions): Renderable {\n    await someProcessThatNeedsToBeAwaited();\n\n    return new Renderer(options);\n}\n"))),(0,l.kt)(s.Z,{value:"object",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="boost-renderer-example/src/index.ts"',title:'"boost-renderer-example/src/index.ts"'},"import { RendererOptions, Renderable } from './registry';\n\nexport default function (options: RendererOptions): Renderable {\n    return {\n        name: 'boost-renderer-example',\n\n        render() {\n            if (options.async) {\n                return Promise.resolve('Ooo, this is a fancy render.');\n            }\n\n            return 'Something rendered here?';\n        },\n    };\n}\n")))),(0,l.kt)("h3",{id:"naming-guidelines"},"Naming guidelines"),(0,l.kt)("p",null,"You may have noticed in the examples above that we've been referencing both scoped and non-scoped\npackage names. All plugin packages follow the format of ",(0,l.kt)("inlineCode",{parentName:"p"},"<project>-<type>-<name>")," for public\nthird-party packages, and ",(0,l.kt)("inlineCode",{parentName:"p"},"@<project>/<type>-<name>")," for official project owner packages. A 3rd\nformat exists for public third-party packages that exist within a scope,\n",(0,l.kt)("inlineCode",{parentName:"p"},"@<scope>/<project>-<type>-<name>"),"."),(0,l.kt)("p",null,'If the plugin name is "example", and our project name is "boost", and our plugin type is "renderer",\nthe following package names are valid. ',(0,l.kt)("em",{parentName:"p"},"No other formats are supported.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Package"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Private/Owner"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"@boost/renderer-example"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Public"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boost-renderer-example"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Scoped public"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"@scope/boost-renderer-example"))))),(0,l.kt)("p",null,"All name parts should be in kebab-case and abide the official\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/npm/validate-npm-package-name"},"NPM package naming guidelines"),"."),(0,l.kt)("h2",{id:"loading-plugins"},"Loading plugins"),(0,l.kt)("p",null,"Plugins are either asynchronously loaded from an NPM package, a relative file system path, or\nexplicitly passed using the ",(0,l.kt)("inlineCode",{parentName:"p"},"Registry")," class. The ",(0,l.kt)("inlineCode",{parentName:"p"},"load()")," method can be used to load a single\nplugin, while ",(0,l.kt)("inlineCode",{parentName:"p"},"loadMany()")," will load multiple. Loading accepts 3 different formats, which are\noutlined with the examples below."),(0,l.kt)("p",null,"Passing a string will load based on module name or file path. Names can either be short (just the\nplugin name), or in the long fully qualified form (project, type, and plugin name). When using the\nshort form, the loader will attempt to find both the scoped (",(0,l.kt)("inlineCode",{parentName:"p"},"@boost/renderer-example"),") and\nnon-scoped packages (",(0,l.kt)("inlineCode",{parentName:"p"},"boost-renderer-example"),"), with scoped taking precedence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Load by short module name\nconst renderer = await rendererRegistry.load('foo');\n\n// Load by long module name with options\nconst renderer = await rendererRegistry.load('boost-renderer-foo', { async: true });\n\n// Load by file path\nconst renderer = await rendererRegistry.load('./renderers/qux.js');\n")),(0,l.kt)("p",null,"You may also load many plugins in parallel, by passing an array of module names or plugin instances,\nor by passing an object of module names that map to booleans or options."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Load many with default options\nconst renderers = await rendererRegistry.loadMany([\n    'foo',\n    '@boost/renderer-bar',\n    '@scope/boost-renderer-baz',\n]);\n\n// Load many with custom options\nconst renderers = await rendererRegistry.loadMany({\n    foo: { async: true },\n    '@boost/renderer-bar': true, // Enabled\n    '@scope/boost-renderer-baz': false, // Disabled\n});\n")),(0,l.kt)("p",null,"And lastly, passing a plugin object directly is also supported."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const renderer = await rendererRegistry.load({\n    name: '@scope/boost-renderer-baz',\n    render() {\n        return 'Hello world';\n    },\n});\n\n// Or\nconst renderer = await rendererRegistry.load(new Renderer());\n")),(0,l.kt)("p",null,"Loaded and registered plugins should then be accessed with ",(0,l.kt)("inlineCode",{parentName:"p"},"get()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"getMany()"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"getAll()"),", all\nof which check based on the plugin's ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," property."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const renderer = rendererRegistry.get('boost-renderer-foo');\n")),(0,l.kt)("h3",{id:"tool-instances"},"Tool instances"),(0,l.kt)("p",null,"Most projects have a central object or class instance that powers their entire process, for\ninstance, Webpack has the ",(0,l.kt)("inlineCode",{parentName:"p"},"Compiler")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Compilation")," instances. In Boost this is called a tool (as\nin developer or build tool)."),(0,l.kt)("p",null,"Tools are optional, but when defined, they're passed to plugin life cycles, so that plugins may\ninteract and integrate with them. For proper type-safety, the Tool type should be passed as a\ngeneric to ",(0,l.kt)("inlineCode",{parentName:"p"},"Registry"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Plugin"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"Pluggable"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { Registry, Pluggable, Plugin } from '@boost/plugin';\nimport Tool from './Tool';\n\nexport interface Renderable<T> extends Pluggable<T> {\n    render(): string | Promise<string>;\n}\n\nclass Renderer<T> extends Plugin<T> implements Renderable<T> {}\n\nconst registry = new Registry<Renderable, Tool>(/* ... */);\nconst renderer = new Renderer<Tool>();\n")),(0,l.kt)("p",null,"If you have a tool instance, pass the tool as an option to ",(0,l.kt)("inlineCode",{parentName:"p"},"Registry#load()")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"Registry#loadMany()"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import Tool from './Tool';\n\nconst tool = new Tool();\n\nawait registry.load('foo', {}, { tool });\nawait registry.loadMany(['foo', 'bar'], { tool });\n")),(0,l.kt)("h3",{id:"configuration-files"},"Configuration files"),(0,l.kt)("p",null,"The loader methods were built to support plugins defined in ",(0,l.kt)("a",{parentName:"p",href:"/docs/config"},"configuration files"),", as\nthis is a common use case. Settings to configure plugins are designed with 3 different formats in\nmind, all of which can be used together, and will merge into a valid final result."),(0,l.kt)("p",null,"The first is a simple array of plugin sources (module name or relative file path). When using a\nmodule, both long and short forms are supported."),(0,l.kt)(i.Z,{groupId:"package-manager",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"JS",value:"js"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"json",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "renderers": [\n    "foo", // @boost/renderer-foo, boost-renderer-foo\n    "@boost/renderer-bar",\n    "@scope/boost-renderer-baz",\n    "../custom/renderer.js"\n  ]\n}\n'))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n    renderers: [\n        'foo', // @boost/renderer-foo, boost-renderer-foo\n        '@boost/renderer-bar',\n        '@scope/boost-renderer-baz',\n        '../custom/renderer.js',\n    ],\n};\n")))),(0,l.kt)("p",null,"To expand upon the previous example, an individual plugin can be configured with options by passing\na tuple alongside the source. Plugins can also be disabled by passing a ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," value."),(0,l.kt)(i.Z,{groupId:"package-manager",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"JS",value:"js"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"json",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "renderers": [\n    ["foo", { "async": true }],\n    "@boost/renderer-bar",\n    ["@scope/boost-renderer-baz", false], // Disabled\n    "../custom/renderer.js"\n  ]\n}\n'))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n    renderers: [\n        ['foo', { async: true }],\n        '@boost/renderer-bar',\n        ['@scope/boost-renderer-baz', false], // Disabled\n        '../custom/renderer.js',\n    ],\n};\n")))),(0,l.kt)("p",null,"The final format, which is quite advanced, is using an object that maps plugin sources to\nconfigurable options or flags (enable or disable the plugin)."),(0,l.kt)(i.Z,{groupId:"package-manager",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"JS",value:"js"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"json",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "renderers": {\n    "foo": { "async": true }, // Enabled with options\n    "@boost/renderer-bar": {}, // Enabled with empty options\n    "@scope/boost-renderer-baz": false, // Disabled\n    "../custom/renderer.js": true // Enabled\n  }\n}\n'))),(0,l.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n    renderers: {\n        foo: { async: true }, // Enabled with options\n        '@boost/renderer-bar': {}, // Enabled with empty options\n        '@scope/boost-renderer-baz': false, // Disabled\n        '../custom/renderer.js': true, // Enabled\n    },\n};\n")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Configuration files are designed to be serializable, so passing class instances (Webpack/Rollup\nstyle) is not supported. It's also not necessary with our factory pattern!")),(0,l.kt)("h2",{id:"ecosystem"},"Ecosystem"),(0,l.kt)("p",null,"Below are a list of third-party projects and their current plugin implementations. These were used\nas a basis and reference for Boost's plugin system."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Project"),(0,l.kt)("th",{parentName:"tr",align:null},"Plugin pattern"),(0,l.kt)("th",{parentName:"tr",align:null},"Options pattern"),(0,l.kt)("th",{parentName:"tr",align:null},"Package names"),(0,l.kt)("th",{parentName:"tr",align:null},"Lifecycle events"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-writing-your-first-babel-plugin"},"Babel")),(0,l.kt)("td",{parentName:"tr",align:null},"Function that returns an object"),(0,l.kt)("td",{parentName:"tr",align:null},"Function argument"),(0,l.kt)("td",{parentName:"tr",align:null},"babel-plugin-foo, @babel/plugin-foo"),(0,l.kt)("td",{parentName:"tr",align:null},"pre(), post()")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://eslint.org/docs/developer-guide/working-with-plugins"},"ESLint")),(0,l.kt)("td",{parentName:"tr",align:null},"Object"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"eslint-plugin-foo"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://gulpjs.com/docs/en/getting-started/using-plugins"},"Gulp")),(0,l.kt)("td",{parentName:"tr",align:null},"Function that returns a stream"),(0,l.kt)("td",{parentName:"tr",align:null},"Function argument"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://parceljs.org/asset_types.html"},"Parcel asset")),(0,l.kt)("td",{parentName:"tr",align:null},"Class that extends ",(0,l.kt)("inlineCode",{parentName:"td"},"Asset")),(0,l.kt)("td",{parentName:"tr",align:null},"Constructor"),(0,l.kt)("td",{parentName:"tr",align:null},"parcel-asset-foo,",(0,l.kt)("br",null),"@parcel/asset-foo"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://parceljs.org/plugins.html"},"Parcel plugin")),(0,l.kt)("td",{parentName:"tr",align:null},"Function that binds events"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"parcel-plugin-foo, @parcel/plugin-foo"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://prettier.io/docs/en/plugins.html"},"Prettier")),(0,l.kt)("td",{parentName:"tr",align:null},"Named exports"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"prettier-plugin-foo, @prettier/plugin-foo, @scope/prettier-plugin-foo"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://rollupjs.org/guide/en/#plugins-overview"},"Rollup")),(0,l.kt)("td",{parentName:"tr",align:null},"Function that returns an object"),(0,l.kt)("td",{parentName:"tr",align:null},"Function argument"),(0,l.kt)("td",{parentName:"tr",align:null},"rollup-plugin-foo"),(0,l.kt)("td",{parentName:"tr",align:null},"Many")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://webpack.js.org/contribute/writing-a-plugin/"},"Webpack")),(0,l.kt)("td",{parentName:"tr",align:null},"Stand-alone class"),(0,l.kt)("td",{parentName:"tr",align:null},"Constructor (implementation dependent)"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"apply()")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://next.yarnpkg.com/advanced/plugin-tutorial"},"Yarn")),(0,l.kt)("td",{parentName:"tr",align:null},"Object with ",(0,l.kt)("inlineCode",{parentName:"td"},"factory()")," that returns an object"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"factory()")))))}k.isMDXComponent=!0},8944:function(e,n,t){"use strict";function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}function r(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}t.d(n,{Z:function(){return r}})}}]);