"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8442],{457:function(e){e.exports=JSON.parse('[{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":1,"name":"@boost/args","kind":2,"kindString":"Module","flags":{},"children":[{"id":135,"name":"ParseError","kind":128,"kindString":"Class","flags":{},"children":[{"id":136,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":6,"character":1}],"signatures":[{"id":137,"name":"new ParseError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":138,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":139,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":140,"name":"index","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":135,"name":"ParseError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":141,"name":"arg","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":142,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ParseError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[136]},{"title":"Properties","kind":1024,"children":[141,142]}],"sources":[{"fileName":"packages/args/src/ParseError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}],"permalink":"/api/args/class/ParseError","nextId":313},{"id":313,"name":"ValidationError","kind":128,"kindString":"Class","flags":{},"children":[{"id":314,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":6,"character":1}],"signatures":[{"id":315,"name":"new ValidationError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":316,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":317,"name":"option","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"}],"type":{"type":"reference","id":313,"name":"ValidationError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":318,"name":"option","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":4,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Constructors","kind":512,"children":[314]},{"title":"Properties","kind":1024,"children":[318]}],"sources":[{"fileName":"packages/args/src/ValidationError.ts","line":3,"character":13}],"extendedTypes":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}],"permalink":"/api/args/class/ValidationError","previousId":135,"nextId":125},{"id":213,"name":"Arg","kind":256,"kindString":"Interface","flags":{},"children":[{"id":214,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","id":225,"name":"T"}},{"id":222,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":202,"name":"Config.deprecated"}},{"id":223,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":203,"name":"Config.description"}},{"id":224,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":204,"name":"Config.hidden"}},{"id":218,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":211,"typeArguments":[{"type":"reference","id":225,"name":"T"}],"name":"InferArgType"}},{"id":215,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":216,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":217,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"reference","id":225,"name":"T"}}]},{"id":219,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":220,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":221,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[214,222,223,224,218]},{"title":"Methods","kind":2048,"children":[215,219]}],"sources":[{"fileName":"packages/args/src/types.ts","line":150,"character":17}],"typeParameter":[{"id":225,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":201,"name":"Config"}],"extendedBy":[{"type":"reference","id":226,"name":"Option"},{"type":"reference","id":283,"name":"Param"}],"permalink":"/api/args/interface/Arg","previousId":143,"nextId":179},{"id":179,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":180,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":92,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":181,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":94,"character":1}],"type":{"type":"array","elementType":{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}}},{"id":182,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/src/types.ts","line":96,"character":1}],"type":{"type":"reference","id":186,"name":"O"}},{"id":183,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":98,"character":1}],"type":{"type":"reference","id":163,"typeArguments":[{"type":"reference","id":187,"name":"P"}],"name":"MapParamType"}},{"id":184,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/src/types.ts","line":100,"character":1}],"type":{"type":"reference","id":151,"name":"ArgList"}},{"id":185,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/src/types.ts","line":102,"character":1}],"type":{"type":"reference","id":157,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[180,181,182,183,184,185]}],"sources":[{"fileName":"packages/args/src/types.ts","line":90,"character":17}],"typeParameter":[{"id":186,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":187,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":154,"name":"PrimitiveType"}},"default":{"type":"reference","id":151,"name":"ArgList"}}],"permalink":"/api/args/interface/Arguments","previousId":213,"nextId":298},{"id":298,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":299,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":205,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":300,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":206,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[299,300]}],"sources":[{"fileName":"packages/args/src/types.ts","line":204,"character":17}],"permalink":"/api/args/interface/Category","previousId":179,"nextId":205},{"id":205,"name":"Command","kind":256,"kindString":"Interface","flags":{},"children":[{"id":206,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/src/types.ts","line":137,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":208,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":202,"name":"Config.deprecated"}},{"id":209,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":203,"name":"Config.description"}},{"id":210,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":204,"name":"Config.hidden"}},{"id":207,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/src/types.ts","line":139,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[206,208,209,210,207]}],"sources":[{"fileName":"packages/args/src/types.ts","line":135,"character":17}],"extendedTypes":[{"type":"reference","id":201,"name":"Config"}],"permalink":"/api/args/interface/Command","previousId":298,"nextId":201},{"id":201,"name":"Config","kind":256,"kindString":"Interface","flags":{},"children":[{"id":202,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":203,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":204,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[202,203,204]}],"sources":[{"fileName":"packages/args/src/types.ts","line":126,"character":17}],"extendedBy":[{"type":"reference","id":205,"name":"Command"},{"type":"reference","id":213,"name":"Arg"}],"permalink":"/api/args/interface/Config","previousId":205,"nextId":275},{"id":275,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":277,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":276,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":193,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":280,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":281,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":282,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":278,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":312,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":279,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[277,276,280,281,282,278,279]}],"sources":[{"fileName":"packages/args/src/types.ts","line":192,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":226,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"qualifiedName":"Omit","package":"typescript","name":"Omit"}],"permalink":"/api/args/interface/Flag","previousId":201,"nextId":258},{"id":258,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":259,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/src/types.ts","line":186,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":262,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":227,"name":"Option.category"}},{"id":260,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":187,"character":1}],"type":{"type":"reference","id":274,"name":"T"},"overwrites":{"type":"reference","id":229,"name":"Option.default"}},{"id":271,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":237,"name":"Option.deprecated"}},{"id":272,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":238,"name":"Option.description"}},{"id":273,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":239,"name":"Option.hidden"}},{"id":261,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/src/types.ts","line":189,"character":1}],"type":{"type":"literal","value":true}},{"id":263,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":312,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":228,"name":"Option.short"}},{"id":267,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":211,"typeArguments":[{"type":"reference","id":274,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":233,"name":"Option.type"}},{"id":264,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":265,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":266,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"reference","id":225,"name":"T"},"inheritedFrom":{"type":"reference","id":231,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":230,"name":"Option.format"}},{"id":268,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":269,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":270,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":235,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":234,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[259,262,260,271,272,273,261,263,267]},{"title":"Methods","kind":2048,"children":[264,268]}],"sources":[{"fileName":"packages/args/src/types.ts","line":184,"character":17}],"typeParameter":[{"id":274,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":152,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":226,"typeArguments":[{"type":"reference","id":274,"name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/MultipleOption","previousId":275,"nextId":226},{"id":226,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":227,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":229,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","id":240,"name":"T"},"inheritedFrom":{"type":"reference","id":214,"name":"Arg.default"}},{"id":237,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":222,"name":"Arg.deprecated"}},{"id":238,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":223,"name":"Arg.description"}},{"id":239,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":224,"name":"Arg.hidden"}},{"id":228,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":312,"name":"ShortOptionName"}},{"id":233,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":211,"typeArguments":[{"type":"reference","id":240,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":218,"name":"Arg.type"}},{"id":230,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":231,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":232,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"reference","id":225,"name":"T"},"inheritedFrom":{"type":"reference","id":216,"name":"Arg.format"}}],"inheritedFrom":{"type":"reference","id":215,"name":"Arg.format"}},{"id":234,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":235,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":236,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":220,"name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","id":219,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[227,229,237,238,239,228,233]},{"title":"Methods","kind":2048,"children":[230,234]}],"sources":[{"fileName":"packages/args/src/types.ts","line":169,"character":17}],"typeParameter":[{"id":240,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":155,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","id":213,"typeArguments":[{"type":"reference","id":240,"name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":241,"name":"SingleOption"},{"type":"reference","id":258,"name":"MultipleOption"}],"permalink":"/api/args/interface/Option","previousId":258,"nextId":283},{"id":283,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":286,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":160,"character":1}],"type":{"type":"reference","id":297,"name":"T"},"inheritedFrom":{"type":"reference","id":214,"name":"Arg.default"}},{"id":294,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":222,"name":"Arg.deprecated"}},{"id":295,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":223,"name":"Arg.description"}},{"id":296,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":224,"name":"Arg.hidden"}},{"id":284,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/src/types.ts","line":198,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":285,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":201,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":290,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":211,"typeArguments":[{"type":"reference","id":297,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":218,"name":"Arg.type"}},{"id":287,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":288,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":289,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"reference","id":225,"name":"T"},"inheritedFrom":{"type":"reference","id":216,"name":"Arg.format"}}],"inheritedFrom":{"type":"reference","id":215,"name":"Arg.format"}},{"id":291,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":292,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":293,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":220,"name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","id":219,"name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[286,294,295,296,284,285,290]},{"title":"Methods","kind":2048,"children":[287,291]}],"sources":[{"fileName":"packages/args/src/types.ts","line":196,"character":17}],"typeParameter":[{"id":297,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":154,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","id":213,"typeArguments":[{"type":"reference","id":297,"name":"T"}],"name":"Arg"}],"permalink":"/api/args/interface/Param","previousId":226,"nextId":192},{"id":192,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":193,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":169,"name":"CommandChecker"}]}},{"id":196,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":189,"name":"ParserSettings.loose"}},{"id":194,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/src/types.ts","line":119,"character":1}],"type":{"type":"reference","id":167,"typeArguments":[{"type":"reference","id":199,"name":"O"}],"name":"MapOptionConfig"}},{"id":195,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":161,"typeArguments":[{"type":"reference","id":200,"name":"P"}],"name":"MapParamConfig"}},{"id":197,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":190,"name":"ParserSettings.unknown"}},{"id":198,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":191,"name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[193,196,194,195,197,198]}],"sources":[{"fileName":"packages/args/src/types.ts","line":114,"character":17}],"typeParameter":[{"id":199,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":200,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":154,"name":"PrimitiveType"}},"default":{"type":"reference","id":151,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","id":188,"name":"ParserSettings"}],"permalink":"/api/args/interface/ParserOptions","previousId":283,"nextId":188},{"id":188,"name":"ParserSettings","kind":256,"kindString":"Interface","flags":{},"children":[{"id":189,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/src/types.ts","line":107,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":190,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/src/types.ts","line":109,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":191,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/src/types.ts","line":111,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[189,190,191]}],"sources":[{"fileName":"packages/args/src/types.ts","line":105,"character":17}],"extendedBy":[{"type":"reference","id":192,"name":"ParserOptions"}],"permalink":"/api/args/interface/ParserSettings","previousId":192,"nextId":241},{"id":241,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":245,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/src/types.ts","line":171,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":227,"name":"Option.category"}},{"id":242,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/src/types.ts","line":178,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":257,"name":"T"}}},{"id":243,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/src/types.ts","line":180,"character":1}],"type":{"type":"conditional","checkType":{"type":"reference","id":257,"name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":244,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/src/types.ts","line":181,"character":1}],"type":{"type":"reference","id":257,"name":"T"},"overwrites":{"type":"reference","id":229,"name":"Option.default"}},{"id":254,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":128,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":237,"name":"Option.deprecated"}},{"id":255,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/src/types.ts","line":130,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":238,"name":"Option.description"}},{"id":256,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/src/types.ts","line":132,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":239,"name":"Option.hidden"}},{"id":246,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/src/types.ts","line":173,"character":1}],"type":{"type":"reference","id":312,"name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":228,"name":"Option.short"}},{"id":250,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":211,"typeArguments":[{"type":"reference","id":257,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":233,"name":"Option.type"}},{"id":247,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":162,"character":1}],"signatures":[{"id":248,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":249,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"reference","id":225,"name":"T"},"inheritedFrom":{"type":"reference","id":231,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":230,"name":"Option.format"}},{"id":251,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":166,"character":1}],"signatures":[{"id":252,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":253,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":225,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":235,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":234,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[245,242,243,244,254,255,256,246,250]},{"title":"Methods","kind":2048,"children":[247,251]}],"sources":[{"fileName":"packages/args/src/types.ts","line":176,"character":17}],"typeParameter":[{"id":257,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":153,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":226,"typeArguments":[{"type":"reference","id":257,"name":"T"}],"name":"Option"}],"permalink":"/api/args/interface/SingleOption","previousId":188,"nextId":158},{"id":158,"name":"AliasMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":19,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/args#AliasMap","previousId":241,"nextId":151},{"id":151,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":5,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#ArgList","previousId":158,"nextId":111},{"id":111,"name":"ArgsErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":35,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/args#ArgsErrorCode","previousId":151,"nextId":150},{"id":150,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/args#Argv","previousId":111,"nextId":169},{"id":169,"name":"CommandChecker","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":12}],"type":{"type":"reflection","declaration":{"id":170,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":86,"character":29}],"signatures":[{"id":171,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":172,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"permalink":"/api/args#CommandChecker","previousId":150,"nextId":173},{"id":173,"name":"ContextFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":12}],"type":{"type":"reflection","declaration":{"id":174,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":29}],"signatures":[{"id":175,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":177,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":178,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":150,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":192,"typeArguments":[{"type":"reflection","declaration":{"id":176,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":88,"character":72}]}}],"name":"ParserOptions"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/args#ContextFactory","previousId":169,"nextId":211},{"id":211,"name":"InferArgType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":144,"character":12}],"typeParameter":[{"id":212,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":212,"name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"literal","value":"boolean"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":212,"name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"intrinsic","name":"number"}]},"trueType":{"type":"literal","value":"number"},"falseType":{"type":"literal","value":"string"}}},"permalink":"/api/args#InferArgType","previousId":173,"nextId":165},{"id":165,"name":"InferOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type."},"sources":[{"fileName":"packages/args/src/types.ts","line":75,"character":12}],"typeParameter":[{"id":166,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":166,"name":"T"},"extendsType":{"type":"intrinsic","name":"boolean"},"trueType":{"type":"reference","id":275,"name":"Flag"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":166,"name":"T"},"extendsType":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"trueType":{"type":"reference","id":258,"typeArguments":[{"type":"reference","id":166,"name":"T"}],"name":"MultipleOption"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":166,"name":"T"},"extendsType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"trueType":{"type":"reference","id":241,"typeArguments":[{"type":"reference","id":166,"name":"T"}],"name":"SingleOption"},"falseType":{"type":"intrinsic","name":"never"}}}},"permalink":"/api/args#InferOptionConfig","previousId":211,"nextId":159},{"id":159,"name":"InferParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Determine option based on type. Only primitives are allowed."},"sources":[{"fileName":"packages/args/src/types.ts","line":22,"character":12}],"typeParameter":[{"id":160,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":160,"name":"T"},"extendsType":{"type":"reference","id":154,"name":"PrimitiveType"},"trueType":{"type":"reference","id":283,"typeArguments":[{"type":"reference","id":160,"name":"T"}],"name":"Param"},"falseType":{"type":"intrinsic","name":"never"}},"permalink":"/api/args#InferParamConfig","previousId":165,"nextId":152},{"id":152,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":7,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/args#ListType","previousId":159,"nextId":311},{"id":311,"name":"LongOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Option name without leading \\"--\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":226,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/args#LongOptionName","previousId":152,"nextId":167},{"id":167,"name":"MapOptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":84,"character":12}],"typeParameter":[{"id":168,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"mapped","parameter":"K","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":168,"name":"T"}},"templateType":{"type":"reference","id":165,"typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","name":"K"},"objectType":{"type":"reference","id":168,"name":"T"}}],"name":"InferOptionConfig"}},"permalink":"/api/args#MapOptionConfig","previousId":311,"nextId":161},{"id":161,"name":"MapParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":162,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":154,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","id":162,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"E"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":162,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"D"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":162,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"C"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":162,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"},{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"B"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":162,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","id":159,"typeArguments":[{"type":"reference","name":"A"}],"name":"InferParamConfig"}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":162,"name":"T"},"extendsType":{"type":"reference","id":151,"name":"ArgList"},"trueType":{"type":"array","elementType":{"type":"reference","id":283,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Param"}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamConfig","previousId":167,"nextId":163},{"id":163,"name":"MapParamType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":54,"character":12}],"typeParameter":[{"id":164,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":154,"name":"PrimitiveType"}}}],"type":{"type":"conditional","checkType":{"type":"reference","id":164,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"},{"type":"inferred","name":"E"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"reference","name":"E"},{"type":"rest","elementType":{"type":"reference","id":151,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":164,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"},{"type":"inferred","name":"D"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"reference","name":"D"},{"type":"rest","elementType":{"type":"reference","id":151,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":164,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"},{"type":"inferred","name":"C"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"reference","name":"C"},{"type":"rest","elementType":{"type":"reference","id":151,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":164,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"},{"type":"inferred","name":"B"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"reference","name":"B"},{"type":"rest","elementType":{"type":"reference","id":151,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":164,"name":"T"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A"}]},"trueType":{"type":"tuple","elements":[{"type":"reference","name":"A"},{"type":"rest","elementType":{"type":"reference","id":151,"name":"ArgList"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","id":164,"name":"T"},"extendsType":{"type":"reference","id":151,"name":"ArgList"},"trueType":{"type":"reference","id":151,"name":"ArgList"},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/args#MapParamType","previousId":161,"nextId":301},{"id":301,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":12}],"type":{"type":"intersection","types":[{"type":"reference","id":226,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":302,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":303,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":211,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":304,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":212,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":154,"name":"PrimitiveType"}}},{"id":305,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":213,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":306,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":214,"character":1}],"type":{"type":"reference","id":155,"name":"ValueType"}},{"id":307,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/src/types.ts","line":215,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[303,304,305,306,307]}],"sources":[{"fileName":"packages/args/src/types.ts","line":210,"character":41}]}}]},"permalink":"/api/args#OptionConfig","previousId":163,"nextId":308},{"id":308,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":218,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":301,"name":"OptionConfig"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/args#OptionConfigMap","previousId":301,"nextId":156},{"id":156,"name":"OptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":15,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":155,"name":"ValueType"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/args#OptionMap","previousId":308,"nextId":309},{"id":309,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/src/types.ts","line":221,"character":12}],"type":{"type":"reference","id":283,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/args#ParamConfig","previousId":156,"nextId":310},{"id":310,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":223,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":309,"name":"ParamConfig"}},"permalink":"/api/args#ParamConfigList","previousId":309,"nextId":154},{"id":154,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":153,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/args#PrimitiveType","previousId":310,"nextId":153},{"id":153,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":9,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/args#ScalarType","previousId":154,"nextId":312},{"id":312,"name":"ShortOptionName","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Short option name without leading \\"-\\"."},"sources":[{"fileName":"packages/args/src/types.ts","line":229,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"A"},{"type":"literal","value":"a"},{"type":"literal","value":"B"},{"type":"literal","value":"b"},{"type":"literal","value":"C"},{"type":"literal","value":"c"},{"type":"literal","value":"D"},{"type":"literal","value":"d"},{"type":"literal","value":"E"},{"type":"literal","value":"e"},{"type":"literal","value":"F"},{"type":"literal","value":"f"},{"type":"literal","value":"G"},{"type":"literal","value":"g"},{"type":"literal","value":"H"},{"type":"literal","value":"h"},{"type":"literal","value":"I"},{"type":"literal","value":"i"},{"type":"literal","value":"J"},{"type":"literal","value":"j"},{"type":"literal","value":"K"},{"type":"literal","value":"k"},{"type":"literal","value":"L"},{"type":"literal","value":"l"},{"type":"literal","value":"M"},{"type":"literal","value":"m"},{"type":"literal","value":"N"},{"type":"literal","value":"n"},{"type":"literal","value":"O"},{"type":"literal","value":"o"},{"type":"literal","value":"P"},{"type":"literal","value":"p"},{"type":"literal","value":"Q"},{"type":"literal","value":"q"},{"type":"literal","value":"R"},{"type":"literal","value":"r"},{"type":"literal","value":"S"},{"type":"literal","value":"s"},{"type":"literal","value":"T"},{"type":"literal","value":"t"},{"type":"literal","value":"U"},{"type":"literal","value":"u"},{"type":"literal","value":"V"},{"type":"literal","value":"v"},{"type":"literal","value":"W"},{"type":"literal","value":"w"},{"type":"literal","value":"X"},{"type":"literal","value":"x"},{"type":"literal","value":"Y"},{"type":"literal","value":"y"},{"type":"literal","value":"Z"},{"type":"literal","value":"z"}]},"permalink":"/api/args#ShortOptionName","previousId":153,"nextId":157},{"id":157,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":17,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/args#UnknownOptionMap","previousId":312,"nextId":155},{"id":155,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/src/types.ts","line":13,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":152,"name":"ListType"},{"type":"reference","id":154,"name":"PrimitiveType"}]},"permalink":"/api/args#ValueType","previousId":157,"nextId":112},{"id":112,"name":"ArgsError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/ArgsError.ts","line":37,"character":13}],"type":{"type":"reflection","declaration":{"id":113,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":114,"name":"new ArgsError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":115,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}},{"id":116,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_INVALID_FORMAT"},{"type":"literal","value":"COMMAND_NOT_FIRST"},{"type":"literal","value":"COMMAND_PROVIDED"},{"type":"literal","value":"CONTEXT_REQUIRED"},{"type":"literal","value":"GROUP_REQUIRED_COUNT"},{"type":"literal","value":"GROUP_UNSUPPORTED_TYPE"},{"type":"literal","value":"OPTION_INVALID_COUNT_TYPE"},{"type":"literal","value":"OPTION_UNKNOWN"},{"type":"literal","value":"OPTION_UNKNOWN_FORMAT"},{"type":"literal","value":"OPTION_UNKNOWN_MORE"},{"type":"literal","value":"PARAM_INVALID_ORDER"},{"type":"literal","value":"PARAM_REQUIRED"},{"type":"literal","value":"PARAM_REQUIRED_NO_DEFAULT"},{"type":"literal","value":"PARAM_UNKNOWN"},{"type":"literal","value":"SHORT_DEFINED"},{"type":"literal","value":"SHORT_INVALID_CHAR"},{"type":"literal","value":"SHORT_UNKNOWN"},{"type":"literal","value":"VALUE_INVALID_ARITY"},{"type":"literal","value":"VALUE_INVALID_CHOICE"},{"type":"literal","value":"VALUE_INVALID_FORMAT"},{"type":"literal","value":"VALUE_NO_INLINE"},{"type":"literal","value":"VALUE_NON_ARRAY"},{"type":"literal","value":"VALUE_NON_BOOL"},{"type":"literal","value":"VALUE_NON_NUMBER"},{"type":"literal","value":"VALUE_NON_STRING"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/args#ArgsError","previousId":155,"nextId":120},{"id":120,"name":"COMMAND_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#COMMAND_FORMAT","previousId":112,"nextId":117},{"id":117,"name":"DEFAULT_BOOLEAN_VALUE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":2,"character":13}],"type":{"type":"literal","value":false},"defaultValue":"false","permalink":"/api/args#DEFAULT_BOOLEAN_VALUE","previousId":120,"nextId":118},{"id":118,"name":"DEFAULT_NUMBER_VALUE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":3,"character":13}],"type":{"type":"literal","value":0},"defaultValue":"0","permalink":"/api/args#DEFAULT_NUMBER_VALUE","previousId":117,"nextId":119},{"id":119,"name":"DEFAULT_STRING_VALUE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":4,"character":13}],"type":{"type":"literal","value":""},"defaultValue":"\'\'","permalink":"/api/args#DEFAULT_STRING_VALUE","previousId":118,"nextId":121},{"id":121,"name":"LONG_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":13,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#LONG_OPTION_FORMAT","previousId":119,"nextId":124},{"id":124,"name":"OPTION_LIKE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":25,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#OPTION_LIKE","previousId":121,"nextId":122},{"id":122,"name":"SHORT_OPTION_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":17,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_FORMAT","previousId":124,"nextId":123},{"id":123,"name":"SHORT_OPTION_GROUP_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/args/src/constants.ts","line":21,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/args#SHORT_OPTION_GROUP_FORMAT","previousId":122},{"id":125,"name":"format","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/format.ts","line":14,"character":16}],"signatures":[{"id":126,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a parsed arguments object back into a command line list of arguments."},"parameters":[{"id":127,"name":"argument","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":179,"typeArguments":[{"type":"reference","id":156,"name":"OptionMap"},{"type":"reference","id":151,"name":"ArgList"}],"name":"Arguments"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}],"type":{"type":"reference","id":150,"name":"Argv"}}],"permalink":"/api/args/function/format","previousId":313,"nextId":128},{"id":128,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parse.ts","line":59,"character":16}],"signatures":[{"id":129,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject. Will extract commands, options, flags, and params based on the defined parser options."},"typeParameter":[{"id":131,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":130,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":132,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":154,"name":"PrimitiveType"}},"default":{"type":"reference","id":151,"name":"ArgList"}}],"parameters":[{"id":133,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":150,"name":"Argv"}},{"id":134,"name":"parserOptions","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":192,"typeArguments":[{"type":"reference","id":131,"name":"O"},{"type":"reference","id":132,"name":"P"}],"name":"ParserOptions"}}],"type":{"type":"reference","id":179,"typeArguments":[{"type":"reference","id":131,"name":"O"},{"type":"reference","id":132,"name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parse","previousId":125,"nextId":143},{"id":143,"name":"parseInContext","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/args/src/parseInContext.ts","line":10,"character":16}],"signatures":[{"id":144,"name":"parseInContext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse a list of command line arguments (typically from `process.argv`) into an arguments\\nobject using a context factory. The factory can customize the parser options based on the\\narguments being parsed."},"typeParameter":[{"id":146,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":145,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":147,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":154,"name":"PrimitiveType"}},"default":{"type":"reference","id":151,"name":"ArgList"}}],"parameters":[{"id":148,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":150,"name":"Argv"}},{"id":149,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":173,"name":"ContextFactory"}}],"type":{"type":"reference","id":179,"typeArguments":[{"type":"reference","id":146,"name":"O"},{"type":"reference","id":147,"name":"P"}],"name":"Arguments"}}],"permalink":"/api/args/function/parseInContext","previousId":128,"nextId":213}],"groups":[{"title":"Classes","kind":128,"children":[135,313]},{"title":"Functions","kind":64,"children":[125,128,143]},{"title":"Interfaces","kind":256,"children":[213,179,298,205,201,275,258,226,283,192,188,241]},{"title":"Type aliases","kind":4194304,"children":[158,151,111,150,169,173,211,165,159,152,311,167,161,163,301,308,156,309,310,154,153,312,157,155]},{"title":"Variables","kind":32,"children":[112,120,117,118,119,121,124,122,123]}],"sources":[{"fileName":"packages/args/src/index.ts","line":6,"character":0}],"permalink":"/api/args"},"urlSlug":"args"}],"packageName":"@boost/args","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":9,"name":"@boost/cli","kind":2,"kindString":"Module","flags":{},"children":[{"id":1762,"name":"Arg","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":1763,"name":"Flag","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Flag.ts","line":8,"character":16}],"signatures":[{"id":1764,"name":"Flag","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line flag (boolean value)."},"parameters":[{"id":1765,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1766,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2118,"name":"Flag"}],"name":"PartialConfig"}}],"type":{"type":"reference","qualifiedName":"PropertyDecorator","package":"typescript","name":"PropertyDecorator"}}],"permalink":"/api/cli/namespace/Arg#Flag"},{"id":1767,"name":"Number","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Number.ts","line":8,"character":16}],"signatures":[{"id":1768,"name":"Number","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a numeric value."},"parameters":[{"id":1769,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1770,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2195,"typeArguments":[{"type":"intrinsic","name":"number"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","qualifiedName":"PropertyDecorator","package":"typescript","name":"PropertyDecorator"}}],"permalink":"/api/cli/namespace/Arg#Number"},{"id":1771,"name":"Numbers","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Numbers.ts","line":8,"character":16}],"signatures":[{"id":1772,"name":"Numbers","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple numeric values."},"parameters":[{"id":1773,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1774,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2127,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","qualifiedName":"PropertyDecorator","package":"typescript","name":"PropertyDecorator"}}],"permalink":"/api/cli/namespace/Arg#Numbers"},{"id":1775,"name":"Params","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Params.ts","line":7,"character":16}],"signatures":[{"id":1776,"name":"Params","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator for declaring command line parameters (positional arguments)."},"typeParameter":[{"id":1777,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":1778,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1777,"name":"T"}],"name":"MapParamConfig"}}],"type":{"type":"reference","qualifiedName":"MethodDecorator","package":"typescript","name":"MethodDecorator"}}],"permalink":"/api/cli/namespace/Arg#Params"},{"id":1779,"name":"String","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/String.ts","line":8,"character":16}],"signatures":[{"id":1780,"name":"String","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with a string value."},"parameters":[{"id":1781,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1782,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2195,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","qualifiedName":"PropertyDecorator","package":"typescript","name":"PropertyDecorator"}}],"permalink":"/api/cli/namespace/Arg#String"},{"id":1783,"name":"Strings","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Strings.ts","line":8,"character":16}],"signatures":[{"id":1784,"name":"Strings","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property decorator for declaring a command line option with multiple string values."},"parameters":[{"id":1785,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1786,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2127,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","qualifiedName":"PropertyDecorator","package":"typescript","name":"PropertyDecorator"}}],"permalink":"/api/cli/namespace/Arg#Strings"},{"id":1787,"name":"flag","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/flag.ts","line":8,"character":16}],"signatures":[{"id":1788,"name":"flag","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line flag (boolean value)."},"parameters":[{"id":1789,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1790,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2118,"name":"Flag"}],"name":"PartialConfig"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/cli/namespace/Arg#flag"},{"id":1791,"name":"number","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/number.ts","line":8,"character":16}],"signatures":[{"id":1792,"name":"number","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with a numeric value."},"typeParameter":[{"id":1793,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"number"},"default":{"type":"intrinsic","name":"number"}}],"parameters":[{"id":1794,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1795,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2195,"typeArguments":[{"type":"intrinsic","name":"number"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1793,"name":"T"}}],"permalink":"/api/cli/namespace/Arg#number"},{"id":1796,"name":"numbers","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/numbers.ts","line":8,"character":16}],"signatures":[{"id":1797,"name":"numbers","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with multiple numeric values."},"typeParameter":[{"id":1798,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"number"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"number"}}}],"parameters":[{"id":1799,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1800,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2127,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1798,"name":"T"}}],"permalink":"/api/cli/namespace/Arg#numbers"},{"id":1801,"name":"params","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/params.ts","line":6,"character":16}],"signatures":[{"id":1802,"name":"params","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring command line parameters (positional arguments)."},"typeParameter":[{"id":1803,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":1804,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1803,"name":"T"}],"name":"MapParamConfig"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1803,"name":"T"}],"name":"MapParamConfig"}}],"permalink":"/api/cli/namespace/Arg#params"},{"id":1805,"name":"string","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/string.ts","line":8,"character":16}],"signatures":[{"id":1806,"name":"string","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with a string value."},"typeParameter":[{"id":1807,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":1808,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1809,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2195,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SingleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1807,"name":"T"}}],"permalink":"/api/cli/namespace/Arg#string"},{"id":1810,"name":"strings","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/initializers/strings.ts","line":8,"character":16}],"signatures":[{"id":1811,"name":"strings","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A property initializer for declaring a command line option with multiple string values."},"typeParameter":[{"id":1812,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"parameters":[{"id":1813,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1814,"name":"config","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2127,"typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"MultipleOption"}],"name":"PartialConfig"}}],"type":{"type":"reference","id":1812,"name":"T"}}],"permalink":"/api/cli/namespace/Arg#strings"}],"groups":[{"title":"Functions","kind":64,"children":[1763,1767,1771,1775,1779,1783,1787,1791,1796,1801,1805,1810]}],"sources":[{"fileName":"packages/cli/src/metadata/args.ts","line":1,"character":0}],"permalink":"/api/cli/namespace/Arg","previousId":2195,"nextId":2104},{"id":1821,"name":"Command","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1834,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":117,"character":1}],"signatures":[{"id":1835,"name":"new Command","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1836,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2218,"name":"GlobalOptions"},"default":{"type":"reference","id":2218,"name":"GlobalOptions"}},{"id":1837,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"reference","id":2104,"name":"ArgList"}},{"id":1839,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1838,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1840,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1839,"name":"Options"}}],"type":{"type":"reference","id":1821,"typeArguments":[{"type":"reference","id":1836,"name":"O"},{"type":"reference","id":1837,"name":"P"},{"type":"reference","id":1839,"name":"Options"}],"name":"Command"},"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<Options>.constructor"}},{"id":1846,"name":"exit","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to exit the current program, with an optional error code."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":101,"character":1}],"type":{"type":"reference","id":2228,"name":"ExitHandler"}},{"id":1841,"name":"help","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--help`, `-h` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1842,"name":"locale","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--locale` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":87,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'en\'"},{"id":1847,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Method to log to the console using a log level."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":104,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":1895,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":1896,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":1913,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1839,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":1843,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional arguments passed after `--` on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":90,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":1844,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unknown options passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":93,"character":1}],"type":{"type":"reference","id":2212,"name":"UnknownOptionMap"},"defaultValue":"{}"},{"id":1845,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Value of `--version`, `-v` passed on the command line."},"sources":[{"fileName":"packages/cli/src/Command.ts","line":96,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1822,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":57,"character":8}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"},{"id":1823,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":59,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1824,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":61,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"defaultValue":"false"},{"id":1825,"name":"categories","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":63,"character":8}],"type":{"type":"reference","id":2226,"name":"Categories"},"defaultValue":"{}"},{"id":1826,"name":"category","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":65,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1828,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":69,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1827,"name":"description","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":67,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1829,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":71,"character":8}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":1830,"name":"options","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":73,"character":8}],"type":{"type":"reference","id":2166,"name":"OptionConfigMap"},"defaultValue":"globalOptions"},{"id":1831,"name":"params","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":75,"character":8}],"type":{"type":"reference","id":2183,"name":"ParamConfigList"},"defaultValue":"[]"},{"id":1832,"name":"path","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":77,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1833,"name":"usage","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":79,"character":8}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"defaultValue":"\'\'"},{"id":1848,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":127,"character":1}],"signatures":[{"id":1849,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate options passed to the constructor."},"parameters":[{"id":1850,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":1914,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1915,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1916,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1839,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1917,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1918,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1919,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1839,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1839,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1839,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":1851,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":134,"character":7}],"signatures":[{"id":1852,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a React element based on the Help component."},"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"React.JSXElementConstructor","package":"@types/react","name":"JSXElementConstructor"}]}],"qualifiedName":"React.ReactElement","package":"@types/react","name":"ReactElement"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"implementationOf":{"type":"reference","id":2307,"name":"Commandable.createHelp"}}],"implementationOf":{"type":"reference","id":2306,"name":"Commandable.createHelp"}},{"id":1853,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":154,"character":1}],"signatures":[{"id":1854,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a system native command with the given arguments\\nand pass the results through a promise. This does *not* execute Boost CLI\\ncommands, use `runProgram()` instead."},"parameters":[{"id":1855,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1856,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":1857,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"execa.Options","package":"execa","name":"Options"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"execa.ExecaChildProcess","package":"execa","name":"ExecaChildProcess"}}]},{"id":1858,"name":"getArguments","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":167,"character":1}],"signatures":[{"id":1859,"name":"getArguments","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current command class as an arguments object.\\nOptions and params must be parsed first to operate correctly."},"type":{"type":"reference","id":2105,"typeArguments":[{"type":"reference","id":1836,"name":"O"},{"type":"reference","id":1837,"name":"P"}],"name":"Arguments"}}]},{"id":1899,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":27,"character":1}],"signatures":[{"id":1900,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":1902,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1901,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":1903,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"reference","id":2104,"name":"ArgList"}}],"parameters":[{"id":1904,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2305,"typeArguments":[{"type":"reference","id":1902,"name":"O"},{"type":"reference","id":1903,"name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":1905,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":42,"character":1}],"signatures":[{"id":1906,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":1860,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":181,"character":1}],"signatures":[{"id":1861,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Validate and return all metadata registered to this command instance."},"type":{"type":"reference","id":2289,"name":"CommandMetadata"},"implementationOf":{"type":"reference","id":2309,"name":"Commandable.getMetadata"}}],"implementationOf":{"type":"reference","id":2308,"name":"Commandable.getMetadata"}},{"id":1862,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":218,"character":1}],"signatures":[{"id":1863,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return metadata as options for argument parsing."},"type":{"type":"reference","id":2184,"typeArguments":[{"type":"reference","id":1836,"name":"O"},{"type":"reference","id":1837,"name":"P"}],"name":"ParserOptions"},"implementationOf":{"type":"reference","id":2311,"name":"Commandable.getParserOptions"}}],"implementationOf":{"type":"reference","id":2310,"name":"Commandable.getParserOptions"}},{"id":1864,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":234,"character":1}],"signatures":[{"id":1865,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the command path (canonical name on the command line)."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2313,"name":"Commandable.getPath"}}],"implementationOf":{"type":"reference","id":2312,"name":"Commandable.getPath"}},{"id":1907,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":50,"character":1}],"signatures":[{"id":1908,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":1909,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":1821,"typeArguments":[{"type":"reference","id":1836,"name":"O"},{"type":"reference","id":1837,"name":"P"},{"type":"reference","id":1839,"name":"Options"}],"name":"Command"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":1866,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":241,"character":7}],"signatures":[{"id":1867,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":1868,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"React.JSXElementConstructor","package":"@types/react","name":"JSXElementConstructor"}]}],"qualifiedName":"React.ReactElement","package":"@types/react","name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"implementationOf":{"type":"reference","id":2315,"name":"Commandable.render"}}],"implementationOf":{"type":"reference","id":2314,"name":"Commandable.render"}},{"id":1889,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/cli/src/Command.ts","line":336,"character":10}],"signatures":[{"id":1890,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Executed when the command is being ran."},"parameters":[{"id":1891,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":1837,"name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2252,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2252,"name":"RunResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}]},"implementationOf":{"type":"reference","id":2318,"name":"Commandable.run"}}],"implementationOf":{"type":"reference","id":2317,"name":"Commandable.run"}},{"id":1869,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":248,"character":1}],"signatures":[{"id":1870,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program within itself, by passing a custom command and argv list."},"parameters":[{"id":1871,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2114,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":1872,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":254,"character":1}],"signatures":[{"id":1873,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run a task (function) with the defined arguments and\\nthe current command instance bound to the task\'s context."},"typeParameter":[{"id":1874,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":1875,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1876,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1877,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1878,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1879,"name":"this","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2322,"typeArguments":[{"type":"reference","id":1836,"name":"O"}],"name":"TaskContext"}},{"id":1880,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":1874,"name":"A"}}],"type":{"type":"reference","id":1875,"name":"R"}}]}}},{"id":1881,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":1874,"name":"A"}}],"type":{"type":"reference","id":1875,"name":"R"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1834]},{"title":"Properties","kind":1024,"children":[1846,1841,1842,1847,1895,1896,1913,1843,1844,1845,1822,1823,1824,1825,1826,1828,1827,1829,1830,1831,1832,1833],"categories":[{"title":"CATEGORY","children":[1846,1841,1842,1847,1913,1843,1844,1845,1822,1823,1824,1825,1826,1828,1827,1829,1830,1831,1832,1833]},{"title":"Events","children":[1895,1896]}]},{"title":"Methods","kind":2048,"children":[1848,1914,1851,1853,1858,1899,1905,1860,1862,1864,1907,1866,1889,1869,1872]}],"sources":[{"fileName":"packages/cli/src/Command.ts","line":49,"character":22}],"typeParameter":[{"id":1920,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2218,"name":"GlobalOptions"},"default":{"type":"reference","id":2218,"name":"GlobalOptions"}},{"id":1921,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"reference","id":2104,"name":"ArgList"}},{"id":1923,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1922,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/Command.ts","line":52,"character":27}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1839,"name":"Options"}],"name":"CommandManager"}],"implementedTypes":[{"type":"reference","id":2305,"typeArguments":[{"type":"reference","id":1836,"name":"O"},{"type":"reference","id":1837,"name":"P"}],"name":"Commandable"}],"permalink":"/api/cli/class/Command","nextId":2003},{"id":2003,"name":"Program","kind":128,"kindString":"Class","flags":{},"children":[{"id":2004,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":129,"character":1}],"signatures":[{"id":2005,"name":"new Program","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2006,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2233,"name":"ProgramOptions"}},{"id":2007,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2241,"name":"ProgramStreams"}}],"type":{"type":"reference","id":2003,"name":"Program"},"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}}],"overwrites":{"type":"reference","name":"CommandManager<ProgramOptions>.constructor"}},{"id":2079,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onAfterRegister"}},{"id":2008,"name":"onAfterRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a component has rendered."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":58,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2009,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the program and command have been ran."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":64,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2080,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a command has been registered."},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"CommandManager.onBeforeRegister"}},{"id":2010,"name":"onBeforeRender","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a command has run but before a component will render."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":70,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2252,"name":"RunResult"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2011,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the program and command will run."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":76,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2114,"name":"Argv"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2012,"name":"onCommandFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command has been found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":82,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2114,"name":"Argv"},{"type":"intrinsic","name":"string"},{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2013,"name":"onCommandNotFound","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when a command wasn\'t found after parsing argv."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":88,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":2114,"name":"Argv"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2014,"name":"onExit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the exit() handler is executed but before the process exits."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":94,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2015,"name":"onHelp","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when the help menu is rendered."},"sources":[{"fileName":"packages/cli/src/Program.ts","line":100,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"optional","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":2097,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2233,"name":"ProgramOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.options"}},{"id":2016,"name":"streams","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/cli/src/Program.ts","line":102,"character":10}],"type":{"type":"reference","id":2241,"name":"ProgramStreams"},"defaultValue":"..."},{"id":2025,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":159,"character":1}],"signatures":[{"id":2026,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2027,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2233,"name":"ProgramOptions"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"},"overwrites":{"type":"reference","name":"CommandManager.blueprint"}}],"overwrites":{"type":"reference","name":"CommandManager.blueprint"}},{"id":2028,"name":"categories","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":177,"character":1}],"signatures":[{"id":2029,"name":"categories","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define option and command categories to supply to the running command,\\nor the program itself."},"parameters":[{"id":2030,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2226,"name":"Categories"}}],"type":{"type":"reference","id":2003,"name":"Program"}}]},{"id":2098,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":2099,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2100,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2233,"name":"ProgramOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":2101,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2102,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2103,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2233,"name":"ProgramOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2233,"name":"ProgramOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2233,"name":"ProgramOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.configure"}},{"id":2031,"name":"default","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":187,"character":1}],"signatures":[{"id":2032,"name":"default","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path as the default command.\\nA default command should be used when stand-alone binary is required."},"parameters":[{"id":2033,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2003,"name":"Program"}}]},{"id":2034,"name":"exit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":202,"character":1}],"signatures":[{"id":2035,"name":"exit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Exit the program with an error code.\\nShould be called within a command or component."},"parameters":[{"id":2036,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}]}},{"id":2037,"name":"errorCode","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"never"}}]},{"id":2083,"name":"getCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":27,"character":1}],"signatures":[{"id":2084,"name":"getCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a command by registered path, or `null` if not found."},"typeParameter":[{"id":2086,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2085,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}},{"id":2087,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"reference","id":2104,"name":"ArgList"}}],"parameters":[{"id":2088,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2305,"typeArguments":[{"type":"reference","id":1902,"name":"O"},{"type":"reference","id":1903,"name":"P"}],"name":"Commandable"}]},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommand"}},{"id":2089,"name":"getCommandPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":42,"character":1}],"signatures":[{"id":2090,"name":"getCommandPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all registered command paths (including aliases)."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.getCommandPaths"}},{"id":2038,"name":"middleware","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":226,"character":1}],"signatures":[{"id":2039,"name":"middleware","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define a middleware function to apply to the argv list or args object."},"parameters":[{"id":2040,"name":"middleware","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2347,"name":"Middleware"}}],"type":{"type":"reference","id":2003,"name":"Program"}}]},{"id":2041,"name":"parse","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":239,"character":1}],"signatures":[{"id":2042,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse the arguments list according to the number of commands that have been registered."},"typeParameter":[{"id":2043,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2218,"name":"GlobalOptions"}},{"id":2044,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"reference","id":2104,"name":"ArgList"}}],"parameters":[{"id":2045,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2114,"name":"Argv"}}],"type":{"type":"reference","id":2105,"typeArguments":[{"type":"reference","id":2043,"name":"O"},{"type":"reference","id":2044,"name":"P"}],"name":"Arguments"}}]},{"id":2091,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/CommandManager.ts","line":50,"character":1}],"signatures":[{"id":2092,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a command and its canonical path (must be unique),\\notherwise an error is thrown."},"parameters":[{"id":2093,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}}],"type":{"type":"reference","id":2003,"name":"Program"},"inheritedFrom":{"type":"reference","name":"CommandManager.register"}}],"inheritedFrom":{"type":"reference","name":"CommandManager.register"}},{"id":2046,"name":"renderElement","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":268,"character":7}],"signatures":[{"id":2047,"name":"renderElement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Render a React element with Ink and output to the configured streams."},"parameters":[{"id":2048,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"React.JSXElementConstructor","package":"@types/react","name":"JSXElementConstructor"}]}],"qualifiedName":"React.ReactElement","package":"@types/react","name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":2049,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":334,"character":7}],"signatures":[{"id":2050,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program in the following steps:\\n- Apply middleware to argv list.\\n- Parse argv into an args object (of options, params, etc).\\n- Determine command to run, or fail.\\n- Run command and render output.\\n- Return exit code."},"parameters":[{"id":2051,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2114,"name":"Argv"}},{"id":2052,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2249,"name":"ProgramBootstrap"}},{"id":2053,"name":"rethrow","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":2054,"name":"runAndExit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/Program.ts","line":366,"character":7}],"signatures":[{"id":2055,"name":"runAndExit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the program and also set the process exit code."},"parameters":[{"id":2056,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2114,"name":"Argv"}},{"id":2057,"name":"bootstrap","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2249,"name":"ProgramBootstrap"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2004]},{"title":"Properties","kind":1024,"children":[2079,2008,2009,2080,2010,2011,2012,2013,2014,2015,2097,2016],"categories":[{"title":"CATEGORY","children":[2097,2016]},{"title":"Events","children":[2079,2008,2009,2080,2010,2011,2012,2013,2014,2015]}]},{"title":"Methods","kind":2048,"children":[2025,2028,2098,2031,2034,2083,2089,2038,2041,2091,2046,2049,2054]}],"sources":[{"fileName":"packages/cli/src/Program.ts","line":53,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2233,"name":"ProgramOptions"}],"name":"CommandManager"}],"permalink":"/api/cli/class/Program","previousId":1821,"nextId":1757},{"id":2105,"name":"Arguments","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2106,"name":"command","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current running command and sub-commads. Is an array split on \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":41,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2107,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of errors detected during argument parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":43,"character":4}],"type":{"type":"array","elementType":{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}}},{"id":2108,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their values passed on the command line (or their default)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":45,"character":4}],"type":{"type":"reference","id":2112,"name":"O"}},{"id":2109,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of parameter values passed on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":47,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2113,"name":"P"}],"name":"MapParamType"}},{"id":2110,"name":"rest","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of arguments that appear after \\"--\\" on the command line."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":49,"character":4}],"type":{"type":"reference","id":2104,"name":"ArgList"}},{"id":2111,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of unconfigured options to string values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":51,"character":4}],"type":{"type":"reference","id":2212,"name":"UnknownOptionMap"}}],"groups":[{"title":"Properties","kind":1024,"children":[2106,2107,2108,2109,2110,2111]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":39,"character":17}],"typeParameter":[{"id":2112,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2113,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"reference","id":2104,"name":"ArgList"}}],"permalink":"/api/cli/interface/Arguments","previousId":1992,"nextId":2115},{"id":2115,"name":"Category","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2116,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":133,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2117,"name":"weight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":134,"character":4}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[2116,2117]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":132,"character":17}],"permalink":"/api/cli/interface/Category","previousId":2105,"nextId":2254},{"id":2254,"name":"CommandConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2255,"name":"aliases","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2256,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":117,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2257,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":119,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]}},{"id":2258,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2226,"name":"Categories"}},{"id":2262,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.category"}},{"id":2264,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.deprecated"}},{"id":2265,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.description"}},{"id":2266,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.hidden"}},{"id":2259,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A mapping of options to their configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":123,"character":1}],"type":{"type":"reference","id":2166,"name":"OptionConfigMap"}},{"id":2260,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A list of param (positional args) configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2183,"name":"ParamConfigList"}},{"id":2261,"name":"path","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2263,"name":"usage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"BaseCommandConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2255,2256,2257,2258,2262,2264,2265,2266,2259,2260,2261,2263]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":113,"character":17}],"extendedTypes":[{"type":"reference","name":"Command"}],"permalink":"/api/cli/interface/CommandConfig","previousId":2115,"nextId":2289},{"id":2289,"name":"CommandMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2292,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","id":2277,"name":"CommandStaticConfig.aliases"}},{"id":2293,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":117,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2278,"name":"CommandStaticConfig.allowUnknownOptions"}},{"id":2294,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":119,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","id":2279,"name":"CommandStaticConfig.allowVariadicParams"}},{"id":2295,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2226,"name":"Categories"},"inheritedFrom":{"type":"reference","id":2280,"name":"CommandStaticConfig.categories"}},{"id":2299,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2284,"name":"CommandStaticConfig.category"}},{"id":2290,"name":"commands","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":144,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"id":2301,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2286,"name":"CommandStaticConfig.deprecated"}},{"id":2302,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2287,"name":"CommandStaticConfig.description"}},{"id":2291,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":140,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2276,"name":"CommandStaticConfig.hasRegisteredOptions"}},{"id":2303,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2288,"name":"CommandStaticConfig.hidden"}},{"id":2296,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of options to their configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":123,"character":1}],"type":{"type":"reference","id":2166,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","id":2281,"name":"CommandStaticConfig.options"}},{"id":2297,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of param (positional args) configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2183,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","id":2282,"name":"CommandStaticConfig.params"}},{"id":2298,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2283,"name":"CommandStaticConfig.path"}},{"id":2300,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","id":2285,"name":"CommandStaticConfig.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2292,2293,2294,2295,2299,2290,2301,2302,2291,2303,2296,2297,2298,2300]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":143,"character":17}],"extendedTypes":[{"type":"reference","id":2275,"name":"CommandStaticConfig"}],"permalink":"/api/cli/interface/CommandMetadata","previousId":2254,"nextId":2275},{"id":2275,"name":"CommandStaticConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2277,"name":"aliases","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of aliased paths. Will not show up in the help menu, but will match on the command line."},"sources":[{"fileName":"packages/cli/src/types.ts","line":115,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"inheritedFrom":{"type":"reference","name":"Required.aliases"}},{"id":2278,"name":"allowUnknownOptions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow unknown options to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":117,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.allowUnknownOptions"}},{"id":2279,"name":"allowVariadicParams","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow variadic params to be parsed, otherwise an error is thrown. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/types.ts","line":119,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]},"inheritedFrom":{"type":"reference","name":"Required.allowVariadicParams"}},{"id":2280,"name":"categories","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of sub-command and option categories for this command only. Global options are automatically defined under the `global` category."},"sources":[{"fileName":"packages/cli/src/types.ts","line":121,"character":1}],"type":{"type":"reference","id":2226,"name":"Categories"},"inheritedFrom":{"type":"reference","name":"Required.categories"}},{"id":2284,"name":"category","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The category this object belongs to. Will be used to group in the parent command or program. Defaults to no category."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":79,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.category"}},{"id":2286,"name":"deprecated","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.deprecated"}},{"id":2287,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.description"}},{"id":2276,"name":"hasRegisteredOptions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/types.ts","line":140,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2288,"name":"hidden","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Required.hidden"}},{"id":2281,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A mapping of options to their configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":123,"character":1}],"type":{"type":"reference","id":2166,"name":"OptionConfigMap"},"inheritedFrom":{"type":"reference","name":"Required.options"}},{"id":2282,"name":"params","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A list of param (positional args) configurations."},"sources":[{"fileName":"packages/cli/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2183,"name":"ParamConfigList"},"inheritedFrom":{"type":"reference","name":"Required.params"}},{"id":2283,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A unique name in which to match the command on the command line amongst a list of arguments (argv)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":127,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Required.path"}},{"id":2285,"name":"usage","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define one or many usage examples to display in the help menu."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":81,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Required.usage"}}],"groups":[{"title":"Properties","kind":1024,"children":[2277,2278,2279,2280,2284,2286,2287,2276,2288,2281,2282,2283,2285]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":139,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2254,"name":"CommandConfig"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"extendedBy":[{"type":"reference","id":2289,"name":"CommandMetadata"}],"permalink":"/api/cli/interface/CommandStaticConfig","previousId":2289,"nextId":2305},{"id":2305,"name":"Commandable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2306,"name":"createHelp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":150,"character":1}],"signatures":[{"id":2307,"name":"createHelp","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"React.JSXElementConstructor","package":"@types/react","name":"JSXElementConstructor"}]}],"qualifiedName":"React.ReactElement","package":"@types/react","name":"ReactElement"}]}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":2308,"name":"getMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":151,"character":1}],"signatures":[{"id":2309,"name":"getMetadata","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2289,"name":"CommandMetadata"}}]},{"id":2310,"name":"getParserOptions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":152,"character":1}],"signatures":[{"id":2311,"name":"getParserOptions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2184,"typeArguments":[{"type":"reference","id":2320,"name":"O"},{"type":"reference","id":2321,"name":"P"}],"name":"ParserOptions"}}]},{"id":2312,"name":"getPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":153,"character":1}],"signatures":[{"id":2313,"name":"getPath","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2314,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":154,"character":1}],"signatures":[{"id":2315,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2316,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"React.JSXElementConstructor","package":"@types/react","name":"JSXElementConstructor"}]}],"qualifiedName":"React.ReactElement","package":"@types/react","name":"ReactElement"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":2317,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":155,"character":1}],"signatures":[{"id":2318,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2319,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":2321,"name":"P"}}],"type":{"type":"union","types":[{"type":"reference","id":2252,"name":"RunResult"},{"type":"reference","typeArguments":[{"type":"reference","id":2252,"name":"RunResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}]}}]}],"groups":[{"title":"Methods","kind":2048,"children":[2306,2308,2310,2312,2314,2317]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":149,"character":17}],"typeParameter":[{"id":2320,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"any"}},{"id":2321,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"implementedBy":[{"type":"reference","id":1821,"name":"Command"}],"permalink":"/api/cli/interface/Commandable","previousId":2275,"nextId":2118},{"id":2118,"name":"Flag","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2120,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.category"}},{"id":2119,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":123,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.default"}},{"id":2123,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.deprecated"}},{"id":2124,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.description"}},{"id":2125,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.hidden"}},{"id":2121,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","name":"Omit.short"}},{"id":2122,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"literal","value":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2120,2119,2123,2124,2125,2121,2122]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":122,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2144,"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Option"},{"type":"union","types":[{"type":"literal","value":"format"},{"type":"literal","value":"validate"}]}],"qualifiedName":"Omit","package":"typescript","name":"Omit"}],"permalink":"/api/cli/interface/Flag","previousId":2305,"nextId":2218},{"id":2218,"name":"GlobalOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2219,"name":"help","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":59,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2220,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":60,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2221,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":61,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2219,2220,2221]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":58,"character":17}],"permalink":"/api/cli/interface/GlobalOptions","previousId":2118,"nextId":2127},{"id":2127,"name":"MultipleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2128,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error unless the list of values satisfy this required length."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":117,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2131,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2145,"name":"Option.category"}},{"id":2129,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":118,"character":4}],"type":{"type":"reference","id":2143,"name":"T"},"overwrites":{"type":"reference","id":2147,"name":"Option.default"}},{"id":2140,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2155,"name":"Option.deprecated"}},{"id":2141,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2156,"name":"Option.description"}},{"id":2142,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2157,"name":"Option.hidden"}},{"id":2130,"name":"multiple","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Allow multiple values to be passed."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":120,"character":4}],"type":{"type":"literal","value":true}},{"id":2132,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2146,"name":"Option.short"}},{"id":2136,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2143,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2151,"name":"Option.type"}},{"id":2133,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2134,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2135,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":2149,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":2148,"name":"Option.format"}},{"id":2137,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2138,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2139,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2153,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":2152,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2128,2131,2129,2140,2141,2142,2130,2132,2136]},{"title":"Methods","kind":2048,"children":[2133,2137]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":115,"character":17}],"typeParameter":[{"id":2143,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2126,"name":"ListType"}}],"extendedTypes":[{"type":"reference","id":2144,"typeArguments":[{"type":"reference","id":2143,"name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/MultipleOption","previousId":2218,"nextId":2144},{"id":2144,"name":"Option","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2145,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2147,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","id":2158,"name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2155,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2156,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2157,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2146,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"}},{"id":2151,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2158,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2148,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2149,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2150,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.format"}}],"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2152,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2153,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2154,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2145,2147,2155,2156,2157,2146,2151]},{"title":"Methods","kind":2048,"children":[2148,2152]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":102,"character":17}],"typeParameter":[{"id":2158,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2213,"name":"ValueType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2158,"name":"T"}],"name":"Arg"}],"extendedBy":[{"type":"reference","id":2127,"name":"MultipleOption"},{"type":"reference","id":2195,"name":"SingleOption"}],"permalink":"/api/cli/interface/Option","previousId":2127,"nextId":2268},{"id":2268,"name":"OptionInitializer","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2274,"name":"[INTERNAL_INITIALIZER]","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":133,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2273,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":135,"character":1}],"type":{"type":"intrinsic","name":"unknown"}},{"id":2269,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":134,"character":1}],"signatures":[{"id":2270,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2271,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}},{"id":2272,"name":"property","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2274,2273]},{"title":"Methods","kind":2048,"children":[2269]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":132,"character":17}],"permalink":"/api/cli/interface/OptionInitializer","previousId":2144,"nextId":2167},{"id":2167,"name":"Param","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2170,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":94,"character":4}],"type":{"type":"reference","id":2181,"name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.default"}},{"id":2178,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.deprecated"}},{"id":2179,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Arg.description"}},{"id":2180,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Arg.hidden"}},{"id":2168,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Informational label to display in terminal output."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":127,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2169,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the param is required or not. If required and not passed, the\\nparser will throw an error. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":130,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2174,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2181,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","name":"Arg.type"}},{"id":2171,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2172,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2173,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","name":"Arg.format"}}],"inheritedFrom":{"type":"reference","name":"Arg.format"}},{"id":2175,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2176,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2177,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"inheritedFrom":{"type":"reference","name":"Arg.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2170,2178,2179,2180,2168,2169,2174]},{"title":"Methods","kind":2048,"children":[2171,2175]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":125,"character":17}],"typeParameter":[{"id":2181,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2193,"name":"PrimitiveType"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2181,"name":"T"}],"name":"Arg"}],"permalink":"/api/cli/interface/Param","previousId":2268,"nextId":2184},{"id":2184,"name":"ParserOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2185,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of valid commands. Sub-commands should be denoted with \\":\\"."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":63,"character":4}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"CommandChecker"}]}},{"id":2188,"name":"loose","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable loose mode parsing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":55,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.loose"}},{"id":2186,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Mapping of options to their type and configurations."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2191,"name":"O"}],"name":"MapOptionConfig"}},{"id":2187,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of param configurations (in order)."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":67,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2192,"name":"P"}],"name":"MapParamConfig"}},{"id":2189,"name":"unknown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow unknown options to be passed. Will be placed in a special `unknown` object."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":57,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.unknown"}},{"id":2190,"name":"variadic","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Allow variadic params to be passed. Will be accumlated after configured params."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":59,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ParserSettings.variadic"}}],"groups":[{"title":"Properties","kind":1024,"children":[2185,2188,2186,2187,2189,2190]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":61,"character":17}],"typeParameter":[{"id":2191,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":2192,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}},"default":{"type":"reference","id":2104,"name":"ArgList"}}],"extendedTypes":[{"type":"reference","name":"ParserSettings"}],"permalink":"/api/cli/interface/ParserOptions","previousId":2167,"nextId":2245},{"id":2245,"name":"ProgramContextType","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2246,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":100,"character":1}],"type":{"type":"reference","id":2228,"name":"ExitHandler"}},{"id":2247,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":101,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2248,"name":"program","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":102,"character":1}],"type":{"type":"reference","id":2233,"name":"ProgramOptions"}}],"groups":[{"title":"Properties","kind":1024,"children":[2246,2247,2248]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":99,"character":17}],"permalink":"/api/cli/interface/ProgramContextType","previousId":2184,"nextId":2233},{"id":2233,"name":"ProgramOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2234,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2235,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":80,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2236,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":82,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2237,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2238,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2239,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":88,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2240,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2234,2235,2236,2237,2238,2239,2240]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":76,"character":17}],"extendedBy":[{"type":"reference","id":2417,"name":"IndexHelpProps"}],"permalink":"/api/cli/interface/ProgramOptions","previousId":2245,"nextId":2241},{"id":2241,"name":"ProgramStreams","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2242,"name":"stderr","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":94,"character":1}],"type":{"type":"reference","qualifiedName":"global.NodeJS.WriteStream","package":"@types/node","name":"WriteStream"}},{"id":2243,"name":"stdin","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":95,"character":1}],"type":{"type":"reference","qualifiedName":"global.NodeJS.ReadStream","package":"@types/node","name":"ReadStream"}},{"id":2244,"name":"stdout","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":96,"character":1}],"type":{"type":"reference","qualifiedName":"global.NodeJS.WriteStream","package":"@types/node","name":"WriteStream"}}],"groups":[{"title":"Properties","kind":1024,"children":[2242,2243,2244]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":93,"character":17}],"permalink":"/api/cli/interface/ProgramStreams","previousId":2233,"nextId":2195},{"id":2195,"name":"SingleOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2199,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A unique key to group options within categories. Couples with the `Category` type."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":104,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2145,"name":"Option.category"}},{"id":2196,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whitelist of acceptable values."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":110,"character":4}],"type":{"type":"array","elementType":{"type":"reference","id":2211,"name":"T"}}},{"id":2197,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When found in an option group, increment the value for each occurrence. _(Numbers only)_"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":112,"character":4}],"type":{"type":"conditional","checkType":{"type":"reference","id":2211,"name":"T"},"extendsType":{"type":"intrinsic","name":"number"},"trueType":{"type":"literal","value":true},"falseType":{"type":"intrinsic","name":"never"}}},{"id":2198,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The default value if option not provided on the command line. The value\'s type\\nis dependent on the `type` and `multiple` settings. Furthermore, this value defaults\\nto the following if not defined.","text":"- A zero (`0`) when type is `number`.\\n- An empty string (`\'\'`) when type is `string`.\\n- And `false` when type is `boolean`.\\n"},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":113,"character":4}],"type":{"type":"reference","id":2211,"name":"T"},"overwrites":{"type":"reference","id":2147,"name":"Option.default"}},{"id":2208,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object is deprecated or not. Will display a tag in the help menu. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":71,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2155,"name":"Option.deprecated"}},{"id":2209,"name":"description","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A description of what the object is and does. Supports basic markdown for bold, italics, and underline."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":73,"character":4}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2156,"name":"Option.description"}},{"id":2210,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the object should be hidden from the help menu or not. Will still match on the command line. Defaults to `false`."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":75,"character":4}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2157,"name":"Option.hidden"}},{"id":2200,"name":"short","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character used as a the short option alias."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":106,"character":4}],"type":{"type":"reference","name":"ShortOptionName"},"inheritedFrom":{"type":"reference","id":2146,"name":"Option.short"}},{"id":2204,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Expected type of the provided value. When a value is captured from the command line, it will be type casted."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":98,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2211,"name":"T"}],"name":"InferArgType"},"inheritedFrom":{"type":"reference","id":2151,"name":"Option.type"}},{"id":2201,"name":"format","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":96,"character":4}],"signatures":[{"id":2202,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to format the value after parsing. Must return the same type."},"parameters":[{"id":2203,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"},"inheritedFrom":{"type":"reference","id":2149,"name":"Option.format"}}],"inheritedFrom":{"type":"reference","id":2148,"name":"Option.format"}},{"id":2205,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":100,"character":4}],"signatures":[{"id":2206,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An optional function to validate the provided value."},"parameters":[{"id":2207,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2153,"name":"Option.validate"}}],"inheritedFrom":{"type":"reference","id":2152,"name":"Option.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2199,2196,2197,2198,2208,2209,2210,2200,2204]},{"title":"Methods","kind":2048,"children":[2201,2205]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":108,"character":17}],"typeParameter":[{"id":2211,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2194,"name":"ScalarType"}}],"extendedTypes":[{"type":"reference","id":2144,"typeArguments":[{"type":"reference","id":2211,"name":"T"}],"name":"Option"}],"permalink":"/api/cli/interface/SingleOption","previousId":2241,"nextId":1762},{"id":2104,"name":"ArgList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":2,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ArgList","previousId":1762,"nextId":2114},{"id":2114,"name":"Argv","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":1,"character":20}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#Argv","previousId":2104,"nextId":1815},{"id":1815,"name":"CLIErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":24,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/cli#CLIErrorCode","previousId":2114,"nextId":2226},{"id":2226,"name":"Categories","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":68,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"reference","id":2115,"name":"Category"},{"type":"intrinsic","name":"string"}]}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/cli#Categories","previousId":1815,"nextId":1981},{"id":1981,"name":"CategoryItemMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":3,"character":12}],"typeParameter":[{"id":1985,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":1982,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1983,"name":"items","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":6,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":1985,"name":"T"}}},{"id":1984,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1983,1984]}],"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":5,"character":1}]}}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/cli#CategoryItemMap","previousId":2226,"nextId":2267},{"id":2267,"name":"CommandConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":130,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2254,"name":"CommandConfig"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/cli#CommandConfigMap","previousId":1981,"nextId":2304},{"id":2304,"name":"CommandMetadataMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":147,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2289,"name":"CommandMetadata"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/cli#CommandMetadataMap","previousId":2267,"nextId":2253},{"id":2253,"name":"CommandPath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":111,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/cli#CommandPath","previousId":2304,"nextId":2227},{"id":2227,"name":"ExitCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":72,"character":12}],"type":{"type":"intrinsic","name":"number"},"permalink":"/api/cli#ExitCode","previousId":2253,"nextId":2228},{"id":2228,"name":"ExitHandler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":74,"character":12}],"type":{"type":"reflection","declaration":{"id":2229,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":74,"character":26}],"signatures":[{"id":2230,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2231,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"},{"type":"intrinsic","name":"string"}]}},{"id":2232,"name":"code","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2227,"name":"ExitCode"}}],"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/cli#ExitHandler","previousId":2227,"nextId":2126},{"id":2126,"name":"ListType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":3,"character":20}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"permalink":"/api/cli#ListType","previousId":2228,"nextId":2347},{"id":2347,"name":"Middleware","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":176,"character":12}],"type":{"type":"reflection","declaration":{"id":2348,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":176,"character":25}],"signatures":[{"id":2349,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2350,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2114,"name":"Argv"}},{"id":2351,"name":"parse","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2343,"name":"MiddlewareCallback"}},{"id":2352,"name":"logger","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Loggable"}}],"type":{"type":"union","types":[{"type":"reference","id":2342,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2342,"name":"MiddlewareArguments"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}]}}]}},"permalink":"/api/cli#Middleware","previousId":2126,"nextId":2342},{"id":2342,"name":"MiddlewareArguments","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":172,"character":12}],"type":{"type":"reference","id":2105,"typeArguments":[{"type":"reference","id":2218,"name":"GlobalOptions"},{"type":"reference","id":2104,"name":"ArgList"}],"name":"Arguments"},"permalink":"/api/cli#MiddlewareArguments","previousId":2347,"nextId":2343},{"id":2343,"name":"MiddlewareCallback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":174,"character":12}],"type":{"type":"reflection","declaration":{"id":2344,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":174,"character":33}],"signatures":[{"id":2345,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2346,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2114,"name":"Argv"}}],"type":{"type":"union","types":[{"type":"reference","id":2342,"name":"MiddlewareArguments"},{"type":"reference","typeArguments":[{"type":"reference","id":2342,"name":"MiddlewareArguments"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}]}}]}},"permalink":"/api/cli#MiddlewareCallback","previousId":2342,"nextId":2159},{"id":2159,"name":"OptionConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":20}],"type":{"type":"intersection","types":[{"type":"reference","id":2144,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Option"},{"type":"reflection","declaration":{"id":2160,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2161,"name":"arity","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":138,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2162,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":139,"character":4}],"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}}},{"id":2163,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":140,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2164,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":141,"character":4}],"type":{"type":"reference","id":2213,"name":"ValueType"}},{"id":2165,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":142,"character":4}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2161,2162,2163,2164,2165]}],"sources":[{"fileName":"packages/args/dts/types.d.ts","line":137,"character":49}]}}]},"permalink":"/api/cli#OptionConfig","previousId":2343,"nextId":2166},{"id":2166,"name":"OptionConfigMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":144,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2159,"name":"OptionConfig"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/cli#OptionConfigMap","previousId":2159,"nextId":2222},{"id":2222,"name":"Options","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":64,"character":12}],"typeParameter":[{"id":2223,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2223,"name":"T"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":2218,"name":"GlobalOptions"}}],"qualifiedName":"Omit","package":"typescript","name":"Omit"}],"name":"MapOptionConfig"},"permalink":"/api/cli#Options","previousId":2166,"nextId":2182},{"id":2182,"name":"ParamConfig","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Abstract type for easier typing."},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":146,"character":20}],"type":{"type":"reference","id":2167,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Param"},"permalink":"/api/cli#ParamConfig","previousId":2222,"nextId":2183},{"id":2183,"name":"ParamConfigList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":147,"character":20}],"type":{"type":"array","elementType":{"type":"reference","id":2182,"name":"ParamConfig"}},"permalink":"/api/cli#ParamConfigList","previousId":2182,"nextId":2224},{"id":2224,"name":"Params","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":66,"character":12}],"typeParameter":[{"id":2225,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2225,"name":"T"}],"name":"MapParamConfig"},"permalink":"/api/cli#Params","previousId":2183,"nextId":2214},{"id":2214,"name":"PartialConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":54,"character":12}],"typeParameter":[{"id":2215,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2215,"name":"T"},{"type":"union","types":[{"type":"literal","value":"description"},{"type":"literal","value":"multiple"},{"type":"literal","value":"path"},{"type":"literal","value":"type"}]}],"qualifiedName":"Omit","package":"typescript","name":"Omit"},"permalink":"/api/cli#PartialConfig","previousId":2224,"nextId":2193},{"id":2193,"name":"PrimitiveType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":5,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2194,"name":"ScalarType"},{"type":"intrinsic","name":"boolean"}]},"permalink":"/api/cli#PrimitiveType","previousId":2214,"nextId":2249},{"id":2249,"name":"ProgramBootstrap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":105,"character":12}],"type":{"type":"reflection","declaration":{"id":2250,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":105,"character":31}],"signatures":[{"id":2251,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/cli#ProgramBootstrap","previousId":2193,"nextId":2252},{"id":2252,"name":"RunResult","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":109,"character":12}],"type":{"type":"union","types":[{"type":"reference","qualifiedName":"React.ReactElement","package":"@types/react","name":"React.ReactElement"},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"void"}]},"permalink":"/api/cli#RunResult","previousId":2249,"nextId":2194},{"id":2194,"name":"ScalarType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":4,"character":20}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"}]},"permalink":"/api/cli#ScalarType","previousId":2252,"nextId":2353},{"id":2353,"name":"StyleType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":184,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"failure"},{"type":"literal","value":"info"},{"type":"literal","value":"inverted"},{"type":"literal","value":"muted"},{"type":"literal","value":"notice"},{"type":"literal","value":"success"},{"type":"literal","value":"warning"}]},"permalink":"/api/cli#StyleType","previousId":2194,"nextId":2322},{"id":2322,"name":"TaskContext","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":160,"character":12}],"typeParameter":[{"id":2341,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2218,"name":"GlobalOptions"},"default":{"type":"reference","id":2218,"name":"GlobalOptions"}}],"type":{"type":"intersection","types":[{"type":"reference","id":2341,"name":"O"},{"type":"reflection","declaration":{"id":2323,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2324,"name":"exit","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":161,"character":1}],"type":{"type":"reference","id":2228,"name":"ExitHandler"}},{"id":2325,"name":"log","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":162,"character":1}],"type":{"type":"reference","name":"LoggerFunction"}},{"id":2326,"name":"rest","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":163,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2327,"name":"unknown","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":164,"character":1}],"type":{"type":"reference","id":2212,"name":"UnknownOptionMap"}},{"id":2328,"name":"runProgram","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":166,"character":1}],"signatures":[{"id":2329,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2330,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2114,"name":"Argv"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":2331,"name":"runTask","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":167,"character":1}],"signatures":[{"id":2332,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2333,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":2334,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2335,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":2336,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2337,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2338,"name":"this","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2322,"typeArguments":[{"type":"reference","id":2341,"name":"O"}],"name":"TaskContext"}},{"id":2339,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":2333,"name":"A"}}],"type":{"type":"reference","id":2334,"name":"R"}}]}}},{"id":2340,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":2333,"name":"A"}}],"type":{"type":"reference","id":2334,"name":"R"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2324,2325,2326,2327]},{"title":"Methods","kind":2048,"children":[2328,2331]}],"sources":[{"fileName":"packages/cli/src/types.ts","line":160,"character":71}]}}]},"permalink":"/api/cli#TaskContext","previousId":2353,"nextId":2354},{"id":2354,"name":"ThemePalette","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":194,"character":12}],"type":{"type":"mapped","parameter":"T","parameterType":{"type":"reference","id":2353,"name":"StyleType"},"templateType":{"type":"intrinsic","name":"string"}},"permalink":"/api/cli#ThemePalette","previousId":2322,"nextId":2212},{"id":2212,"name":"UnknownOptionMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":8,"character":20}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/cli#UnknownOptionMap","previousId":2354,"nextId":2213},{"id":2213,"name":"ValueType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/args/dts/types.d.ts","line":6,"character":20}],"type":{"type":"union","types":[{"type":"reference","id":2126,"name":"ListType"},{"type":"reference","id":2193,"name":"PrimitiveType"}]},"permalink":"/api/cli#ValueType","previousId":2212,"nextId":2216},{"id":2216,"name":"Writeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/types.ts","line":56,"character":12}],"typeParameter":[{"id":2217,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"mapped","parameter":"P","parameterType":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","id":2217,"name":"T"}},"templateType":{"type":"indexedAccess","indexType":{"type":"reference","name":"P"},"objectType":{"type":"reference","id":2217,"name":"T"}},"readonlyModifier":"-"},"permalink":"/api/cli#Writeable","previousId":2213,"nextId":1816},{"id":1816,"name":"CLIError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/CLIError.ts","line":26,"character":13}],"type":{"type":"reflection","declaration":{"id":1817,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1818,"name":"new CLIError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1819,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}},{"id":1820,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"COMMAND_DEFINED"},{"type":"literal","value":"COMMAND_INVALID_REGISTER"},{"type":"literal","value":"COMMAND_INVALID_RUN"},{"type":"literal","value":"COMMAND_INVALID_SUBPATH"},{"type":"literal","value":"COMMAND_MIXED_DEFAULT"},{"type":"literal","value":"COMMAND_MIXED_NONDEFAULT"},{"type":"literal","value":"COMMAND_NO_PROGRAM"},{"type":"literal","value":"COMMAND_NONE_REGISTERED"},{"type":"literal","value":"COMMAND_UNKNOWN"},{"type":"literal","value":"MIDDLEWARE_INVALID"},{"type":"literal","value":"OPTION_RESERVED"},{"type":"literal","value":"PARAMS_RUN_ONLY"},{"type":"literal","value":"REACT_RENDER_NO_NESTED"},{"type":"literal","value":"THEME_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/cli#CLIError","previousId":2216,"nextId":1936},{"id":1936,"name":"DELIMITER","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":39,"character":13}],"type":{"type":"literal","value":"$ "},"defaultValue":"\'$ \'","permalink":"/api/cli#DELIMITER","previousId":1816,"nextId":1927},{"id":1927,"name":"EXIT_FAIL","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":11,"character":13}],"type":{"type":"reference","id":2227,"name":"ExitCode"},"defaultValue":"1","permalink":"/api/cli#EXIT_FAIL","previousId":1936,"nextId":1926},{"id":1926,"name":"EXIT_PASS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":10,"character":13}],"type":{"type":"reference","id":2227,"name":"ExitCode"},"defaultValue":"0","permalink":"/api/cli#EXIT_PASS","previousId":1927,"nextId":1931},{"id":1931,"name":"INTERNAL_INITIALIZER","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":16,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1931,"name":"INTERNAL_INITIALIZER"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_INITIALIZER","previousId":1926,"nextId":1928},{"id":1928,"name":"INTERNAL_OPTIONS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":13,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1928,"name":"INTERNAL_OPTIONS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_OPTIONS","previousId":1931,"nextId":1929},{"id":1929,"name":"INTERNAL_PARAMS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":14,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1929,"name":"INTERNAL_PARAMS"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PARAMS","previousId":1928,"nextId":1930},{"id":1930,"name":"INTERNAL_PROGRAM","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":15,"character":13}],"type":{"type":"query","queryType":{"type":"reference","id":1930,"name":"INTERNAL_PROGRAM"}},"defaultValue":"...","permalink":"/api/cli#INTERNAL_PROGRAM","previousId":1929,"nextId":1925},{"id":1925,"name":"LOCALE_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#LOCALE_FORMAT","previousId":1930,"nextId":1932},{"id":1932,"name":"RESERVED_OPTIONS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":18,"character":13}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"...","permalink":"/api/cli#RESERVED_OPTIONS","previousId":1925,"nextId":1933},{"id":1933,"name":"SPACING_COL","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":35,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_COL","previousId":1932,"nextId":1934},{"id":1934,"name":"SPACING_COL_WIDE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":36,"character":13}],"type":{"type":"literal","value":2},"defaultValue":"2","permalink":"/api/cli#SPACING_COL_WIDE","previousId":1933,"nextId":1935},{"id":1935,"name":"SPACING_ROW","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":37,"character":13}],"type":{"type":"literal","value":1},"defaultValue":"1","permalink":"/api/cli#SPACING_ROW","previousId":1934,"nextId":1924},{"id":1924,"name":"VERSION_FORMAT","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/cli#VERSION_FORMAT","previousId":1935},{"id":1757,"name":"Config","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/decorators/Config.ts","line":16,"character":16}],"signatures":[{"id":1758,"name":"Config","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A class decorator for defining the following metadata on a `Command`.\\n- path\\n- description\\n- aliases\\n- allowUnknownOptions\\n- allowVariadicParams\\n- categories\\n- category\\n- deprecated\\n- hidden\\n- usage"},"parameters":[{"id":1759,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1760,"name":"description","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1761,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2214,"typeArguments":[{"type":"reference","id":2275,"name":"CommandStaticConfig"}],"name":"PartialConfig"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},"defaultValue":"{}"}],"type":{"type":"reference","qualifiedName":"ClassDecorator","package":"typescript","name":"ClassDecorator"}}],"permalink":"/api/cli/function/Config","previousId":2003,"nextId":1937},{"id":1937,"name":"applyMarkdown","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyMarkdown.ts","line":3,"character":16}],"signatures":[{"id":1938,"name":"applyMarkdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1939,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyMarkdown","previousId":1757,"nextId":1940},{"id":1940,"name":"applyStyle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/applyStyle.ts","line":5,"character":16}],"signatures":[{"id":1941,"name":"applyStyle","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1942,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1943,"name":"type","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2353,"name":"StyleType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/applyStyle","previousId":1937,"nextId":1995},{"id":1995,"name":"checkNodeRequirement","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkNodeRequirement.ts","line":8,"character":16}],"signatures":[{"id":1996,"name":"checkNodeRequirement","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that the currently running Node.js process.version satisfies the given semver range.\\nIf not, a console error will be logged, or an error will be thrown."},"parameters":[{"id":1997,"name":"range","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1998,"name":"throws","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":2347,"name":"Middleware"}}],"permalink":"/api/cli/function/checkNodeRequirement","previousId":1940,"nextId":1999},{"id":1999,"name":"checkPackageOutdated","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/middleware/checkPackageOutdated.ts","line":37,"character":16}],"signatures":[{"id":2000,"name":"checkPackageOutdated","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verify that a package and its provided version is using the latest distribution\\nversion by checking against the npm registry. If not, a console message will be logged."},"parameters":[{"id":2001,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2002,"name":"version","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2347,"name":"Middleware"}}],"permalink":"/api/cli/function/checkPackageOutdated","previousId":1995,"nextId":1944},{"id":1944,"name":"formatCommandCall","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatCommandCall.ts","line":4,"character":16}],"signatures":[{"id":1945,"name":"formatCommandCall","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1946,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1947,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2254,"name":"CommandConfig"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatCommandCall","previousId":1999,"nextId":1948},{"id":1948,"name":"formatDescription","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":7,"character":16}],"signatures":[{"id":1949,"name":"formatDescription","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1950,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1951,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1952,"name":"choices","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":9,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}}},{"id":1953,"name":"default","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":10,"character":2}],"type":{"type":"reference","id":2193,"name":"PrimitiveType"}},{"id":1955,"name":"deprecated","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":12,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1954,"name":"description","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatDescription.ts","line":11,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1952,1953,1955,1954]}]}}},{"id":1956,"name":"tags","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"defaultValue":"[]"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatDescription","previousId":1944,"nextId":1957},{"id":1957,"name":"formatType","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":3,"character":16}],"signatures":[{"id":1958,"name":"formatType","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1959,"name":"config","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1960,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1961,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":5,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":1962,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":6,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1963,"name":"required","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":7,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1964,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatType.ts","line":8,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1961,1962,1963,1964]}]}}},{"id":1965,"name":"inline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatType","previousId":1948,"nextId":1966},{"id":1966,"name":"formatValue","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/formatValue.ts","line":3,"character":16}],"signatures":[{"id":1967,"name":"formatValue","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1968,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2193,"name":"PrimitiveType"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/cli/function/formatValue","previousId":1957,"nextId":1969},{"id":1969,"name":"getLongestWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/getLongestWidth.ts","line":3,"character":16}],"signatures":[{"id":1970,"name":"getLongestWidth","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1971,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/cli/function/getLongestWidth","previousId":1966,"nextId":1972},{"id":1972,"name":"groupByCategory","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":16}],"signatures":[{"id":1973,"name":"groupByCategory","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1978,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reflection","declaration":{"id":1974,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":1975,"name":"category","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":44}],"type":{"type":"intrinsic","name":"string"}},{"id":1976,"name":"hidden","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":63}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1977,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/groupByCategory.ts","line":11,"character":81}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[1975,1976,1977]}]}}}],"parameters":[{"id":1979,"name":"items","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":1978,"name":"T"}}},{"id":1980,"name":"categories","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2226,"name":"Categories"}}],"type":{"type":"reference","id":1981,"typeArguments":[{"type":"reference","id":1978,"name":"T"}],"name":"CategoryItemMap"}}],"permalink":"/api/cli/function/groupByCategory","previousId":1969,"nextId":1986},{"id":1986,"name":"isArgvSize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/isArgvSize.ts","line":4,"character":16}],"signatures":[{"id":1987,"name":"isArgvSize","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1988,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2114,"name":"Argv"}},{"id":1989,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/cli/function/isArgvSize","previousId":1972,"nextId":1990},{"id":1990,"name":"loadTheme","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/loadTheme.ts","line":8,"character":16}],"signatures":[{"id":1991,"name":"loadTheme","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2354,"name":"ThemePalette"}}],"permalink":"/api/cli/function/loadTheme","previousId":1986,"nextId":1992},{"id":1992,"name":"mapCommandMetadata","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/helpers/mapCommandMetadata.ts","line":3,"character":16}],"signatures":[{"id":1993,"name":"mapCommandMetadata","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1994,"name":"commands","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2305,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Commandable"}],"qualifiedName":"Record","package":"typescript","name":"Record"}}],"type":{"type":"reference","id":2304,"name":"CommandMetadataMap"}}],"permalink":"/api/cli/function/mapCommandMetadata","previousId":1990,"nextId":2105}],"groups":[{"title":"Classes","kind":128,"children":[1821,2003]},{"title":"Functions","kind":64,"children":[1757,1937,1940,1995,1999,1944,1948,1957,1966,1969,1972,1986,1990,1992]},{"title":"Interfaces","kind":256,"children":[2105,2115,2254,2289,2275,2305,2118,2218,2127,2144,2268,2167,2184,2245,2233,2241,2195]},{"title":"Namespaces","kind":4,"children":[1762]},{"title":"Type aliases","kind":4194304,"children":[2104,2114,1815,2226,1981,2267,2304,2253,2227,2228,2126,2347,2342,2343,2159,2166,2222,2182,2183,2224,2214,2193,2249,2252,2194,2353,2322,2354,2212,2213,2216]},{"title":"Variables","kind":32,"children":[1816,1936,1927,1926,1931,1928,1929,1930,1925,1932,1933,1934,1935,1924]}],"sources":[{"fileName":"packages/cli/src/index.ts","line":6,"character":0}],"permalink":"/api/cli"},"urlSlug":"cli"},{"index":false,"label":"Components & hooks","reflection":{"id":10,"name":"@boost/cli/react","kind":2,"kindString":"Module","flags":{},"children":[{"id":2374,"name":"Failure","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A React component that renders a failure state for errors and warnings."},"children":[{"id":2375,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2376,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2377,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2367,"name":"FailureProps"},{"type":"reference","typeArguments":[{"type":"reference","id":2367,"name":"FailureProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}]}}],"type":{"type":"reference","id":2374,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2378,"name":"new Failure","kind":16384,"kindString":"Constructor signature","flags":{},"comment":{"tags":[{"tag":"deprecated","text":""},{"tag":"see","text":"https://reactjs.org/docs/legacy-context.html\\n"}]},"parameters":[{"id":2379,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2367,"name":"FailureProps"}},{"id":2380,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","id":2374,"name":"Failure"},"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.Component<FailureProps>.constructor"}},{"id":2389,"name":"render","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":152,"character":10}],"signatures":[{"id":2390,"name":"render","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"},"overwrites":{"type":"reference","name":"React.Component.render"}}],"overwrites":{"type":"reference","name":"React.Component.render"}},{"id":2383,"name":"renderCodeFrame","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":50,"character":1}],"signatures":[{"id":2384,"name":"renderCodeFrame","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}]}}]},{"id":2385,"name":"renderStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":105,"character":1}],"signatures":[{"id":2386,"name":"renderStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}]}}]},{"id":2387,"name":"renderWarnings","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":127,"character":1}],"signatures":[{"id":2388,"name":"renderWarnings","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}]}}]},{"id":2381,"name":"shouldHideStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":36,"character":1}],"signatures":[{"id":2382,"name":"shouldHideStackTrace","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"boolean"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2375]},{"title":"Methods","kind":2048,"children":[2389,2383,2385,2387,2381]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":35,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2367,"name":"FailureProps"}],"qualifiedName":"React.Component","package":"@types/react","name":"Component"}],"permalink":"/api/cli-react/class/Failure","nextId":2355},{"id":2358,"name":"ConfirmProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2359,"name":"invalidError","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Error message to display when an invalid character is pressed. Defaults to a custom message."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":12,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2362,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","qualifiedName":"React.ReactChild","package":"@types/react","name":"ReactChild"},{"type":"reference","qualifiedName":"React.ReactFragment","package":"@types/react","name":"ReactFragment"},{"type":"reference","qualifiedName":"React.ReactPortal","package":"@types/react","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"Omit.label"}},{"id":2360,"name":"no","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a falsy state when pressed. Defaults to \\"N\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2366,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.prefix"}},{"id":2361,"name":"yes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Character that triggers a truthy state when pressed. Defaults to \\"y\\"."},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2363,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2364,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2365,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"Omit.onSubmit"}}],"groups":[{"title":"Properties","kind":1024,"children":[2359,2362,2360,2366,2361]},{"title":"Methods","kind":2048,"children":[2363]}],"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":10,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"PromptProps"},{"type":"literal","value":"validate"}],"qualifiedName":"Omit","package":"typescript","name":"Omit"}],"permalink":"/api/cli-react/interface/ConfirmProps","previousId":2548,"nextId":2367},{"id":2367,"name":"FailureProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2368,"name":"binName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the binary being executed."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2369,"name":"commandLine","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Full length command line being ran."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2370,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":23,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2371,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The primary error to display in red."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":25,"character":1}],"type":{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}},{"id":2372,"name":"hideStackTrace","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the primary error stack trace. Defaults to `false`."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":27,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2373,"name":"warnings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Optional errors as warnings to display in yellow."},"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":29,"character":1}],"type":{"type":"array","elementType":{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}}}],"groups":[{"title":"Properties","kind":1024,"children":[2368,2369,2370,2371,2372,2373]}],"sources":[{"fileName":"packages/cli/src/components/Failure.tsx","line":17,"character":17}],"permalink":"/api/cli-react/interface/FailureProps","previousId":2358,"nextId":2394},{"id":2394,"name":"HeaderProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2395,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Text to display for the label."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2397,"name":"marginBottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The top margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2396,"name":"marginTop","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The bottom margin. Defaults to `1`."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2398,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Customize the background color using Style. Defaults to normal text."},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":15,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2353,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2395,2397,2396,2398]}],"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":7,"character":17}],"permalink":"/api/cli-react/interface/HeaderProps","previousId":2367,"nextId":2402},{"id":2402,"name":"HelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2403,"name":"categories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of categories to use for command and option grouping."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":33,"character":1}],"type":{"type":"reference","id":2226,"name":"Categories"}},{"id":2405,"name":"commands","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of commands, typically sub-commands."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":37,"character":1}],"type":{"type":"reference","id":2267,"name":"CommandConfigMap"}},{"id":2404,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Configuration metadata about the current command."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":35,"character":1}],"type":{"type":"reference","id":2254,"name":"CommandConfig"}},{"id":2406,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Delimiter to prefix within examples. Defaults to \\"$ \\"."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2407,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A header to display at the top of the output."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":41,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2408,"name":"options","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of command options."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":43,"character":1}],"type":{"type":"reference","id":2166,"name":"OptionConfigMap"}},{"id":2409,"name":"params","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of command params."},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":45,"character":1}],"type":{"type":"reference","id":2183,"name":"ParamConfigList"}}],"groups":[{"title":"Properties","kind":1024,"children":[2403,2405,2404,2406,2407,2408,2409]}],"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":31,"character":17}],"permalink":"/api/cli-react/interface/HelpProps","previousId":2394,"nextId":2417},{"id":2417,"name":"IndexHelpProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2419,"name":"banner","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A large banner to appear at the top of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2234,"name":"ProgramOptions.banner"}},{"id":2420,"name":"bin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the binary consumers enter on the command line. Must be in kebab-case."},"sources":[{"fileName":"packages/cli/src/types.ts","line":80,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2235,"name":"ProgramOptions.bin"}},{"id":2418,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":8,"character":1}],"type":{"type":"reference","qualifiedName":"React.ReactNode","package":"@types/react","name":"ReactNode"}},{"id":2421,"name":"delimiter","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The character(s) displayed before command line usage examples."},"sources":[{"fileName":"packages/cli/src/types.ts","line":82,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2236,"name":"ProgramOptions.delimiter"}},{"id":2422,"name":"footer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the bottom of the index help interface."},"sources":[{"fileName":"packages/cli/src/types.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2237,"name":"ProgramOptions.footer"}},{"id":2423,"name":"header","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string of text to display at the top of the index help interface, below the banner (if present)."},"sources":[{"fileName":"packages/cli/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2238,"name":"ProgramOptions.header"}},{"id":2424,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A human readable name for your program."},"sources":[{"fileName":"packages/cli/src/types.ts","line":88,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2239,"name":"ProgramOptions.name"}},{"id":2425,"name":"version","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current version of your CLI program. Typically the version found in your `package.json`. This is output when `--version` is passed."},"sources":[{"fileName":"packages/cli/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2240,"name":"ProgramOptions.version"}}],"groups":[{"title":"Properties","kind":1024,"children":[2419,2420,2418,2421,2422,2423,2424,2425]}],"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":2233,"name":"ProgramOptions"}],"permalink":"/api/cli-react/interface/IndexHelpProps","previousId":2402,"nextId":2429},{"id":2429,"name":"InputProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2430,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A default value. If none provided, will use an empty state."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2431,"name":"hideCursor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Hide the cursor in the terminal. Will remove the background color, but still functions."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2437,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","qualifiedName":"React.ReactChild","package":"@types/react","name":"ReactChild"},{"type":"reference","qualifiedName":"React.ReactFragment","package":"@types/react","name":"ReactFragment"},{"type":"reference","qualifiedName":"React.ReactPortal","package":"@types/react","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2432,"name":"mask","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mask to replace every inputted character with."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2436,"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom string to display when the value is empty and non-dirty."},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2438,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2433,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":15,"character":1}],"signatures":[{"id":2434,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value changes."},"parameters":[{"id":2435,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2439,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2440,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2441,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2442,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2443,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2444,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2430,2431,2437,2432,2436,2438]},{"title":"Methods","kind":2048,"children":[2433,2439,2442]}],"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":7,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"PromptProps"}],"permalink":"/api/cli-react/interface/InputProps","previousId":2417,"nextId":2449},{"id":2449,"name":"MultiSelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2450,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of option values selected by default."},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":2467,"name":"T"}},"overwrites":{"type":"reference","id":2495,"name":"SelectProps.defaultSelected"}},{"id":2455,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","qualifiedName":"React.ReactChild","package":"@types/react","name":"ReactChild"},{"type":"reference","qualifiedName":"React.ReactFragment","package":"@types/react","name":"ReactFragment"},{"type":"reference","qualifiedName":"React.ReactPortal","package":"@types/react","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","id":2497,"name":"SelectProps.label"}},{"id":2463,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":2505,"name":"SelectProps.limit"}},{"id":2454,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":2467,"name":"T"},{"type":"reference","id":2480,"typeArguments":[{"type":"reference","id":2467,"name":"T"}],"name":"SelectOptionLike"}]}},"inheritedFrom":{"type":"reference","id":2496,"name":"SelectProps.options"}},{"id":2464,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2506,"name":"SelectProps.overflowAfterLabel"}},{"id":2465,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","id":2507,"name":"SelectProps.overflowBeforeLabel"}},{"id":2456,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2498,"name":"SelectProps.prefix"}},{"id":2466,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","id":2508,"name":"SelectProps.scrollType"}},{"id":2451,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":17,"character":1}],"signatures":[{"id":2452,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when a value is selected or unselected."},"parameters":[{"id":2453,"name":"values","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2467,"name":"T"}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":2457,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2458,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2459,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2500,"name":"SelectProps.onSubmit"}}],"inheritedFrom":{"type":"reference","id":2499,"name":"SelectProps.onSubmit"}},{"id":2460,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2461,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2462,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":2503,"name":"SelectProps.validate"}}],"inheritedFrom":{"type":"reference","id":2502,"name":"SelectProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2450,2455,2463,2454,2464,2465,2456,2466]},{"title":"Methods","kind":2048,"children":[2451,2457,2460]}],"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":13,"character":17}],"typeParameter":[{"id":2467,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":2494,"typeArguments":[{"type":"array","elementType":{"type":"reference","id":2467,"name":"T"}},{"type":"reference","id":2467,"name":"T"}],"name":"SelectProps"}],"permalink":"/api/cli-react/interface/MultiSelectProps","previousId":2429,"nextId":2488},{"id":2488,"name":"SelectOption","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2489,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2490,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":2491,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":19,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","qualifiedName":"React.ReactChild","package":"@types/react","name":"ReactChild"},{"type":"reference","qualifiedName":"React.ReactFragment","package":"@types/react","name":"ReactFragment"},{"type":"reference","qualifiedName":"React.ReactPortal","package":"@types/react","name":"ReactPortal"}]}},{"id":2492,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":20,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":2493,"name":"T"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2489,2490,2491,2492]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":16,"character":17}],"typeParameter":[{"id":2493,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/cli-react/interface/SelectOption","previousId":2449,"nextId":2494},{"id":2494,"name":"SelectProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2495,"name":"defaultSelected","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Option value selected by default."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":25,"character":1}],"type":{"type":"reference","id":2509,"name":"T"}},{"id":2497,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Label to display before or above the prompt itself."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","qualifiedName":"React.ReactChild","package":"@types/react","name":"ReactChild"},{"type":"reference","qualifiedName":"React.ReactFragment","package":"@types/react","name":"ReactFragment"},{"type":"reference","qualifiedName":"React.ReactPortal","package":"@types/react","name":"ReactPortal"}]},"inheritedFrom":{"type":"reference","name":"PromptProps.label"}},{"id":2505,"name":"limit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Number of options to display before scrolling. Defaults to console height."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.limit"}},{"id":2496,"name":"options","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of options to choose from. Can either be a string, number, or object with a `label` and `value`."},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":27,"character":1}],"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","id":2510,"name":"V"},{"type":"reference","id":2480,"typeArguments":[{"type":"reference","id":2510,"name":"V"}],"name":"SelectOptionLike"}]}}},{"id":2506,"name":"overflowAfterLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display above scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":18,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowAfterLabel"}},{"id":2507,"name":"overflowBeforeLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Label to display below scrollable options with the number of overflowing options."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":20,"character":1}],"type":{"type":"reference","name":"OverflowLabel"},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.overflowBeforeLabel"}},{"id":2498,"name":"prefix","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Single character symbol to display before the label. Defaults to \\"?\\"\\"."},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":14,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"PromptProps.prefix"}},{"id":2508,"name":"scrollType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The pattern in which to limit options when scrolling. Defaults to `overflow`.\\n- `cycle` - Will continously cycle through options, even when navigating to and past edges.\\n- `overflow` - Will display options bound to an edge, with the number of options hidden above and below."},"sources":[{"fileName":"packages/cli/src/components/internal/ScrollableList.tsx","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"cycle"},{"type":"literal","value":"overflow"}]},"inheritedFrom":{"type":"reference","name":"ScrollableListProps.scrollType"}},{"id":2499,"name":"onSubmit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":16,"character":1}],"signatures":[{"id":2500,"name":"onSubmit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Callback triggered when the value is submitted."},"parameters":[{"id":2501,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.onSubmit"}},{"id":2502,"name":"validate","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/internal/Prompt.tsx","line":18,"character":1}],"signatures":[{"id":2503,"name":"validate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Function to validate the value on submit. To trigger a failed state, thrown an `Error`."},"parameters":[{"id":2504,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"T"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"inheritedFrom":{"type":"reference","name":"PromptProps.validate"}}],"groups":[{"title":"Properties","kind":1024,"children":[2495,2497,2505,2496,2506,2507,2498,2508]},{"title":"Methods","kind":2048,"children":[2499,2502]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":23,"character":17}],"typeParameter":[{"id":2509,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}},{"id":2510,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":2509,"name":"T"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":2509,"name":"T"}],"name":"PromptProps"},{"type":"reference","name":"ScrollableListProps"}],"extendedBy":[{"type":"reference","id":2449,"name":"MultiSelectProps"}],"permalink":"/api/cli-react/interface/SelectProps","previousId":2488,"nextId":2514},{"id":2514,"name":"StyleProps","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2515,"name":"children","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":7,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"reference","qualifiedName":"React.ReactChild","package":"@types/react","name":"ReactChild"},{"type":"reference","qualifiedName":"React.ReactFragment","package":"@types/react","name":"ReactFragment"},{"type":"reference","qualifiedName":"React.ReactPortal","package":"@types/react","name":"ReactPortal"}]}},{"id":2516,"name":"inverted","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Invert the colors to style the background instead of foreground. Defaults\\nto `false`."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":10,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2517,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Theme palette name to style with. Defaults to \\"none\\"."},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":12,"character":1}],"type":{"type":"union","types":[{"type":"reference","id":2353,"name":"StyleType"},{"type":"literal","value":"none"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2515,2516,2517]}],"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":6,"character":17}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","qualifiedName":"Props","package":"ink","name":"TextProps"},{"type":"union","types":[{"type":"literal","value":"bold"},{"type":"literal","value":"italic"},{"type":"literal","value":"underline"},{"type":"literal","value":"wrap"}]}],"qualifiedName":"Pick","package":"typescript","name":"Pick"}],"permalink":"/api/cli-react/interface/StyleProps","previousId":2494,"nextId":2413},{"id":2413,"name":"HiddenInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2429,"name":"InputProps"},{"type":"union","types":[{"type":"literal","value":"hideCursor"},{"type":"literal","value":"mask"}]}],"qualifiedName":"Omit","package":"typescript","name":"Omit"},"permalink":"/api/cli-react#HiddenInputProps","previousId":2514,"nextId":2471},{"id":2471,"name":"PasswordInputProps","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2429,"name":"InputProps"},{"type":"literal","value":"mask"}],"qualifiedName":"Omit","package":"typescript","name":"Omit"},"permalink":"/api/cli-react#PasswordInputProps","previousId":2413,"nextId":2480},{"id":2480,"name":"SelectOptionLike","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":12,"character":12}],"typeParameter":[{"id":2487,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2481,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2482,"name":"divider","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":5}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2483,"name":"label","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":23}],"type":{"type":"reference","typeArguments":[{"type":"reference","qualifiedName":"React.ReactNode","package":"@types/react","name":"React.ReactNode"}],"qualifiedName":"NonNullable","package":"typescript","name":"NonNullable"}}],"groups":[{"title":"Properties","kind":1024,"children":[2482,2483]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":13,"character":3}]}},{"type":"reflection","declaration":{"id":2484,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2485,"name":"label","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":5}],"type":{"type":"reference","typeArguments":[{"type":"reference","qualifiedName":"React.ReactNode","package":"@types/react","name":"React.ReactNode"}],"qualifiedName":"NonNullable","package":"typescript","name":"NonNullable"}},{"id":2486,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":42}],"type":{"type":"reference","id":2487,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2485,2486]}],"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":14,"character":3}]}}]},"permalink":"/api/cli-react#SelectOptionLike","previousId":2471,"nextId":2553},{"id":2553,"name":"ProgramContext","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/cli/src/ProgramContext.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2245,"name":"ProgramContextType"}],"qualifiedName":"React.Context","package":"@types/react","name":"Context"},"defaultValue":"...","permalink":"/api/cli-react#ProgramContext","previousId":2480},{"id":2355,"name":"Confirm","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Confirm.tsx","line":22,"character":16}],"signatures":[{"id":2356,"name":"Confirm","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a yes/no confirmation prompt."},"parameters":[{"id":2357,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2358,"name":"ConfirmProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/Confirm","previousId":2374,"nextId":2391},{"id":2391,"name":"Header","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Header.tsx","line":21,"character":16}],"signatures":[{"id":2392,"name":"Header","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a header/title within a terminal menu."},"parameters":[{"id":2393,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2394,"name":"HeaderProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/Header","previousId":2355,"nextId":2399},{"id":2399,"name":"Help","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Help.tsx","line":53,"character":16}],"signatures":[{"id":2400,"name":"Help","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for a command.\\nIncludes all sub-commands, options, params, and more."},"parameters":[{"id":2401,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2402,"name":"HelpProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/Help","previousId":2391,"nextId":2410},{"id":2410,"name":"HiddenInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/HiddenInput.tsx","line":9,"character":16}],"signatures":[{"id":2411,"name":"HiddenInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field that hides its content from the terminal."},"parameters":[{"id":2412,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2413,"name":"HiddenInputProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/HiddenInput","previousId":2399,"nextId":2414},{"id":2414,"name":"IndexHelp","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/IndexHelp.tsx","line":14,"character":16}],"signatures":[{"id":2415,"name":"IndexHelp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a help menu for the entire program."},"parameters":[{"id":2416,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2417,"name":"IndexHelpProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/IndexHelp","previousId":2410,"nextId":2426},{"id":2426,"name":"Input","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Input.tsx","line":23,"character":16}],"signatures":[{"id":2427,"name":"Input","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field, allowing the user to enter information."},"parameters":[{"id":2428,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2429,"name":"InputProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/Input","previousId":2414,"nextId":2445},{"id":2445,"name":"MultiSelect","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/MultiSelect.tsx","line":24,"character":16}],"signatures":[{"id":2446,"name":"MultiSelect","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where multiple options can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2447,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2448,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2449,"typeArguments":[{"type":"reference","id":2447,"name":"T"}],"name":"MultiSelectProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/MultiSelect","previousId":2426,"nextId":2468},{"id":2468,"name":"PasswordInput","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/PasswordInput.tsx","line":9,"character":16}],"signatures":[{"id":2469,"name":"PasswordInput","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders an input field with characters masked with \\"*\\"."},"parameters":[{"id":2470,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2471,"name":"PasswordInputProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/PasswordInput","previousId":2445,"nextId":2476},{"id":2476,"name":"Select","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":55,"character":16}],"signatures":[{"id":2477,"name":"Select","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that renders a select menu with options, where a single option can be seleted.\\nOptions can be navigated with arrow keys, selected with \\"space\\", and submitted with \\"enter\\"."},"typeParameter":[{"id":2478,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":2479,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2494,"typeArguments":[{"type":"reference","id":2478,"name":"T"},{"type":"reference","id":2478,"name":"T"}],"name":"SelectProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/Select","previousId":2468,"nextId":2511},{"id":2511,"name":"Style","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Style.tsx","line":18,"character":16}],"signatures":[{"id":2512,"name":"Style","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A React component that styles text and backgrounds based on the current Boost theme."},"parameters":[{"id":2513,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2514,"name":"StyleProps"}}],"type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"}}],"permalink":"/api/cli-react/function/Style","previousId":2476,"nextId":2472},{"id":2472,"name":"normalizeOptions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/components/Select.tsx","line":30,"character":16}],"signatures":[{"id":2473,"name":"normalizeOptions","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2474,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2475,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"array","elementType":{"type":"reference","id":2488,"typeArguments":[{"type":"reference","id":2474,"name":"T"}],"name":"SelectOption"}}}],"permalink":"/api/cli-react/function/normalizeOptions","previousId":2511,"nextId":2518},{"id":2518,"name":"useDimensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":16}],"signatures":[{"id":2519,"name":"useDimensions","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reflection","declaration":{"id":2520,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2521,"name":"height","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":35}],"type":{"type":"intrinsic","name":"number"}},{"id":2522,"name":"width","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":51}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[2521,2522]}],"sources":[{"fileName":"packages/cli/src/hooks/useDimensions.ts","line":5,"character":33}]}}}],"permalink":"/api/cli-react/function/useDimensions","previousId":2472,"nextId":2523},{"id":2523,"name":"useIsMounted","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useIsMounted.ts","line":3,"character":16}],"signatures":[{"id":2524,"name":"useIsMounted","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"React.MutableRefObject","package":"@types/react","name":"MutableRefObject"}}],"permalink":"/api/cli-react/function/useIsMounted","previousId":2518,"nextId":2525},{"id":2525,"name":"useListNavigation","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":3,"character":16}],"signatures":[{"id":2526,"name":"useListNavigation","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2527,"name":"list","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":2528,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2529,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":9}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2530,"name":"divider","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/hooks/useListNavigation.ts","line":4,"character":29}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2529,2530]}]}}}},{"id":2531,"name":"defaultIndex","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reflection","declaration":{"id":2532,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2533,"name":"highlightedIndex","kind":1024,"kindString":"Property","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2534,"name":"onKeyDown","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2535,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2536,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":2537,"name":"onKeyLeft","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2538,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2539,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":2540,"name":"onKeyRight","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2541,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2542,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":2543,"name":"onKeyUp","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reflection","declaration":{"id":2544,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2545,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"groups":[{"title":"Properties","kind":1024,"children":[2533,2534,2537,2540,2543]}]}}}],"permalink":"/api/cli-react/function/useListNavigation","previousId":2523,"nextId":2546},{"id":2546,"name":"useProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useProgram.ts","line":8,"character":16}],"signatures":[{"id":2547,"name":"useProgram","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","id":2245,"name":"ProgramContextType"}}],"permalink":"/api/cli-react/function/useProgram","previousId":2525,"nextId":2548},{"id":2548,"name":"useRenderLoop","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":5,"character":16}],"signatures":[{"id":2549,"name":"useRenderLoop","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2550,"name":"fps","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"},"defaultValue":"30"}],"type":{"type":"reflection","declaration":{"id":2551,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/cli/src/hooks/useRenderLoop.ts","line":5,"character":49}],"signatures":[{"id":2552,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/cli-react/function/useRenderLoop","previousId":2546,"nextId":2358}],"groups":[{"title":"Classes","kind":128,"children":[2374]},{"title":"Functions","kind":64,"children":[2355,2391,2399,2410,2414,2426,2445,2468,2476,2511,2472,2518,2523,2525,2546,2548]},{"title":"Interfaces","kind":256,"children":[2358,2367,2394,2402,2417,2429,2449,2488,2494,2514]},{"title":"Type aliases","kind":4194304,"children":[2413,2471,2480]},{"title":"Variables","kind":32,"children":[2553]}],"sources":[{"fileName":"packages/cli/src/react.ts","line":1,"character":0}],"permalink":"/api/cli-react"},"urlSlug":"cli-react"},{"index":false,"label":"Test utilities","reflection":{"id":11,"name":"@boost/cli/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":54,"name":"MockReadStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":55,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":56,"name":"new MockReadStream","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":54,"name":"MockReadStream"}}]},{"id":57,"name":"isTTY","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"groups":[{"title":"Constructors","kind":512,"children":[55]},{"title":"Properties","kind":1024,"children":[57]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":19,"character":13}],"permalink":"/api/cli-test/class/MockReadStream","nextId":58},{"id":58,"name":"MockWriteStream","kind":128,"kindString":"Class","flags":{},"children":[{"id":59,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":30,"character":1}],"signatures":[{"id":60,"name":"new MockWriteStream","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":61,"name":"append","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","id":58,"name":"MockWriteStream"}}]},{"id":62,"name":"append","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"id":63,"name":"columns","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"80"},{"id":64,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":68,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":43,"character":1}],"signatures":[{"id":69,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":72,"name":"off","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":49,"character":1}],"signatures":[{"id":73,"name":"off","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":70,"name":"on","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":47,"character":1}],"signatures":[{"id":71,"name":"on","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]},{"id":65,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":35,"character":1}],"signatures":[{"id":66,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":67,"name":"string","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[59]},{"title":"Properties","kind":1024,"children":[62,63,64]},{"title":"Methods","kind":2048,"children":[68,72,70,65]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":23,"character":13}],"permalink":"/api/cli-test/class/MockWriteStream","previousId":54,"nextId":15},{"id":15,"name":"mockProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":80,"character":16}],"signatures":[{"id":16,"name":"mockProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a `Program` instance with required options pre-filled and streams mocked\\n(unless manually provided).","text":"```ts\\nimport { mockProgram } from \'@boost/cli/test\';\\n\\nconst program = mockProgram({ name: \'Example\' });\\n```\\n"},"parameters":[{"id":17,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2233,"name":"ProgramOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}},{"id":18,"name":"streams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2241,"name":"ProgramStreams"}}],"type":{"type":"reference","id":2003,"name":"Program"}}],"permalink":"/api/cli-test/function/mockProgram","previousId":58,"nextId":12},{"id":12,"name":"mockStreams","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":62,"character":16}],"signatures":[{"id":13,"name":"mockStreams","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns mocked `stderr`, `stdout`, and `stdin` streams that can be passed to a `Program`.\\nThis does not mock all stream functionality, only those required by Boost and Ink.","text":"```ts\\nimport { mockStreams } from \'@boost/cli/test\';\\n\\nconst streams = mockStreams();\\n```\\n"},"parameters":[{"id":14,"name":"append","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","id":2241,"name":"ProgramStreams"}}],"permalink":"/api/cli-test/function/mockStreams","previousId":15,"nextId":19},{"id":19,"name":"renderComponent","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":109,"character":22}],"signatures":[{"id":20,"name":"renderComponent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to render a React component with Ink and return the rendered result\\nas a terminal compatible string. If `stripped` is true, it will strip ANSI\\nescape escape sequences.","text":"```tsx\\nimport { renderComponent } from \'@boost/cli/test\';\\nimport TestComponent from \'../src/components/TestComponent\';\\n\\nit(\'renders a component\', async () => {\\n\\texpect(await renderComponent(<TestComponent />)).toMatchSnapshot();\\n});\\n```\\n\\n> As an alternative, we also suggest using the official\\n> [ink-testing-library](https://github.com/vadimdemedes/ink-testing-library).\\n"},"parameters":[{"id":21,"name":"element","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"React.JSXElementConstructor","package":"@types/react","name":"JSXElementConstructor"}]}],"qualifiedName":"React.ReactElement","package":"@types/react","name":"ReactElement"}},{"id":22,"name":"stripped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}],"permalink":"/api/cli-test/function/renderComponent","previousId":12,"nextId":23},{"id":23,"name":"runCommand","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":156,"character":22}],"signatures":[{"id":24,"name":"runCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Command` outside the context of a `Program`, but mimics similar functionality,\\nincluding React component rendering. Params are required as they\'re passed to the run method,\\nwhile options are optional and assume class properties have been defined. Also, the `exit`\\nand `log` methods have been mocked with Jest spies so that they can be asserted.","text":"```ts\\nimport { runCommand } from \'@boost/cli/test\';\\nimport TestCommand from \'../src/commands/TestCommand\';\\n\\nit(\'runs a command\', async () => {\\n\\tconst command = new TestCommand();\\n\\n\\texpect(await runCommand(command, [\'foo\', \'bar\', \'baz\'])).toMatchSnapshot();\\n\\texpect(command.log).toHaveBeenCalled();\\n});\\n```\\n\\n> Since there is no `Program` context, any functionality that requires a program will fail. If\\n> needed, use `runProgram()` instead.\\n"},"typeParameter":[{"id":25,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2218,"name":"GlobalOptions"}},{"id":26,"name":"P","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2193,"name":"PrimitiveType"}}}],"parameters":[{"id":27,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1821,"typeArguments":[{"type":"reference","id":25,"name":"O"},{"type":"reference","id":26,"name":"P"},{"type":"reflection","declaration":{"id":28,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"name":"Command"}},{"id":29,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":26,"name":"P"}},{"id":30,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":25,"name":"O"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}],"permalink":"/api/cli-test/function/runCommand","previousId":19,"nextId":43},{"id":43,"name":"runProgram","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":257,"character":22}],"signatures":[{"id":44,"name":"runProgram","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a `Program` as if it were ran on the command line, including middleware,\\ncommands, success and failure states, and more. Utilizes mocked streams to capture\\nand return standard output and ANSI stripped output. Failed runs will not throw\\nand instead will render a failure output.","text":"```ts\\nimport { runProgram } from \'@boost/cli/test\';\\nimport Program from \'../src/program\';\\n\\nit(\'runs a program\', async () => {\\n\\tconst program = new Program();\\n\\n\\tconst { code, output } = await runProgram(program, [\'cmd\', \'--foo\', \'123\', \'bar\']);\\n\\n\\texpect(output).toMatchSnapshot();\\n\\texpect(code).toBe(0);\\n});\\n```\\n"},"parameters":[{"id":45,"name":"program","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2003,"name":"Program"}},{"id":46,"name":"argv","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":47,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":48,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":49,"name":"append","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/cli/src/test.ts","line":260,"character":12}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[49]}]}},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":50,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":51,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":13}],"type":{"type":"reference","id":2227,"name":"ExitCode"}},{"id":52,"name":"output","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":29}],"type":{"type":"intrinsic","name":"string"}},{"id":53,"name":"outputStripped","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":45}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[51,52,53]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":261,"character":11}]}}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}],"permalink":"/api/cli-test/function/runProgram","previousId":23,"nextId":31},{"id":31,"name":"runTask","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/cli/src/test.ts","line":205,"character":16}],"signatures":[{"id":32,"name":"runTask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Runs a task function outside the context of a `Command`, in complete isolation.\\nA mock command context is provided with standard defaults, and can be customized\\nthrough the 3rd argument.","text":"```ts\\nimport { runTask } from \'@boost/cli/test\';\\nimport testTask from \'../src/tasks/testTask\';\\n\\nit(\'runs a task\', async () => {\\n\\tconst context = {\\n\\t\\tlog: jest.fn(),\\n\\t};\\n\\n\\texpect(await runTask(testTask, [\'foo\', \'bar\', \'baz\'], context)).toMatchSnapshot();\\n\\texpect(context.log).toHaveBeenCalled();\\n});\\n```\\n"},"typeParameter":[{"id":33,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":34,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}},{"id":35,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2322,"typeArguments":[{"type":"reference","id":2218,"name":"GlobalOptions"}],"name":"TaskContext"}}],"parameters":[{"id":36,"name":"task","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":37,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":38,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":39,"name":"this","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":35,"name":"T"}},{"id":40,"name":"argz","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":33,"name":"A"}}],"type":{"type":"reference","id":34,"name":"R"}}]}}},{"id":41,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":33,"name":"A"}},{"id":42,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":35,"name":"T"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}],"type":{"type":"reference","id":34,"name":"R"}}],"permalink":"/api/cli-test/function/runTask","previousId":43}],"groups":[{"title":"Classes","kind":128,"children":[54,58]},{"title":"Functions","kind":64,"children":[15,12,19,23,43,31]}],"sources":[{"fileName":"packages/cli/src/test.ts","line":3,"character":0}],"permalink":"/api/cli-test"},"urlSlug":"cli-test"}],"packageName":"@boost/cli","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":74,"name":"@boost/common","kind":2,"kindString":"Module","flags":{},"children":[{"id":2554,"name":"json","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":2573,"name":"JSONStringifyOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2575,"name":"quote","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":9,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":2576,"name":"replacer","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":10,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},{"type":"reflection","declaration":{"id":2577,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2578,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2579,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2580,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}}]}},{"id":2574,"name":"space","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":8,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2575,2576,2574]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":7,"character":17}],"permalink":"/api/common/namespace/json#JSONStringifyOptions"},{"id":2568,"name":"JSONReviver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":5,"character":12}],"type":{"type":"reflection","declaration":{"id":2569,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":5,"character":26}],"signatures":[{"id":2570,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2571,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2572,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"unknown"}}]}},"permalink":"/api/common/namespace/json#JSONReviver"},{"id":2564,"name":"load","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":21,"character":16}],"signatures":[{"id":2565,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2566,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2567,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2566,"name":"T"}}],"permalink":"/api/common/namespace/json#load"},{"id":2555,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":13,"character":16}],"signatures":[{"id":2556,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2557,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2558,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2559,"name":"reviver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2568,"name":"JSONReviver"}}],"type":{"type":"reference","id":2557,"name":"T"}}],"permalink":"/api/common/namespace/json#parse"},{"id":2560,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":17,"character":16}],"signatures":[{"id":2561,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2562,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2563,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2573,"name":"JSONStringifyOptions"},"defaultValue":"{}"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/common/namespace/json#stringify"}],"groups":[{"title":"Interfaces","kind":256,"children":[2573]},{"title":"Type aliases","kind":4194304,"children":[2568]},{"title":"Functions","kind":64,"children":[2564,2555,2560]}],"sources":[{"fileName":"packages/common/src/serializers/json.ts","line":1,"character":0}],"permalink":"/api/common/namespace/json","previousId":2993,"nextId":2581},{"id":2581,"name":"yaml","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":2591,"name":"load","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":26,"character":16}],"signatures":[{"id":2592,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2593,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":2594,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2593,"name":"T"}}],"permalink":"/api/common/namespace/yaml#load"},{"id":2582,"name":"parse","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":12,"character":16}],"signatures":[{"id":2583,"name":"parse","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":2584,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2585,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2586,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"DocumentOptions","package":"yaml","name":"DocumentOptions"},{"type":"reference","qualifiedName":"ParseOptions","package":"yaml","name":"ParseOptions"},{"type":"reference","qualifiedName":"SchemaOptions","package":"yaml","name":"SchemaOptions"},{"type":"reference","qualifiedName":"ToJSOptions","package":"yaml","name":"ToJSOptions"}]}}],"type":{"type":"reference","id":2584,"name":"T"}}],"permalink":"/api/common/namespace/yaml#parse"},{"id":2587,"name":"stringify","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":19,"character":16}],"signatures":[{"id":2588,"name":"stringify","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2589,"name":"content","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2590,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"CreateNodeOptions","package":"yaml","name":"CreateNodeOptions"},{"type":"reference","qualifiedName":"DocumentOptions","package":"yaml","name":"DocumentOptions"},{"type":"reference","qualifiedName":"ParseOptions","package":"yaml","name":"ParseOptions"},{"type":"reference","qualifiedName":"SchemaOptions","package":"yaml","name":"SchemaOptions"},{"type":"reference","qualifiedName":"ToStringOptions","package":"yaml","name":"ToStringOptions"}]}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/common/namespace/yaml#stringify"}],"groups":[{"title":"Functions","kind":64,"children":[2591,2582,2587]}],"sources":[{"fileName":"packages/common/src/serializers/yaml.ts","line":1,"character":0}],"permalink":"/api/common/namespace/yaml","previousId":2554,"nextId":2879},{"id":2603,"name":"Contract","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":2604,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":8,"character":1}],"signatures":[{"id":2605,"name":"new Contract","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":2607,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2606,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":2608,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2607,"name":"T"}}],"type":{"type":"reference","id":2603,"typeArguments":[{"type":"reference","id":2607,"name":"T"}],"name":"Contract"}}]},{"id":2609,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":6,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2607,"name":"T"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"implementationOf":{"type":"reference","id":2898,"name":"Optionable.options"}},{"id":2616,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/Contract.ts","line":51,"character":10}],"signatures":[{"id":2617,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":2618,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}},{"id":2619,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"implementationOf":{"type":"reference","name":"Optionable.blueprint"}}],"implementationOf":{"type":"reference","id":2899,"name":"Optionable.blueprint"}},{"id":2610,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":28,"character":1}],"signatures":[{"id":2611,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":2612,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":2607,"name":"T"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":2613,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":2614,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2615,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2607,"name":"T"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2607,"name":"T"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2607,"name":"T"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2604]},{"title":"Properties","kind":1024,"children":[2609]},{"title":"Methods","kind":2048,"children":[2616,2610]}],"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":22}],"typeParameter":[{"id":2621,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2620,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/Contract.ts","line":4,"character":50}]}}}],"implementedTypes":[{"type":"reference","id":2897,"typeArguments":[{"type":"reference","id":2607,"name":"T"}],"name":"Optionable"}],"permalink":"/api/common/class/Contract","nextId":2622},{"id":2622,"name":"ExitError","kind":128,"kindString":"Class","flags":{},"children":[{"id":2623,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":4,"character":1}],"signatures":[{"id":2624,"name":"new ExitError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2625,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2626,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":2622,"name":"ExitError"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"id":2627,"name":"code","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/ExitError.ts","line":2,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[2623]},{"title":"Properties","kind":1024,"children":[2627]}],"sources":[{"fileName":"packages/common/src/ExitError.ts","line":1,"character":13}],"extendedTypes":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}],"permalink":"/api/common/class/ExitError","previousId":2603,"nextId":2679},{"id":2679,"name":"ModulePath","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"An immutable class for operating on Node.js module IDs, names, and paths."},"children":[{"id":2686,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":12,"character":1}],"signatures":[{"id":2687,"name":"new ModulePath","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2688,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2679,"name":"ModulePath"}}]},{"id":2691,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":34,"character":1}],"signatures":[{"id":2692,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `ModulePath` instance."},"parameters":[{"id":2693,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2679,"name":"ModulePath"}}]},{"id":2694,"name":"hasScope","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":43,"character":1}],"signatures":[{"id":2695,"name":"hasScope","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the module is scoped within a private namespace\\n(starts with @)."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2696,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":51,"character":1}],"signatures":[{"id":2697,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the module name without any trailing import paths,\\nor optionally without the private scope."},"parameters":[{"id":2698,"name":"withoutScope","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2699,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":64,"character":1}],"signatures":[{"id":2700,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current module path as a normalized string."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2859,"name":"Pathable.path"}}],"implementationOf":{"type":"reference","id":2858,"name":"Pathable.path"}},{"id":2701,"name":"scope","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":79,"character":1}],"signatures":[{"id":2702,"name":"scope","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the private scope with leading @, or null if not defined."},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}]},{"id":2703,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":87,"character":1}],"signatures":[{"id":2704,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2705,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":91,"character":1}],"signatures":[{"id":2706,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2861,"name":"Pathable.toString"}}],"implementationOf":{"type":"reference","id":2860,"name":"Pathable.toString"}},{"id":2680,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":19,"character":8}],"signatures":[{"id":2681,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `ModulePath` instance."},"parameters":[{"id":2682,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2679,"name":"ModulePath"}}]},{"id":2683,"name":"path","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":26,"character":8}],"signatures":[{"id":2684,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a module path-like value to a formatted module path string."},"parameters":[{"id":2685,"name":"part","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2686]},{"title":"Methods","kind":2048,"children":[2691,2694,2696,2699,2701,2703,2705,2680,2683]}],"sources":[{"fileName":"packages/common/src/ModulePath.ts","line":7,"character":13}],"implementedTypes":[{"type":"reference","id":2857,"name":"Pathable"}],"permalink":"/api/common/class/ModulePath","previousId":2622,"nextId":2707},{"id":2707,"name":"PackageGraph","kind":128,"kindString":"Class","flags":{},"children":[{"id":2708,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":24,"character":1}],"signatures":[{"id":2709,"name":"new PackageGraph","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":2710,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2928,"name":"PackageStructure"},"default":{"type":"reference","id":2928,"name":"PackageStructure"}}],"parameters":[{"id":2711,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2710,"name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":2707,"typeArguments":[{"type":"reference","id":2710,"name":"T"}],"name":"PackageGraph"}}]},{"id":2715,"name":"addPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":33,"character":1}],"signatures":[{"id":2716,"name":"addPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a package by name with an associated `package.json` object.\\nWill map a dependency between the package and its dependees\\nfound in `dependencies` and `peerDependencies`."},"parameters":[{"id":2717,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2710,"name":"T"}}],"type":{"type":"reference","id":2707,"typeArguments":[{"type":"reference","id":2710,"name":"T"}],"name":"PackageGraph"}}]},{"id":2718,"name":"addPackages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":50,"character":1}],"signatures":[{"id":2719,"name":"addPackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add multiple packages."},"parameters":[{"id":2720,"name":"packages","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"reference","id":2710,"name":"T"}},"defaultValue":"[]"}],"type":{"type":"reference","id":2707,"typeArguments":[{"type":"reference","id":2710,"name":"T"}],"name":"PackageGraph"}}]},{"id":2725,"name":"resolveBatchList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":153,"character":1}],"signatures":[{"id":2726,"name":"resolveBatchList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of batched `package.json` objects\\n(array of arrays) in the order they are depended on.","text":"```ts\\ngraph.resolveBatchList().forEach((pkgs) => {\\n\\tpkgs.forEach((pkg) => {\\n\\t\\tconsole.log(pkg.name);\\n\\t});\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"array","elementType":{"type":"reference","id":2710,"name":"T"}}}}]},{"id":2721,"name":"resolveList","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":68,"character":1}],"signatures":[{"id":2722,"name":"resolveList","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a list of all\\n`package.json` objects in the order they are depended on.","text":"```ts\\ngraph.resolveList().forEach((pkg) => {\\n\\tconsole.log(pkg.name);\\n});\\n```\\n"},"type":{"type":"array","elementType":{"type":"reference","id":2710,"name":"T"}}}]},{"id":2723,"name":"resolveTree","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":90,"character":1}],"signatures":[{"id":2724,"name":"resolveTree","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolve the dependency graph and return a tree of nodes for all\\n`package.json` objects and their dependency mappings.","text":"```ts\\ngraph.resolveTree().nodes.forEach((node) => {\\n\\tconsole.log(node.package.name);\\n\\n\\tif (node.nodes) {\\n\\t\\t// Dependents\\n\\t}\\n});\\n```\\n"},"type":{"type":"reference","id":2983,"typeArguments":[{"type":"reference","id":2710,"name":"T"}],"name":"PackageGraphTree"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2708]},{"title":"Methods","kind":2048,"children":[2715,2718,2725,2721,2723]}],"sources":[{"fileName":"packages/common/src/PackageGraph.ts","line":17,"character":13}],"typeParameter":[{"id":2745,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2928,"name":"PackageStructure"},"default":{"type":"reference","id":2928,"name":"PackageStructure"}}],"permalink":"/api/common/class/PackageGraph","previousId":2679,"nextId":2746},{"id":2746,"name":"Path","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"An immutable class for operating on file system paths.\\nWill normalize path separators based on the operating system,\\n\\"/\\" on Linux/MacOS, and \\"\\\\\\\\\\" on Windows."},"children":[{"id":2759,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":19,"character":1}],"signatures":[{"id":2760,"name":"new Path","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2761,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2746,"name":"Path"}}]},{"id":2747,"name":"DELIMITER","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":11,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.delimiter"},{"id":2748,"name":"SEP","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":13,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.sep"},{"id":2764,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":48,"character":1}],"signatures":[{"id":2765,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `Path` instance."},"parameters":[{"id":2766,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2746,"name":"Path"}}]},{"id":2767,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":55,"character":1}],"signatures":[{"id":2768,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if both paths are equal using strict equality."},"parameters":[{"id":2769,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2773,"name":"exists","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":71,"character":1}],"signatures":[{"id":2774,"name":"exists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path exists."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2770,"name":"ext","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":62,"character":1}],"signatures":[{"id":2771,"name":"ext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the extension (if applicable) with or without leading period."},"parameters":[{"id":2772,"name":"withoutPeriod","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2775,"name":"isAbsolute","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":78,"character":1}],"signatures":[{"id":2776,"name":"isAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is absolute."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2777,"name":"isDirectory","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":85,"character":1}],"signatures":[{"id":2778,"name":"isDirectory","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a folder."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2779,"name":"isFile","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":92,"character":1}],"signatures":[{"id":2780,"name":"isFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a file."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":2781,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":99,"character":1}],"signatures":[{"id":2782,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the file name (with optional extension) or folder name."},"parameters":[{"id":2783,"name":"withoutExtension","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2784,"name":"parent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":112,"character":1}],"signatures":[{"id":2785,"name":"parent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the parent folder as a new `Path` instance."},"type":{"type":"reference","id":2746,"name":"Path"}}]},{"id":2786,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":119,"character":1}],"signatures":[{"id":2787,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current path as a normalized string."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2859,"name":"Pathable.path"}}],"implementationOf":{"type":"reference","id":2858,"name":"Pathable.path"}},{"id":2788,"name":"prepend","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":132,"character":1}],"signatures":[{"id":2789,"name":"prepend","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Prepend path parts to the beginning of the current path\\nand return a new `Path` instance."},"parameters":[{"id":2790,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2746,"name":"Path"}}]},{"id":2791,"name":"realPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":140,"character":1}],"signatures":[{"id":2792,"name":"realPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a canonical path by resolving directories and symlinks."},"type":{"type":"intrinsic","name":"string"}}]},{"id":2793,"name":"relativeTo","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":148,"character":1}],"signatures":[{"id":2794,"name":"relativeTo","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new relative `Path` instance from the current\\n\\"from\\" path to the defined \\"to\\" path."},"parameters":[{"id":2795,"name":"to","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2746,"name":"Path"}}]},{"id":2796,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":156,"character":1}],"signatures":[{"id":2797,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new `Path` instance where the current path is accurately\\nresolved against the defined working directory."},"parameters":[{"id":2798,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2746,"name":"Path"}}]},{"id":2799,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":160,"character":1}],"signatures":[{"id":2800,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2801,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":164,"character":1}],"signatures":[{"id":2802,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":2861,"name":"Pathable.toString"}}],"implementationOf":{"type":"reference","id":2860,"name":"Pathable.toString"}},{"id":2749,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":26,"character":8}],"signatures":[{"id":2750,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `Path` instance."},"parameters":[{"id":2751,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2746,"name":"Path"}}]},{"id":2752,"name":"path","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":33,"character":8}],"signatures":[{"id":2753,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a path-like value to a formatted path string."},"parameters":[{"id":2754,"name":"part","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":2755,"name":"resolve","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":40,"character":8}],"signatures":[{"id":2756,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `create()` but also resolves the path against a working directory."},"parameters":[{"id":2757,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}},{"id":2758,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2746,"name":"Path"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2759]},{"title":"Properties","kind":1024,"children":[2747,2748]},{"title":"Methods","kind":2048,"children":[2764,2767,2773,2770,2775,2777,2779,2781,2784,2786,2788,2791,2793,2796,2799,2801,2749,2752,2755]}],"sources":[{"fileName":"packages/common/src/Path.ts","line":10,"character":13}],"extendedBy":[{"type":"reference","id":2997,"name":"VirtualPath"}],"implementedTypes":[{"type":"reference","id":2857,"name":"Pathable"}],"permalink":"/api/common/class/Path","previousId":2707,"nextId":2803},{"id":2803,"name":"PathResolver","kind":128,"kindString":"Class","flags":{},"children":[{"id":2808,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":12,"character":1}],"signatures":[{"id":2809,"name":"new PathResolver","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2810,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2864,"name":"ModuleResolver"}}],"type":{"type":"reference","id":2803,"name":"PathResolver"}}]},{"id":2813,"name":"getLookupPaths","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":32,"character":1}],"signatures":[{"id":2814,"name":"getLookupPaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all lookup paths."},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":2815,"name":"lookupFilePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":40,"character":1}],"signatures":[{"id":2816,"name":"lookupFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a file system path to look for, resolved against the defined current\\nworking directory (or `process.cwd()` otherwise)."},"parameters":[{"id":2817,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}},{"id":2818,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2803,"name":"PathResolver"}}]},{"id":2819,"name":"lookupFilePathWithExts","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":54,"character":1}],"signatures":[{"id":2820,"name":"lookupFilePathWithExts","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a file system path with a list of possible extensions to look for,\\nresolved against the defined current working directory (or `process.cwd()` otherwise)."},"parameters":[{"id":2821,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}},{"id":2822,"name":"exts","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2823,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2803,"name":"PathResolver"}}]},{"id":2824,"name":"lookupNodeModule","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":67,"character":1}],"signatures":[{"id":2825,"name":"lookupNodeModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a Node.js module, either by name or relative path, to look for."},"parameters":[{"id":2826,"name":"moduleId","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2803,"name":"PathResolver"}}]},{"id":2827,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":82,"character":7}],"signatures":[{"id":2828,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given a list of lookups, attempt to find the first real/existing path and\\nreturn a resolved absolute path. If a file system path, will check using `fs.exists`.\\nIf a node module path, will check using the provided resolver."},"parameters":[{"id":2829,"name":"startDir","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2875,"name":"ResolvedLookup"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":2830,"name":"resolvePath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":130,"character":7}],"signatures":[{"id":2831,"name":"resolvePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `resolve()` but only returns the resolved file path."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":2857,"name":"Pathable"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":2804,"name":"defaultResolver","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":16,"character":14}],"signatures":[{"id":2805,"name":"defaultResolver","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2806,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":2807,"name":"startDir","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2808]},{"title":"Methods","kind":2048,"children":[2813,2815,2819,2824,2827,2830,2804]}],"sources":[{"fileName":"packages/common/src/PathResolver.ts","line":7,"character":13}],"permalink":"/api/common/class/PathResolver","previousId":2746,"nextId":2834},{"id":2834,"name":"Project","kind":128,"kindString":"Class","flags":{},"children":[{"id":2838,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":18,"character":1}],"signatures":[{"id":2839,"name":"new Project","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2840,"name":"root","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","id":2834,"name":"Project"}}]},{"id":2841,"name":"root","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":16,"character":10}],"type":{"type":"reference","id":2746,"name":"Path"}},{"id":2842,"name":"createWorkspaceMetadata","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":33,"character":1}],"signatures":[{"id":2843,"name":"createWorkspaceMetadata","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a workspace metadata object composed of absolute file paths."},"parameters":[{"id":2844,"name":"jsonPath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2987,"name":"WorkspaceMetadata"}}]},{"id":2845,"name":"getPackage","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Project.ts","line":51,"character":1}],"signatures":[{"id":2846,"name":"getPackage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the contents of the root `package.json`."},"typeParameter":[{"id":2847,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2928,"name":"PackageStructure"}}],"type":{"type":"reference","id":2847,"name":"T"}}]},{"id":2848,"name":"getWorkspaceGlobs","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":3067,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":67,"character":1}],"signatures":[{"id":2849,"name":"getWorkspaceGlobs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace globs as they are configured\\nin `package.json` or `lerna.json`. Glob patterns will _always_\\nuse forward slashes, regardless of OS."},"parameters":[{"id":2850,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2832,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"id":2854,"name":"getWorkspacePackagePaths","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":3067,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":140,"character":1}],"signatures":[{"id":2855,"name":"getWorkspacePackagePaths","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all workspace package paths, resolved against the file system.\\nAbsolute file paths are returned unless the `relative` option is true."},"parameters":[{"id":2856,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2832,"name":"ProjectSearchOptions"},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"reference","id":2746,"name":"Path"}}}]},{"id":2851,"name":"getWorkspacePackages","kind":2048,"kindString":"Method","flags":{},"decorators":[{"name":"Memoize","type":{"type":"reference","id":3067,"name":"Memoize"},"arguments":{}}],"sources":[{"fileName":"packages/common/src/Project.ts","line":118,"character":1}],"signatures":[{"id":2852,"name":"getWorkspacePackages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all `package.json`s across all workspaces and their packages.\\nOnce loaded, append workspace path metadata."},"typeParameter":[{"id":2853,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2928,"name":"PackageStructure"}}],"type":{"type":"array","elementType":{"type":"reference","id":2993,"typeArguments":[{"type":"reference","id":2853,"name":"T"}],"name":"WorkspacePackage"}}}]},{"id":2835,"name":"normalizeGlob","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":26,"character":8}],"signatures":[{"id":2836,"name":"normalizeGlob","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Normalize a glob pattern or path for use on POSIX and Windows machines.","tags":[{"tag":"link","text":"https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows\\n"}]},"parameters":[{"id":2837,"name":"pattern","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[2838]},{"title":"Properties","kind":1024,"children":[2841]},{"title":"Methods","kind":2048,"children":[2842,2845,2848,2854,2851,2835]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":15,"character":13}],"permalink":"/api/common/class/Project","previousId":2803,"nextId":2997},{"id":2997,"name":"VirtualPath","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"An immutable class for operating on file system paths,\\nthat always normalize using a forward slash (\\"/\\") for path separators.\\nUseful for paths found in configurations, globs, etc."},"children":[{"id":3010,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3011,"name":"new VirtualPath","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3012,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2997,"name":"VirtualPath"},"inheritedFrom":{"type":"reference","id":2760,"name":"Path.constructor"}}],"inheritedFrom":{"type":"reference","id":2759,"name":"Path.constructor"}},{"id":3001,"name":"DELIMITER","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":11,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.delimiter","inheritedFrom":{"type":"reference","id":2747,"name":"Path.DELIMITER"}},{"id":3002,"name":"SEP","kind":1024,"kindString":"Property","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":13,"character":8}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"path.sep","inheritedFrom":{"type":"reference","id":2748,"name":"Path.SEP"}},{"id":3017,"name":"append","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":48,"character":1}],"signatures":[{"id":3018,"name":"append","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Append path parts to the end of the current path\\nand return a new `Path` instance."},"parameters":[{"id":3019,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2746,"name":"Path"},"inheritedFrom":{"type":"reference","id":2765,"name":"Path.append"}}],"inheritedFrom":{"type":"reference","id":2764,"name":"Path.append"}},{"id":3020,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":55,"character":1}],"signatures":[{"id":3021,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if both paths are equal using strict equality."},"parameters":[{"id":3022,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2768,"name":"Path.equals"}}],"inheritedFrom":{"type":"reference","id":2767,"name":"Path.equals"}},{"id":3026,"name":"exists","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":71,"character":1}],"signatures":[{"id":3027,"name":"exists","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path exists."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2774,"name":"Path.exists"}}],"inheritedFrom":{"type":"reference","id":2773,"name":"Path.exists"}},{"id":3023,"name":"ext","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":62,"character":1}],"signatures":[{"id":3024,"name":"ext","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the extension (if applicable) with or without leading period."},"parameters":[{"id":3025,"name":"withoutPeriod","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2771,"name":"Path.ext"}}],"inheritedFrom":{"type":"reference","id":2770,"name":"Path.ext"}},{"id":3028,"name":"isAbsolute","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":78,"character":1}],"signatures":[{"id":3029,"name":"isAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is absolute."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2776,"name":"Path.isAbsolute"}}],"inheritedFrom":{"type":"reference","id":2775,"name":"Path.isAbsolute"}},{"id":3030,"name":"isDirectory","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":85,"character":1}],"signatures":[{"id":3031,"name":"isDirectory","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a folder."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2778,"name":"Path.isDirectory"}}],"inheritedFrom":{"type":"reference","id":2777,"name":"Path.isDirectory"}},{"id":3032,"name":"isFile","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":92,"character":1}],"signatures":[{"id":3033,"name":"isFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the current path is a file."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":2780,"name":"Path.isFile"}}],"inheritedFrom":{"type":"reference","id":2779,"name":"Path.isFile"}},{"id":3034,"name":"name","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":99,"character":1}],"signatures":[{"id":3035,"name":"name","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the file name (with optional extension) or folder name."},"parameters":[{"id":3036,"name":"withoutExtension","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2782,"name":"Path.name"}}],"inheritedFrom":{"type":"reference","id":2781,"name":"Path.name"}},{"id":3037,"name":"parent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":112,"character":1}],"signatures":[{"id":3038,"name":"parent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the parent folder as a new `Path` instance."},"type":{"type":"reference","id":2746,"name":"Path"},"inheritedFrom":{"type":"reference","id":2785,"name":"Path.parent"}}],"inheritedFrom":{"type":"reference","id":2784,"name":"Path.parent"}},{"id":3013,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/VirtualPath.ts","line":22,"character":10}],"signatures":[{"id":3014,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return the current module path as a normalized string,\\nconverting all path separators to \\"/\\"."},"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","id":2787,"name":"Path.path"}}],"overwrites":{"type":"reference","id":2786,"name":"Path.path"}},{"id":3039,"name":"prepend","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":132,"character":1}],"signatures":[{"id":3040,"name":"prepend","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Prepend path parts to the beginning of the current path\\nand return a new `Path` instance."},"parameters":[{"id":3041,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2746,"name":"Path"},"inheritedFrom":{"type":"reference","id":2789,"name":"Path.prepend"}}],"inheritedFrom":{"type":"reference","id":2788,"name":"Path.prepend"}},{"id":3042,"name":"realPath","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":140,"character":1}],"signatures":[{"id":3043,"name":"realPath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a canonical path by resolving directories and symlinks."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2792,"name":"Path.realPath"}}],"inheritedFrom":{"type":"reference","id":2791,"name":"Path.realPath"}},{"id":3044,"name":"relativeTo","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":148,"character":1}],"signatures":[{"id":3045,"name":"relativeTo","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new relative `Path` instance from the current\\n\\"from\\" path to the defined \\"to\\" path."},"parameters":[{"id":3046,"name":"to","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2746,"name":"Path"},"inheritedFrom":{"type":"reference","id":2794,"name":"Path.relativeTo"}}],"inheritedFrom":{"type":"reference","id":2793,"name":"Path.relativeTo"}},{"id":3047,"name":"resolve","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":156,"character":1}],"signatures":[{"id":3048,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a new `Path` instance where the current path is accurately\\nresolved against the defined working directory."},"parameters":[{"id":3049,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2746,"name":"Path"},"inheritedFrom":{"type":"reference","id":2797,"name":"Path.resolve"}}],"inheritedFrom":{"type":"reference","id":2796,"name":"Path.resolve"}},{"id":3050,"name":"toJSON","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":160,"character":1}],"signatures":[{"id":3051,"name":"toJSON","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2800,"name":"Path.toJSON"}}],"inheritedFrom":{"type":"reference","id":2799,"name":"Path.toJSON"}},{"id":3052,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/Path.ts","line":164,"character":1}],"signatures":[{"id":3053,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2802,"name":"Path.toString"}}],"inheritedFrom":{"type":"reference","id":2801,"name":"Path.toString"}},{"id":3003,"name":"create","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":26,"character":8}],"signatures":[{"id":3004,"name":"create","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a new `Path` instance."},"parameters":[{"id":3005,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2746,"name":"Path"},"inheritedFrom":{"type":"reference","id":2750,"name":"Path.create"}}],"inheritedFrom":{"type":"reference","id":2749,"name":"Path.create"}},{"id":2998,"name":"path","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/VirtualPath.ts","line":14,"character":17}],"signatures":[{"id":2999,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a path-like value to a formatted virtual path string."},"parameters":[{"id":3000,"name":"part","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","id":2753,"name":"Path.path"}}],"overwrites":{"type":"reference","id":2752,"name":"Path.path"}},{"id":3006,"name":"resolve","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"packages/common/src/Path.ts","line":40,"character":8}],"signatures":[{"id":3007,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `create()` but also resolves the path against a working directory."},"parameters":[{"id":3008,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}},{"id":3009,"name":"cwd","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"reference","id":2746,"name":"Path"},"inheritedFrom":{"type":"reference","id":2756,"name":"Path.resolve"}}],"inheritedFrom":{"type":"reference","id":2755,"name":"Path.resolve"}}],"groups":[{"title":"Constructors","kind":512,"children":[3010]},{"title":"Properties","kind":1024,"children":[3001,3002]},{"title":"Methods","kind":2048,"children":[3017,3020,3026,3023,3028,3030,3032,3034,3037,3013,3039,3042,3044,3047,3050,3052,3003,2998,3006]}],"sources":[{"fileName":"packages/common/src/VirtualPath.ts","line":10,"character":13}],"extendedTypes":[{"type":"reference","id":2746,"name":"Path"}],"permalink":"/api/common/class/VirtualPath","previousId":2834,"nextId":3054},{"id":2907,"name":"BugSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2909,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":78,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2908,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":77,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2909,2908]}],"sources":[{"fileName":"packages/common/src/types.ts","line":76,"character":17}],"permalink":"/api/common/interface/BugSetting","previousId":2675,"nextId":2911},{"id":2911,"name":"DependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2912,"name":"built","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":84,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2913,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":85,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2914,"name":"unplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":86,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2912,2913,2914]}],"sources":[{"fileName":"packages/common/src/types.ts","line":83,"character":17}],"permalink":"/api/common/interface/DependencyMetaSetting","previousId":2907,"nextId":2871},{"id":2871,"name":"Lookup","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2872,"name":"path","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":26,"character":1}],"type":{"type":"reference","id":2857,"name":"Pathable"}},{"id":2873,"name":"raw","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":27,"character":1}],"type":{"type":"reference","id":2857,"name":"Pathable"}},{"id":2874,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":28,"character":1}],"type":{"type":"reference","id":2870,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[2872,2873,2874]}],"sources":[{"fileName":"packages/common/src/types.ts","line":25,"character":17}],"permalink":"/api/common/interface/Lookup","previousId":2911,"nextId":3085},{"id":3085,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3086,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":9,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":3080,"typeArguments":[{"type":"reference","id":3089,"name":"T"}],"name":"MemoizeCache"}]}},{"id":3087,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":14,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":3088,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":19,"character":4}],"type":{"type":"reference","id":3076,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[3086,3087,3088]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":7,"character":17}],"typeParameter":[{"id":3089,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/common/interface/MemoizeOptions","previousId":2871,"nextId":2897},{"id":2897,"name":"Optionable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2899,"name":"blueprint","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting."},"sources":[{"fileName":"packages/common/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":2891,"typeArguments":[{"type":"intrinsic","name":"object"}],"name":"BlueprintFactory"}},{"id":2898,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/src/types.ts","line":57,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":2901,"name":"T"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}}],"groups":[{"title":"Properties","kind":1024,"children":[2899,2898]}],"sources":[{"fileName":"packages/common/src/types.ts","line":55,"character":17}],"typeParameter":[{"id":2901,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":2900,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":55,"character":47}]}}}],"implementedBy":[{"type":"reference","id":2603,"name":"Contract"}],"permalink":"/api/common/interface/Optionable","previousId":3085,"nextId":2983},{"id":2983,"name":"PackageGraphTree","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2984,"name":"nodes","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":176,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":2979,"typeArguments":[{"type":"reference","id":2986,"name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":2985,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":177,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2984,2985]}],"sources":[{"fileName":"packages/common/src/types.ts","line":175,"character":17}],"typeParameter":[{"id":2986,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2928,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTree","previousId":2897,"nextId":2979},{"id":2979,"name":"PackageGraphTreeNode","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2980,"name":"nodes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":171,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":2979,"typeArguments":[{"type":"reference","id":2982,"name":"T"}],"name":"PackageGraphTreeNode"}}},{"id":2981,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":172,"character":1}],"type":{"type":"reference","id":2982,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2980,2981]}],"sources":[{"fileName":"packages/common/src/types.ts","line":170,"character":17}],"typeParameter":[{"id":2982,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2928,"name":"PackageStructure"}}],"permalink":"/api/common/interface/PackageGraphTreeNode","previousId":2983,"nextId":2928},{"id":2928,"name":"PackageStructure","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Shape of `package.json`, with support for third-party properties\\nlike Yarn, Webpack, and TypeScript."},"children":[{"id":2929,"name":"author","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":113,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2920,"name":"PeopleSetting"}]}},{"id":2930,"name":"bin","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":114,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2904,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}},{"id":2931,"name":"browser","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":115,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2932,"name":"browserslist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":116,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2933,"name":"bugs","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":117,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2907,"name":"BugSetting"}]}},{"id":2934,"name":"bundledDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":118,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2935,"name":"config","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":119,"character":1}],"type":{"type":"reference","id":2906,"name":"ConfigSetting"}},{"id":2936,"name":"contributors","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":120,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"array","elementType":{"type":"reference","id":2920,"name":"PeopleSetting"}}]}},{"id":2937,"name":"cpu","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":121,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2938,"name":"dependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":122,"character":1}],"type":{"type":"reference","id":2910,"name":"DependencyMap"}},{"id":2939,"name":"dependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":123,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2911,"name":"DependencyMetaSetting"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"id":2940,"name":"description","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2941,"name":"devDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":125,"character":1}],"type":{"type":"reference","id":2910,"name":"DependencyMap"}},{"id":2942,"name":"directories","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":126,"character":1}],"type":{"type":"reference","id":2904,"typeArguments":[{"type":"union","types":[{"type":"literal","value":"test"},{"type":"literal","value":"bin"},{"type":"literal","value":"doc"},{"type":"literal","value":"example"},{"type":"literal","value":"lib"},{"type":"literal","value":"man"}]}],"name":"SettingMap"}},{"id":2943,"name":"engines","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":127,"character":1}],"type":{"type":"reference","id":2904,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":2944,"name":"exports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":128,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","id":2904,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}]}],"qualifiedName":"Record","package":"typescript","name":"Record"}]}},{"id":2945,"name":"files","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":129,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2946,"name":"funding","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":130,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2915,"name":"TypeSetting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2915,"name":"TypeSetting"}]}}]}},{"id":2947,"name":"homepage","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":131,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2948,"name":"imports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":132,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2904,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"id":2969,"name":"installConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":156,"character":1}],"type":{"type":"reflection","declaration":{"id":2970,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2971,"name":"hoistingLimits","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":157,"character":2}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2971]}]}}},{"id":2949,"name":"keywords","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":133,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2972,"name":"languageName","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":159,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2950,"name":"license","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":134,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2915,"name":"TypeSetting"},{"type":"array","elementType":{"type":"reference","id":2915,"name":"TypeSetting"}}]}},{"id":2951,"name":"main","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":135,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2952,"name":"man","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":136,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2967,"name":"module","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":153,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2953,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":137,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2954,"name":"optionalDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":138,"character":1}],"type":{"type":"reference","id":2910,"name":"DependencyMap"}},{"id":2955,"name":"os","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":139,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2956,"name":"peerDependencies","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":140,"character":1}],"type":{"type":"reference","id":2910,"name":"DependencyMap"}},{"id":2957,"name":"peerDependenciesMeta","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":141,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2918,"name":"PeerDependencyMetaSetting"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"id":2973,"name":"preferUnplugged","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":160,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2958,"name":"private","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":142,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2959,"name":"publishConfig","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":143,"character":1}],"type":{"type":"reference","id":2906,"name":"ConfigSetting"}},{"id":2960,"name":"repository","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":144,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2924,"name":"RepositorySetting"}]}},{"id":2974,"name":"resolutions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":161,"character":1}],"type":{"type":"reference","id":2910,"name":"DependencyMap"}},{"id":2961,"name":"scripts","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":145,"character":1}],"type":{"type":"reference","id":2904,"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"SettingMap"}},{"id":2968,"name":"sideEffects","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":154,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":2962,"name":"type","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":146,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"commonjs"},{"type":"literal","value":"module"}]}},{"id":2964,"name":"types","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":149,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2965,"name":"typesVersions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":150,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"qualifiedName":"Record","package":"typescript","name":"Record"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"id":2966,"name":"typings","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":151,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2963,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":147,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2975,"name":"workspaces","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":162,"character":1}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reflection","declaration":{"id":2976,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":2978,"name":"nohoist","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":166,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2977,"name":"packages","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":165,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"groups":[{"title":"Properties","kind":1024,"children":[2978,2977]}]}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2969,2949,2972,2950,2951,2952,2967,2953,2954,2955,2956,2957,2973,2958,2959,2960,2974,2961,2968,2962,2964,2965,2966,2963,2975]}],"sources":[{"fileName":"packages/common/src/types.ts","line":112,"character":17}],"permalink":"/api/common/interface/PackageStructure","previousId":2979,"nextId":2857},{"id":2857,"name":"Pathable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2858,"name":"path","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":7,"character":1}],"signatures":[{"id":2859,"name":"path","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]},{"id":2860,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":8,"character":1}],"signatures":[{"id":2861,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[2858,2860]}],"sources":[{"fileName":"packages/common/src/types.ts","line":6,"character":17}],"implementedBy":[{"type":"reference","id":2679,"name":"ModulePath"},{"type":"reference","id":2746,"name":"Path"}],"permalink":"/api/common/interface/Pathable","previousId":2928,"nextId":2918},{"id":2918,"name":"PeerDependencyMetaSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2919,"name":"optional","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2919]}],"sources":[{"fileName":"packages/common/src/types.ts","line":94,"character":17}],"permalink":"/api/common/interface/PeerDependencyMetaSetting","previousId":2857,"nextId":2920},{"id":2920,"name":"PeopleSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2922,"name":"email","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":100,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2921,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":99,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2923,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":101,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2922,2921,2923]}],"sources":[{"fileName":"packages/common/src/types.ts","line":98,"character":17}],"permalink":"/api/common/interface/PeopleSetting","previousId":2918,"nextId":2832},{"id":2832,"name":"ProjectSearchOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2833,"name":"relative","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/Project.ts","line":12,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[2833]}],"sources":[{"fileName":"packages/common/src/Project.ts","line":11,"character":17}],"permalink":"/api/common/interface/ProjectSearchOptions","previousId":2920,"nextId":2924},{"id":2924,"name":"RepositorySetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2925,"name":"directory","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/common/src/types.ts","line":105,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2926,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2916,"name":"TypeSetting.type"}},{"id":2927,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":91,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":2917,"name":"TypeSetting.url"}}],"groups":[{"title":"Properties","kind":1024,"children":[2925,2926,2927]}],"sources":[{"fileName":"packages/common/src/types.ts","line":104,"character":17}],"extendedTypes":[{"type":"reference","id":2915,"name":"TypeSetting"}],"permalink":"/api/common/interface/RepositorySetting","previousId":2832,"nextId":2875},{"id":2875,"name":"ResolvedLookup","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2876,"name":"originalSource","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Original file path or module ID of the lookup."},"sources":[{"fileName":"packages/common/src/types.ts","line":33,"character":1}],"type":{"type":"reference","id":2857,"name":"Pathable"}},{"id":2877,"name":"resolvedPath","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Resolved absolute *file* path for the found lookup."},"sources":[{"fileName":"packages/common/src/types.ts","line":35,"character":1}],"type":{"type":"reference","id":2746,"name":"Path"}},{"id":2878,"name":"type","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The type of lookup that was found."},"sources":[{"fileName":"packages/common/src/types.ts","line":37,"character":1}],"type":{"type":"reference","id":2870,"name":"LookupType"}}],"groups":[{"title":"Properties","kind":1024,"children":[2876,2877,2878]}],"sources":[{"fileName":"packages/common/src/types.ts","line":31,"character":17}],"permalink":"/api/common/interface/ResolvedLookup","previousId":2924,"nextId":2902},{"id":2902,"name":"Toolable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2903,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":67,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2903]}],"sources":[{"fileName":"packages/common/src/types.ts","line":66,"character":17}],"permalink":"/api/common/interface/Toolable","previousId":2875,"nextId":2915},{"id":2915,"name":"TypeSetting","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2916,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":90,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2917,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":91,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2916,2917]}],"sources":[{"fileName":"packages/common/src/types.ts","line":89,"character":17}],"extendedBy":[{"type":"reference","id":2924,"name":"RepositorySetting"}],"permalink":"/api/common/interface/TypeSetting","previousId":2902,"nextId":2987},{"id":2987,"name":"WorkspaceMetadata","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2988,"name":"jsonPath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":183,"character":1}],"type":{"type":"reference","id":2746,"name":"Path"}},{"id":2990,"name":"packageName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":185,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2989,"name":"packagePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":184,"character":1}],"type":{"type":"reference","id":2746,"name":"Path"}},{"id":2992,"name":"workspaceName","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":187,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":2991,"name":"workspacePath","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":186,"character":1}],"type":{"type":"reference","id":2746,"name":"Path"}}],"groups":[{"title":"Properties","kind":1024,"children":[2988,2990,2989,2992,2991]}],"sources":[{"fileName":"packages/common/src/types.ts","line":182,"character":17}],"permalink":"/api/common/interface/WorkspaceMetadata","previousId":2915,"nextId":2993},{"id":2993,"name":"WorkspacePackage","kind":256,"kindString":"Interface","flags":{},"children":[{"id":2994,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":191,"character":1}],"type":{"type":"reference","id":2987,"name":"WorkspaceMetadata"}},{"id":2995,"name":"package","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":192,"character":1}],"type":{"type":"reference","id":2996,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[2994,2995]}],"sources":[{"fileName":"packages/common/src/types.ts","line":190,"character":17}],"typeParameter":[{"id":2996,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2928,"name":"PackageStructure"},"default":{"type":"reference","id":2928,"name":"PackageStructure"}}],"permalink":"/api/common/interface/WorkspacePackage","previousId":2987,"nextId":2554},{"id":2879,"name":"AbstractConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":12}],"typeParameter":[{"id":2883,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":2880,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":42,"character":37}],"signatures":[{"id":2881,"name":"__type","kind":16384,"kindString":"Constructor signature","flags":{"isAbstract":true},"parameters":[{"id":2882,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":2883,"name":"T"}}]}},"permalink":"/api/common#AbstractConstructor","previousId":2581,"nextId":2891},{"id":2891,"name":"BlueprintFactory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":50,"character":12}],"typeParameter":[{"id":2896,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":2892,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":50,"character":49}],"signatures":[{"id":2893,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2894,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"Schemas","package":"optimal","name":"Schemas"}},{"id":2895,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2896,"name":"T"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"}}]}},"permalink":"/api/common#BlueprintFactory","previousId":2879,"nextId":2595},{"id":2595,"name":"CommonErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/common#CommonErrorCode","previousId":2891,"nextId":2884},{"id":2884,"name":"ConcreteConstructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":44,"character":12}],"typeParameter":[{"id":2888,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":2885,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":44,"character":37}],"signatures":[{"id":2886,"name":"__type","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2887,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":2888,"name":"T"}}]}},"permalink":"/api/common#ConcreteConstructor","previousId":2595,"nextId":2906},{"id":2906,"name":"ConfigSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":74,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/common#ConfigSetting","previousId":2884,"nextId":2889},{"id":2889,"name":"Constructor","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":46,"character":12}],"typeParameter":[{"id":2890,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"union","types":[{"type":"reference","id":2879,"typeArguments":[{"type":"reference","id":2890,"name":"T"}],"name":"AbstractConstructor"},{"type":"reference","id":2884,"typeArguments":[{"type":"reference","id":2890,"name":"T"}],"name":"ConcreteConstructor"}]},"permalink":"/api/common#Constructor","previousId":2906,"nextId":2910},{"id":2910,"name":"DependencyMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":81,"character":12}],"type":{"type":"reference","id":2904,"name":"SettingMap"},"permalink":"/api/common#DependencyMap","previousId":2889,"nextId":2869},{"id":2869,"name":"FilePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":21,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#FilePath","previousId":2910,"nextId":2645},{"id":2645,"name":"InferMergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":6,"character":12}],"typeParameter":[{"id":2646,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":2646,"name":"T"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reference","id":2642,"name":"MergableArray"},"falseType":{"type":"conditional","checkType":{"type":"reference","id":2646,"name":"T"},"extendsType":{"type":"intrinsic","name":"object"},"trueType":{"type":"reference","id":2643,"name":"MergableObject"},"falseType":{"type":"intrinsic","name":"never"}}},"permalink":"/api/common#InferMergeable","previousId":2869,"nextId":2870},{"id":2870,"name":"LookupType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":23,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"file-system"},{"type":"literal","value":"node-module"}]},"permalink":"/api/common#LookupType","previousId":2645,"nextId":3080},{"id":3080,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":20}],"typeParameter":[{"id":3084,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":3081,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3082,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":4,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":3083,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":5,"character":4}],"type":{"type":"reference","id":3084,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[3082,3083]}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":3,"character":50}]}}],"qualifiedName":"Map","package":"typescript","name":"Map"},"permalink":"/api/common#MemoizeCache","previousId":2870,"nextId":3076},{"id":3076,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":20}],"type":{"type":"reflection","declaration":{"id":3077,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":2,"character":36}],"signatures":[{"id":3078,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3079,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/common#MemoizeHasher","previousId":3080,"nextId":3071},{"id":3071,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":20}],"typeParameter":[{"id":3075,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":3072,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":1,"character":42}],"signatures":[{"id":3073,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3074,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","id":3075,"name":"T"}}]}},"permalink":"/api/common#MemoizedFunction","previousId":3076,"nextId":2642},{"id":2642,"name":"MergableArray","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":3,"character":12}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"permalink":"/api/common#MergableArray","previousId":3071,"nextId":2643},{"id":2643,"name":"MergableObject","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":4,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/common#MergableObject","previousId":2642,"nextId":2644},{"id":2644,"name":"Mergeable","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":2642,"name":"MergableArray"},{"type":"reference","id":2643,"name":"MergableObject"}]},"permalink":"/api/common#Mergeable","previousId":2643,"nextId":2863},{"id":2863,"name":"ModuleID","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":15,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/common#ModuleID","previousId":2644,"nextId":2864},{"id":2864,"name":"ModuleResolver","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":17,"character":12}],"type":{"type":"reflection","declaration":{"id":2865,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":17,"character":29}],"signatures":[{"id":2866,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2867,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2863,"name":"ModuleID"}},{"id":2868,"name":"startDir","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2869,"name":"FilePath"}}],"type":{"type":"union","types":[{"type":"reference","id":2869,"name":"FilePath"},{"type":"reference","typeArguments":[{"type":"reference","id":2869,"name":"FilePath"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}]}}]}},"permalink":"/api/common#ModuleResolver","previousId":2863,"nextId":2862},{"id":2862,"name":"PortablePath","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":11,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":2869,"name":"FilePath"},{"type":"reference","id":2863,"name":"ModuleID"},{"type":"reference","id":2857,"name":"Pathable"}]},"permalink":"/api/common#PortablePath","previousId":2864,"nextId":2904},{"id":2904,"name":"SettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/common/src/types.ts","line":72,"character":12}],"typeParameter":[{"id":2905,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2905,"name":"T"},{"type":"intrinsic","name":"string"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/common#SettingMap","previousId":2862,"nextId":2596},{"id":2596,"name":"CommonError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/common/src/CommonError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":2597,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":2598,"name":"new CommonError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":2599,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}},{"id":2600,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"PARSE_INVALID_EXT"},{"type":"literal","value":"PATH_REQUIRE_ABSOLUTE"},{"type":"literal","value":"PATH_RESOLVE_LOOKUPS"},{"type":"literal","value":"PROJECT_NO_PACKAGE"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/common#CommonError","previousId":2904,"nextId":2601},{"id":2601,"name":"MODULE_NAME_PART","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/common/src/constants.ts","line":2,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PART","previousId":2596,"nextId":2602},{"id":2602,"name":"MODULE_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/common/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/common#MODULE_NAME_PATTERN","previousId":2601},{"id":3054,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Bind.d.ts","line":5,"character":24}],"signatures":[{"id":3055,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","qualifiedName":"MethodDecorator","package":"typescript","name":"MethodDecorator"}}],"permalink":"/api/common/function/Bind","previousId":2997,"nextId":3056},{"id":3056,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Debounce.d.ts","line":5,"character":24}],"signatures":[{"id":3057,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":3058,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","qualifiedName":"MethodDecorator","package":"typescript","name":"MethodDecorator"}}],"permalink":"/api/common/function/Debounce","previousId":3054,"nextId":3059},{"id":3059,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":24}],"signatures":[{"id":3060,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":3061,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":3062,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/dts/Deprecate.d.ts","line":6,"character":53}],"signatures":[{"id":3063,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":3064,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","qualifiedName":"Function","package":"typescript","name":"Function"},{"type":"reference","qualifiedName":"Object","package":"typescript","name":"Object"}]}},{"id":3065,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":3066,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/common/function/Deprecate","previousId":3056,"nextId":3067},{"id":3067,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"decorates":[{"type":"reference","name":"initializeAndValidate"},{"type":"reference","id":2848,"name":"getWorkspaceGlobs"},{"type":"reference","id":2851,"name":"getWorkspacePackages"},{"type":"reference","id":2854,"name":"getWorkspacePackagePaths"}],"sources":[{"fileName":"packages/decorators/dts/Memoize.d.ts","line":25,"character":24}],"signatures":[{"id":3068,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":3069,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":3070,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":3076,"name":"MemoizeHasher"},{"type":"reference","id":3085,"typeArguments":[{"type":"reference","id":3069,"name":"T"}],"name":"MemoizeOptions"}]}}],"type":{"type":"reference","qualifiedName":"MethodDecorator","package":"typescript","name":"MethodDecorator"}}],"permalink":"/api/common/function/Memoize","previousId":3059,"nextId":3090},{"id":3090,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/dts/Throttle.d.ts","line":5,"character":24}],"signatures":[{"id":3091,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":3092,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","qualifiedName":"MethodDecorator","package":"typescript","name":"MethodDecorator"}}],"permalink":"/api/common/function/Throttle","previousId":3067,"nextId":2628},{"id":2628,"name":"createBlueprint","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/createBlueprint.ts","line":21,"character":16}],"signatures":[{"id":2629,"name":"createBlueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to generate a blueprint object for use within\\n[optimal](https://github.com/milesj/optimal) checks. All supported optimal\\nschemas are passed as an object to the factory.","text":"```ts\\nimport { createBlueprint } from \'@boost/common\';\\nimport { optimal } from \'@boost/common/optimal\';\\n\\nconst blueprint = createBlueprint(({ string, number }) => ({\\n\\tname: string().required(),\\n\\tage: number().gt(0),\\n}));\\n\\nconst object = optimal(blueprint).validate({});\\n```\\n"},"typeParameter":[{"id":2630,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2631,"name":"factory","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2891,"typeArguments":[{"type":"reference","id":2630,"name":"T"}],"name":"BlueprintFactory"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2630,"name":"T"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"}}],"permalink":"/api/common/function/createBlueprint","previousId":3090,"nextId":2632},{"id":2632,"name":"deepFreeze","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepFreeze.ts","line":15,"character":16}],"signatures":[{"id":2633,"name":"deepFreeze","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively freeze plain objects with `Object.freeze`.","text":"```ts\\nimport { deepFreeze } from \'@boost/common\';\\n\\nconst obj = deepFreeze({ foo: 123 });\\n\\n// Errors!\\nobj.foo = 456;\\n```\\n"},"typeParameter":[{"id":2634,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2635,"name":"obj","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2634,"name":"T"}}],"type":{"type":"reference","id":2634,"name":"T"}}],"permalink":"/api/common/function/deepFreeze","previousId":2628,"nextId":2636},{"id":2636,"name":"deepMerge","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/deepMerge.ts","line":44,"character":16}],"signatures":[{"id":2637,"name":"deepMerge","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to recursively merge objects and arrays, where values on the\\nright-hand side will overwrite values on the left-hand based on the key\\nor index respectively. Furthermore, if the 2nd argument is not provided,\\nit will simply clone the base value.","text":"```ts\\nimport { deepMerge } from \'@boost/common\';\\n\\nconst obj = deepMerge({ foo: 123, bar: \'abc\' }, { foo: 456, baz: true });\\n\\n// -> { foo: 456, bar: \'abc\', baz: true }\\n```\\n"},"typeParameter":[{"id":2638,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2644,"name":"Mergeable"}},{"id":2639,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":2644,"name":"Mergeable"}}],"parameters":[{"id":2640,"name":"base","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2638,"name":"T"}},{"id":2641,"name":"other","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":2639,"name":"V"}}],"type":{"type":"reference","id":2638,"name":"T"}}],"permalink":"/api/common/function/deepMerge","previousId":2632,"nextId":2647},{"id":2647,"name":"formatMs","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/formatMs.ts","line":14,"character":16}],"signatures":[{"id":2648,"name":"formatMs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to format a UNIX timestamp in milliseconds into a shorthand human readable format.\\nWraps the [pretty-ms](https://www.npmjs.com/package/pretty-ms) package to handle infinite\\nnumbers, zeros, and more.","text":"```ts\\nimport { formatMs } from \'@boost/common\';\\n\\nformatMs(1337000000); // 15d 11h 23m 20s\\n```\\n"},"parameters":[{"id":2649,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":2650,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","qualifiedName":"prettyMilliseconds.Options","package":"pretty-ms","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/common/function/formatMs","previousId":2636,"nextId":2651},{"id":2651,"name":"instanceOf","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/instanceOf.ts","line":32,"character":16}],"signatures":[{"id":2652,"name":"instanceOf","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Performs a loose instance check by comparing class names up the prototype\\nchain if `instanceof` initially fails. To disable this loose check,\\npass `false` as the 3rd argument.","text":"```ts\\nimport { instanceOf } from \'@boost/common\';\\n\\nif (instanceOf(error, Error)) {\\n\\tconsole.log(error.stack);\\n}\\n```\\n\\nGenerics can be used to type the object being checked. This will default\\nto the declaration passed to the 2nd argument.\\n\\n```ts\\ninstanceOf<ParseError>(error, Error);\\n```\\n\\n> Loose checks can be useful if multiple copies of the same class declaration\\n> exists in the module tree. For example, multiple versions of the same package are imported.\\n"},"typeParameter":[{"id":2653,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":2654,"name":"object","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2655,"name":"declaration","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2889,"typeArguments":[{"type":"reference","id":2653,"name":"T"}],"name":"Constructor"}},{"id":2656,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"predicate","name":"object","asserts":false,"targetType":{"type":"reference","id":2653,"name":"T"}}}],"permalink":"/api/common/function/instanceOf","previousId":2647,"nextId":2657},{"id":2657,"name":"isEmpty","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isEmpty.ts","line":17,"character":16}],"signatures":[{"id":2658,"name":"isEmpty","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if an object has no properties, an array has no items,\\nor the value is falsy, otherwise, it returns `false`.","text":"```ts\\nimport { isEmpty } from \'@boost/common\';\\n\\nisEmpty({}); // true\\nisEmpty({ name: \'Boost\' }); // false\\n\\nisEmpty([]); // true\\nisEmpty([\'Boost\']); // false\\n```\\n"},"parameters":[{"id":2659,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isEmpty","previousId":2651,"nextId":2660},{"id":2660,"name":"isFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isFilePath.ts","line":20,"character":16}],"signatures":[{"id":2661,"name":"isFilePath","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string or `Path` instance looks like a file system path,\\nby checking for absolute or relative path markers, or the existence of\\npath separating slashes. Will return `false` for values that are only\\nthe file or folder name.","text":"```ts\\nimport { isFilePath } from \'@boost/common\';\\n\\nisFilePath(\'./path/to/file.ts\'); // true\\nisFilePath(new Path(\'/path/to/folder\')); // true\\nisFilePath(\'file.ts\'); // false\\n```\\n"},"parameters":[{"id":2662,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2862,"name":"PortablePath"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isFilePath","previousId":2657,"nextId":2663},{"id":2663,"name":"isModuleName","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isModuleName.ts","line":21,"character":16}],"signatures":[{"id":2664,"name":"isModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if a string is a valid Node module package name,\\naccording to the rules defined in\\n[validate-npm-package-name](https://github.com/npm/validate-npm-package-name).\\nWill `return` false for native builtin modules, like `fs`, and for the old name format.","text":"```ts\\nimport { isModuleName } from \'@boost/common\';\\n\\nisModuleName(\'boost\'); // true\\nisModuleName(\'@boost/common\'); // true\\nisModuleName(\'fs\'); // false\\n```\\n"},"parameters":[{"id":2665,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/common/function/isModuleName","previousId":2660,"nextId":2666},{"id":2666,"name":"isObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isObject.ts","line":24,"character":16}],"signatures":[{"id":2667,"name":"isObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `true` if the value is an object.","text":"```ts\\nimport { isObject } from \'@boost/common\';\\n\\nisObject({}); // true\\nisObject(new Foo()); // true\\nisObject([]); // false\\n```\\n\\nGenerics can be used to type the return value of the object (when necessary).\\n\\n```ts\\ninterface Person {\\n\\tname: string;\\n}\\n\\nif (isObject<Person>(person)) {\\n\\tconsole.log(person.name);\\n}\\n```\\n"},"typeParameter":[{"id":2668,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2669,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","id":2668,"name":"T"}}}],"permalink":"/api/common/function/isObject","previousId":2663,"nextId":2670},{"id":2670,"name":"isPlainObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/isPlainObject.ts","line":17,"character":16}],"signatures":[{"id":2671,"name":"isPlainObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `isObject` but only returns true if the value is a plain object\\n(no class instances, built-ins, etc). It achieves this by comparing\\nthe value\'s prototype to the built-in `Object` types. If you need to\\nrun these checks for cross-realm objects, pass true to the `loose` argument.","text":"```ts\\nimport { isPlainObject } from \'@boost/common\';\\n\\nisPlainObject({}); // true\\nisPlainObject(new Foo()); // false\\nisPlainObject([]); // false\\n```\\n"},"typeParameter":[{"id":2672,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":2673,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":2674,"name":"loose","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"predicate","name":"value","asserts":false,"targetType":{"type":"reference","id":2672,"name":"T"}}}],"permalink":"/api/common/function/isPlainObject","previousId":2666,"nextId":2675},{"id":2675,"name":"toArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/helpers/toArray.ts","line":14,"character":16}],"signatures":[{"id":2676,"name":"toArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts a non-array to an array. If the provided value is falsy,\\nan empty array is returned. If the provided value is truthy and a\\nnon-array, an array of 1 item is returned.","text":"```ts\\nimport { toArray } from \'@boost/common\';\\n\\ntoArray(123); // [123]\\ntoArray(\'abc\'); // [\'abc\']\\ntoArray([\'a\', \'b\', \'c\']); // [\'a\', \'b\', \'c\']\\n```\\n"},"typeParameter":[{"id":2677,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":2678,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":2677,"name":"T"},{"type":"array","elementType":{"type":"reference","id":2677,"name":"T"}}]}}],"type":{"type":"array","elementType":{"type":"reference","id":2677,"name":"T"}}}],"permalink":"/api/common/function/toArray","previousId":2670,"nextId":2907}],"groups":[{"title":"Classes","kind":128,"children":[2603,2622,2679,2707,2746,2803,2834,2997]},{"title":"Functions","kind":64,"children":[3054,3056,3059,3067,3090,2628,2632,2636,2647,2651,2657,2660,2663,2666,2670,2675]},{"title":"Interfaces","kind":256,"children":[2907,2911,2871,3085,2897,2983,2979,2928,2857,2918,2920,2832,2924,2875,2902,2915,2987,2993]},{"title":"Namespaces","kind":4,"children":[2554,2581]},{"title":"Type aliases","kind":4194304,"children":[2879,2891,2595,2884,2906,2889,2910,2869,2645,2870,3080,3076,3071,2642,2643,2644,2863,2864,2862,2904]},{"title":"Variables","kind":32,"children":[2596,2601,2602]}],"sources":[{"fileName":"packages/common/src/index.ts","line":6,"character":0}],"permalink":"/api/common"},"urlSlug":"common"},{"index":false,"label":"Optimal","reflection":{"id":89,"name":"@boost/common/optimal","kind":2,"kindString":"Module","flags":{},"children":[{"id":90,"name":"portablePathSchema","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"A schema for validating a value is a `PortablePath`.\\nChecks for a string, `Path`, or `Pathable`."},"sources":[{"fileName":"packages/common/src/optimal.ts","line":11,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2862,"name":"PortablePath"}],"qualifiedName":"UnionSchema","package":"optimal","name":"UnionSchema"},"defaultValue":"...","permalink":"/api/common-optimal#portablePathSchema"}],"groups":[{"title":"Variables","kind":32,"children":[90]}],"sources":[{"fileName":"packages/common/src/optimal.ts","line":1,"character":0}],"permalink":"/api/common-optimal"},"urlSlug":"common-optimal"},{"index":false,"label":"Test utilities","reflection":{"id":75,"name":"@boost/common/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":80,"name":"mockFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":19,"character":16}],"signatures":[{"id":81,"name":"mockFilePath","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":82,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2746,"name":"Path"}}],"permalink":"/api/common-test/function/mockFilePath","nextId":86},{"id":86,"name":"mockModulePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":30,"character":16}],"signatures":[{"id":87,"name":"mockModulePath","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":88,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2679,"name":"ModulePath"}}],"permalink":"/api/common-test/function/mockModulePath","previousId":80,"nextId":83},{"id":83,"name":"mockNormalizedFilePath","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":23,"character":16}],"signatures":[{"id":84,"name":"mockNormalizedFilePath","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":85,"name":"parts","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}}],"type":{"type":"reference","id":2746,"name":"Path"}}],"permalink":"/api/common-test/function/mockNormalizedFilePath","previousId":86,"nextId":76},{"id":76,"name":"normalizeSeparators","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/common/src/test.ts","line":7,"character":16}],"signatures":[{"id":77,"name":"normalizeSeparators","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Normalize a path or its parts by ensuring all path separators match\\nthe operating systems default character."},"typeParameter":[{"id":78,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":2862,"name":"PortablePath"},{"type":"array","elementType":{"type":"reference","id":2862,"name":"PortablePath"}}]}}],"parameters":[{"id":79,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":78,"name":"T"}}],"type":{"type":"reference","id":78,"name":"T"}}],"permalink":"/api/common-test/function/normalizeSeparators","previousId":83}],"groups":[{"title":"Functions","kind":64,"children":[80,86,83,76]}],"sources":[{"fileName":"packages/common/src/test.ts","line":1,"character":0}],"permalink":"/api/common-test"},"urlSlug":"common-test"}],"packageName":"@boost/common","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":2,"name":"@boost/config","kind":2,"kindString":"Module","flags":{},"children":[{"id":325,"name":"Configuration","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":326,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":44,"character":1}],"signatures":[{"id":327,"name":"new Configuration","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":328,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":329,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":330,"name":"resolver","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"ModuleResolver"}}],"type":{"type":"reference","id":325,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"Configuration"},"overwrites":{"type":"reference","name":"Contract<T>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<T>.constructor"}},{"id":331,"name":"onLoadedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded but before processed. Can modify config file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":22,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":453,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"ConfigFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":332,"name":"onLoadedIgnore","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after ignore files are loaded. Can modify ignore file list."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":28,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":458,"name":"IgnoreFile"}},{"type":"intrinsic","name":"string"}],"name":"WaterfallEvent"},"defaultValue":"..."},{"id":333,"name":"onProcessedConfig","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after config files are loaded and processed."},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":34,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","typeArguments":[{"type":"reference","id":328,"name":"T"}],"qualifiedName":"Required","package":"typescript","name":"Required"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":385,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":328,"name":"T"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":362,"name":"addProcessHandler","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":150,"character":11}],"signatures":[{"id":363,"name":"addProcessHandler","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Add a process handler to customize the processing of key-value setting pairs.\\nMay only run a processor on settings found in the root of the configuration object."},"typeParameter":[{"id":364,"name":"K","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"symbol"}]}},{"id":365,"name":"V","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"indexedAccess","indexType":{"type":"reference","id":364,"name":"K"},"objectType":{"type":"reference","id":328,"name":"T"}}}],"parameters":[{"id":366,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":364,"name":"K"}},{"id":367,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":442,"typeArguments":[{"type":"reference","id":365,"name":"V"}],"name":"Handler"}}],"type":{"type":"reference","id":325,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"Configuration"}}]},{"id":392,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":393,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":394,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}},{"id":395,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":368,"name":"bootstrap","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":160,"character":11}],"signatures":[{"id":369,"name":"bootstrap","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Life cycle called on initialization."},"type":{"type":"intrinsic","name":"void"}}]},{"id":338,"name":"clearCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":57,"character":1}],"signatures":[{"id":339,"name":"clearCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cache."},"type":{"type":"reference","id":325,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"Configuration"}}]},{"id":340,"name":"clearFileCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":67,"character":1}],"signatures":[{"id":341,"name":"clearFileCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached file contents."},"type":{"type":"reference","id":325,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"Configuration"}}]},{"id":342,"name":"clearFinderCache","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":76,"character":1}],"signatures":[{"id":343,"name":"clearFinderCache","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Clear all cached directory and file path information."},"type":{"type":"reference","id":325,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"Configuration"}}]},{"id":386,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":387,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":388,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":328,"name":"T"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":389,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":390,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":391,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":328,"name":"T"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":328,"name":"T"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":328,"name":"T"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":370,"name":"configureFinder","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":166,"character":11}],"signatures":[{"id":371,"name":"configureFinder","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the finder instance."},"parameters":[{"id":372,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":469,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"ConfigFinderOptions"},{"type":"literal","value":"name"}],"qualifiedName":"Omit","package":"typescript","name":"Omit"}}],"type":{"type":"reference","id":325,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"Configuration"}}]},{"id":373,"name":"configureProcessor","kind":2048,"kindString":"Method","flags":{"isPublic":true},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":176,"character":11}],"signatures":[{"id":374,"name":"configureProcessor","kind":4096,"kindString":"Call signature","flags":{"isPublic":true},"comment":{"shortText":"Configure the processor instance."},"parameters":[{"id":375,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":490,"name":"ProcessorOptions"},{"type":"literal","value":"name"}],"qualifiedName":"Omit","package":"typescript","name":"Omit"}}],"type":{"type":"reference","id":325,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"Configuration"}}]},{"id":344,"name":"findRootDir","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":87,"character":7}],"signatures":[{"id":345,"name":"findRootDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Attempt to find the root directory starting from the provided directory.\\nOnce the root is found, it will be cached for further lookups,\\notherwise an error is thrown based on current configuration."},"parameters":[{"id":346,"name":"fromDir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Path"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":347,"name":"loadConfigFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":96,"character":7}],"signatures":[{"id":348,"name":"loadConfigFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all config files\\nwithin each branch directory, and the root."},"parameters":[{"id":349,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":462,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"ProcessedConfig"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":350,"name":"loadConfigFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":106,"character":7}],"signatures":[{"id":351,"name":"loadConfigFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load config files from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":352,"name":"fromDir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":462,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"ProcessedConfig"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":353,"name":"loadIgnoreFromBranchToRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":117,"character":7}],"signatures":[{"id":354,"name":"loadIgnoreFromBranchToRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse upwards from the branch directory, until the root directory is found,\\nor we reach to top of the file system. While traversing, find all ignore files\\nwithin each branch directory, and the root."},"parameters":[{"id":355,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":458,"name":"IgnoreFile"}}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":356,"name":"loadIgnoreFromRoot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":127,"character":7}],"signatures":[{"id":357,"name":"loadIgnoreFromRoot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load ignore file from the defined root. Root is determined by a relative\\n`.config` folder and `package.json` file."},"parameters":[{"id":358,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":458,"name":"IgnoreFile"}}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":359,"name":"setRootDir","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/config/src/Configuration.ts","line":139,"character":1}],"signatures":[{"id":360,"name":"setRootDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Explicitly set the root directory to stop traversal at. This should only be set\\nmanually when you want full control, and know file boundaries up front.","text":"This *does not* check for the existence of the root config file or folder.\\n"},"parameters":[{"id":361,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","id":325,"typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"Configuration"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[326]},{"title":"Properties","kind":1024,"children":[331,332,333,385],"categories":[{"title":"CATEGORY","children":[385]},{"title":"Events","children":[331,332,333]}]},{"title":"Methods","kind":2048,"children":[362,392,368,338,340,342,386,370,373,344,347,350,353,356,359]}],"sources":[{"fileName":"packages/config/src/Configuration.ts","line":17,"character":22}],"typeParameter":[{"id":396,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":328,"name":"T"}],"name":"Contract"}],"permalink":"/api/config/class/Configuration","nextId":423},{"id":466,"name":"BaseFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":468,"name":"errorIfNoRootFound","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error if the root config cannot be located."},"sources":[{"fileName":"packages/config/src/types.ts","line":45,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":467,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":43,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[468,467]}],"sources":[{"fileName":"packages/config/src/types.ts","line":41,"character":17}],"extendedBy":[{"type":"reference","id":469,"name":"ConfigFinderOptions"},{"type":"reference","id":487,"name":"IgnoreFinderOptions"}],"permalink":"/api/config/interface/BaseFinderOptions","previousId":418,"nextId":453},{"id":453,"name":"ConfigFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":454,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Config content of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":25,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":457,"name":"T"}],"qualifiedName":"DeepPartial","package":"optimal","name":"DeepPartial"}},{"id":455,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":18,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":451,"name":"File.path"}},{"id":456,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":20,"character":1}],"type":{"type":"reference","id":449,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":452,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[454,455,456]}],"sources":[{"fileName":"packages/config/src/types.ts","line":23,"character":17}],"typeParameter":[{"id":457,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":450,"name":"File"}],"permalink":"/api/config/interface/ConfigFile","previousId":466,"nextId":469},{"id":469,"name":"ConfigFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":485,"name":"errorIfNoRootFound","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error if the root config cannot be located."},"sources":[{"fileName":"packages/config/src/types.ts","line":45,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":468,"name":"BaseFinderOptions.errorIfNoRootFound"}},{"id":470,"name":"extendsSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config extending\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":50,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":471,"name":"extensions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of extensions, in order, to find config files within each folder. Defaults to built-in file format list."},"sources":[{"fileName":"packages/config/src/types.ts","line":52,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":434,"name":"ExtType"}}},{"id":472,"name":"includeEnv","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Find and load environment based config files (using `NODE_ENV`). Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":54,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":473,"name":"loaders","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Mapping of loader functions by type. Defaults to built-in file type loaders."},"sources":[{"fileName":"packages/config/src/types.ts","line":56,"character":1}],"type":{"type":"reflection","declaration":{"id":474,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":476,"name":"cjs","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":436,"typeArguments":[{"type":"reference","id":486,"name":"T"}],"name":"Loader"}},{"id":477,"name":"js","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":436,"typeArguments":[{"type":"reference","id":486,"name":"T"}],"name":"Loader"}},{"id":475,"name":"json","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":436,"typeArguments":[{"type":"reference","id":486,"name":"T"}],"name":"Loader"}},{"id":478,"name":"json5","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":436,"typeArguments":[{"type":"reference","id":486,"name":"T"}],"name":"Loader"}},{"id":479,"name":"mjs","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":436,"typeArguments":[{"type":"reference","id":486,"name":"T"}],"name":"Loader"}},{"id":480,"name":"ts","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":436,"typeArguments":[{"type":"reference","id":486,"name":"T"}],"name":"Loader"}},{"id":481,"name":"yaml","kind":1024,"kindString":"Property","flags":{},"type":{"type":"reference","id":436,"typeArguments":[{"type":"reference","id":486,"name":"T"}],"name":"Loader"}}],"groups":[{"title":"Properties","kind":1024,"children":[476,477,475,478,479,480,481]}]}}},{"id":484,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":43,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":467,"name":"BaseFinderOptions.name"}},{"id":482,"name":"overridesSetting","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the setting in which \\"config overriding\\" is enabled."},"sources":[{"fileName":"packages/config/src/types.ts","line":58,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":483,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver."},"sources":[{"fileName":"packages/config/src/types.ts","line":60,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}}],"groups":[{"title":"Properties","kind":1024,"children":[485,470,471,472,473,484,482,483]}],"sources":[{"fileName":"packages/config/src/types.ts","line":48,"character":17}],"typeParameter":[{"id":486,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"extendedTypes":[{"type":"reference","id":466,"name":"BaseFinderOptions"}],"permalink":"/api/config/interface/ConfigFinderOptions","previousId":453,"nextId":450},{"id":450,"name":"File","kind":256,"kindString":"Interface","flags":{},"children":[{"id":451,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":18,"character":1}],"type":{"type":"reference","name":"Path"}},{"id":452,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":20,"character":1}],"type":{"type":"reference","id":449,"name":"FileSource"}}],"groups":[{"title":"Properties","kind":1024,"children":[451,452]}],"sources":[{"fileName":"packages/config/src/types.ts","line":16,"character":17}],"extendedBy":[{"type":"reference","id":453,"name":"ConfigFile"},{"type":"reference","id":458,"name":"IgnoreFile"}],"permalink":"/api/config/interface/File","previousId":469,"nextId":458},{"id":458,"name":"IgnoreFile","kind":256,"kindString":"Interface","flags":{},"children":[{"id":459,"name":"ignore","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Ignored content of the file, split on new lines."},"sources":[{"fileName":"packages/config/src/types.ts","line":30,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":460,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute path of the file."},"sources":[{"fileName":"packages/config/src/types.ts","line":18,"character":1}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":451,"name":"File.path"}},{"id":461,"name":"source","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The source where the file originated."},"sources":[{"fileName":"packages/config/src/types.ts","line":20,"character":1}],"type":{"type":"reference","id":449,"name":"FileSource"},"inheritedFrom":{"type":"reference","id":452,"name":"File.source"}}],"groups":[{"title":"Properties","kind":1024,"children":[459,460,461]}],"sources":[{"fileName":"packages/config/src/types.ts","line":28,"character":17}],"extendedTypes":[{"type":"reference","id":450,"name":"File"}],"permalink":"/api/config/interface/IgnoreFile","previousId":450,"nextId":487},{"id":487,"name":"IgnoreFinderOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":489,"name":"errorIfNoRootFound","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Throw an error if the root config cannot be located."},"sources":[{"fileName":"packages/config/src/types.ts","line":45,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":468,"name":"BaseFinderOptions.errorIfNoRootFound"}},{"id":488,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":43,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":467,"name":"BaseFinderOptions.name"}}],"groups":[{"title":"Properties","kind":1024,"children":[489,488]}],"sources":[{"fileName":"packages/config/src/types.ts","line":63,"character":17}],"extendedTypes":[{"type":"reference","id":466,"name":"BaseFinderOptions"}],"permalink":"/api/config/interface/IgnoreFinderOptions","previousId":458,"nextId":496},{"id":496,"name":"OverridesSettingItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":497,"name":"exclude","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File path patterns/globs to ignore."},"sources":[{"fileName":"packages/config/src/types.ts","line":84,"character":1}],"type":{"type":"reference","id":494,"name":"FileGlob"}},{"id":498,"name":"include","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"File path patterns/globs to match against."},"sources":[{"fileName":"packages/config/src/types.ts","line":86,"character":1}],"type":{"type":"reference","id":494,"name":"FileGlob"}},{"id":499,"name":"settings","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Settings configured for this specific override."},"sources":[{"fileName":"packages/config/src/types.ts","line":88,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":500,"name":"T"}],"qualifiedName":"DeepPartial","package":"optimal","name":"DeepPartial"}}],"groups":[{"title":"Properties","kind":1024,"children":[497,498,499]}],"sources":[{"fileName":"packages/config/src/types.ts","line":82,"character":17}],"typeParameter":[{"id":500,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/OverridesSettingItem","previousId":487,"nextId":462},{"id":462,"name":"ProcessedConfig","kind":256,"kindString":"Interface","flags":{},"children":[{"id":463,"name":"config","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"All found and loaded config file contents merged and processed into a\\nsingle config object."},"sources":[{"fileName":"packages/config/src/types.ts","line":36,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":465,"name":"T"}],"qualifiedName":"Required","package":"typescript","name":"Required"}},{"id":464,"name":"files","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of config files found and loaded."},"sources":[{"fileName":"packages/config/src/types.ts","line":38,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":453,"typeArguments":[{"type":"reference","id":465,"name":"T"}],"name":"ConfigFile"}}}],"groups":[{"title":"Properties","kind":1024,"children":[463,464]}],"sources":[{"fileName":"packages/config/src/types.ts","line":33,"character":17}],"typeParameter":[{"id":465,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/config/interface/ProcessedConfig","previousId":496,"nextId":490},{"id":490,"name":"ProcessorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":491,"name":"defaultWhenUndefined","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"When a setting has a value of `undefined`, fallback to the\\ndefault/initial value for that setting. Defaults to `true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":70,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":492,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of config files, without extension."},"sources":[{"fileName":"packages/config/src/types.ts","line":72,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":493,"name":"validate","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Validate all settings within a config file before processing. Defaults to\\n`true`."},"sources":[{"fileName":"packages/config/src/types.ts","line":75,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[491,492,493]}],"sources":[{"fileName":"packages/config/src/types.ts","line":65,"character":17}],"permalink":"/api/config/interface/ProcessorOptions","previousId":462,"nextId":319},{"id":319,"name":"ConfigErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":15,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/config#ConfigErrorCode","previousId":490,"nextId":434},{"id":434,"name":"ExtType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":4,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"cjs"},{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"json5"},{"type":"literal","value":"mjs"},{"type":"literal","value":"ts"},{"type":"literal","value":"yaml"},{"type":"literal","value":"yml"}]},"permalink":"/api/config#ExtType","previousId":319,"nextId":495},{"id":495,"name":"ExtendsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":80,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#ExtendsSetting","previousId":434,"nextId":494},{"id":494,"name":"FileGlob","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":78,"character":12}],"type":{"type":"union","types":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"intrinsic","name":"string"}]},"permalink":"/api/config#FileGlob","previousId":495,"nextId":449},{"id":449,"name":"FileSource","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":14,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"branch"},{"type":"literal","value":"extended"},{"type":"literal","value":"overridden"},{"type":"literal","value":"root"}]},"permalink":"/api/config#FileSource","previousId":494,"nextId":448},{"id":448,"name":"FileType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":12,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"branch"},{"type":"literal","value":"preset"},{"type":"literal","value":"root-file"},{"type":"literal","value":"root-folder"}]},"permalink":"/api/config#FileType","previousId":449,"nextId":442},{"id":442,"name":"Handler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":10,"character":12}],"typeParameter":[{"id":447,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":443,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":10,"character":25}],"signatures":[{"id":444,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":445,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":447,"name":"T"}},{"id":446,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":447,"name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","id":447,"name":"T"},{"type":"intrinsic","name":"undefined"}]}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},{"type":"reference","id":447,"name":"T"},{"type":"intrinsic","name":"undefined"}]}}]}},"permalink":"/api/config#Handler","previousId":448,"nextId":436},{"id":436,"name":"Loader","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":8,"character":12}],"typeParameter":[{"id":441,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":437,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":8,"character":24}],"signatures":[{"id":438,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":439,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Path"}},{"id":440,"name":"pkg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PackageStructure"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":441,"name":"T"}],"qualifiedName":"DeepPartial","package":"optimal","name":"DeepPartial"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}},"permalink":"/api/config#Loader","previousId":442,"nextId":435},{"id":435,"name":"LoaderType","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":6,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":434,"name":"ExtType"},{"type":"literal","value":"yml"}],"qualifiedName":"Exclude","package":"typescript","name":"Exclude"},"permalink":"/api/config#LoaderType","previousId":436,"nextId":501},{"id":501,"name":"OverridesSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":91,"character":12}],"typeParameter":[{"id":502,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"array","elementType":{"type":"reference","id":496,"typeArguments":[{"type":"reference","id":502,"name":"T"}],"name":"OverridesSettingItem"}},"permalink":"/api/config#OverridesSetting","previousId":435,"nextId":504},{"id":504,"name":"PluginEntry","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":97,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"reference","id":503,"name":"PluginOptions"}]}]},"permalink":"/api/config#PluginEntry","previousId":501,"nextId":503},{"id":503,"name":"PluginOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":95,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/config#PluginOptions","previousId":504,"nextId":507},{"id":507,"name":"PluginsSetting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":103,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":506,"name":"PluginsSettingList"},{"type":"reference","id":505,"name":"PluginsSettingMap"}]},"permalink":"/api/config#PluginsSetting","previousId":503,"nextId":506},{"id":506,"name":"PluginsSettingList","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":101,"character":12}],"type":{"type":"array","elementType":{"type":"reference","id":504,"name":"PluginEntry"}},"permalink":"/api/config#PluginsSettingList","previousId":507,"nextId":505},{"id":505,"name":"PluginsSettingMap","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/config/src/types.ts","line":99,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":503,"name":"PluginOptions"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/config#PluginsSettingMap","previousId":506,"nextId":320},{"id":320,"name":"ConfigError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/config/src/ConfigError.ts","line":17,"character":13}],"type":{"type":"reflection","declaration":{"id":321,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":322,"name":"new ConfigError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":323,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_INVALID_DIR"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}},{"id":324,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"EXTENDS_ONLY_ROOT"},{"type":"literal","value":"EXTENDS_UNKNOWN_PATH"},{"type":"literal","value":"LOADER_UNSUPPORTED"},{"type":"literal","value":"PACKAGE_UNKNOWN_SCOPE"},{"type":"literal","value":"ROOT_INVALID"},{"type":"literal","value":"ROOT_INVALID_DIR"},{"type":"literal","value":"ROOT_NO_PACKAGE"},{"type":"literal","value":"ROOT_ONLY_OVERRIDES"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/config#ConfigError","previousId":505},{"id":423,"name":"createExtendsSchema","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/schemas.ts","line":13,"character":16}],"signatures":[{"id":424,"name":"createExtendsSchema","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` schema for validating the structure of an \\"extends\\" setting."},"parameters":[{"id":425,"name":"schematics","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"},"defaultValue":"schemas"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":495,"name":"ExtendsSetting"}],"qualifiedName":"UnionSchema","package":"optimal","name":"UnionSchema"}}],"permalink":"/api/config/function/createExtendsSchema","previousId":325,"nextId":429},{"id":429,"name":"createOverridesSchema","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/schemas.ts","line":39,"character":16}],"signatures":[{"id":430,"name":"createOverridesSchema","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` schema for validating the structure of an \\"overrides\\" setting."},"typeParameter":[{"id":431,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":432,"name":"blueprint","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":431,"name":"T"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"}},{"id":433,"name":"schematics","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"},"defaultValue":"schemas"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"Object"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"qualifiedName":"ArraySchema","package":"optimal","name":"ArraySchema"}}],"permalink":"/api/config/function/createOverridesSchema","previousId":423,"nextId":426},{"id":426,"name":"createPluginsSchema","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/schemas.ts","line":24,"character":16}],"signatures":[{"id":427,"name":"createPluginsSchema","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create an `optimal` schema for validating the structure of a \\"plugins\\" setting."},"parameters":[{"id":428,"name":"schematics","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"},"defaultValue":"schemas"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":507,"name":"PluginsSetting"}],"qualifiedName":"UnionSchema","package":"optimal","name":"UnionSchema"}}],"permalink":"/api/config/function/createPluginsSchema","previousId":429,"nextId":397},{"id":397,"name":"getEnv","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/getEnv.ts","line":4,"character":16}],"signatures":[{"id":398,"name":"getEnv","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Detect the current environment name from `<project>_ENV` and `NODE_ENV`."},"parameters":[{"id":399,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/config/function/getEnv","previousId":426,"nextId":400},{"id":400,"name":"mergeArray","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeArray.ts","line":4,"character":16}],"signatures":[{"id":401,"name":"mergeArray","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next arrays into a new array while removing duplicates (using `Set`)."},"typeParameter":[{"id":402,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"parameters":[{"id":403,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":402,"name":"T"}},{"id":404,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":402,"name":"T"}}],"type":{"type":"reference","id":402,"name":"T"}}],"permalink":"/api/config/function/mergeArray","previousId":397,"nextId":405},{"id":405,"name":"mergeExtends","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeExtends.ts","line":9,"character":16}],"signatures":[{"id":406,"name":"mergeExtends","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next file paths (either a string or array of strings) into a\\nnew list of file paths. This is useful if utilizing config extending."},"parameters":[{"id":407,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":495,"name":"ExtendsSetting"}},{"id":408,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":495,"name":"ExtendsSetting"}}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"permalink":"/api/config/function/mergeExtends","previousId":400,"nextId":409},{"id":409,"name":"mergeObject","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergeObject.ts","line":4,"character":16}],"signatures":[{"id":410,"name":"mergeObject","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Shallow merges previous and next objects into a new object using object spread."},"typeParameter":[{"id":411,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}}],"parameters":[{"id":412,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":411,"name":"T"}},{"id":413,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":411,"name":"T"}}],"type":{"type":"reference","id":411,"name":"T"}}],"permalink":"/api/config/function/mergeObject","previousId":405,"nextId":414},{"id":414,"name":"mergePlugins","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/mergePlugins.ts","line":21,"character":16}],"signatures":[{"id":415,"name":"mergePlugins","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Merges previous and next plugin configurations into an object.\\nPlugin configs can either be a list of sources, or list of sources\\nwith flags/options (tuples), or a map of sources to flags/options.\\nThis is useful if utilizing the `@boost/plugin` package."},"parameters":[{"id":416,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":507,"name":"PluginsSetting"}},{"id":417,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":507,"name":"PluginsSetting"}}],"type":{"type":"reference","id":505,"name":"PluginsSettingMap"}}],"permalink":"/api/config/function/mergePlugins","previousId":409,"nextId":418},{"id":418,"name":"overwrite","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/config/src/helpers/overwrite.ts","line":4,"character":16}],"signatures":[{"id":419,"name":"overwrite","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Overwrite the previous value with the next value."},"typeParameter":[{"id":420,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":421,"name":"prev","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":420,"name":"T"}},{"id":422,"name":"next","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":420,"name":"T"}}],"type":{"type":"reference","id":420,"name":"T"}}],"permalink":"/api/config/function/overwrite","previousId":414,"nextId":466}],"groups":[{"title":"Classes","kind":128,"children":[325]},{"title":"Functions","kind":64,"children":[423,429,426,397,400,405,409,414,418]},{"title":"Interfaces","kind":256,"children":[466,453,469,450,458,487,496,462,490]},{"title":"Type aliases","kind":4194304,"children":[319,434,495,494,449,448,442,436,435,501,504,503,507,506,505]},{"title":"Variables","kind":32,"children":[320]}],"sources":[{"fileName":"packages/config/src/index.ts","line":6,"character":0}],"permalink":"/api/config"},"urlSlug":"config"}],"packageName":"@boost/config","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":91,"name":"@boost/debug","kind":2,"kindString":"Module","flags":{},"children":[{"id":3093,"name":"CrashReporter","kind":128,"kindString":"Class","flags":{},"children":[{"id":3094,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3095,"name":"new CrashReporter","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3096,"name":"contents","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":3097,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":37,"character":1}],"signatures":[{"id":3098,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a label with a value, or multiple values, to the last added section."},"parameters":[{"id":3099,"name":"label","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3100,"name":"messages","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"PortablePath"}]}}}],"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3101,"name":"addSection","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":47,"character":1}],"signatures":[{"id":3102,"name":"addSection","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Start a new section with a title."},"parameters":[{"id":3103,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3104,"name":"reportBinaries","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":59,"character":1}],"signatures":[{"id":3105,"name":"reportBinaries","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report Node.js related binary versions and paths."},"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3106,"name":"reportEnvVars","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":86,"character":1}],"signatures":[{"id":3107,"name":"reportEnvVars","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report all environment variables."},"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3108,"name":"reportLanguages","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":101,"character":1}],"signatures":[{"id":3109,"name":"reportLanguages","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report common programming language versions and paths"},"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3117,"name":"reportPackageVersions","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":196,"character":1}],"signatures":[{"id":3118,"name":"reportPackageVersions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report npm package versions for all that match the defined pattern.\\nOnly searches in the root node modules folder and _will not_ work with PnP."},"parameters":[{"id":3119,"name":"patterns","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":3120,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'Packages\'"}],"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3110,"name":"reportProcess","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":147,"character":1}],"signatures":[{"id":3111,"name":"reportProcess","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the current `process`."},"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3112,"name":"reportStackTrace","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":161,"character":1}],"signatures":[{"id":3113,"name":"reportStackTrace","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report the stack trace for a defined `Error`."},"parameters":[{"id":3114,"name":"error","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}}],"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3115,"name":"reportSystem","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":172,"character":1}],"signatures":[{"id":3116,"name":"reportSystem","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Report information about the platform and operating system."},"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]},{"id":3121,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":226,"character":1}],"signatures":[{"id":3122,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the reported content to the defined file path."},"parameters":[{"id":3123,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"PortablePath"}}],"type":{"type":"reference","id":3093,"name":"CrashReporter"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3094]},{"title":"Properties","kind":1024,"children":[3096]},{"title":"Methods","kind":2048,"children":[3097,3101,3104,3106,3108,3117,3110,3112,3115,3121]}],"sources":[{"fileName":"packages/debug/src/CrashReporter.ts","line":31,"character":13}],"permalink":"/api/debug/class/CrashReporter","nextId":3124},{"id":3127,"name":"Debugger","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3128,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":7,"character":1}],"signatures":[{"id":3129,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all debugger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3130,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":9,"character":1}],"signatures":[{"id":3131,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all debugger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3132,"name":"invariant","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":11,"character":1}],"signatures":[{"id":3133,"name":"invariant","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a pass or fail message based on a conditional."},"parameters":[{"id":3134,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"}},{"id":3135,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3136,"name":"pass","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3137,"name":"fail","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3138,"name":"verbose","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/debug/src/types.ts","line":13,"character":1}],"signatures":[{"id":3139,"name":"verbose","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log verbose messages that only appear when the `BOOSTJS_DEBUG_VERBOSE` is set."},"parameters":[{"id":3140,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3141,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3128,3130,3132,3138]}],"sources":[{"fileName":"packages/debug/src/types.ts","line":3,"character":17}],"signatures":[{"id":3142,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3143,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3144,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3145,"name":"Debugger","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3146,"name":"formatter","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}},{"id":3147,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","qualifiedName":"debug.IDebugger","package":"@types/debug","name":"IDebugger"}],"permalink":"/api/debug/interface/Debugger","previousId":3124},{"id":3124,"name":"createDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/createDebugger.ts","line":10,"character":16}],"signatures":[{"id":3125,"name":"createDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Debugger` instance with the defined namespace."},"parameters":[{"id":3126,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"type":{"type":"reference","id":3127,"name":"Debugger"}}],"permalink":"/api/debug/function/createDebugger","previousId":3093,"nextId":3127}],"groups":[{"title":"Classes","kind":128,"children":[3093]},{"title":"Functions","kind":64,"children":[3124]},{"title":"Interfaces","kind":256,"children":[3127]}],"sources":[{"fileName":"packages/debug/src/index.ts","line":6,"character":0}],"permalink":"/api/debug"},"urlSlug":"debug"},{"index":false,"label":"Test utilities","reflection":{"id":92,"name":"@boost/debug/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":93,"name":"mockDebugger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/debug/src/test.ts","line":20,"character":16}],"signatures":[{"id":94,"name":"mockDebugger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createDebugger`.","text":"```ts\\nimport { mockDebugger } from \'@boost/debug/test\';\\n\\nit(\'calls the debugger\', () => {\\n\\tconst debug = mockDebugger();\\n\\n\\tdebug(\'Something is broken!\');\\n\\n\\texpect(debug).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3127,"name":"Debugger"}}],"permalink":"/api/debug-test/function/mockDebugger"}],"groups":[{"title":"Functions","kind":64,"children":[93]}],"sources":[{"fileName":"packages/debug/src/test.ts","line":3,"character":0}],"permalink":"/api/debug-test"},"urlSlug":"debug-test"}],"packageName":"@boost/debug","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":3,"name":"@boost/decorators","kind":2,"kindString":"Module","flags":{},"children":[{"id":539,"name":"MemoizeOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":540,"name":"cache","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A custom `Map` instance to store cached values. Can also be used to pre-cache expected values."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":17,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":534,"typeArguments":[{"type":"reference","id":543,"name":"T"}],"name":"MemoizeCache"}]}},{"id":541,"name":"expires","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Time in milliseconds in which to keep the cache alive (TTL).\\nPass `0` to cache indefinitely. Defaults to `0`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":542,"name":"hasher","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A hashing function to determine the cache key. Is passed the method\'s arguments\\nand must return a string. If not provided, arguments are hashed using `JSON.stringify()`."},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":27,"character":1}],"type":{"type":"reference","id":530,"name":"MemoizeHasher"}}],"groups":[{"title":"Properties","kind":1024,"children":[540,541,542]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":15,"character":17}],"typeParameter":[{"id":543,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/decorators/interface/MemoizeOptions","previousId":544,"nextId":534},{"id":534,"name":"MemoizeCache","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":7,"character":12}],"typeParameter":[{"id":538,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":535,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":536,"name":"time","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":10,"character":2}],"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"id":537,"name":"value","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":11,"character":2}],"type":{"type":"reference","id":538,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[536,537]}],"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":9,"character":1}]}}],"qualifiedName":"Map","package":"typescript","name":"Map"},"permalink":"/api/decorators#MemoizeCache","previousId":539,"nextId":530},{"id":530,"name":"MemoizeHasher","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":12}],"type":{"type":"reflection","declaration":{"id":531,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":5,"character":28}],"signatures":[{"id":532,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":533,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/decorators#MemoizeHasher","previousId":534,"nextId":525},{"id":525,"name":"MemoizedFunction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":12}],"typeParameter":[{"id":529,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":526,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":3,"character":34}],"signatures":[{"id":527,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":528,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"reference","id":529,"name":"T"}}]}},"permalink":"/api/decorators#MemoizedFunction","previousId":530},{"id":508,"name":"Bind","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Bind.ts","line":7,"character":16}],"signatures":[{"id":509,"name":"Bind","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that automatically binds a class method\'s\\n`this` context to its current instance."},"type":{"type":"reference","qualifiedName":"MethodDecorator","package":"typescript","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Bind","nextId":510},{"id":510,"name":"Debounce","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Debounce.ts","line":7,"character":16}],"signatures":[{"id":511,"name":"Debounce","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that delays the execution of the class method\\nby the provided time in milliseconds."},"parameters":[{"id":512,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","qualifiedName":"MethodDecorator","package":"typescript","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Debounce","previousId":508,"nextId":513},{"id":513,"name":"Deprecate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Deprecate.ts","line":13,"character":16}],"signatures":[{"id":514,"name":"Deprecate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A decorator that marks a class declaration, class method,\\nclass property, or method parameter as deprecated by\\nlogging a deprecation message to the console."},"parameters":[{"id":515,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":516,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":517,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":518,"name":"target","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","qualifiedName":"Object","package":"typescript","name":"Object"},{"type":"reference","qualifiedName":"Function","package":"typescript","name":"Function"}]}},{"id":519,"name":"property","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},{"id":520,"name":"descriptor","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/api/decorators/function/Deprecate","previousId":510,"nextId":521},{"id":521,"name":"Memoize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Memoize.ts","line":80,"character":16}],"signatures":[{"id":522,"name":"Memoize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that caches the return value of a class method or\\ngetter to consistently and efficiently return the same value."},"typeParameter":[{"id":523,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":524,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":530,"name":"MemoizeHasher"},{"type":"reference","id":539,"typeArguments":[{"type":"reference","id":523,"name":"T"}],"name":"MemoizeOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","qualifiedName":"MethodDecorator","package":"typescript","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Memoize","previousId":513,"nextId":544},{"id":544,"name":"Throttle","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/decorators/src/Throttle.ts","line":7,"character":16}],"signatures":[{"id":545,"name":"Throttle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"A method decorator that throttles the execution of a class method to\\nonly fire once within every delay timeframe (in milliseconds)."},"parameters":[{"id":546,"name":"delay","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","qualifiedName":"MethodDecorator","package":"typescript","name":"MethodDecorator"}}],"permalink":"/api/decorators/function/Throttle","previousId":521,"nextId":539}],"groups":[{"title":"Functions","kind":64,"children":[508,510,513,521,544]},{"title":"Interfaces","kind":256,"children":[539]},{"title":"Type aliases","kind":4194304,"children":[534,530,525]}],"sources":[{"fileName":"packages/decorators/src/index.ts","line":6,"character":0}],"permalink":"/api/decorators"},"urlSlug":"decorators"}],"packageName":"@boost/decorators","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":4,"name":"@boost/event","kind":2,"kindString":"Module","flags":{},"children":[{"id":547,"name":"BailEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":548,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":549,"name":"new BailEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":550,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":551,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":552,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":547,"typeArguments":[{"type":"reference","id":550,"name":"Args"},{"type":"reference","id":551,"name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":592,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":591,"name":"BaseEvent.constructor"}},{"id":557,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":551,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":550,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"qualifiedName":"Set","package":"typescript","name":"Set"}],"qualifiedName":"Map","package":"typescript","name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":597,"name":"BaseEvent.listeners"}},{"id":558,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":598,"name":"BaseEvent.name"}},{"id":559,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":560,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":561,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":551,"name":"Scope"}}],"type":{"type":"reference","id":547,"typeArguments":[{"type":"reference","id":550,"name":"Args"},{"type":"reference","id":551,"name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":599,"name":"BaseEvent.clearListeners"}},{"id":553,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":14,"character":1}],"signatures":[{"id":554,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments.\\nIf a listener returns `false`, the loop with be aborted early,\\nand the emitter will return `true` (for bailed)."},"parameters":[{"id":555,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":550,"name":"Args"}},{"id":556,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":551,"name":"Scope"}}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","id":629,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":628,"name":"BaseEvent.emit"}},{"id":562,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":563,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":564,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":551,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":550,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}],"qualifiedName":"Set","package":"typescript","name":"Set"},"inheritedFrom":{"type":"reference","id":603,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":602,"name":"BaseEvent.getListeners"}},{"id":565,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":566,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":551,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":606,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":605,"name":"BaseEvent.getScopes"}},{"id":567,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":568,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":569,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":550,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":570,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":551,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.listen"}},{"id":571,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":572,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":573,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":550,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":574,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":551,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":612,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":611,"name":"BaseEvent.once"}},{"id":575,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":576,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":577,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":550,"name":"Args"},{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}],"name":"Listener"}},{"id":578,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":551,"name":"Scope"}}],"type":{"type":"reference","id":547,"typeArguments":[{"type":"reference","id":550,"name":"Args"},{"type":"reference","id":551,"name":"Scope"}],"name":"BailEvent"},"inheritedFrom":{"type":"reference","id":616,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":615,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[548]},{"title":"Properties","kind":1024,"children":[557,558]},{"title":"Methods","kind":2048,"children":[559,553,562,565,567,571,575]}],"sources":[{"fileName":"packages/event/src/BailEvent.ts","line":4,"character":13}],"typeParameter":[{"id":588,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":589,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":590,"typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]},{"type":"reference","id":550,"name":"Args"},{"type":"reference","id":551,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/BailEvent","nextId":590},{"id":590,"name":"BaseEvent","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":591,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":11,"character":1}],"signatures":[{"id":592,"name":"new BaseEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":593,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":594,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":595,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":596,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":590,"typeArguments":[{"type":"reference","id":593,"name":"Return"},{"type":"reference","id":594,"name":"Args"},{"type":"reference","id":595,"name":"Scope"}],"name":"BaseEvent"}}]},{"id":597,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":595,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":594,"name":"Args"},{"type":"reference","id":593,"name":"Return"}],"name":"Listener"}],"qualifiedName":"Set","package":"typescript","name":"Set"}],"qualifiedName":"Map","package":"typescript","name":"Map"},"defaultValue":"..."},{"id":598,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":599,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":600,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":601,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":595,"name":"Scope"}}],"type":{"type":"reference","id":590,"typeArguments":[{"type":"reference","id":593,"name":"Return"},{"type":"reference","id":594,"name":"Args"},{"type":"reference","id":595,"name":"Scope"}],"name":"BaseEvent"}}]},{"id":628,"name":"emit","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":123,"character":10}],"signatures":[{"id":629,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emit the event by executing all scoped listeners with the defined arguments."},"parameters":[{"id":630,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}},{"id":631,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":595,"name":"Scope"}}],"type":{"type":"intrinsic","name":"unknown"}}]},{"id":602,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":603,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":604,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":595,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":594,"name":"Args"},{"type":"reference","id":593,"name":"Return"}],"name":"Listener"}],"qualifiedName":"Set","package":"typescript","name":"Set"}}]},{"id":605,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":606,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":595,"name":"Scope"}]}}}]},{"id":607,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":608,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":609,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":594,"name":"Args"},{"type":"reference","id":593,"name":"Return"}],"name":"Listener"}},{"id":610,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":595,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"}}]},{"id":611,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":612,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":613,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":594,"name":"Args"},{"type":"reference","id":593,"name":"Return"}],"name":"Listener"}},{"id":614,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":595,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"}}]},{"id":615,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":616,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":617,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":594,"name":"Args"},{"type":"reference","id":593,"name":"Return"}],"name":"Listener"}},{"id":618,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":595,"name":"Scope"}}],"type":{"type":"reference","id":590,"typeArguments":[{"type":"reference","id":593,"name":"Return"},{"type":"reference","id":594,"name":"Args"},{"type":"reference","id":595,"name":"Scope"}],"name":"BaseEvent"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[591]},{"title":"Properties","kind":1024,"children":[597,598]},{"title":"Methods","kind":2048,"children":[599,628,602,605,607,611,615]}],"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":6,"character":22}],"typeParameter":[{"id":632,"name":"Return","kind":131072,"kindString":"Type parameter","flags":{}},{"id":633,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":634,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedBy":[{"type":"reference","id":547,"name":"BailEvent"},{"type":"reference","id":635,"name":"ConcurrentEvent"},{"type":"reference","id":680,"name":"Event"},{"type":"reference","id":764,"name":"WaterfallEvent"}],"permalink":"/api/event/class/BaseEvent","previousId":547,"nextId":635},{"id":635,"name":"ConcurrentEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":636,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":637,"name":"new ConcurrentEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":638,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":639,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":640,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":635,"typeArguments":[{"type":"reference","id":638,"name":"Args"},{"type":"reference","id":639,"name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":592,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":591,"name":"BaseEvent.constructor"}},{"id":645,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":639,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":638,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}],"name":"Listener"}],"qualifiedName":"Set","package":"typescript","name":"Set"}],"qualifiedName":"Map","package":"typescript","name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":597,"name":"BaseEvent.listeners"}},{"id":646,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":598,"name":"BaseEvent.name"}},{"id":647,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":648,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":649,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":639,"name":"Scope"}}],"type":{"type":"reference","id":635,"typeArguments":[{"type":"reference","id":638,"name":"Args"},{"type":"reference","id":639,"name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":599,"name":"BaseEvent.clearListeners"}},{"id":641,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":12,"character":7}],"signatures":[{"id":642,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Asynchronously execute listeners for with the defined arguments.\\nWill return a promise with an array of each listener result."},"parameters":[{"id":643,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":638,"name":"Args"}},{"id":644,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":639,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"overwrites":{"type":"reference","id":629,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":628,"name":"BaseEvent.emit"}},{"id":650,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":651,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":652,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":639,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":638,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}],"name":"Listener"}],"qualifiedName":"Set","package":"typescript","name":"Set"},"inheritedFrom":{"type":"reference","id":603,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":602,"name":"BaseEvent.getListeners"}},{"id":653,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":654,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":639,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":606,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":605,"name":"BaseEvent.getScopes"}},{"id":655,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":656,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":657,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":638,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}],"name":"Listener"}},{"id":658,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":639,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.listen"}},{"id":659,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":660,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":661,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":638,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}],"name":"Listener"}},{"id":662,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":639,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":612,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":611,"name":"BaseEvent.once"}},{"id":663,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":664,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":665,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":638,"name":"Args"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}],"name":"Listener"}},{"id":666,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":639,"name":"Scope"}}],"type":{"type":"reference","id":635,"typeArguments":[{"type":"reference","id":638,"name":"Args"},{"type":"reference","id":639,"name":"Scope"}],"name":"ConcurrentEvent"},"inheritedFrom":{"type":"reference","id":616,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":615,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[636]},{"title":"Properties","kind":1024,"children":[645,646]},{"title":"Methods","kind":2048,"children":[647,641,650,653,655,659,663]}],"sources":[{"fileName":"packages/event/src/ConcurrentEvent.ts","line":4,"character":13}],"typeParameter":[{"id":676,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":677,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":590,"typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},{"type":"reference","id":638,"name":"Args"},{"type":"reference","id":639,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/ConcurrentEvent","previousId":590,"nextId":680},{"id":680,"name":"Event","kind":128,"kindString":"Class","flags":{},"children":[{"id":681,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":682,"name":"new Event","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":683,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":684,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":685,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":680,"typeArguments":[{"type":"reference","id":683,"name":"Args"},{"type":"reference","id":684,"name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":592,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":591,"name":"BaseEvent.constructor"}},{"id":690,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":684,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":683,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"qualifiedName":"Set","package":"typescript","name":"Set"}],"qualifiedName":"Map","package":"typescript","name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":597,"name":"BaseEvent.listeners"}},{"id":691,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":598,"name":"BaseEvent.name"}},{"id":692,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":693,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":694,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":684,"name":"Scope"}}],"type":{"type":"reference","id":680,"typeArguments":[{"type":"reference","id":683,"name":"Args"},{"type":"reference","id":684,"name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":599,"name":"BaseEvent.clearListeners"}},{"id":686,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/Event.ts","line":11,"character":1}],"signatures":[{"id":687,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined arguments."},"parameters":[{"id":688,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":683,"name":"Args"}},{"id":689,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":684,"name":"Scope"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":629,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":628,"name":"BaseEvent.emit"}},{"id":695,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":696,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":697,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":684,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":683,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}],"qualifiedName":"Set","package":"typescript","name":"Set"},"inheritedFrom":{"type":"reference","id":603,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":602,"name":"BaseEvent.getListeners"}},{"id":698,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":699,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":684,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":606,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":605,"name":"BaseEvent.getScopes"}},{"id":700,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":701,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":702,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":683,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":703,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":684,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.listen"}},{"id":704,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":705,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":706,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":683,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":707,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":684,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":612,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":611,"name":"BaseEvent.once"}},{"id":708,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":709,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":710,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":729,"typeArguments":[{"type":"reference","id":683,"name":"Args"},{"type":"intrinsic","name":"void"}],"name":"Listener"}},{"id":711,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":684,"name":"Scope"}}],"type":{"type":"reference","id":680,"typeArguments":[{"type":"reference","id":683,"name":"Args"},{"type":"reference","id":684,"name":"Scope"}],"name":"Event"},"inheritedFrom":{"type":"reference","id":616,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":615,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[681]},{"title":"Properties","kind":1024,"children":[690,691]},{"title":"Methods","kind":2048,"children":[692,686,695,698,700,704,708]}],"sources":[{"fileName":"packages/event/src/Event.ts","line":3,"character":13}],"typeParameter":[{"id":721,"name":"Args","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":722,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":590,"typeArguments":[{"type":"intrinsic","name":"void"},{"type":"reference","id":683,"name":"Args"},{"type":"reference","id":684,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/Event","previousId":635,"nextId":764},{"id":764,"name":"WaterfallEvent","kind":128,"kindString":"Class","flags":{},"children":[{"id":765,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":766,"name":"new WaterfallEvent","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":767,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":768,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":769,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":764,"typeArguments":[{"type":"reference","id":767,"name":"Arg"},{"type":"reference","id":768,"name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":592,"name":"BaseEvent.constructor"}}],"inheritedFrom":{"type":"reference","id":591,"name":"BaseEvent.constructor"}},{"id":774,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":7,"character":1}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":768,"name":"Scope"}]},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":775,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":776,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":777,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":767,"name":"Arg"}}],"type":{"type":"reference","id":767,"name":"Arg"}}]}}],"qualifiedName":"Set","package":"typescript","name":"Set"}],"qualifiedName":"Map","package":"typescript","name":"Map"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":597,"name":"BaseEvent.listeners"}},{"id":778,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":598,"name":"BaseEvent.name"}},{"id":779,"name":"clearListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":22,"character":1}],"signatures":[{"id":780,"name":"clearListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove all listeners from the event."},"parameters":[{"id":781,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":768,"name":"Scope"}}],"type":{"type":"reference","id":764,"typeArguments":[{"type":"reference","id":767,"name":"Arg"},{"type":"reference","id":768,"name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":600,"name":"BaseEvent.clearListeners"}}],"inheritedFrom":{"type":"reference","id":599,"name":"BaseEvent.clearListeners"}},{"id":770,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":13,"character":1}],"signatures":[{"id":771,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Synchronously execute listeners with the defined argument value.\\nThe return value of each listener will be passed as an argument to the next listener."},"parameters":[{"id":772,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":767,"name":"Arg"}},{"id":773,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":768,"name":"Scope"}}],"type":{"type":"reference","id":767,"name":"Arg"},"overwrites":{"type":"reference","id":629,"name":"BaseEvent.emit"}}],"overwrites":{"type":"reference","id":628,"name":"BaseEvent.emit"}},{"id":782,"name":"getListeners","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":35,"character":1}],"signatures":[{"id":783,"name":"getListeners","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a set of listeners for a specific event scope."},"parameters":[{"id":784,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":768,"name":"Scope"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":785,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":786,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":787,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":767,"name":"Arg"}}],"type":{"type":"reference","id":767,"name":"Arg"}}]}}],"qualifiedName":"Set","package":"typescript","name":"Set"},"inheritedFrom":{"type":"reference","id":603,"name":"BaseEvent.getListeners"}}],"inheritedFrom":{"type":"reference","id":602,"name":"BaseEvent.getListeners"}},{"id":788,"name":"getScopes","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":48,"character":1}],"signatures":[{"id":789,"name":"getScopes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of all scopes with listeners."},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"literal","value":"*"},{"type":"reference","id":768,"name":"Scope"}]}},"inheritedFrom":{"type":"reference","id":606,"name":"BaseEvent.getScopes"}}],"inheritedFrom":{"type":"reference","id":605,"name":"BaseEvent.getScopes"}},{"id":790,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":55,"character":1}],"signatures":[{"id":791,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event."},"parameters":[{"id":792,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":793,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":794,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":795,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":767,"name":"Arg"}}],"type":{"type":"reference","id":767,"name":"Arg"}}]}}},{"id":796,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":768,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":608,"name":"BaseEvent.listen"}}],"inheritedFrom":{"type":"reference","id":607,"name":"BaseEvent.listen"}},{"id":797,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":70,"character":1}],"signatures":[{"id":798,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a listener to the event that only triggers once."},"parameters":[{"id":799,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":800,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":801,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":802,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":767,"name":"Arg"}}],"type":{"type":"reference","id":767,"name":"Arg"}}]}}},{"id":803,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":768,"name":"Scope"}}],"type":{"type":"reference","id":760,"name":"Unlistener"},"inheritedFrom":{"type":"reference","id":612,"name":"BaseEvent.once"}}],"inheritedFrom":{"type":"reference","id":611,"name":"BaseEvent.once"}},{"id":804,"name":"unlisten","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/event/src/BaseEvent.ts","line":84,"character":1}],"signatures":[{"id":805,"name":"unlisten","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Remove a listener from the event."},"parameters":[{"id":806,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":807,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":808,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":809,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":767,"name":"Arg"}}],"type":{"type":"reference","id":767,"name":"Arg"}}]}}},{"id":810,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":768,"name":"Scope"}}],"type":{"type":"reference","id":764,"typeArguments":[{"type":"reference","id":767,"name":"Arg"},{"type":"reference","id":768,"name":"Scope"}],"name":"WaterfallEvent"},"inheritedFrom":{"type":"reference","id":616,"name":"BaseEvent.unlisten"}}],"inheritedFrom":{"type":"reference","id":615,"name":"BaseEvent.unlisten"}}],"groups":[{"title":"Constructors","kind":512,"children":[765]},{"title":"Properties","kind":1024,"children":[774,778]},{"title":"Methods","kind":2048,"children":[779,770,782,788,790,797,804]}],"sources":[{"fileName":"packages/event/src/WaterfallEvent.ts","line":4,"character":13}],"typeParameter":[{"id":820,"name":"Arg","kind":131072,"kindString":"Type parameter","flags":{}},{"id":821,"name":"Scope","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","id":590,"typeArguments":[{"type":"reference","id":767,"name":"Arg"},{"type":"tuple","elements":[{"type":"reference","id":767,"name":"Arg"}]},{"type":"reference","id":768,"name":"Scope"}],"name":"BaseEvent"}],"permalink":"/api/event/class/WaterfallEvent","previousId":680,"nextId":723},{"id":723,"name":"EventErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/EventError.ts","line":9,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/event#EventErrorCode","previousId":764,"nextId":729},{"id":729,"name":"Listener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":1,"character":12}],"typeParameter":[{"id":758,"name":"A","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":759,"name":"R","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"conditional","checkType":{"type":"reference","id":758,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"},{"type":"inferred","name":"A5"}]},"trueType":{"type":"reflection","declaration":{"id":730,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":8,"character":3}],"signatures":[{"id":731,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":732,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":733,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":734,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":735,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}},{"id":736,"name":"a5","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A5"}}],"type":{"type":"reference","id":759,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":758,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"},{"type":"inferred","name":"A4"}]},"trueType":{"type":"reflection","declaration":{"id":737,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":10,"character":3}],"signatures":[{"id":738,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":739,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":740,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":741,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}},{"id":742,"name":"a4","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A4"}}],"type":{"type":"reference","id":759,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":758,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"},{"type":"inferred","name":"A3"}]},"trueType":{"type":"reflection","declaration":{"id":743,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":12,"character":3}],"signatures":[{"id":744,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":745,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":746,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}},{"id":747,"name":"a3","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A3"}}],"type":{"type":"reference","id":759,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":758,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"},{"type":"inferred","name":"A2"}]},"trueType":{"type":"reflection","declaration":{"id":748,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":14,"character":3}],"signatures":[{"id":749,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":750,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}},{"id":751,"name":"a2","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A2"}}],"type":{"type":"reference","id":759,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":758,"name":"A"},"extendsType":{"type":"tuple","elements":[{"type":"inferred","name":"A1"}]},"trueType":{"type":"reflection","declaration":{"id":752,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":16,"character":3}],"signatures":[{"id":753,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":754,"name":"a1","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"A1"}}],"type":{"type":"reference","id":759,"name":"R"}}]}},"falseType":{"type":"conditional","checkType":{"type":"reference","id":758,"name":"A"},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"trueType":{"type":"reflection","declaration":{"id":755,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":18,"character":3}],"signatures":[{"id":756,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":757,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","id":758,"name":"A"}}],"type":{"type":"reference","id":759,"name":"R"}}]}},"falseType":{"type":"intrinsic","name":"never"}}}}}}},"permalink":"/api/event#Listener","previousId":723,"nextId":760},{"id":760,"name":"Unlistener","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":12}],"type":{"type":"reflection","declaration":{"id":761,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":21,"character":25}],"signatures":[{"id":762,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}},"permalink":"/api/event#Unlistener","previousId":729,"nextId":763},{"id":763,"name":"WildstarScope","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/event/src/types.ts","line":23,"character":12}],"type":{"type":"literal","value":"*"},"permalink":"/api/event#WildstarScope","previousId":760,"nextId":679},{"id":679,"name":"EVENT_NAME_PATTERN","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/event/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/event#EVENT_NAME_PATTERN","previousId":763,"nextId":724},{"id":724,"name":"EventError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/event/src/EventError.ts","line":11,"character":13}],"type":{"type":"reflection","declaration":{"id":725,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":726,"name":"new EventError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":727,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}},{"id":728,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LISTENER_INVALID"},{"type":"literal","value":"NAME_INVALID"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/event#EventError","previousId":679,"nextId":678},{"id":678,"name":"WILDCARD_SCOPE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/event/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":"*"},"defaultValue":"\'*\'","permalink":"/api/event#WILDCARD_SCOPE","previousId":724}],"groups":[{"title":"Classes","kind":128,"children":[547,590,635,680,764]},{"title":"Type aliases","kind":4194304,"children":[723,729,760,763]},{"title":"Variables","kind":32,"children":[679,724,678]}],"sources":[{"fileName":"packages/event/src/index.ts","line":6,"character":0}],"permalink":"/api/event"},"urlSlug":"event"}],"packageName":"@boost/event","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":95,"name":"@boost/log","kind":2,"kindString":"Module","flags":{},"children":[{"id":3148,"name":"formats","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":3149,"name":"console","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":18,"character":16}],"signatures":[{"id":3150,"name":"console","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item as if it\'s being logged to `console`.\\n_Only_ inclues the label and message."},"parameters":[{"id":3151,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/log/namespace/formats#console"},{"id":3152,"name":"debug","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":32,"character":16}],"signatures":[{"id":3153,"name":"debug","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item into a human-readable message with all item fields included.\\nThis is the default format for most transports."},"parameters":[{"id":3154,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/log/namespace/formats#debug"},{"id":3155,"name":"json","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":46,"character":16}],"signatures":[{"id":3156,"name":"json","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the entire item into JSON."},"parameters":[{"id":3157,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/log/namespace/formats#json"},{"id":3158,"name":"message","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/formats.ts","line":53,"character":16}],"signatures":[{"id":3159,"name":"message","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the item using _only_ the message."},"parameters":[{"id":3160,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/log/namespace/formats#message"}],"groups":[{"title":"Functions","kind":64,"children":[3149,3152,3155,3158]}],"sources":[{"fileName":"packages/log/src/formats.ts","line":1,"character":0}],"permalink":"/api/log/namespace/formats","previousId":3444,"nextId":3448},{"id":3217,"name":"ConsoleTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3218,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":7,"character":1}],"signatures":[{"id":3219,"name":"new ConsoleTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3220,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3459,"name":"TransportOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}],"type":{"type":"reference","id":3217,"name":"ConsoleTransport"},"overwrites":{"type":"reference","id":3195,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3194,"name":"Transport.constructor"}},{"id":3225,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3198,"name":"Transport.levels"}},{"id":3232,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3459,"name":"TransportOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":3209,"name":"Transport.options"}},{"id":3226,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":20,"character":1}],"signatures":[{"id":3227,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3228,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3459,"name":"TransportOptions"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"},"inheritedFrom":{"type":"reference","id":3200,"name":"Transport.blueprint"}}],"inheritedFrom":{"type":"reference","id":3199,"name":"Transport.blueprint"}},{"id":3233,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3234,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3235,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3459,"name":"TransportOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":3236,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3237,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3238,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3459,"name":"TransportOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3459,"name":"TransportOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3459,"name":"TransportOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":3211,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3210,"name":"Transport.configure"}},{"id":3229,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3230,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3231,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3203,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3202,"name":"Transport.format"}},{"id":3221,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":15,"character":1}],"signatures":[{"id":3222,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3223,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3224,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3206,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3205,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3218]},{"title":"Properties","kind":1024,"children":[3225,3232]},{"title":"Methods","kind":2048,"children":[3226,3233,3229,3221]}],"sources":[{"fileName":"packages/log/src/transports/ConsoleTransport.ts","line":6,"character":13}],"extendedTypes":[{"type":"reference","id":3193,"typeArguments":[{"type":"reference","id":3459,"name":"TransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/ConsoleTransport","nextId":3246},{"id":3246,"name":"FileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3247,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":36,"character":1}],"signatures":[{"id":3248,"name":"new FileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3249,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3239,"name":"FileTransportOptions"},"default":{"type":"reference","id":3239,"name":"FileTransportOptions"}}],"parameters":[{"id":3250,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3249,"name":"Options"}}],"type":{"type":"reference","id":3246,"typeArguments":[{"type":"reference","id":3249,"name":"Options"}],"name":"FileTransport"},"overwrites":{"type":"reference","id":3195,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3194,"name":"Transport.constructor"}},{"id":3285,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3198,"name":"Transport.levels"}},{"id":3289,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3249,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":3209,"name":"Transport.options"}},{"id":3251,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":24,"character":10}],"type":{"type":"reference","name":"Path"}},{"id":3252,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":26,"character":1}],"type":{"type":"reference","qualifiedName":"NodeJS.WritableStream","package":"@types/node","name":"WritableStream"}},{"id":3257,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":44,"character":10}],"signatures":[{"id":3258,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3259,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3239,"name":"FileTransportOptions"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"},"overwrites":{"type":"reference","id":3200,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3199,"name":"Transport.blueprint"}},{"id":3260,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":58,"character":1}],"signatures":[{"id":3261,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3262,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3263,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3264,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":3290,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3291,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3292,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3249,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":3293,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3294,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3295,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3249,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3249,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3249,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":3211,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3210,"name":"Transport.configure"}},{"id":3286,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3287,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3288,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3203,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3202,"name":"Transport.format"}},{"id":3265,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":74,"character":1}],"signatures":[{"id":3266,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","qualifiedName":"NodeJS.WritableStream","package":"@types/node","name":"WritableStream"}}]},{"id":3267,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":98,"character":1}],"signatures":[{"id":3268,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3269,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3206,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3205,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3247]},{"title":"Properties","kind":1024,"children":[3285,3289,3251,3252]},{"title":"Methods","kind":2048,"children":[3257,3260,3290,3286,3265,3267]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":21,"character":13}],"typeParameter":[{"id":3296,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3239,"name":"FileTransportOptions"},"default":{"type":"reference","id":3239,"name":"FileTransportOptions"}}],"extendedTypes":[{"type":"reference","id":3193,"typeArguments":[{"type":"reference","id":3249,"name":"Options"}],"name":"Transport"}],"extendedBy":[{"type":"reference","id":3305,"name":"RotatingFileTransport"}],"permalink":"/api/log/class/FileTransport","previousId":3217,"nextId":3167},{"id":3167,"name":"Logger","kind":128,"kindString":"Class","flags":{},"children":[{"id":3168,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":15,"character":1}],"signatures":[{"id":3169,"name":"new Logger","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3170,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3439,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3167,"name":"Logger"},"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<LoggerOptions>.constructor"}},{"id":3186,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3439,"name":"LoggerOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3172,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":29,"character":1}],"signatures":[{"id":3173,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3174,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3439,"name":"LoggerOptions"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3187,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3188,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3189,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3439,"name":"LoggerOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":3190,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3191,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3192,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3439,"name":"LoggerOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3439,"name":"LoggerOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3439,"name":"LoggerOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3175,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":45,"character":1}],"signatures":[{"id":3176,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3177,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":53,"character":1}],"signatures":[{"id":3178,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3179,"name":"isAllowed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":58,"character":1}],"signatures":[{"id":3180,"name":"isAllowed","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3181,"name":"level","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3385,"name":"LogLevel"}},{"id":3182,"name":"maxLevel","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":3385,"name":"LogLevel"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":3183,"name":"log","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Logger.ts","line":76,"character":1}],"signatures":[{"id":3184,"name":"log","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3185,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3397,"name":"LogOptions"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[3168]},{"title":"Properties","kind":1024,"children":[3186]},{"title":"Methods","kind":2048,"children":[3172,3187,3175,3177,3179,3183]}],"sources":[{"fileName":"packages/log/src/Logger.ts","line":12,"character":13}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":3439,"name":"LoggerOptions"}],"name":"Contract"}],"permalink":"/api/log/class/Logger","previousId":3246,"nextId":3305},{"id":3305,"name":"RotatingFileTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3306,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":3307,"name":"new RotatingFileTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3308,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3297,"name":"RotatingFileTransportOptions"}}],"type":{"type":"reference","id":3305,"name":"RotatingFileTransport"},"inheritedFrom":{"type":"reference","id":3248,"name":"FileTransport.constructor"}}],"inheritedFrom":{"type":"reference","id":3247,"name":"FileTransport.constructor"}},{"id":3347,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3285,"name":"FileTransport.levels"}},{"id":3351,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3297,"name":"RotatingFileTransportOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":3289,"name":"FileTransport.options"}},{"id":3322,"name":"path","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":24,"character":10}],"type":{"type":"reference","name":"Path"},"inheritedFrom":{"type":"reference","id":3251,"name":"FileTransport.path"}},{"id":3323,"name":"stream","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":26,"character":1}],"type":{"type":"reference","qualifiedName":"NodeJS.WritableStream","package":"@types/node","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3252,"name":"FileTransport.stream"}},{"id":3310,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":15,"character":10}],"signatures":[{"id":3311,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3312,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3297,"name":"RotatingFileTransportOptions"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"},"overwrites":{"type":"reference","id":3258,"name":"FileTransport.blueprint"}}],"overwrites":{"type":"reference","id":3257,"name":"FileTransport.blueprint"}},{"id":3328,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":58,"character":1}],"signatures":[{"id":3329,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Close the file stream and trigger the callback when finished."},"parameters":[{"id":3330,"name":"commit","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":3331,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3332,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3261,"name":"FileTransport.close"}}],"inheritedFrom":{"type":"reference","id":3260,"name":"FileTransport.close"}},{"id":3352,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3353,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3354,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3297,"name":"RotatingFileTransportOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":3355,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3356,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3357,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3297,"name":"RotatingFileTransportOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3297,"name":"RotatingFileTransportOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3297,"name":"RotatingFileTransportOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":3291,"name":"FileTransport.configure"}}],"inheritedFrom":{"type":"reference","id":3290,"name":"FileTransport.configure"}},{"id":3348,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3349,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3350,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3287,"name":"FileTransport.format"}}],"inheritedFrom":{"type":"reference","id":3286,"name":"FileTransport.format"}},{"id":3313,"name":"formatTimestamp","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":27,"character":1}],"signatures":[{"id":3314,"name":"formatTimestamp","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a `Date` object into a format used within the log file name."},"parameters":[{"id":3315,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}]},{"id":3333,"name":"open","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":74,"character":1}],"signatures":[{"id":3334,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open the file stream for writing."},"type":{"type":"reference","qualifiedName":"NodeJS.WritableStream","package":"@types/node","name":"WritableStream"},"inheritedFrom":{"type":"reference","id":3266,"name":"FileTransport.open"}}],"inheritedFrom":{"type":"reference","id":3265,"name":"FileTransport.open"}},{"id":3335,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":98,"character":1}],"signatures":[{"id":3336,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the file stream, and rotate files once written if necessary."},"parameters":[{"id":3337,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3268,"name":"FileTransport.write"}}],"inheritedFrom":{"type":"reference","id":3267,"name":"FileTransport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3306]},{"title":"Properties","kind":1024,"children":[3347,3351,3322,3323]},{"title":"Methods","kind":2048,"children":[3310,3328,3352,3348,3313,3333,3335]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":12,"character":13}],"extendedTypes":[{"type":"reference","id":3246,"typeArguments":[{"type":"reference","id":3297,"name":"RotatingFileTransportOptions"}],"name":"FileTransport"}],"permalink":"/api/log/class/RotatingFileTransport","previousId":3167,"nextId":3363},{"id":3363,"name":"StreamTransport","kind":128,"kindString":"Class","flags":{},"children":[{"id":3364,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":13,"character":1}],"signatures":[{"id":3365,"name":"new StreamTransport","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":3366,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3358,"name":"StreamTransportOptions"}}],"type":{"type":"reference","id":3363,"name":"StreamTransport"},"overwrites":{"type":"reference","id":3195,"name":"Transport.constructor"}}],"overwrites":{"type":"reference","id":3194,"name":"Transport.constructor"}},{"id":3374,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}},"defaultValue":"[]","inheritedFrom":{"type":"reference","id":3198,"name":"Transport.levels"}},{"id":3378,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3358,"name":"StreamTransportOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":3209,"name":"Transport.options"}},{"id":3368,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":19,"character":10}],"signatures":[{"id":3369,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3370,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3358,"name":"StreamTransportOptions"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"},"overwrites":{"type":"reference","id":3200,"name":"Transport.blueprint"}}],"overwrites":{"type":"reference","id":3199,"name":"Transport.blueprint"}},{"id":3379,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3380,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3381,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3358,"name":"StreamTransportOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":3382,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3383,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3384,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3358,"name":"StreamTransportOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3358,"name":"StreamTransportOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3358,"name":"StreamTransportOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":3211,"name":"Transport.configure"}}],"inheritedFrom":{"type":"reference","id":3210,"name":"Transport.configure"}},{"id":3375,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3376,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3377,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3203,"name":"Transport.format"}}],"inheritedFrom":{"type":"reference","id":3202,"name":"Transport.format"}},{"id":3371,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":33,"character":1}],"signatures":[{"id":3372,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3373,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","id":3206,"name":"Transport.write"}}],"overwrites":{"type":"reference","id":3205,"name":"Transport.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3364]},{"title":"Properties","kind":1024,"children":[3374,3378]},{"title":"Methods","kind":2048,"children":[3368,3379,3375,3371]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":10,"character":13}],"extendedTypes":[{"type":"reference","id":3193,"typeArguments":[{"type":"reference","id":3358,"name":"StreamTransportOptions"}],"name":"Transport"}],"permalink":"/api/log/class/StreamTransport","previousId":3305,"nextId":3193},{"id":3193,"name":"Transport","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":3194,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":14,"character":1}],"signatures":[{"id":3195,"name":"new Transport","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":3196,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3459,"name":"TransportOptions"}}],"parameters":[{"id":3197,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3196,"name":"Options"}}],"type":{"type":"reference","id":3193,"typeArguments":[{"type":"reference","id":3196,"name":"Options"}],"name":"Transport"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":3198,"name":"levels","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":12,"character":10}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}},"defaultValue":"[]","implementationOf":{"type":"reference","id":3453,"name":"Transportable.levels"}},{"id":3209,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3196,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":3199,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":20,"character":1}],"signatures":[{"id":3200,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3201,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3459,"name":"TransportOptions"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":3210,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":3211,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":3212,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":3196,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":3213,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":3214,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3215,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":3196,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3196,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":3196,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":3202,"name":"format","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/Transport.ts","line":33,"character":1}],"signatures":[{"id":3203,"name":"format","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format the log item into a message string, and append a trailing newline if missing."},"parameters":[{"id":3204,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","name":"Transportable.format"}}],"implementationOf":{"type":"reference","id":3454,"name":"Transportable.format"}},{"id":3205,"name":"write","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/log/src/Transport.ts","line":48,"character":10}],"signatures":[{"id":3206,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write the formatted message according to the transport."},"parameters":[{"id":3207,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3208,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}]},"implementationOf":{"type":"reference","id":3456,"name":"Transportable.write"}}],"implementationOf":{"type":"reference","id":3455,"name":"Transportable.write"}}],"groups":[{"title":"Constructors","kind":512,"children":[3194]},{"title":"Properties","kind":1024,"children":[3198,3209]},{"title":"Methods","kind":2048,"children":[3199,3210,3202,3205]}],"sources":[{"fileName":"packages/log/src/Transport.ts","line":8,"character":22}],"typeParameter":[{"id":3216,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":3459,"name":"TransportOptions"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":3196,"name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":3217,"name":"ConsoleTransport"},{"type":"reference","id":3246,"name":"FileTransport"},{"type":"reference","id":3363,"name":"StreamTransport"}],"implementedTypes":[{"type":"reference","id":3452,"name":"Transportable"}],"permalink":"/api/log/class/Transport","previousId":3363,"nextId":3164},{"id":3239,"name":"FileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3243,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3460,"name":"TransportOptions.eol"}},{"id":3244,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3448,"name":"Formatter"},"inheritedFrom":{"type":"reference","id":3461,"name":"TransportOptions.format"}},{"id":3240,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3245,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3462,"name":"TransportOptions.levels"}},{"id":3241,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3242,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":18,"character":1}],"type":{"type":"reference","name":"PortablePath"}}],"groups":[{"title":"Properties","kind":1024,"children":[3243,3244,3240,3245,3241,3242]}],"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":9,"character":17}],"extendedTypes":[{"type":"reference","id":3459,"name":"TransportOptions"}],"extendedBy":[{"type":"reference","id":3297,"name":"RotatingFileTransportOptions"}],"permalink":"/api/log/interface/FileTransportOptions","previousId":3164,"nextId":3388},{"id":3388,"name":"LogItem","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3389,"name":"host","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The name of the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":9,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3390,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a localized or customized label."},"sources":[{"fileName":"packages/log/src/types.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3391,"name":"level","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log level as a string."},"sources":[{"fileName":"packages/log/src/types.ts","line":13,"character":1}],"type":{"type":"reference","id":3385,"name":"LogLevel"}},{"id":3392,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The log message with interpolated arguments applied."},"sources":[{"fileName":"packages/log/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3393,"name":"metadata","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Additional data to include with a log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":17,"character":1}],"type":{"type":"reference","id":3387,"name":"LogMetadata"}},{"id":3394,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Name of the logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":19,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3395,"name":"pid","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current process ID."},"sources":[{"fileName":"packages/log/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":3396,"name":"time","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Timestamp of the log, native to the host machine."},"sources":[{"fileName":"packages/log/src/types.ts","line":23,"character":1}],"type":{"type":"reference","qualifiedName":"Date","package":"typescript","name":"Date"}}],"groups":[{"title":"Properties","kind":1024,"children":[3389,3390,3391,3392,3393,3394,3395,3396]}],"sources":[{"fileName":"packages/log/src/types.ts","line":7,"character":17}],"permalink":"/api/log/interface/LogItem","previousId":3239,"nextId":3397},{"id":3397,"name":"LogOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3398,"name":"args","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Values to interpolate into the message string."},"sources":[{"fileName":"packages/log/src/types.ts","line":28,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}},{"id":3399,"name":"level","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Level to log as."},"sources":[{"fileName":"packages/log/src/types.ts","line":30,"character":1}],"type":{"type":"reference","id":3385,"name":"LogLevel"}},{"id":3400,"name":"message","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Message to log to the transports."},"sources":[{"fileName":"packages/log/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3401,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include in the message item/string."},"sources":[{"fileName":"packages/log/src/types.ts","line":34,"character":1}],"type":{"type":"reference","id":3387,"name":"LogMetadata"}}],"groups":[{"title":"Properties","kind":1024,"children":[3398,3399,3400,3401]}],"sources":[{"fileName":"packages/log/src/types.ts","line":26,"character":17}],"permalink":"/api/log/interface/LogOptions","previousId":3388,"nextId":3410},{"id":3410,"name":"Loggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3411,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"}},{"id":3416,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"}},{"id":3418,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"}},{"id":3417,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"}},{"id":3419,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"}},{"id":3420,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"}},{"id":3412,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3413,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"}}]},{"id":3414,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3415,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3411,3416,3418,3417,3419,3420]},{"title":"Methods","kind":2048,"children":[3412,3414]}],"sources":[{"fileName":"packages/log/src/types.ts","line":47,"character":17}],"extendedBy":[{"type":"reference","id":3421,"name":"LoggerFunction"}],"permalink":"/api/log/interface/Loggable","previousId":3397,"nextId":3402},{"id":3402,"name":"LoggableWriter","kind":256,"kindString":"Interface","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":37,"character":17}],"signatures":[{"id":3403,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3404,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3387,"name":"LogMetadata"}},{"id":3405,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3406,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3407,"name":"LoggableWriter","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3408,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3409,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedBy":[{"type":"reference","id":3421,"name":"LoggerFunction"}],"permalink":"/api/log/interface/LoggableWriter","previousId":3410,"nextId":3421},{"id":3421,"name":"LoggerFunction","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3422,"name":"debug","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `debug` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":49,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3411,"name":"Loggable.debug"}},{"id":3427,"name":"error","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `error` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":55,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3416,"name":"Loggable.error"}},{"id":3429,"name":"info","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `info` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":59,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3418,"name":"Loggable.info"}},{"id":3428,"name":"log","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `log` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":57,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3417,"name":"Loggable.log"}},{"id":3430,"name":"trace","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `trace` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":61,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3419,"name":"Loggable.trace"}},{"id":3431,"name":"warn","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Log a message with the `warn` log level."},"sources":[{"fileName":"packages/log/src/types.ts","line":63,"character":1}],"type":{"type":"reference","id":3402,"name":"LoggableWriter"},"inheritedFrom":{"type":"reference","id":3420,"name":"Loggable.warn"}},{"id":3423,"name":"disable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":51,"character":1}],"signatures":[{"id":3424,"name":"disable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Disable all logger messages from logging to the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3413,"name":"Loggable.disable"}}],"inheritedFrom":{"type":"reference","id":3412,"name":"Loggable.disable"}},{"id":3425,"name":"enable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":53,"character":1}],"signatures":[{"id":3426,"name":"enable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Enable all logger messages to log the console."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","id":3415,"name":"Loggable.enable"}}],"inheritedFrom":{"type":"reference","id":3414,"name":"Loggable.enable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3422,3427,3429,3428,3430,3431]},{"title":"Methods","kind":2048,"children":[3423,3425]}],"sources":[{"fileName":"packages/log/src/types.ts","line":66,"character":17}],"signatures":[{"id":3432,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters,\\nwhile also providing a metadata object to include with the log item."},"parameters":[{"id":3433,"name":"metadata","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3387,"name":"LogMetadata"}},{"id":3434,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3435,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}},{"id":3436,"name":"LoggerFunction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Log a message to the console and interpolate with the parameters."},"parameters":[{"id":3437,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3438,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intrinsic","name":"void"}}],"extendedTypes":[{"type":"reference","id":3410,"name":"Loggable"},{"type":"reference","id":3402,"name":"LoggableWriter"}],"permalink":"/api/log/interface/LoggerFunction","previousId":3402,"nextId":3439},{"id":3439,"name":"LoggerOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3440,"name":"labels","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom labels to use for each log type."},"sources":[{"fileName":"packages/log/src/types.ts","line":70,"character":1}],"type":{"type":"reference","id":3386,"name":"LogLevelLabels"}},{"id":3441,"name":"metadata","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Metadata to include within each log item."},"sources":[{"fileName":"packages/log/src/types.ts","line":72,"character":1}],"type":{"type":"reference","id":3387,"name":"LogMetadata"}},{"id":3442,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name for this logger."},"sources":[{"fileName":"packages/log/src/types.ts","line":74,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3443,"name":"transports","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"List of transports to write messages to."},"sources":[{"fileName":"packages/log/src/types.ts","line":76,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3452,"name":"Transportable"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3440,3441,3442,3443]}],"sources":[{"fileName":"packages/log/src/types.ts","line":68,"character":17}],"permalink":"/api/log/interface/LoggerOptions","previousId":3421,"nextId":3297},{"id":3297,"name":"RotatingFileTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3302,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3243,"name":"FileTransportOptions.eol"}},{"id":3303,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3448,"name":"Formatter"},"inheritedFrom":{"type":"reference","id":3244,"name":"FileTransportOptions.format"}},{"id":3299,"name":"gzip","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Apply gzip compression to the write stream."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":11,"character":1}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":3240,"name":"FileTransportOptions.gzip"}},{"id":3304,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3245,"name":"FileTransportOptions.levels"}},{"id":3300,"name":"maxSize","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Maximum file size before rotating file.\\nWill create a backup and truncate the current file. Defaults to 10mb."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":16,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":3241,"name":"FileTransportOptions.maxSize"}},{"id":3301,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Absolute file system path for the intended log file."},"sources":[{"fileName":"packages/log/src/transports/FileTransport.ts","line":18,"character":1}],"type":{"type":"reference","name":"PortablePath"},"inheritedFrom":{"type":"reference","id":3242,"name":"FileTransportOptions.path"}},{"id":3298,"name":"rotation","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Period in which to rotate files. Will append a timestamp to the rotated log file."},"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":9,"character":1}],"type":{"type":"reference","id":3463,"name":"Rotation"}}],"groups":[{"title":"Properties","kind":1024,"children":[3302,3303,3299,3304,3300,3301,3298]}],"sources":[{"fileName":"packages/log/src/transports/RotatingFileTransport.ts","line":7,"character":17}],"extendedTypes":[{"type":"reference","id":3239,"name":"FileTransportOptions"}],"permalink":"/api/log/interface/RotatingFileTransportOptions","previousId":3439,"nextId":3358},{"id":3358,"name":"StreamTransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3360,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":3460,"name":"TransportOptions.eol"}},{"id":3361,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3448,"name":"Formatter"},"inheritedFrom":{"type":"reference","id":3461,"name":"TransportOptions.format"}},{"id":3362,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}},"inheritedFrom":{"type":"reference","id":3462,"name":"TransportOptions.levels"}},{"id":3359,"name":"stream","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The stream to pipe messages to."},"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":7,"character":1}],"type":{"type":"reference","id":3444,"name":"Writable"}}],"groups":[{"title":"Properties","kind":1024,"children":[3360,3361,3362,3359]}],"sources":[{"fileName":"packages/log/src/transports/StreamTransport.ts","line":5,"character":17}],"extendedTypes":[{"type":"reference","id":3459,"name":"TransportOptions"}],"permalink":"/api/log/interface/StreamTransportOptions","previousId":3297,"nextId":3459},{"id":3459,"name":"TransportOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3460,"name":"eol","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"End of line character to append to a message. Defaults to `os.EOL`."},"sources":[{"fileName":"packages/log/src/types.ts","line":95,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3461,"name":"format","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Function to format a log item into a message string. Default is transport dependent."},"sources":[{"fileName":"packages/log/src/types.ts","line":97,"character":1}],"type":{"type":"reference","id":3448,"name":"Formatter"}},{"id":3462,"name":"levels","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of log levels to only write messages for."},"sources":[{"fileName":"packages/log/src/types.ts","line":99,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3460,3461,3462]}],"sources":[{"fileName":"packages/log/src/types.ts","line":93,"character":17}],"extendedBy":[{"type":"reference","id":3239,"name":"FileTransportOptions"},{"type":"reference","id":3358,"name":"StreamTransportOptions"}],"permalink":"/api/log/interface/TransportOptions","previousId":3358,"nextId":3452},{"id":3452,"name":"Transportable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3454,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":88,"character":1}],"type":{"type":"reference","id":3448,"name":"Formatter"}},{"id":3453,"name":"levels","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":87,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}}},{"id":3455,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":90,"character":1}],"signatures":[{"id":3456,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message and log item to the transport."},"parameters":[{"id":3457,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3458,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"void"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}]}}]}],"groups":[{"title":"Properties","kind":1024,"children":[3454,3453]},{"title":"Methods","kind":2048,"children":[3455]}],"sources":[{"fileName":"packages/log/src/types.ts","line":86,"character":17}],"implementedBy":[{"type":"reference","id":3193,"name":"Transport"}],"permalink":"/api/log/interface/Transportable","previousId":3459,"nextId":3444},{"id":3444,"name":"Writable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3445,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":81,"character":1}],"signatures":[{"id":3446,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write a message to the configured stream."},"parameters":[{"id":3447,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3445]}],"sources":[{"fileName":"packages/log/src/types.ts","line":79,"character":17}],"permalink":"/api/log/interface/Writable","previousId":3452,"nextId":3148},{"id":3448,"name":"Formatter","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":12}],"type":{"type":"reflection","declaration":{"id":3449,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":84,"character":24}],"signatures":[{"id":3450,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3451,"name":"item","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3388,"name":"LogItem"}}],"type":{"type":"intrinsic","name":"string"}}]}},"permalink":"/api/log#Formatter","previousId":3148,"nextId":3385},{"id":3385,"name":"LogLevel","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":1,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"debug"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"log"},{"type":"literal","value":"trace"},{"type":"literal","value":"warn"}]},"permalink":"/api/log#LogLevel","previousId":3448,"nextId":3386},{"id":3386,"name":"LogLevelLabels","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":3,"character":12}],"type":{"type":"mapped","parameter":"L","parameterType":{"type":"reference","id":3385,"name":"LogLevel"},"templateType":{"type":"intrinsic","name":"string"},"optionalModifier":"+"},"permalink":"/api/log#LogLevelLabels","previousId":3385,"nextId":3387},{"id":3387,"name":"LogMetadata","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":5,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/log#LogMetadata","previousId":3386,"nextId":3463},{"id":3463,"name":"Rotation","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/log/src/types.ts","line":102,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"daily"},{"type":"literal","value":"hourly"},{"type":"literal","value":"monthly"},{"type":"literal","value":"weekly"}]},"permalink":"/api/log#Rotation","previousId":3387,"nextId":3162},{"id":3162,"name":"DEFAULT_LABELS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/log/src/constants.ts","line":8,"character":13}],"type":{"type":"reference","id":3386,"name":"LogLevelLabels"},"defaultValue":"...","permalink":"/api/log#DEFAULT_LABELS","previousId":3463,"nextId":3161},{"id":3161,"name":"LOG_LEVELS","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/log/src/constants.ts","line":6,"character":13}],"type":{"type":"array","elementType":{"type":"reference","id":3385,"name":"LogLevel"}},"defaultValue":"...","permalink":"/api/log#LOG_LEVELS","previousId":3162,"nextId":3163},{"id":3163,"name":"MAX_LOG_SIZE","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/log/src/constants.ts","line":17,"character":13}],"type":{"type":"literal","value":10485760},"defaultValue":"10_485_760","permalink":"/api/log#MAX_LOG_SIZE","previousId":3161},{"id":3164,"name":"createLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/createLogger.ts","line":29,"character":16}],"signatures":[{"id":3165,"name":"createLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a logger with any configured transports."},"parameters":[{"id":3166,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3439,"name":"LoggerOptions"}}],"type":{"type":"reference","id":3421,"name":"LoggerFunction"}}],"permalink":"/api/log/function/createLogger","previousId":3193,"nextId":3239}],"groups":[{"title":"Classes","kind":128,"children":[3217,3246,3167,3305,3363,3193]},{"title":"Functions","kind":64,"children":[3164]},{"title":"Interfaces","kind":256,"children":[3239,3388,3397,3410,3402,3421,3439,3297,3358,3459,3452,3444]},{"title":"Namespaces","kind":4,"children":[3148]},{"title":"Type aliases","kind":4194304,"children":[3448,3385,3386,3387,3463]},{"title":"Variables","kind":32,"children":[3162,3161,3163]}],"sources":[{"fileName":"packages/log/src/index.ts","line":6,"character":0}],"permalink":"/api/log"},"urlSlug":"log"},{"index":false,"label":"Test utilities","reflection":{"id":96,"name":"@boost/log/test","kind":2,"kindString":"Module","flags":{},"children":[{"id":97,"name":"mockLogger","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/log/src/test.ts","line":20,"character":16}],"signatures":[{"id":98,"name":"mockLogger","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a Jest spy that matches the return value shape of `createLogger`.","text":"```ts\\nimport { mockLogger } from \'@boost/log/test\';\\n\\nit(\'calls the logger\', () => {\\n\\tconst log = mockLogger();\\n\\n\\tlog(\'Something has happened\');\\n\\n\\texpect(log).toHaveBeenCalled();\\n});\\n```\\n"},"type":{"type":"reference","id":3421,"name":"LoggerFunction"}}],"permalink":"/api/log-test/function/mockLogger"}],"groups":[{"title":"Functions","kind":64,"children":[97]}],"sources":[{"fileName":"packages/log/src/test.ts","line":3,"character":0}],"permalink":"/api/log-test"},"urlSlug":"log-test"}],"packageName":"@boost/log","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":99,"name":"@boost/module","kind":2,"kindString":"Module","flags":{},"children":[{"id":3516,"name":"LoadContext","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3517,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":51,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":3518,"name":"importAssertions","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":52,"character":1}],"type":{"type":"intrinsic","name":"object"}}],"groups":[{"title":"Properties","kind":1024,"children":[3517,3518]}],"sources":[{"fileName":"packages/module/src/types.ts","line":50,"character":17}],"permalink":"/api/module/interface/LoadContext","previousId":3479,"nextId":3519},{"id":3519,"name":"LoadResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3520,"name":"format","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":56,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":3521,"name":"source","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":57,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","qualifiedName":"ArrayBuffer","package":"typescript","name":"ArrayBuffer"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[3520,3521]}],"sources":[{"fileName":"packages/module/src/types.ts","line":55,"character":17}],"permalink":"/api/module/interface/LoadResult","previousId":3516,"nextId":3500},{"id":3500,"name":"ResolveContext","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3501,"name":"conditions","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":31,"character":1}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":3502,"name":"parentURL","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3501,3502]}],"sources":[{"fileName":"packages/module/src/types.ts","line":30,"character":17}],"permalink":"/api/module/interface/ResolveContext","previousId":3519,"nextId":3503},{"id":3503,"name":"ResolveResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":3504,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":36,"character":1}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[3504]}],"sources":[{"fileName":"packages/module/src/types.ts","line":35,"character":17}],"permalink":"/api/module/interface/ResolveResult","previousId":3500,"nextId":3522},{"id":3522,"name":"LoaderDefaultLoad","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":60,"character":12}],"type":{"type":"reflection","declaration":{"id":3523,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":60,"character":32}],"signatures":[{"id":3524,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3525,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3526,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3516,"name":"LoadContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3519,"name":"LoadResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultLoad","previousId":3503,"nextId":3505},{"id":3505,"name":"LoaderDefaultResolve","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":39,"character":12}],"type":{"type":"reflection","declaration":{"id":3506,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":39,"character":35}],"signatures":[{"id":3507,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3508,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3509,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3500,"name":"ResolveContext"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3503,"name":"ResolveResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}},"permalink":"/api/module#LoaderDefaultResolve","previousId":3522,"nextId":3527},{"id":3527,"name":"LoaderLoad","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":62,"character":12}],"type":{"type":"reflection","declaration":{"id":3528,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":62,"character":25}],"signatures":[{"id":3529,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3530,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3531,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3516,"name":"LoadContext"}},{"id":3532,"name":"defaultLoad","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3522,"name":"LoaderDefaultLoad"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3519,"name":"LoadResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}},"permalink":"/api/module#LoaderLoad","previousId":3505,"nextId":3510},{"id":3510,"name":"LoaderResolve","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":44,"character":12}],"type":{"type":"reflection","declaration":{"id":3511,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":44,"character":28}],"signatures":[{"id":3512,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3513,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3514,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3500,"name":"ResolveContext"}},{"id":3515,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3505,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3503,"name":"ResolveResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}},"permalink":"/api/module#LoaderResolve","previousId":3527,"nextId":3489},{"id":3489,"name":"ModuleLike","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Return shape of a module. The default export can be typed with\\nthe `D` generic slot, and the named exports can be typed with\\nan object in the `N` generic slot.","text":"If there is no default export (classic Node.js `exports` pattern),\\nthen `void` can be passed to the `D` generic, which will populate\\nthe `default` property with the named exports.\\n"},"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":12}],"typeParameter":[{"id":3493,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3495,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3494,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":55}]}}}],"type":{"type":"intersection","types":[{"type":"reference","id":3495,"name":"N"},{"type":"reflection","declaration":{"id":3490,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3492,"name":"__esModule","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/module/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":3491,"name":"default","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":14,"character":1}],"type":{"type":"conditional","checkType":{"type":"reference","id":3493,"name":"D"},"extendsType":{"type":"intrinsic","name":"void"},"trueType":{"type":"reference","id":3495,"name":"N"},"falseType":{"type":"reference","id":3493,"name":"D"}}}],"groups":[{"title":"Properties","kind":1024,"children":[3492,3491]}],"sources":[{"fileName":"packages/module/src/types.ts","line":13,"character":65}]}}]},"permalink":"/api/module#ModuleLike","previousId":3510,"nextId":3496},{"id":3496,"name":"PathLike","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"id":3497,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":3498,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":34}],"signatures":[{"id":3499,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"string"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[3498]}],"sources":[{"fileName":"packages/module/src/types.ts","line":18,"character":32}]}}]},"permalink":"/api/module#PathLike","previousId":3489},{"id":3464,"name":"interopModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/interopModule.ts","line":16,"character":16}],"signatures":[{"id":3465,"name":"interopModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Formats the shape of an imported module to align with the\\nES module specification.","text":"For ES or ES-like modules, returns the shape as-is.\\n\\nFor CommonJS modules, returns an object with the following:\\n- `module.exports` under the `default` property.\\n- `exports.<name>` under properties of the same name,\\n  and also under a `default` object.\\n"},"typeParameter":[{"id":3466,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3468,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3467,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3469,"name":"result","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":3489,"typeArguments":[{"type":"reference","id":3466,"name":"D"},{"type":"reference","id":3468,"name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/interopModule","nextId":3477},{"id":3477,"name":"registerExtensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":48,"character":16}],"signatures":[{"id":3478,"name":"registerExtensions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register `.ts` and `.tsx` file extensions into Node.js\'s resolution algorithm."},"type":{"type":"intrinsic","name":"void"}}],"permalink":"/api/module/function/registerExtensions","previousId":3464,"nextId":3470},{"id":3470,"name":"requireModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireModule.ts","line":33,"character":16}],"signatures":[{"id":3471,"name":"requireModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Works in a similar fashion to the native NodeJS `require()`, but can also\\nimport custom file types like TypeScript, and also returns a module shape\\nthat aligns with the ESM loader specification.","text":"When loading custom file types, the extension in the file path is optional,\\nas NodeJS will iterate through each extension until a file is found.\\n\\n```ts\\nimport { requireModule } from \'@boost/module\';\\n\\nconst result = requireModule(\'../../some/module\');\\n```\\n\\nCaveats and differences:\\n\\n- CommonJS files that utilize `module.exports` (default export) will have this\\n  value returned under a `default` property, instead of being returned directly.\\n- CommonJS files that utilize multiple `exports.<name>` (named exports) will\\n  have these values returned as properties on the result object, and will also\\n  be found on the `default` property.\\n- \\"ES module like\\" files will be returned as-is. These are files that are built\\n  with Babel or TypeScript and export an `__esModule` internal property.\\n\\nThese changes align with `import()` and the ES module system. We made this\\ndecision for consistency and reliability.\\n"},"typeParameter":[{"id":3472,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3474,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3473,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3475,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3496,"name":"PathLike"}},{"id":3476,"name":"requirer","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"NodeRequire","package":"@types/node","name":"NodeRequire"},"defaultValue":"require"}],"type":{"type":"reference","id":3489,"typeArguments":[{"type":"reference","id":3472,"name":"D"},{"type":"reference","id":3474,"name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/requireModule","previousId":3477,"nextId":3481},{"id":3481,"name":"requireTSModule","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":80,"character":16}],"signatures":[{"id":3482,"name":"requireTSModule","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Like `requireModule` but for loading TypeScript files ending in `ts` or `tsx`.\\nWhen imported, will transform the file using the `typescript` package,\\nevaluate the code in the current module context, and apply the same process\\nto all child imports.","text":"```ts\\nimport { requireTSModule } from \'@boost/module\';\\n\\nconst result = requireTSModule(\'../../some/module.ts\');\\n```\\n\\n> This helper rarely needs to be used directly as `requireModule` will\\n> call it under the hood based on the file extension.\\n"},"typeParameter":[{"id":3483,"name":"D","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":3485,"name":"N","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":3484,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":3486,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3496,"name":"PathLike"}},{"id":3487,"name":"requirer","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"NodeRequire","package":"@types/node","name":"NodeRequire"},"defaultValue":"require"}],"type":{"type":"reference","id":3489,"typeArguments":[{"type":"reference","id":3483,"name":"D"},{"type":"reference","id":3485,"name":"N"}],"name":"ModuleLike"}}],"permalink":"/api/module/function/requireTSModule","previousId":3470,"nextId":3479},{"id":3479,"name":"unregisterExtensions","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/requireTSModule.ts","line":58,"character":16}],"signatures":[{"id":3480,"name":"unregisterExtensions","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister `.ts` and `.tsx` file extensions."},"type":{"type":"intrinsic","name":"void"}}],"permalink":"/api/module/function/unregisterExtensions","previousId":3481,"nextId":3516}],"groups":[{"title":"Functions","kind":64,"children":[3464,3477,3470,3481,3479]},{"title":"Interfaces","kind":256,"children":[3516,3519,3500,3503]},{"title":"Type aliases","kind":4194304,"children":[3522,3505,3527,3510,3489,3496]}],"sources":[{"fileName":"packages/module/src/index.ts","line":6,"character":0}],"permalink":"/api/module"},"urlSlug":"module"},{"index":false,"label":"ESM Loaders","reflection":{"id":100,"name":"@boost/module/loader","kind":2,"kindString":"Module","flags":{},"children":[{"id":3551,"name":"LoadContext","kind":16777216,"kindString":"Reference","flags":{},"target":3516,"permalink":"/api/module-loader#LoadContext","previousId":3533,"nextId":3552},{"id":3552,"name":"LoadResult","kind":16777216,"kindString":"Reference","flags":{},"target":3519,"permalink":"/api/module-loader#LoadResult","previousId":3551,"nextId":3553},{"id":3553,"name":"LoaderDefaultLoad","kind":16777216,"kindString":"Reference","flags":{},"target":3522,"permalink":"/api/module-loader#LoaderDefaultLoad","previousId":3552,"nextId":3549},{"id":3549,"name":"LoaderDefaultResolve","kind":16777216,"kindString":"Reference","flags":{},"target":3505,"permalink":"/api/module-loader#LoaderDefaultResolve","previousId":3553,"nextId":3554},{"id":3554,"name":"LoaderLoad","kind":16777216,"kindString":"Reference","flags":{},"target":3527,"permalink":"/api/module-loader#LoaderLoad","previousId":3549,"nextId":3550},{"id":3550,"name":"LoaderResolve","kind":16777216,"kindString":"Reference","flags":{},"target":3510,"permalink":"/api/module-loader#LoaderResolve","previousId":3554,"nextId":3545},{"id":3545,"name":"ModuleLike","kind":16777216,"kindString":"Reference","flags":{},"target":3489,"permalink":"/api/module-loader#ModuleLike","previousId":3550,"nextId":3546},{"id":3546,"name":"PathLike","kind":16777216,"kindString":"Reference","flags":{},"target":3496,"permalink":"/api/module-loader#PathLike","previousId":3545,"nextId":3547},{"id":3547,"name":"ResolveContext","kind":16777216,"kindString":"Reference","flags":{},"target":3500,"permalink":"/api/module-loader#ResolveContext","previousId":3546,"nextId":3548},{"id":3548,"name":"ResolveResult","kind":16777216,"kindString":"Reference","flags":{},"target":3503,"permalink":"/api/module-loader#ResolveResult","previousId":3547},{"id":3533,"name":"typescript","kind":4,"kindString":"Namespace","flags":{},"comment":{"shortText":"Load TypeScript files based on the ESM loader specification.","tags":[{"tag":"link","text":"https://nodejs.org/api/esm.html#esm_loaders\\n"}]},"children":[{"id":3539,"name":"load","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":70,"character":13}],"signatures":[{"id":3540,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3541,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3542,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3516,"name":"LoadContext"}},{"id":3543,"name":"defaultLoad","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3522,"name":"LoaderDefaultLoad"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3519,"name":"LoadResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}],"permalink":"/api/module-loader/namespace/typescript#load"},{"id":3534,"name":"resolve","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":47,"character":13}],"signatures":[{"id":3535,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3536,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":3537,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3500,"name":"ResolveContext"}},{"id":3538,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3505,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3503,"name":"ResolveResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}],"permalink":"/api/module-loader/namespace/typescript#resolve"}],"groups":[{"title":"Functions","kind":64,"children":[3539,3534]}],"sources":[{"fileName":"packages/module/src/loaders/typescript.ts","line":3,"character":0}],"permalink":"/api/module-loader/namespace/typescript","previousId":106,"nextId":3551},{"id":101,"name":"load","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":102,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":103,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":104,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3516,"name":"LoadContext"}},{"id":105,"name":"defaultLoad","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3522,"name":"LoaderDefaultLoad"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3519,"name":"LoadResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}],"permalink":"/api/module-loader/function/load","nextId":106},{"id":106,"name":"resolve","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":107,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":108,"name":"specifier","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":109,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3500,"name":"ResolveContext"}},{"id":110,"name":"defaultResolve","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":3505,"name":"LoaderDefaultResolve"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":3503,"name":"ResolveResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}],"permalink":"/api/module-loader/function/resolve","previousId":101,"nextId":3533}],"groups":[{"title":"Functions","kind":64,"children":[101,106]},{"title":"Namespaces","kind":4,"children":[3533]},{"title":"References","kind":16777216,"children":[3551,3552,3553,3549,3554,3550,3545,3546,3547,3548]}],"sources":[{"fileName":"packages/module/src/loaders/index.ts","line":1,"character":0}],"permalink":"/api/module-loader"},"urlSlug":"module-loader"}],"packageName":"@boost/module","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":5,"name":"@boost/pipeline","kind":2,"kindString":"Module","flags":{},"children":[{"id":822,"name":"AggregatedPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":824,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":825,"name":"new AggregatedPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":826,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":826,"name":"Ctx"}],"name":"Context"}},{"id":827,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":828,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":827,"name":"Input"}}],"parameters":[{"id":829,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":826,"name":"Ctx"}},{"id":830,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":827,"name":"Input"}},{"id":831,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":832,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":822,"typeArguments":[{"type":"reference","id":826,"name":"Ctx"},{"type":"reference","id":827,"name":"Input"},{"type":"reference","id":828,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":972,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":971,"name":"ParallelPipeline.constructor"}},{"id":851,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":826,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":998,"name":"ParallelPipeline.context"}},{"id":852,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":999,"name":"ParallelPipeline.debug"}},{"id":849,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":996,"name":"ParallelPipeline.depth"}},{"id":850,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":997,"name":"ParallelPipeline.index"}},{"id":854,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1001,"name":"ParallelPipeline.onAfterRun"}},{"id":855,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":827,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1002,"name":"ParallelPipeline.onBeforeRun"}},{"id":856,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":857,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":827,"name":"Input"},{"type":"reference","id":828,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":827,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1003,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":869,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":870,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1016,"name":"ParallelPipeline.options"}},{"id":853,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":827,"name":"Input"},"inheritedFrom":{"type":"reference","id":1000,"name":"ParallelPipeline.value"}},{"id":861,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":862,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ParallelPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1008,"name":"ParallelPipeline.id"}},{"id":838,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":839,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":840,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":841,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1332,"typeArguments":[{"type":"reference","id":826,"name":"Ctx"},{"type":"reference","id":827,"name":"Input"},{"type":"reference","id":828,"name":"Output"}],"name":"Action"}},{"id":842,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":822,"typeArguments":[{"type":"reference","id":826,"name":"Ctx"},{"type":"reference","id":827,"name":"Input"},{"type":"reference","id":828,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":984,"name":"ParallelPipeline.add"}},{"id":843,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":844,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":845,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":827,"name":"Input"},{"type":"reference","id":828,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":822,"typeArguments":[{"type":"reference","id":826,"name":"Ctx"},{"type":"reference","id":827,"name":"Input"},{"type":"reference","id":828,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":988,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":983,"name":"ParallelPipeline.add"}},{"id":835,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":16,"character":1}],"signatures":[{"id":836,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":837,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":981,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":980,"name":"ParallelPipeline.blueprint"}},{"id":871,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":872,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":873,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":874,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":875,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":876,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":877,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":878,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":879,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":880,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1018,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1017,"name":"ParallelPipeline.configure"}},{"id":863,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":864,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":865,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":827,"name":"Input"},{"type":"reference","id":828,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1011,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1010,"name":"ParallelPipeline.getWorkUnits"}},{"id":866,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":867,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":868,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":957,"name":"Monitor"}}],"type":{"type":"reference","id":822,"typeArguments":[{"type":"reference","id":826,"name":"Ctx"},{"type":"reference","id":827,"name":"Input"},{"type":"reference","id":828,"name":"Output"}],"name":"AggregatedPipeline"},"inheritedFrom":{"type":"reference","id":1014,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1013,"name":"ParallelPipeline.monitor"}},{"id":833,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":15,"character":7}],"signatures":[{"id":834,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1341,"typeArguments":[{"type":"reference","id":828,"name":"Output"}],"name":"AggregatedResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"overwrites":{"type":"reference","id":995,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":994,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[824]},{"title":"Properties","kind":1024,"children":[851,852,849,850,854,855,856,869,853],"categories":[{"title":"CATEGORY","children":[851,852,849,850,869,853]},{"title":"Events","children":[854,855,856]}]},{"title":"Accessors","kind":262144,"children":[861]},{"title":"Methods","kind":2048,"children":[838,835,871,863,866,833]}],"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":6,"character":13}],"typeParameter":[{"id":881,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":882,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":883,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":827,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":970,"typeArguments":[{"type":"reflection","declaration":{"id":823,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/AggregatedPipeline.ts","line":10,"character":27}]}},{"type":"reference","id":826,"name":"Ctx"},{"type":"reference","id":827,"name":"Input"},{"type":"reference","id":828,"name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/AggregatedPipeline","nextId":884},{"id":884,"name":"ConcurrentPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":886,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":887,"name":"new ConcurrentPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":888,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":888,"name":"Ctx"}],"name":"Context"}},{"id":889,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":890,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":889,"name":"Input"}}],"parameters":[{"id":891,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":888,"name":"Ctx"}},{"id":892,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":889,"name":"Input"}},{"id":893,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":894,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":884,"typeArguments":[{"type":"reference","id":888,"name":"Ctx"},{"type":"reference","id":889,"name":"Input"},{"type":"reference","id":890,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":972,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":971,"name":"ParallelPipeline.constructor"}},{"id":913,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":888,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":998,"name":"ParallelPipeline.context"}},{"id":914,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":999,"name":"ParallelPipeline.debug"}},{"id":911,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":996,"name":"ParallelPipeline.depth"}},{"id":912,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":997,"name":"ParallelPipeline.index"}},{"id":916,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1001,"name":"ParallelPipeline.onAfterRun"}},{"id":917,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":889,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1002,"name":"ParallelPipeline.onBeforeRun"}},{"id":918,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":919,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":889,"name":"Input"},{"type":"reference","id":890,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":889,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1003,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":931,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":932,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1016,"name":"ParallelPipeline.options"}},{"id":915,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":889,"name":"Input"},"inheritedFrom":{"type":"reference","id":1000,"name":"ParallelPipeline.value"}},{"id":923,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":924,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ParallelPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1008,"name":"ParallelPipeline.id"}},{"id":900,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":901,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":902,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":903,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1332,"typeArguments":[{"type":"reference","id":888,"name":"Ctx"},{"type":"reference","id":889,"name":"Input"},{"type":"reference","id":890,"name":"Output"}],"name":"Action"}},{"id":904,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":884,"typeArguments":[{"type":"reference","id":888,"name":"Ctx"},{"type":"reference","id":889,"name":"Input"},{"type":"reference","id":890,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":984,"name":"ParallelPipeline.add"}},{"id":905,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":906,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":907,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":889,"name":"Input"},{"type":"reference","id":890,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":884,"typeArguments":[{"type":"reference","id":888,"name":"Ctx"},{"type":"reference","id":889,"name":"Input"},{"type":"reference","id":890,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":988,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":983,"name":"ParallelPipeline.add"}},{"id":897,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":16,"character":1}],"signatures":[{"id":898,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":899,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":981,"name":"ParallelPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":980,"name":"ParallelPipeline.blueprint"}},{"id":933,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":934,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":935,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":936,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":937,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":938,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":939,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":940,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":941,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":942,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1018,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1017,"name":"ParallelPipeline.configure"}},{"id":925,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":926,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":927,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":889,"name":"Input"},{"type":"reference","id":890,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1011,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1010,"name":"ParallelPipeline.getWorkUnits"}},{"id":928,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":929,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":930,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":957,"name":"Monitor"}}],"type":{"type":"reference","id":884,"typeArguments":[{"type":"reference","id":888,"name":"Ctx"},{"type":"reference","id":889,"name":"Input"},{"type":"reference","id":890,"name":"Output"}],"name":"ConcurrentPipeline"},"inheritedFrom":{"type":"reference","id":1014,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1013,"name":"ParallelPipeline.monitor"}},{"id":895,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":14,"character":7}],"signatures":[{"id":896,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel with a value being passed to each work unit.\\nIf an error occurs, the pipeline will abort early, otherwise return a list of all results."},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":890,"name":"Output"}}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"overwrites":{"type":"reference","id":995,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":994,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[886]},{"title":"Properties","kind":1024,"children":[913,914,911,912,916,917,918,931,915],"categories":[{"title":"CATEGORY","children":[913,914,911,912,931,915]},{"title":"Events","children":[916,917,918]}]},{"title":"Accessors","kind":262144,"children":[923]},{"title":"Methods","kind":2048,"children":[900,897,933,925,928,895]}],"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":5,"character":13}],"typeParameter":[{"id":943,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":944,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":945,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":889,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":970,"typeArguments":[{"type":"reflection","declaration":{"id":885,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/ConcurrentPipeline.ts","line":9,"character":27}]}},{"type":"reference","id":888,"name":"Ctx"},{"type":"reference","id":889,"name":"Input"},{"type":"reference","id":890,"name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/ConcurrentPipeline","previousId":822,"nextId":951},{"id":951,"name":"Context","kind":128,"kindString":"Class","flags":{},"children":[{"id":952,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":953,"name":"new Context","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":951,"name":"Context"}}]},{"id":954,"name":"clone","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":15,"character":1}],"signatures":[{"id":955,"name":"clone","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create a new instance of the current context and shallow clone all properties."},"parameters":[{"id":956,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"reference","id":951,"name":"Context"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[952]},{"title":"Methods","kind":2048,"children":[954]}],"sources":[{"fileName":"packages/pipeline/src/Context.ts","line":11,"character":13}],"permalink":"/api/pipeline/class/Context","previousId":884,"nextId":957},{"id":957,"name":"Monitor","kind":128,"kindString":"Class","flags":{},"children":[{"id":958,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":959,"name":"new Monitor","kind":16384,"kindString":"Constructor signature","flags":{},"type":{"type":"reference","id":957,"name":"Monitor"}}]},{"id":960,"name":"onPipelineAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a pipeline class has ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":12,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1357,"name":"AnyPipeline"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":961,"name":"onPipelineBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline class is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":18,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1357,"name":"AnyPipeline"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":962,"name":"onPipelineRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a pipeline\'s work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":24,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1357,"name":"AnyPipeline"},{"type":"reference","id":1359,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":963,"name":"onWorkUnitFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has failed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":30,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1359,"name":"AnyWorkUnit"},{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}]},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":964,"name":"onWorkUnitPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit has passed."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1359,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":965,"name":"onWorkUnitRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is ran."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1359,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":966,"name":"onWorkUnitSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when any work unit is skipped."},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1359,"name":"AnyWorkUnit"},{"type":"intrinsic","name":"unknown"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":967,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":54,"character":1}],"signatures":[{"id":968,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor events for the provided pipeline, its work units, and all other\\npipelines and work units down the hierarchical tree."},"parameters":[{"id":969,"name":"pipeline","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1357,"name":"AnyPipeline"}}],"type":{"type":"reference","id":957,"name":"Monitor"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[958]},{"title":"Properties","kind":1024,"children":[960,961,962,963,964,965,966],"categories":[{"title":"Events","children":[960,961,962,963,964,965,966]}]},{"title":"Methods","kind":2048,"children":[967]}],"sources":[{"fileName":"packages/pipeline/src/Monitor.ts","line":7,"character":13}],"permalink":"/api/pipeline/class/Monitor","previousId":951,"nextId":970},{"id":970,"name":"ParallelPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":971,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":972,"name":"new ParallelPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":973,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":974,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":974,"name":"Ctx"}],"name":"Context"}},{"id":975,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":976,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":975,"name":"Input"}}],"parameters":[{"id":977,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":974,"name":"Ctx"}},{"id":978,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":975,"name":"Input"}},{"id":979,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":973,"name":"Options"}}],"type":{"type":"reference","id":970,"typeArguments":[{"type":"reference","id":973,"name":"Options"},{"type":"reference","id":974,"name":"Ctx"},{"type":"reference","id":975,"name":"Input"},{"type":"reference","id":976,"name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":998,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":974,"name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":999,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":996,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":997,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":1001,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":1002,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":975,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":1003,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1004,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":975,"name":"Input"},{"type":"reference","id":976,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":975,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1016,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":973,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":1000,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":975,"name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1008,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1009,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Pipeline.id"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.id"}},{"id":983,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":984,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":985,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":986,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1332,"typeArguments":[{"type":"reference","id":974,"name":"Ctx"},{"type":"reference","id":975,"name":"Input"},{"type":"reference","id":976,"name":"Output"}],"name":"Action"}},{"id":987,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":970,"typeArguments":[{"type":"reference","id":973,"name":"Options"},{"type":"reference","id":974,"name":"Ctx"},{"type":"reference","id":975,"name":"Input"},{"type":"reference","id":976,"name":"Output"}],"name":"ParallelPipeline"}},{"id":988,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":989,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":990,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":975,"name":"Input"},{"type":"reference","id":976,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":970,"typeArguments":[{"type":"reference","id":973,"name":"Options"},{"type":"reference","id":974,"name":"Ctx"},{"type":"reference","id":975,"name":"Input"},{"type":"reference","id":976,"name":"Output"}],"name":"ParallelPipeline"}}]},{"id":980,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":16,"character":1}],"signatures":[{"id":981,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":982,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1017,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1018,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1019,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":973,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1020,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1021,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1022,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":973,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":973,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":973,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1010,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":1011,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1012,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":975,"name":"Input"},{"type":"reference","id":976,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1013,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1014,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1015,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":957,"name":"Monitor"}}],"type":{"type":"reference","id":970,"typeArguments":[{"type":"reference","id":973,"name":"Options"},{"type":"reference","id":974,"name":"Ctx"},{"type":"reference","id":975,"name":"Input"},{"type":"reference","id":976,"name":"Output"}],"name":"ParallelPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":994,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":61,"character":10}],"signatures":[{"id":995,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work unit\'s asynchronously."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[971]},{"title":"Properties","kind":1024,"children":[998,999,996,997,1001,1002,1003,1016,1000],"categories":[{"title":"CATEGORY","children":[998,999,996,997,1016,1000]},{"title":"Events","children":[1001,1002,1003]}]},{"title":"Accessors","kind":262144,"children":[1008]},{"title":"Methods","kind":2048,"children":[983,980,1017,1010,1013,994]}],"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":9,"character":22}],"typeParameter":[{"id":1023,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1024,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1025,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1026,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":975,"name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":973,"name":"Options"},{"type":"reference","id":974,"name":"Ctx"},{"type":"reference","id":975,"name":"Input"},{"type":"reference","id":976,"name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":822,"name":"AggregatedPipeline"},{"type":"reference","id":884,"name":"ConcurrentPipeline"},{"type":"reference","id":1037,"name":"PooledPipeline"}],"permalink":"/api/pipeline/class/ParallelPipeline","previousId":957,"nextId":1037},{"id":1037,"name":"PooledPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1038,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1039,"name":"new PooledPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1040,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":1040,"name":"Ctx"}],"name":"Context"}},{"id":1041,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1042,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1041,"name":"Input"}}],"parameters":[{"id":1043,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1040,"name":"Ctx"}},{"id":1044,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1041,"name":"Input"}},{"id":1045,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1033,"name":"PooledOptions"}}],"type":{"type":"reference","id":1037,"typeArguments":[{"type":"reference","id":1040,"name":"Ctx"},{"type":"reference","id":1041,"name":"Input"},{"type":"reference","id":1042,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":972,"name":"ParallelPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":971,"name":"ParallelPipeline.constructor"}},{"id":1075,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":1040,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":998,"name":"ParallelPipeline.context"}},{"id":1076,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":999,"name":"ParallelPipeline.debug"}},{"id":1073,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":996,"name":"ParallelPipeline.depth"}},{"id":1074,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":997,"name":"ParallelPipeline.index"}},{"id":1078,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1001,"name":"ParallelPipeline.onAfterRun"}},{"id":1079,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1041,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1002,"name":"ParallelPipeline.onBeforeRun"}},{"id":1080,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1081,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1041,"name":"Input"},{"type":"reference","id":1042,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":1041,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1003,"name":"ParallelPipeline.onRunWorkUnit"}},{"id":1093,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1033,"name":"PooledOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1016,"name":"ParallelPipeline.options"}},{"id":1077,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":1041,"name":"Input"},"inheritedFrom":{"type":"reference","id":1000,"name":"ParallelPipeline.value"}},{"id":1085,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1086,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ParallelPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1008,"name":"ParallelPipeline.id"}},{"id":1062,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/ParallelPipeline.ts","line":23,"character":1}],"signatures":[{"id":1063,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Add a work unit to the list of items to process."},"parameters":[{"id":1064,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1065,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1332,"typeArguments":[{"type":"reference","id":1040,"name":"Ctx"},{"type":"reference","id":1041,"name":"Input"},{"type":"reference","id":1042,"name":"Output"}],"name":"Action"}},{"id":1066,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1037,"typeArguments":[{"type":"reference","id":1040,"name":"Ctx"},{"type":"reference","id":1041,"name":"Input"},{"type":"reference","id":1042,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":984,"name":"ParallelPipeline.add"}},{"id":1067,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1068,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1069,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1041,"name":"Input"},{"type":"reference","id":1042,"name":"Output"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1037,"typeArguments":[{"type":"reference","id":1040,"name":"Ctx"},{"type":"reference","id":1041,"name":"Input"},{"type":"reference","id":1042,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":988,"name":"ParallelPipeline.add"}}],"inheritedFrom":{"type":"reference","id":983,"name":"ParallelPipeline.add"}},{"id":1053,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":34,"character":10}],"signatures":[{"id":1054,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1055,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1033,"name":"PooledOptions"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"},"overwrites":{"type":"reference","id":981,"name":"ParallelPipeline.blueprint"}}],"overwrites":{"type":"reference","id":980,"name":"ParallelPipeline.blueprint"}},{"id":1094,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1095,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1096,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1033,"name":"PooledOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1097,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1098,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1099,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1033,"name":"PooledOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1033,"name":"PooledOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1033,"name":"PooledOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1018,"name":"ParallelPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1017,"name":"ParallelPipeline.configure"}},{"id":1087,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":73,"character":1}],"signatures":[{"id":1088,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a list of registered work units for the current pipeline."},"type":{"type":"array","elementType":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1089,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1041,"name":"Input"},{"type":"reference","id":1042,"name":"Output"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1011,"name":"ParallelPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1010,"name":"ParallelPipeline.getWorkUnits"}},{"id":1090,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1091,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1092,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":957,"name":"Monitor"}}],"type":{"type":"reference","id":1037,"typeArguments":[{"type":"reference","id":1040,"name":"Ctx"},{"type":"reference","id":1041,"name":"Input"},{"type":"reference","id":1042,"name":"Output"}],"name":"PooledPipeline"},"inheritedFrom":{"type":"reference","id":1014,"name":"ParallelPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1013,"name":"ParallelPipeline.monitor"}},{"id":1056,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":49,"character":7}],"signatures":[{"id":1057,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute all work units in parallel, in a pool with a max concurrency,\\nwith a value being passed to each work unit.\\nWork units will synchronize regardless of race conditions and errors."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1341,"typeArguments":[{"type":"reference","id":1042,"name":"Output"}],"name":"AggregatedResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"overwrites":{"type":"reference","id":995,"name":"ParallelPipeline.run"}}],"overwrites":{"type":"reference","id":994,"name":"ParallelPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1038]},{"title":"Properties","kind":1024,"children":[1075,1076,1073,1074,1078,1079,1080,1093,1077],"categories":[{"title":"CATEGORY","children":[1075,1076,1073,1074,1093,1077]},{"title":"Events","children":[1078,1079,1080]}]},{"title":"Accessors","kind":262144,"children":[1085]},{"title":"Methods","kind":2048,"children":[1062,1053,1094,1087,1090,1056]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":23,"character":13}],"typeParameter":[{"id":1100,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1101,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1102,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1041,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":970,"typeArguments":[{"type":"reference","id":1033,"name":"PooledOptions"},{"type":"reference","id":1040,"name":"Ctx"},{"type":"reference","id":1041,"name":"Input"},{"type":"reference","id":1042,"name":"Output"}],"name":"ParallelPipeline"}],"permalink":"/api/pipeline/class/PooledPipeline","previousId":970,"nextId":1108},{"id":1108,"name":"Routine","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1109,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":47,"character":1}],"signatures":[{"id":1110,"name":"new Routine","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1111,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1112,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1114,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1113,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1115,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1116,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1117,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1114,"name":"Options"}}],"type":{"type":"reference","id":1108,"typeArguments":[{"type":"reference","id":1111,"name":"Output"},{"type":"reference","id":1112,"name":"Input"},{"type":"reference","id":1114,"name":"Options"}],"name":"Routine"},"overwrites":{"type":"reference","id":1426,"name":"WorkUnit.constructor"}}],"overwrites":{"type":"reference","id":1425,"name":"WorkUnit.constructor"}},{"id":1118,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":29,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1167,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1433,"name":"WorkUnit.depth"}},{"id":1168,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1434,"name":"WorkUnit.index"}},{"id":1170,"name":"input","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"reference","id":1112,"name":"Input"},"inheritedFrom":{"type":"reference","id":1436,"name":"WorkUnit.input"}},{"id":1119,"name":"key","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":31,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1120,"name":"onCommand","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after `execa` was executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":37,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1121,"name":"onCommandData","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called while a command is being executed."},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":43,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1174,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}]},{"type":"reference","id":1112,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1440,"name":"WorkUnit.onFail"}},{"id":1175,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1111,"name":"Output"},{"type":"reference","id":1112,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1441,"name":"WorkUnit.onPass"}},{"id":1176,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1112,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1442,"name":"WorkUnit.onRun"}},{"id":1177,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1112,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1443,"name":"WorkUnit.onSkip"}},{"id":1200,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1114,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1468,"name":"WorkUnit.options"}},{"id":1169,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","id":1111,"name":"Output"},"inheritedFrom":{"type":"reference","id":1435,"name":"WorkUnit.output"}},{"id":1171,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1437,"name":"WorkUnit.startTime"}},{"id":1172,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1438,"name":"WorkUnit.statusText"}},{"id":1173,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":30,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1439,"name":"WorkUnit.stopTime"}},{"id":1178,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":56,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1444,"name":"WorkUnit.title"}},{"id":1179,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":84,"character":5}],"getSignature":[{"id":1180,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WorkUnit.id"}}],"inheritedFrom":{"type":"reference","id":1447,"name":"WorkUnit.id"}},{"id":1207,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1208,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1209,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}},{"id":1210,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1476,"name":"WorkUnit.blueprint"}}],"inheritedFrom":{"type":"reference","id":1475,"name":"WorkUnit.blueprint"}},{"id":1201,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1202,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1203,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1114,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1204,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1205,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1206,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1114,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1114,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1114,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1470,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1469,"name":"WorkUnit.configure"}},{"id":1128,"name":"createAggregatedPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":103,"character":1}],"signatures":[{"id":1129,"name":"createAggregatedPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `AggregatedPipeline`. This pipeline will execute all work units\\nin parallel without interruption. Returns an object with a list of errors and results\\nonce all resolve."},"typeParameter":[{"id":1130,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":1130,"name":"C"}],"name":"Context"}},{"id":1131,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1132,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1131,"name":"I"}}],"parameters":[{"id":1133,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1130,"name":"C"}},{"id":1134,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1131,"name":"I"}}],"type":{"type":"reference","id":822,"typeArguments":[{"type":"reference","id":1130,"name":"C"},{"type":"reference","id":1131,"name":"I"},{"type":"reference","id":1132,"name":"O"}],"name":"AggregatedPipeline"}}]},{"id":1135,"name":"createConcurrentPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":111,"character":1}],"signatures":[{"id":1136,"name":"createConcurrentPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `ConcurrentPipeline`. This pipeline will execute all work units\\nin parallel. Returns a list of values once all resolve."},"typeParameter":[{"id":1137,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":1137,"name":"C"}],"name":"Context"}},{"id":1138,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1139,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1138,"name":"I"}}],"parameters":[{"id":1140,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1137,"name":"C"}},{"id":1141,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1138,"name":"I"}}],"type":{"type":"reference","id":884,"typeArguments":[{"type":"reference","id":1137,"name":"C"},{"type":"reference","id":1138,"name":"I"},{"type":"reference","id":1139,"name":"O"}],"name":"ConcurrentPipeline"}}]},{"id":1142,"name":"createPooledPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":120,"character":1}],"signatures":[{"id":1143,"name":"createPooledPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `PooledPipeline`. This pipeline will execute a distinct set of work units\\nin parallel without interruption, based on a max concurrency, until all work units have ran.\\nReturns a list of errors and results once all resolve."},"typeParameter":[{"id":1144,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":1144,"name":"C"}],"name":"Context"}},{"id":1145,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1146,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1145,"name":"I"}}],"parameters":[{"id":1147,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1144,"name":"C"}},{"id":1148,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1145,"name":"I"}},{"id":1149,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1033,"name":"PooledOptions"}}],"type":{"type":"reference","id":1037,"typeArguments":[{"type":"reference","id":1144,"name":"C"},{"type":"reference","id":1145,"name":"I"},{"type":"reference","id":1146,"name":"O"}],"name":"PooledPipeline"}}]},{"id":1150,"name":"createWaterfallPipeline","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":133,"character":1}],"signatures":[{"id":1151,"name":"createWaterfallPipeline","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `WaterfallPipeline`. This pipeline will execute each work unit one by one,\\nwith the return value of the previous being passed to the next. Returns the final value once\\nall resolve."},"typeParameter":[{"id":1152,"name":"C","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":1152,"name":"C"}],"name":"Context"}},{"id":1153,"name":"I","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1154,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1152,"name":"C"}},{"id":1155,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1153,"name":"I"}}],"type":{"type":"reference","id":1361,"typeArguments":[{"type":"reference","id":1152,"name":"C"},{"type":"reference","id":1153,"name":"I"}],"name":"WaterfallPipeline"}}]},{"id":1163,"name":"execute","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":163,"character":10}],"signatures":[{"id":1164,"name":"execute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the current routine and return a new value."},"parameters":[{"id":1165,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1166,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1112,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1111,"name":"Output"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":1123,"name":"executeCommand","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":64,"character":7}],"signatures":[{"id":1124,"name":"executeCommand","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute a command with the given arguments and pass the results through a promise."},"parameters":[{"id":1125,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1126,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":1127,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"execa.Options","package":"execa","name":"Options"},{"type":"reference","id":1103,"name":"ExecuteCommandOptions"}]},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"execa.ExecaReturnValue","package":"execa","name":"ExecaReturnValue"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":1181,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":91,"character":1}],"signatures":[{"id":1182,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1450,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1449,"name":"WorkUnit.hasFailed"}},{"id":1183,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":98,"character":1}],"signatures":[{"id":1184,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1452,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1451,"name":"WorkUnit.hasPassed"}},{"id":1185,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":105,"character":1}],"signatures":[{"id":1186,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1454,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1453,"name":"WorkUnit.isComplete"}},{"id":1187,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":112,"character":1}],"signatures":[{"id":1188,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1456,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1455,"name":"WorkUnit.isPending"}},{"id":1189,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":119,"character":1}],"signatures":[{"id":1190,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1458,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1457,"name":"WorkUnit.isRunning"}},{"id":1191,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":126,"character":1}],"signatures":[{"id":1192,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1460,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1459,"name":"WorkUnit.isSkipped"}},{"id":1193,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":133,"character":7}],"signatures":[{"id":1194,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1195,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1196,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1112,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1111,"name":"Output"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":1462,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1461,"name":"WorkUnit.run"}},{"id":1156,"name":"setMonitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":140,"character":1}],"signatures":[{"id":1157,"name":"setMonitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the monitor to pass to nested pipelines."},"parameters":[{"id":1158,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":957,"name":"Monitor"}}],"type":{"type":"reference","id":1108,"typeArguments":[{"type":"reference","id":1111,"name":"Output"},{"type":"reference","id":1112,"name":"Input"},{"type":"reference","id":1114,"name":"Options"}],"name":"Routine"}}]},{"id":1197,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":175,"character":1}],"signatures":[{"id":1198,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1199,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1108,"typeArguments":[{"type":"reference","id":1111,"name":"Output"},{"type":"reference","id":1112,"name":"Input"},{"type":"reference","id":1114,"name":"Options"}],"name":"Routine"},"inheritedFrom":{"type":"reference","id":1466,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1465,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1109]},{"title":"Properties","kind":1024,"children":[1118,1167,1168,1170,1119,1120,1121,1174,1175,1176,1177,1200,1169,1171,1172,1173,1178],"categories":[{"title":"CATEGORY","children":[1118,1167,1168,1170,1119,1200,1169,1171,1172,1173,1178]},{"title":"Events","children":[1120,1121,1174,1175,1176,1177]}]},{"title":"Accessors","kind":262144,"children":[1179]},{"title":"Methods","kind":2048,"children":[1207,1201,1128,1135,1142,1150,1163,1123,1181,1183,1185,1187,1189,1191,1193,1156,1197]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":24,"character":22}],"typeParameter":[{"id":1211,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1212,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1214,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1213,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":27,"character":26}]}}}],"extendedTypes":[{"type":"reference","id":1424,"typeArguments":[{"type":"reference","id":1114,"name":"Options"},{"type":"reference","id":1112,"name":"Input"},{"type":"reference","id":1111,"name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Routine","previousId":1037,"nextId":1215},{"id":1215,"name":"SerialPipeline","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1216,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1217,"name":"new SerialPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1218,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1219,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":1219,"name":"Ctx"}],"name":"Context"}},{"id":1220,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1221,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1220,"name":"Input"}}],"parameters":[{"id":1222,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1219,"name":"Ctx"}},{"id":1223,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1220,"name":"Input"}},{"id":1224,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1218,"name":"Options"}}],"type":{"type":"reference","id":1215,"typeArguments":[{"type":"reference","id":1218,"name":"Options"},{"type":"reference","id":1219,"name":"Ctx"},{"type":"reference","id":1220,"name":"Input"},{"type":"reference","id":1221,"name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline<Options, Ctx, Input, Output>.constructor"}},{"id":1246,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":1219,"name":"Ctx"},"inheritedFrom":{"type":"reference","name":"Pipeline.context"}},{"id":1247,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","name":"Pipeline.debug"}},{"id":1244,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.depth"}},{"id":1245,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","name":"Pipeline.index"}},{"id":1249,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onAfterRun"}},{"id":1250,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1220,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onBeforeRun"}},{"id":1251,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1252,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1220,"name":"Input"},{"type":"reference","id":1221,"name":"Output"}],"name":"WorkUnit"},{"type":"reference","id":1220,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","name":"Pipeline.onRunWorkUnit"}},{"id":1261,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1218,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.options"}},{"id":1225,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1215,"typeArguments":[{"type":"reference","id":1218,"name":"Options"},{"type":"reference","id":1219,"name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"..."},{"id":1248,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":1220,"name":"Input"},"inheritedFrom":{"type":"reference","name":"Pipeline.value"}},{"id":1256,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1257,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Pipeline.id"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.id"}},{"id":1226,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1227,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1228,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","name":"Pipeline.blueprint"}}],"overwrites":{"type":"reference","name":"Pipeline.blueprint"}},{"id":1262,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1263,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1264,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1218,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1265,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1266,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1267,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1218,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1218,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1218,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.configure"}},{"id":1239,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1240,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1241,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1220,"name":"Input"},{"type":"reference","id":1221,"name":"Output"}],"name":"WorkUnit"}},"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}}],"overwrites":{"type":"reference","name":"Pipeline.getWorkUnits"}},{"id":1258,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1259,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1260,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":957,"name":"Monitor"}}],"type":{"type":"reference","id":1215,"typeArguments":[{"type":"reference","id":1218,"name":"Options"},{"type":"reference","id":1219,"name":"Ctx"},{"type":"reference","id":1220,"name":"Input"},{"type":"reference","id":1221,"name":"Output"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}}],"inheritedFrom":{"type":"reference","name":"Pipeline.monitor"}},{"id":1229,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1230,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1231,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1232,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1233,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1332,"typeArguments":[{"type":"reference","id":1219,"name":"Ctx"},{"type":"reference","id":1220,"name":"Input"},{"type":"reference","id":1231,"name":"O"}],"name":"Action"}},{"id":1234,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1215,"typeArguments":[{"type":"reference","id":1218,"name":"Options"},{"type":"reference","id":1219,"name":"Ctx"},{"type":"reference","id":1231,"name":"O"},{"type":"reference","id":1231,"name":"O"}],"name":"SerialPipeline"}},{"id":1235,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1236,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1237,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1238,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1220,"name":"Input"},{"type":"reference","id":1236,"name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1215,"typeArguments":[{"type":"reference","id":1218,"name":"Options"},{"type":"reference","id":1219,"name":"Ctx"},{"type":"reference","id":1236,"name":"O"},{"type":"reference","id":1236,"name":"O"}],"name":"SerialPipeline"}}]},{"id":1242,"name":"run","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":73,"character":10}],"signatures":[{"id":1243,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run and process the work units synchronously."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1221,"name":"Output"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1216]},{"title":"Properties","kind":1024,"children":[1246,1247,1244,1245,1249,1250,1251,1261,1225,1248],"categories":[{"title":"CATEGORY","children":[1246,1247,1244,1245,1261,1225,1248]},{"title":"Events","children":[1249,1250,1251]}]},{"title":"Accessors","kind":262144,"children":[1256]},{"title":"Methods","kind":2048,"children":[1226,1262,1239,1258,1229,1242]}],"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":8,"character":22}],"typeParameter":[{"id":1268,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1269,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1270,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1271,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1220,"name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1218,"name":"Options"},{"type":"reference","id":1219,"name":"Ctx"},{"type":"reference","id":1220,"name":"Input"},{"type":"reference","id":1221,"name":"Output"}],"name":"Pipeline"}],"extendedBy":[{"type":"reference","id":1361,"name":"WaterfallPipeline"}],"permalink":"/api/pipeline/class/SerialPipeline","previousId":1108,"nextId":1272},{"id":1272,"name":"Task","kind":128,"kindString":"Class","flags":{},"children":[{"id":1274,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1275,"name":"new Task","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1276,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1277,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1276,"name":"Input"}}],"parameters":[{"id":1278,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1279,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1332,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1276,"name":"Input"},{"type":"reference","id":1277,"name":"Output"}],"name":"Action"}},{"id":1280,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1281,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1272,"typeArguments":[{"type":"reference","id":1276,"name":"Input"},{"type":"reference","id":1277,"name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1426,"name":"WorkUnit.constructor"}}],"inheritedFrom":{"type":"reference","id":1425,"name":"WorkUnit.constructor"}},{"id":1285,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1433,"name":"WorkUnit.depth"}},{"id":1286,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1434,"name":"WorkUnit.index"}},{"id":1288,"name":"input","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"reference","id":1276,"name":"Input"},"inheritedFrom":{"type":"reference","id":1436,"name":"WorkUnit.input"}},{"id":1292,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}]},{"type":"reference","id":1276,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1440,"name":"WorkUnit.onFail"}},{"id":1293,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1277,"name":"Output"},{"type":"reference","id":1276,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1441,"name":"WorkUnit.onPass"}},{"id":1294,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1276,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1442,"name":"WorkUnit.onRun"}},{"id":1295,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1276,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1443,"name":"WorkUnit.onSkip"}},{"id":1318,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1319,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1468,"name":"WorkUnit.options"}},{"id":1287,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","id":1277,"name":"Output"},"inheritedFrom":{"type":"reference","id":1435,"name":"WorkUnit.output"}},{"id":1289,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1437,"name":"WorkUnit.startTime"}},{"id":1290,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'","inheritedFrom":{"type":"reference","id":1438,"name":"WorkUnit.statusText"}},{"id":1291,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":30,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1439,"name":"WorkUnit.stopTime"}},{"id":1296,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":56,"character":10}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":1444,"name":"WorkUnit.title"}},{"id":1297,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":84,"character":5}],"getSignature":[{"id":1298,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WorkUnit.id"}}],"inheritedFrom":{"type":"reference","id":1447,"name":"WorkUnit.id"}},{"id":1282,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":7,"character":1}],"signatures":[{"id":1283,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1284,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"overwrites":{"type":"reference","id":1476,"name":"WorkUnit.blueprint"}}],"overwrites":{"type":"reference","id":1475,"name":"WorkUnit.blueprint"}},{"id":1320,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1321,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1322,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1323,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1324,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1325,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1326,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1327,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1328,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1329,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1470,"name":"WorkUnit.configure"}}],"inheritedFrom":{"type":"reference","id":1469,"name":"WorkUnit.configure"}},{"id":1299,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":91,"character":1}],"signatures":[{"id":1300,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1450,"name":"WorkUnit.hasFailed"}}],"inheritedFrom":{"type":"reference","id":1449,"name":"WorkUnit.hasFailed"}},{"id":1301,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":98,"character":1}],"signatures":[{"id":1302,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1452,"name":"WorkUnit.hasPassed"}}],"inheritedFrom":{"type":"reference","id":1451,"name":"WorkUnit.hasPassed"}},{"id":1303,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":105,"character":1}],"signatures":[{"id":1304,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1454,"name":"WorkUnit.isComplete"}}],"inheritedFrom":{"type":"reference","id":1453,"name":"WorkUnit.isComplete"}},{"id":1305,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":112,"character":1}],"signatures":[{"id":1306,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1456,"name":"WorkUnit.isPending"}}],"inheritedFrom":{"type":"reference","id":1455,"name":"WorkUnit.isPending"}},{"id":1307,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":119,"character":1}],"signatures":[{"id":1308,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1458,"name":"WorkUnit.isRunning"}}],"inheritedFrom":{"type":"reference","id":1457,"name":"WorkUnit.isRunning"}},{"id":1309,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":126,"character":1}],"signatures":[{"id":1310,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":1460,"name":"WorkUnit.isSkipped"}}],"inheritedFrom":{"type":"reference","id":1459,"name":"WorkUnit.isSkipped"}},{"id":1311,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":133,"character":7}],"signatures":[{"id":1312,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1313,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1314,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1276,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1277,"name":"Output"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":1462,"name":"WorkUnit.run"}}],"inheritedFrom":{"type":"reference","id":1461,"name":"WorkUnit.run"}},{"id":1315,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":175,"character":1}],"signatures":[{"id":1316,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1317,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1272,"typeArguments":[{"type":"reference","id":1276,"name":"Input"},{"type":"reference","id":1277,"name":"Output"}],"name":"Task"},"inheritedFrom":{"type":"reference","id":1466,"name":"WorkUnit.skip"}}],"inheritedFrom":{"type":"reference","id":1465,"name":"WorkUnit.skip"}}],"groups":[{"title":"Constructors","kind":512,"children":[1274]},{"title":"Properties","kind":1024,"children":[1285,1286,1288,1292,1293,1294,1295,1318,1287,1289,1290,1291,1296],"categories":[{"title":"CATEGORY","children":[1285,1286,1288,1318,1287,1289,1290,1291,1296]},{"title":"Events","children":[1292,1293,1294,1295]}]},{"title":"Accessors","kind":262144,"children":[1297]},{"title":"Methods","kind":2048,"children":[1282,1320,1299,1301,1303,1305,1307,1309,1311,1315]}],"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":13}],"typeParameter":[{"id":1330,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1331,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1276,"name":"Input"}}],"extendedTypes":[{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1273,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/Task.ts","line":4,"character":68}]}},{"type":"reference","id":1276,"name":"Input"},{"type":"reference","id":1277,"name":"Output"}],"name":"WorkUnit"}],"permalink":"/api/pipeline/class/Task","previousId":1215,"nextId":1361},{"id":1361,"name":"WaterfallPipeline","kind":128,"kindString":"Class","flags":{},"children":[{"id":1363,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1364,"name":"new WaterfallPipeline","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1365,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"typeArguments":[{"type":"reference","id":1365,"name":"Ctx"}],"name":"Context"}},{"id":1366,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1367,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1365,"name":"Ctx"}},{"id":1368,"name":"value","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1366,"name":"Input"}},{"id":1369,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":1370,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"type":{"type":"reference","id":1361,"typeArguments":[{"type":"reference","id":1365,"name":"Ctx"},{"type":"reference","id":1366,"name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1217,"name":"SerialPipeline.constructor"}}],"inheritedFrom":{"type":"reference","id":1216,"name":"SerialPipeline.constructor"}},{"id":1395,"name":"context","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":19,"character":10}],"type":{"type":"reference","id":1365,"name":"Ctx"},"inheritedFrom":{"type":"reference","id":1246,"name":"SerialPipeline.context"}},{"id":1396,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":21,"character":10}],"type":{"type":"reference","name":"Debugger"},"inheritedFrom":{"type":"reference","id":1247,"name":"SerialPipeline.debug"}},{"id":1393,"name":"depth","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1244,"name":"SerialPipeline.depth"}},{"id":1394,"name":"index","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","inheritedFrom":{"type":"reference","id":1245,"name":"SerialPipeline.index"}},{"id":1398,"name":"onAfterRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":29,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1249,"name":"SerialPipeline.onAfterRun"}},{"id":1399,"name":"onBeforeRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before the pipeline executes work units."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":35,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1366,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1250,"name":"SerialPipeline.onBeforeRun"}},{"id":1400,"name":"onRunWorkUnit","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a single work unit is executed."},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":41,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1401,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1366,"name":"Input"},{"type":"reference","id":1366,"name":"Input"}],"name":"WorkUnit"},{"type":"reference","id":1366,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1251,"name":"SerialPipeline.onRunWorkUnit"}},{"id":1410,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1411,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1261,"name":"SerialPipeline.options"}},{"id":1373,"name":"root","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":17,"character":1}],"type":{"type":"reference","id":1215,"typeArguments":[{"type":"reflection","declaration":{"id":1374,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1365,"name":"Ctx"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"SerialPipeline"},"defaultValue":"...","inheritedFrom":{"type":"reference","id":1225,"name":"SerialPipeline.root"}},{"id":1397,"name":"value","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":23,"character":10}],"type":{"type":"reference","id":1366,"name":"Input"},"inheritedFrom":{"type":"reference","id":1248,"name":"SerialPipeline.value"}},{"id":1405,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":66,"character":5}],"getSignature":[{"id":1406,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"SerialPipeline.id"}}],"inheritedFrom":{"type":"reference","id":1256,"name":"SerialPipeline.id"}},{"id":1375,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":20,"character":1}],"signatures":[{"id":1376,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1377,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","id":1227,"name":"SerialPipeline.blueprint"}}],"inheritedFrom":{"type":"reference","id":1226,"name":"SerialPipeline.blueprint"}},{"id":1412,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1413,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1414,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1415,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1416,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1417,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1418,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1419,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1420,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1421,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","id":1263,"name":"SerialPipeline.configure"}}],"inheritedFrom":{"type":"reference","id":1262,"name":"SerialPipeline.configure"}},{"id":1390,"name":"getWorkUnits","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":65,"character":10}],"signatures":[{"id":1391,"name":"getWorkUnits","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Traverse the linked list to return a list of work units in defined order."},"type":{"type":"array","elementType":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1392,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1366,"name":"Input"},{"type":"reference","id":1366,"name":"Input"}],"name":"WorkUnit"}},"inheritedFrom":{"type":"reference","id":1240,"name":"SerialPipeline.getWorkUnits"}}],"inheritedFrom":{"type":"reference","id":1239,"name":"SerialPipeline.getWorkUnits"}},{"id":1407,"name":"monitor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/Pipeline.ts","line":81,"character":1}],"signatures":[{"id":1408,"name":"monitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Monitor all hierarchical pipelines, routines, and tasks being executed,\\nby listening to all applicable events."},"parameters":[{"id":1409,"name":"monitor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":957,"name":"Monitor"}}],"type":{"type":"reference","id":1361,"typeArguments":[{"type":"reference","id":1365,"name":"Ctx"},{"type":"reference","id":1366,"name":"Input"}],"name":"WaterfallPipeline"},"inheritedFrom":{"type":"reference","id":1259,"name":"SerialPipeline.monitor"}}],"inheritedFrom":{"type":"reference","id":1258,"name":"SerialPipeline.monitor"}},{"id":1378,"name":"pipe","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/SerialPipeline.ts","line":27,"character":1}],"signatures":[{"id":1379,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Pipe a work unit to be ran with the return value of the previous work unit."},"typeParameter":[{"id":1380,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1381,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1382,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1332,"typeArguments":[{"type":"reference","id":1365,"name":"Ctx"},{"type":"reference","id":1366,"name":"Input"},{"type":"reference","id":1231,"name":"O"}],"name":"Action"}},{"id":1383,"name":"scope","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":1215,"typeArguments":[{"type":"reflection","declaration":{"id":1384,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1365,"name":"Ctx"},{"type":"reference","id":1231,"name":"O"},{"type":"reference","id":1231,"name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1230,"name":"SerialPipeline.pipe"}},{"id":1385,"name":"pipe","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":1386,"name":"O","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":1387,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1388,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1366,"name":"Input"},{"type":"reference","id":1236,"name":"O"}],"name":"WorkUnit"}}],"type":{"type":"reference","id":1215,"typeArguments":[{"type":"reflection","declaration":{"id":1389,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}},{"type":"reference","id":1365,"name":"Ctx"},{"type":"reference","id":1236,"name":"O"},{"type":"reference","id":1236,"name":"O"}],"name":"SerialPipeline"},"inheritedFrom":{"type":"reference","id":1235,"name":"SerialPipeline.pipe"}}],"inheritedFrom":{"type":"reference","id":1229,"name":"SerialPipeline.pipe"}},{"id":1371,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":16,"character":7}],"signatures":[{"id":1372,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Execute the pipeline in sequential order with the output of each\\nwork unit being passed to the next work unit in the chain."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1366,"name":"Input"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"overwrites":{"type":"reference","id":1243,"name":"SerialPipeline.run"}}],"overwrites":{"type":"reference","id":1242,"name":"SerialPipeline.run"}}],"groups":[{"title":"Constructors","kind":512,"children":[1363]},{"title":"Properties","kind":1024,"children":[1395,1396,1393,1394,1398,1399,1400,1410,1373,1397],"categories":[{"title":"CATEGORY","children":[1395,1396,1393,1394,1410,1373,1397]},{"title":"Events","children":[1398,1399,1400]}]},{"title":"Accessors","kind":262144,"children":[1405]},{"title":"Methods","kind":2048,"children":[1375,1412,1390,1407,1378,1371]}],"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":7,"character":13}],"typeParameter":[{"id":1422,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1423,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","id":1215,"typeArguments":[{"type":"reflection","declaration":{"id":1362,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/WaterfallPipeline.ts","line":8,"character":1}]}},{"type":"reference","id":1365,"name":"Ctx"},{"type":"reference","id":1366,"name":"Input"}],"name":"SerialPipeline"}],"permalink":"/api/pipeline/class/WaterfallPipeline","previousId":1272,"nextId":1424},{"id":1424,"name":"WorkUnit","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1425,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":65,"character":1}],"signatures":[{"id":1426,"name":"new WorkUnit","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1427,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1428,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1429,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1428,"name":"Input"}}],"parameters":[{"id":1430,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1431,"name":"action","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1332,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1428,"name":"Input"},{"type":"reference","id":1429,"name":"Output"}],"name":"Action"}},{"id":1432,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1427,"name":"Options"}}],"type":{"type":"reference","id":1424,"typeArguments":[{"type":"reference","id":1427,"name":"Options"},{"type":"reference","id":1428,"name":"Input"},{"type":"reference","id":1429,"name":"Output"}],"name":"WorkUnit"},"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1433,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1346,"name":"Hierarchical.depth"}},{"id":1434,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0","implementationOf":{"type":"reference","id":1348,"name":"Hierarchical.index"}},{"id":1436,"name":"input","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":24,"character":1}],"type":{"type":"reference","id":1428,"name":"Input"}},{"id":1440,"name":"onFail","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution fails."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":36,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}]},{"type":"reference","id":1428,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1441,"name":"onPass","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution succeeds."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":42,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1429,"name":"Output"},{"type":"reference","id":1428,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1442,"name":"onRun","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a work unit is executed. Can return `true` to skip the work unit."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":48,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1428,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"BailEvent"},"defaultValue":"..."},{"id":1443,"name":"onSkip","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called when an execution is skipped."},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":54,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1428,"name":"Input"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1468,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1427,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1435,"name":"output","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":22,"character":1}],"type":{"type":"reference","id":1429,"name":"Output"}},{"id":1437,"name":"startTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":26,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1438,"name":"statusText","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":28,"character":1}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"\'\'"},{"id":1439,"name":"stopTime","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":30,"character":1}],"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":1444,"name":"title","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":56,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1447,"name":"id","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":84,"character":5}],"getSignature":[{"id":1448,"name":"id","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Return a unique hierarchical ID."},"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":1347,"name":"Hierarchical.id"}}],"implementationOf":{"type":"reference","id":1347,"name":"Hierarchical.id"}},{"id":1475,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1476,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1477,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}},{"id":1478,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1469,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1470,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1471,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1427,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1472,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1473,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1474,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1427,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1427,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1427,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1449,"name":"hasFailed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":91,"character":1}],"signatures":[{"id":1450,"name":"hasFailed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task failed when executing."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1451,"name":"hasPassed","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":98,"character":1}],"signatures":[{"id":1452,"name":"hasPassed","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task executed successfully."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1453,"name":"isComplete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":105,"character":1}],"signatures":[{"id":1454,"name":"isComplete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has been completed in any form."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1455,"name":"isPending","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":112,"character":1}],"signatures":[{"id":1456,"name":"isPending","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task has not been executed yet."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1457,"name":"isRunning","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":119,"character":1}],"signatures":[{"id":1458,"name":"isRunning","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task is currently running."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1459,"name":"isSkipped","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":126,"character":1}],"signatures":[{"id":1460,"name":"isSkipped","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if the task was or will be skipped."},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1461,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":133,"character":7}],"signatures":[{"id":1462,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Run the current task by executing it and performing any before and after processes."},"parameters":[{"id":1463,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1464,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1428,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1429,"name":"Output"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"implementationOf":{"type":"reference","id":1351,"name":"Runnable.run"}}],"implementationOf":{"type":"reference","id":1350,"name":"Runnable.run"}},{"id":1465,"name":"skip","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":175,"character":1}],"signatures":[{"id":1466,"name":"skip","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Mark a task as skipped if the condition is true."},"parameters":[{"id":1467,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"true"}],"type":{"type":"reference","id":1424,"typeArguments":[{"type":"reference","id":1427,"name":"Options"},{"type":"reference","id":1428,"name":"Input"},{"type":"reference","id":1429,"name":"Output"}],"name":"WorkUnit"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1425]},{"title":"Properties","kind":1024,"children":[1433,1434,1436,1440,1441,1442,1443,1468,1435,1437,1438,1439,1444],"categories":[{"title":"CATEGORY","children":[1433,1434,1436,1468,1435,1437,1438,1439,1444]},{"title":"Events","children":[1440,1441,1442,1443]}]},{"title":"Accessors","kind":262144,"children":[1447]},{"title":"Methods","kind":2048,"children":[1475,1469,1449,1451,1453,1455,1457,1459,1461,1465]}],"sources":[{"fileName":"packages/pipeline/src/WorkUnit.ts","line":14,"character":22}],"typeParameter":[{"id":1479,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"}},{"id":1480,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1481,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1428,"name":"Input"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1427,"name":"Options"}],"name":"Contract"}],"extendedBy":[{"type":"reference","id":1108,"name":"Routine"},{"type":"reference","id":1272,"name":"Task"}],"implementedTypes":[{"type":"reference","id":1349,"typeArguments":[{"type":"reference","id":1428,"name":"Input"},{"type":"reference","id":1429,"name":"Output"}],"name":"Runnable"},{"type":"reference","id":1345,"name":"Hierarchical"}],"permalink":"/api/pipeline/class/WorkUnit","previousId":1361,"nextId":1341},{"id":1341,"name":"AggregatedResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1342,"name":"errors","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of `Errors` that occurred during execution."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":13,"character":1}],"type":{"type":"array","elementType":{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}}},{"id":1343,"name":"results","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"List of successful execution results."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":15,"character":1}],"type":{"type":"array","elementType":{"type":"reference","id":1344,"name":"T"}}}],"groups":[{"title":"Properties","kind":1024,"children":[1342,1343]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":11,"character":17}],"typeParameter":[{"id":1344,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"permalink":"/api/pipeline/interface/AggregatedResult","previousId":1424,"nextId":1103},{"id":1103,"name":"ExecuteCommandOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1107,"name":"workUnit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":21,"character":1}],"type":{"type":"reference","id":1359,"name":"AnyWorkUnit"}},{"id":1104,"name":"wrap","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":20,"character":1}],"signatures":[{"id":1105,"name":"wrap","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1106,"name":"process","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"execa.ExecaChildProcess","package":"execa","name":"ExecaChildProcess"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[1107]},{"title":"Methods","kind":2048,"children":[1104]}],"sources":[{"fileName":"packages/pipeline/src/Routine.ts","line":19,"character":17}],"permalink":"/api/pipeline/interface/ExecuteCommandOptions","previousId":1341,"nextId":1345},{"id":1345,"name":"Hierarchical","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1346,"name":"depth","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current depth of nested pipelines."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1347,"name":"id","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique ID of the work unit."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":22,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1348,"name":"index","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Current index amongst sibling work units."},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1346,1347,1348]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":18,"character":17}],"implementedBy":[{"type":"reference","id":1424,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Hierarchical","previousId":1103,"nextId":1033},{"id":1033,"name":"PooledOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1034,"name":"concurrency","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"How many work units to process in parallel."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1035,"name":"filo","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Process with first-in-last-out order, instead of first-in-first-out."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1036,"name":"timeout","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Timeout in milliseconds that each work unit may run, or `0` to avoid a\\ntimeout. Defaults to `0`."},"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[1034,1035,1036]}],"sources":[{"fileName":"packages/pipeline/src/PooledPipeline.ts","line":13,"character":17}],"permalink":"/api/pipeline/interface/PooledOptions","previousId":1345,"nextId":1349},{"id":1349,"name":"Runnable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1350,"name":"run","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":29,"character":1}],"signatures":[{"id":1351,"name":"run","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Accept an input and produce an output."},"parameters":[{"id":1352,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1353,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1354,"name":"Input"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1355,"name":"Output"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[1350]}],"sources":[{"fileName":"packages/pipeline/src/types.ts","line":27,"character":17}],"typeParameter":[{"id":1354,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{}},{"id":1355,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{}}],"implementedBy":[{"type":"reference","id":1424,"name":"WorkUnit"}],"permalink":"/api/pipeline/interface/Runnable","previousId":1033,"nextId":1332},{"id":1332,"name":"Action","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":12}],"typeParameter":[{"id":1338,"name":"Ctx","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":951,"name":"Context"}},{"id":1339,"name":"Input","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1340,"name":"Output","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"reference","id":1339,"name":"Input"}}],"type":{"type":"reflection","declaration":{"id":1333,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":5,"character":75}],"signatures":[{"id":1334,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1335,"name":"context","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1338,"name":"Ctx"}},{"id":1336,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1339,"name":"Input"}},{"id":1337,"name":"workUnit","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1359,"name":"AnyWorkUnit"}}],"type":{"type":"union","types":[{"type":"reference","id":1340,"name":"Output"},{"type":"reference","typeArguments":[{"type":"reference","id":1340,"name":"Output"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}]}}]}},"permalink":"/api/pipeline#Action","previousId":1349,"nextId":1357},{"id":1357,"name":"AnyPipeline","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":1358,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":36,"character":35}]}},{"type":"reference","id":951,"name":"Context"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"Pipeline"},"permalink":"/api/pipeline#AnyPipeline","previousId":1332,"nextId":1359},{"id":1359,"name":"AnyWorkUnit","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":12}],"type":{"type":"reference","id":1424,"typeArguments":[{"type":"reflection","declaration":{"id":1360,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":40,"character":35}]}},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"WorkUnit"},"permalink":"/api/pipeline#AnyWorkUnit","previousId":1357,"nextId":1027},{"id":1027,"name":"PipelineErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":11,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/pipeline#PipelineErrorCode","previousId":1359,"nextId":1356},{"id":1356,"name":"Status","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/pipeline/src/types.ts","line":32,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"failed"},{"type":"literal","value":"passed"},{"type":"literal","value":"pending"},{"type":"literal","value":"running"},{"type":"literal","value":"skipped"}]},"permalink":"/api/pipeline#Status","previousId":1027,"nextId":1028},{"id":1028,"name":"PipelineError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/PipelineError.ts","line":13,"character":13}],"type":{"type":"reflection","declaration":{"id":1029,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1030,"name":"new PipelineError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1031,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}},{"id":1032,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"ACTION_REQUIRED"},{"type":"literal","value":"ROUTINE_INVALID_KEY"},{"type":"literal","value":"WORK_REQUIRED_TITLE"},{"type":"literal","value":"WORK_TIME_OUT"},{"type":"literal","value":"WORK_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/pipeline#PipelineError","previousId":1356,"nextId":950},{"id":950,"name":"STATUS_FAILED","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":7,"character":13}],"type":{"type":"reference","id":1356,"name":"Status"},"defaultValue":"\'failed\'","permalink":"/api/pipeline#STATUS_FAILED","previousId":1028,"nextId":949},{"id":949,"name":"STATUS_PASSED","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":6,"character":13}],"type":{"type":"reference","id":1356,"name":"Status"},"defaultValue":"\'passed\'","permalink":"/api/pipeline#STATUS_PASSED","previousId":950,"nextId":946},{"id":946,"name":"STATUS_PENDING","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":3,"character":13}],"type":{"type":"reference","id":1356,"name":"Status"},"defaultValue":"\'pending\'","permalink":"/api/pipeline#STATUS_PENDING","previousId":949,"nextId":947},{"id":947,"name":"STATUS_RUNNING","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":4,"character":13}],"type":{"type":"reference","id":1356,"name":"Status"},"defaultValue":"\'running\'","permalink":"/api/pipeline#STATUS_RUNNING","previousId":946,"nextId":948},{"id":948,"name":"STATUS_SKIPPED","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/pipeline/src/constants.ts","line":5,"character":13}],"type":{"type":"reference","id":1356,"name":"Status"},"defaultValue":"\'skipped\'","permalink":"/api/pipeline#STATUS_SKIPPED","previousId":947}],"groups":[{"title":"Classes","kind":128,"children":[822,884,951,957,970,1037,1108,1215,1272,1361,1424]},{"title":"Interfaces","kind":256,"children":[1341,1103,1345,1033,1349]},{"title":"Type aliases","kind":4194304,"children":[1332,1357,1359,1027,1356]},{"title":"Variables","kind":32,"children":[1028,950,949,946,947,948]}],"sources":[{"fileName":"packages/pipeline/src/index.ts","line":6,"character":0}],"permalink":"/api/pipeline"},"urlSlug":"pipeline"}],"packageName":"@boost/pipeline","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":6,"name":"@boost/plugin","kind":2,"kindString":"Module","flags":{},"children":[{"id":1483,"name":"Plugin","kind":128,"kindString":"Class","flags":{"isAbstract":true},"children":[{"id":1484,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1485,"name":"new Plugin","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1486,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1488,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1487,"name":"__type","kind":65536,"kindString":"Type literal","flags":{}}}}],"parameters":[{"id":1489,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1488,"name":"Options"}}],"type":{"type":"reference","id":1483,"typeArguments":[{"type":"reference","id":1486,"name":"T"},{"type":"reference","id":1488,"name":"Options"}],"name":"Plugin"},"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}}],"inheritedFrom":{"type":"reference","name":"Contract<Options>.constructor"}},{"id":1490,"name":"name","kind":1024,"kindString":"Property","flags":{"isAbstract":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":8,"character":10}],"type":{"type":"intrinsic","name":"string"},"implementationOf":{"type":"reference","id":1604,"name":"Pluggable.name"}},{"id":1497,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1488,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1504,"name":"blueprint","kind":2048,"kindString":"Method","flags":{"isAbstract":true},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":32,"character":13}],"signatures":[{"id":1505,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Define an `optimal` blueprint in which to validate and build the\\noptions object passed to the constructor, or when manual setting.","text":"A boolean is passed as the 2nd argument to determine whether this is\\nvalidating on class instantiation (first time), or by calling\\n`configure()` (all other times).\\n"},"parameters":[{"id":1506,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}},{"id":1507,"name":"onConstruction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"object"},"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}}],"inheritedFrom":{"type":"reference","name":"Contract.blueprint"}},{"id":1498,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1499,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1500,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1488,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1501,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1502,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1503,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1488,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1488,"name":"Options"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1488,"name":"Options"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1494,"name":"shutdown","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":12,"character":1}],"signatures":[{"id":1495,"name":"shutdown","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1496,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1486,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.shutdown"}}],"implementationOf":{"type":"reference","id":1606,"name":"Pluggable.shutdown"}},{"id":1491,"name":"startup","kind":2048,"kindString":"Method","flags":{},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":10,"character":1}],"signatures":[{"id":1492,"name":"startup","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1493,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1486,"name":"T"}}],"type":{"type":"intrinsic","name":"void"},"implementationOf":{"type":"reference","name":"Pluggable.startup"}}],"implementationOf":{"type":"reference","id":1607,"name":"Pluggable.startup"}}],"groups":[{"title":"Constructors","kind":512,"children":[1484]},{"title":"Properties","kind":1024,"children":[1490,1497]},{"title":"Methods","kind":2048,"children":[1504,1498,1494,1491]}],"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":22}],"typeParameter":[{"id":1508,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}},{"id":1510,"name":"Options","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"reflection","declaration":{"id":1509,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/Plugin.ts","line":4,"character":67}]}}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1488,"name":"Options"}],"name":"Contract"}],"implementedTypes":[{"type":"reference","id":1603,"typeArguments":[{"type":"reference","id":1486,"name":"T"}],"name":"Pluggable"}],"permalink":"/api/plugin/class/Plugin","nextId":1517},{"id":1517,"name":"Registry","kind":128,"kindString":"Class","flags":{},"children":[{"id":1518,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":76,"character":1}],"signatures":[{"id":1519,"name":"new Registry","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":1520,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1603,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1520,"name":"Plugin"}],"name":"Pluggable"}},{"id":1521,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"parameters":[{"id":1522,"name":"projectName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1523,"name":"typeName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1524,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1626,"typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"name":"RegistryOptions"}}],"type":{"type":"reference","id":1517,"typeArguments":[{"type":"reference","id":1520,"name":"Plugin"},{"type":"reference","id":1521,"name":"Tool"}],"name":"Registry"},"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}}],"overwrites":{"type":"reference","name":"Contract<\\n\\tRegistryOptions<Plugin>\\n>.constructor"}},{"id":1525,"name":"debug","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":34,"character":10}],"type":{"type":"reference","name":"Debugger"}},{"id":1526,"name":"onAfterRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":40,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1520,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1527,"name":"onAfterUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":46,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1520,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1528,"name":"onBeforeRegister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is registered and the `startup` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":52,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1520,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1529,"name":"onBeforeUnregister","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called before a plugin is unregistered and the `shutdown` life-cycle."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":58,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"reference","id":1520,"name":"Plugin"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1530,"name":"onLoad","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Called after a plugin is loaded but before it\'s registered."},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":64,"character":10}],"type":{"type":"reference","typeArguments":[{"type":"tuple","elements":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]},{"type":"intrinsic","name":"string"}],"name":"Event"},"defaultValue":"..."},{"id":1586,"name":"options","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Validated and configured options."},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":5,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1626,"typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"name":"RegistryOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.options"}},{"id":1531,"name":"pluralName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":66,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1532,"name":"projectName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":68,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1533,"name":"singularName","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":70,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1536,"name":"blueprint","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":90,"character":1}],"signatures":[{"id":1537,"name":"blueprint","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1538,"name":"schemas","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"/home/runner/work/boost/boost/node_modules/optimal/dts/schemas/index\\"","package":"optimal","name":"__module"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1626,"typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"name":"RegistryOptions"}],"qualifiedName":"Blueprint","package":"optimal","name":"Blueprint"},"overwrites":{"type":"reference","name":"Contract.blueprint"}}],"overwrites":{"type":"reference","name":"Contract.blueprint"}},{"id":1587,"name":"configure","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/common/dts/Contract.d.ts","line":23,"character":4}],"signatures":[{"id":1588,"name":"configure","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set an options object by merging the new partial and existing options\\nwith the defined blueprint, while running all validation checks.\\nFreeze and return the options object.","text":"```ts\\nobject.configure({ name: \'Boost\' });\\n\\nobject.configure((prevOptions) => ({\\n\\tnestedObject: {\\n\\t\\t...prevOptions.nestedObject,\\n\\t\\tsome: \'value\',\\n\\t},\\n}));\\n```\\n"},"parameters":[{"id":1589,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1626,"typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"name":"RegistryOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},{"type":"reflection","declaration":{"id":1590,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":1591,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1592,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1626,"typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"name":"RegistryOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1626,"typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"name":"RegistryOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","id":1626,"typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"name":"RegistryOptions"}],"qualifiedName":"Required","package":"typescript","name":"Required"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"Contract.configure"}}],"inheritedFrom":{"type":"reference","name":"Contract.configure"}},{"id":1539,"name":"formatModuleName","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":107,"character":1}],"signatures":[{"id":1540,"name":"formatModuleName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Format a name into a fully qualified and compatible Node/npm module name,\\nwith the tool and type names being used as scopes and prefixes."},"parameters":[{"id":1541,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1542,"name":"scoped","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":1543,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":119,"character":1}],"signatures":[{"id":1544,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return a single registered plugin by module name. If the plugin cannot be found,\\nan error will be thrown."},"typeParameter":[{"id":1545,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1603,"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":1545,"name":"T"}],"name":"Pluggable"},"default":{"type":"reference","id":1520,"name":"Plugin"}}],"parameters":[{"id":1546,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":1545,"name":"T"}}]},{"id":1547,"name":"getAll","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":132,"character":1}],"signatures":[{"id":1548,"name":"getAll","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return all registered plugins."},"type":{"type":"array","elementType":{"type":"reference","id":1520,"name":"Plugin"}}}]},{"id":1549,"name":"getMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":139,"character":1}],"signatures":[{"id":1550,"name":"getMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return multiple registered plugins by module name."},"parameters":[{"id":1551,"name":"names","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"array","elementType":{"type":"reference","id":1520,"name":"Plugin"}}}]},{"id":1561,"name":"isRegistered","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":215,"character":1}],"signatures":[{"id":1562,"name":"isRegistered","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Return true if a plugin has been registered."},"parameters":[{"id":1563,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":1552,"name":"load","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":146,"character":7}],"signatures":[{"id":1553,"name":"load","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register a single plugin by name, or with an explicit instance."},"parameters":[{"id":1554,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":1520,"name":"Plugin"}]}},{"id":1555,"name":"params","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"defaultValue":"{}"},{"id":1556,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1616,"typeArguments":[{"type":"reference","id":1521,"name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":1557,"name":"loadMany","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":183,"character":7}],"signatures":[{"id":1558,"name":"loadMany","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Load and register multiple plugins based on a list of settings."},"parameters":[{"id":1559,"name":"settings","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":1609,"name":"Setting"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":1597,"name":"SourceWithOptions"},{"type":"reference","id":1520,"name":"Plugin"}]}}]}},{"id":1560,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1616,"typeArguments":[{"type":"reference","id":1521,"name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":1520,"name":"Plugin"}}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":1564,"name":"register","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":228,"character":7}],"signatures":[{"id":1565,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a plugin and trigger startup with the provided tool."},"parameters":[{"id":1566,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1567,"name":"plugin","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1520,"name":"Plugin"}},{"id":1568,"name":"tool","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","id":1521,"name":"Tool"}]},"defaultValue":"undefined"},{"id":1569,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1616,"typeArguments":[{"type":"reference","id":1521,"name":"Tool"}],"name":"RegisterOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":1570,"name":"unregister","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":272,"character":7}],"signatures":[{"id":1571,"name":"unregister","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister a plugin by name and trigger shutdown process."},"parameters":[{"id":1572,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1573,"name":"tool","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1521,"name":"Tool"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[1518]},{"title":"Properties","kind":1024,"children":[1525,1526,1527,1528,1529,1530,1586,1531,1532,1533],"categories":[{"title":"CATEGORY","children":[1525,1586,1531,1532,1533]},{"title":"Events","children":[1526,1527,1528,1529,1530]}]},{"title":"Methods","kind":2048,"children":[1536,1587,1539,1543,1547,1549,1561,1552,1557,1564,1570]}],"sources":[{"fileName":"packages/plugin/src/Registry.ts","line":31,"character":13}],"typeParameter":[{"id":1593,"name":"Plugin","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1603,"name":"Pluggable"}},{"id":1594,"name":"Tool","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","id":1626,"typeArguments":[{"type":"reference","id":1520,"name":"Plugin"}],"name":"RegistryOptions"}],"name":"Contract"}],"permalink":"/api/plugin/class/Registry","previousId":1483,"nextId":1603},{"id":1603,"name":"Pluggable","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1604,"name":"name","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Unique name of the plugin. Typically the npm package name."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":15,"character":10}],"type":{"type":"intrinsic","name":"string"}},{"id":1605,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Priority in which to order the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1606,"name":"shutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is unregistered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":19,"character":1}],"type":{"type":"reference","id":1598,"typeArguments":[{"type":"reference","id":1608,"name":"T"}],"name":"Callback"}},{"id":1607,"name":"startup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Life cycle called when the plugin is registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":21,"character":1}],"type":{"type":"reference","id":1598,"typeArguments":[{"type":"reference","id":1608,"name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[1604,1605,1606,1607]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":13,"character":17}],"typeParameter":[{"id":1608,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"any"}}],"implementedBy":[{"type":"reference","id":1483,"name":"Plugin"}],"permalink":"/api/plugin/interface/Pluggable","previousId":1517,"nextId":1616},{"id":1616,"name":"RegisterOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1617,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1618,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"reference","id":1619,"name":"T"}}],"groups":[{"title":"Properties","kind":1024,"children":[1617,1618]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":30,"character":17}],"typeParameter":[{"id":1619,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"extendedBy":[{"type":"reference","id":1620,"name":"Registration"}],"permalink":"/api/plugin/interface/RegisterOptions","previousId":1603,"nextId":1620},{"id":1620,"name":"Registration","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1621,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Unique name of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":39,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1622,"name":"plugin","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Plugin instance or object."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":41,"character":1}],"type":{"type":"reference","id":1625,"name":"T"}},{"id":1623,"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Override the priority of the plugin."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":32,"character":1}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","id":1617,"name":"RegisterOptions.priority"}},{"id":1624,"name":"tool","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom tool instance to pass to life cycles."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":34,"character":1}],"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","id":1618,"name":"RegisterOptions.tool"}}],"groups":[{"title":"Properties","kind":1024,"children":[1621,1622,1623,1624]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":37,"character":17}],"typeParameter":[{"id":1625,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1603,"name":"Pluggable"}}],"extendedTypes":[{"type":"reference","id":1616,"name":"RegisterOptions"}],"permalink":"/api/plugin/interface/Registration","previousId":1616,"nextId":1626},{"id":1626,"name":"RegistryOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1627,"name":"afterShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":46,"character":1}],"type":{"type":"reference","id":1598,"typeArguments":[{"type":"reference","id":1633,"name":"T"}],"name":"Callback"}},{"id":1628,"name":"afterStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired after a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":48,"character":1}],"type":{"type":"reference","id":1598,"typeArguments":[{"type":"reference","id":1633,"name":"T"}],"name":"Callback"}},{"id":1629,"name":"beforeShutdown","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `shutdown` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":50,"character":1}],"type":{"type":"reference","id":1598,"typeArguments":[{"type":"reference","id":1633,"name":"T"}],"name":"Callback"}},{"id":1630,"name":"beforeStartup","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Callback fired before a plugin\'s `startup` life cycle is executed."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":52,"character":1}],"type":{"type":"reference","id":1598,"typeArguments":[{"type":"reference","id":1633,"name":"T"}],"name":"Callback"}},{"id":1631,"name":"resolver","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Custom module resolver."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":54,"character":1}],"type":{"type":"reference","name":"ModuleResolver"}},{"id":1632,"name":"validate","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Validate the shape of the plugin being registered."},"sources":[{"fileName":"packages/plugin/src/types.ts","line":56,"character":1}],"type":{"type":"reference","id":1598,"typeArguments":[{"type":"reference","id":1633,"name":"T"}],"name":"Callback"}}],"groups":[{"title":"Properties","kind":1024,"children":[1627,1628,1629,1630,1631,1632]}],"sources":[{"fileName":"packages/plugin/src/types.ts","line":44,"character":17}],"typeParameter":[{"id":1633,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1603,"name":"Pluggable"}}],"permalink":"/api/plugin/interface/RegistryOptions","previousId":1620,"nextId":1598},{"id":1598,"name":"Callback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":12}],"typeParameter":[{"id":1602,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"default":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reflection","declaration":{"id":1599,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":9,"character":36}],"signatures":[{"id":1600,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1601,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1602,"name":"T"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},{"type":"intrinsic","name":"void"}]}}]}},"permalink":"/api/plugin#Callback","previousId":1626,"nextId":1610},{"id":1610,"name":"Factory","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":12}],"typeParameter":[{"id":1614,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","id":1603,"name":"Pluggable"}},{"id":1615,"name":"O","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"type":{"type":"reflection","declaration":{"id":1611,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":26,"character":70}],"signatures":[{"id":1612,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1613,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":1615,"name":"O"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":1614,"name":"T"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},{"type":"reference","id":1614,"name":"T"}]}}]}},"permalink":"/api/plugin#Factory","previousId":1598,"nextId":1511},{"id":1511,"name":"PluginErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":13,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/plugin#PluginErrorCode","previousId":1610,"nextId":1609},{"id":1609,"name":"Setting","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":24,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":1596,"name":"SourceOptions"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/plugin#Setting","previousId":1511,"nextId":1595},{"id":1595,"name":"Source","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"reference","name":"FilePath"},{"type":"reference","name":"ModuleID"}]},"permalink":"/api/plugin#Source","previousId":1609,"nextId":1596},{"id":1596,"name":"SourceOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"object"}]},"permalink":"/api/plugin#SourceOptions","previousId":1595,"nextId":1597},{"id":1597,"name":"SourceWithOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/plugin/src/types.ts","line":7,"character":12}],"type":{"type":"tuple","elements":[{"type":"reference","id":1595,"name":"Source"},{"type":"reference","id":1596,"name":"SourceOptions"}]},"permalink":"/api/plugin#SourceWithOptions","previousId":1596,"nextId":1482},{"id":1482,"name":"DEFAULT_PRIORITY","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/plugin/src/constants.ts","line":1,"character":13}],"type":{"type":"literal","value":100},"defaultValue":"100","permalink":"/api/plugin#DEFAULT_PRIORITY","previousId":1597,"nextId":1512},{"id":1512,"name":"PluginError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/plugin/src/PluginError.ts","line":15,"character":13}],"type":{"type":"reflection","declaration":{"id":1513,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1514,"name":"new PluginError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1515,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}},{"id":1516,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"FACTORY_REQUIRED"},{"type":"literal","value":"MODULE_NAME_INVALID"},{"type":"literal","value":"MODULE_UNKNOWN_FORMAT"},{"type":"literal","value":"PLUGIN_REQUIRED"},{"type":"literal","value":"PLUGIN_REQUIRED_NAME"},{"type":"literal","value":"REGISTER_REQUIRED"},{"type":"literal","value":"SETTING_UNKNOWN"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/plugin#PluginError","previousId":1482}],"groups":[{"title":"Classes","kind":128,"children":[1483,1517]},{"title":"Interfaces","kind":256,"children":[1603,1616,1620,1626]},{"title":"Type aliases","kind":4194304,"children":[1598,1610,1511,1609,1595,1596,1597]},{"title":"Variables","kind":32,"children":[1482,1512]}],"sources":[{"fileName":"packages/plugin/src/index.ts","line":6,"character":0}],"permalink":"/api/plugin"},"urlSlug":"plugin"}],"packageName":"@boost/plugin","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":7,"name":"@boost/terminal","kind":2,"kindString":"Module","flags":{},"children":[{"id":1634,"name":"cursor","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":1644,"name":"hide","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Hide the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":13,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorHide","permalink":"/api/terminal/namespace/cursor#hide"},{"id":1645,"name":"nextLine","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Move cursor to the next line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":16,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorNextLine","permalink":"/api/terminal/namespace/cursor#nextLine"},{"id":1646,"name":"position","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Return the current cursur position."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":19,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorGetPosition","permalink":"/api/terminal/namespace/cursor#position"},{"id":1647,"name":"prevLine","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Move cursor to the previous line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":22,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorPrevLine","permalink":"/api/terminal/namespace/cursor#prevLine"},{"id":1648,"name":"restorePosition","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Restores the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":25,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorRestorePosition","permalink":"/api/terminal/namespace/cursor#restorePosition"},{"id":1649,"name":"savePosition","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Saves the cursor position/state."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":28,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorSavePosition","permalink":"/api/terminal/namespace/cursor#savePosition"},{"id":1650,"name":"show","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Show the cursor."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":31,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorShow","permalink":"/api/terminal/namespace/cursor#show"},{"id":1651,"name":"startLine","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Move cursor to the start of the current line."},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":34,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.cursorLeft","permalink":"/api/terminal/namespace/cursor#startLine"},{"id":1635,"name":"backward","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":4,"character":13}],"signatures":[{"id":1636,"name":"backward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move backward. Defaults to `1`."},"parameters":[{"id":1637,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/namespace/cursor#backward"},{"id":1638,"name":"down","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":7,"character":13}],"signatures":[{"id":1639,"name":"down","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move down. Defaults to `1`."},"parameters":[{"id":1640,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/namespace/cursor#down"},{"id":1641,"name":"forward","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":10,"character":13}],"signatures":[{"id":1642,"name":"forward","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of columns to move forward. Defaults to `1`."},"parameters":[{"id":1643,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/namespace/cursor#forward"},{"id":1652,"name":"to","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":37,"character":13}],"signatures":[{"id":1653,"name":"to","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the relative position of the cursor."},"parameters":[{"id":1654,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1655,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/namespace/cursor#to"},{"id":1656,"name":"toAbsolute","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":40,"character":13}],"signatures":[{"id":1657,"name":"toAbsolute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Set the absolute position of the cursor, starting from the top left."},"parameters":[{"id":1658,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1659,"name":"y","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/namespace/cursor#toAbsolute"},{"id":1660,"name":"up","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":43,"character":13}],"signatures":[{"id":1661,"name":"up","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Number of rows to move up. Defaults to `1`."},"parameters":[{"id":1662,"name":"count","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/namespace/cursor#up"}],"groups":[{"title":"Variables","kind":32,"children":[1644,1645,1646,1647,1648,1649,1650,1651]},{"title":"Functions","kind":64,"children":[1635,1638,1641,1652,1656,1660]}],"sources":[{"fileName":"packages/terminal/src/cursor.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/cursor","previousId":1713,"nextId":1663},{"id":1663,"name":"screen","kind":4,"kindString":"Namespace","flags":{},"children":[{"id":1664,"name":"clear","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Clear the terminal screen."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":5,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.clearScreen","permalink":"/api/terminal/namespace/screen#clear"},{"id":1665,"name":"clearTerminal","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"},"permalink":"/api/terminal/namespace/screen#clearTerminal"},{"id":1666,"name":"erase","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Erase the screen and move the cursor the top left position."},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":11,"character":13}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"ansiEscapes.eraseScreen","permalink":"/api/terminal/namespace/screen#erase"},{"id":1667,"name":"eraseDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"},"permalink":"/api/terminal/namespace/screen#eraseDown"},{"id":1668,"name":"eraseEndLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"},"permalink":"/api/terminal/namespace/screen#eraseEndLine"},{"id":1669,"name":"eraseLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"},"permalink":"/api/terminal/namespace/screen#eraseLine"},{"id":1673,"name":"eraseStartLine","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"},"permalink":"/api/terminal/namespace/screen#eraseStartLine"},{"id":1674,"name":"eraseUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"},"permalink":"/api/terminal/namespace/screen#eraseUp"},{"id":1675,"name":"scrollDown","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"},"permalink":"/api/terminal/namespace/screen#scrollDown"},{"id":1676,"name":"scrollUp","kind":32,"kindString":"Variable","flags":{},"type":{"type":"intrinsic","name":"string"},"permalink":"/api/terminal/namespace/screen#scrollUp"},{"id":1670,"name":"eraseLines","kind":64,"kindString":"Function","flags":{},"signatures":[{"id":1671,"name":"eraseLines","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Erase from the current cursor position up the specified amount of rows."},"parameters":[{"id":1672,"name":"count","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Count of rows to erase.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/namespace/screen#eraseLines"},{"id":1677,"name":"size","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/screen.ts","line":38,"character":13}],"signatures":[{"id":1678,"name":"size","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Reliably and accurately get the screen size (in `columns` and `rows`)."},"type":{"type":"reference","qualifiedName":"terminalSize.Size","package":"term-size","name":"terminalSize.Size"}}],"permalink":"/api/terminal/namespace/screen#size"}],"groups":[{"title":"Variables","kind":32,"children":[1664,1665,1666,1667,1668,1669,1673,1674,1675,1676]},{"title":"Functions","kind":64,"children":[1670,1677]}],"sources":[{"fileName":"packages/terminal/src/screen.ts","line":1,"character":0}],"permalink":"/api/terminal/namespace/screen","previousId":1634,"nextId":1712},{"id":1713,"name":"WrapOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1714,"name":"hard","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":123,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1715,"name":"trim","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":124,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1716,"name":"wordWrap","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"packages/terminal/src/text.ts","line":125,"character":1}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[1714,1715,1716]}],"sources":[{"fileName":"packages/terminal/src/text.ts","line":122,"character":17}],"permalink":"/api/terminal/interface/WrapOptions","previousId":1706,"nextId":1634},{"id":1712,"name":"TruncateOptions","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":105,"character":12}],"type":{"type":"reference","qualifiedName":"cliTruncate.Options","package":"cli-truncate","name":"cliTruncate.Options"},"permalink":"/api/terminal#TruncateOptions","previousId":1663,"nextId":1711},{"id":1711,"name":"ANSI_REGEX","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"shortText":"Regular expression for matching ANSI escape codes."},"sources":[{"fileName":"packages/terminal/src/text.ts","line":11,"character":13}],"type":{"type":"reference","qualifiedName":"RegExp","package":"typescript","name":"RegExp"},"defaultValue":"...","permalink":"/api/terminal#ANSI_REGEX","previousId":1712},{"id":1679,"name":"annotate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":23,"character":16}],"signatures":[{"id":1680,"name":"annotate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text with a visual annotation _(iTerm only)_. If a terminal doe\\nnot support annotations, it will pass the text through.","text":"```ts\\nimport { annotate } from \'@boost/terminal\';\\n\\nconst text = annotate(\'fileName.js\', absFilePath);\\n```\\n"},"parameters":[{"id":1681,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1682,"name":"annotation","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/annotate","nextId":1683},{"id":1683,"name":"calculateWidth","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":41,"character":16}],"signatures":[{"id":1684,"name":"calculateWidth","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculate and return the visual width of a string (number of terminal columns required).\\nBased on [string-width](https://www.npmjs.com/package/string-width).","text":"```ts\\nimport { calculateWidth } from \'@boost/terminal\';\\n\\ncalculateWidth(\'\u53e4\'); // 2\\n```\\n"},"parameters":[{"id":1685,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"number"}}],"permalink":"/api/terminal/function/calculateWidth","previousId":1679,"nextId":1686},{"id":1686,"name":"hasAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":55,"character":16}],"signatures":[{"id":1687,"name":"hasAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns true if the string contains ANSI escape codes.\\nBased on [ansi-regex](https://www.npmjs.com/package/ansi-regex).","text":"```ts\\nimport { hasAnsi } from \'@boost/terminal\';\\n\\nhasAnsi(\'\\\\u001B[4mTest\\\\u001B[0m\'); // true\\n```\\n"},"parameters":[{"id":1688,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}],"permalink":"/api/terminal/function/hasAnsi","previousId":1683,"nextId":1689},{"id":1689,"name":"link","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":69,"character":16}],"signatures":[{"id":1690,"name":"link","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Can be used to wrap a piece of text in an ANSI escape code hyperlink.\\nIf a terminal does not support hyperlinks, it will pass the text through.","text":"```ts\\nimport { link } from \'@boost/terminal\';\\n\\nconst text = link(\'Read the manual\', \'https://boostlib.dev\');\\n```\\n"},"parameters":[{"id":1691,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1692,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/link","previousId":1686,"nextId":1693},{"id":1693,"name":"sliceAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":87,"character":16}],"signatures":[{"id":1694,"name":"sliceAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Slice a string while preserving ANSI escape codes.\\nBased on [slice-ansi](https://www.npmjs.com/package/slice-ansi).","text":"```ts\\nimport { sliceAnsi } from \'@boost/terminal\';\\n\\nconst text = sliceAnsi(aStringThatMayContainAnsi, 15, 25);\\n```\\n"},"parameters":[{"id":1695,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1696,"name":"start","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1697,"name":"end","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/sliceAnsi","previousId":1689,"nextId":1698},{"id":1698,"name":"stripAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":101,"character":16}],"signatures":[{"id":1699,"name":"stripAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Strip all ANSI escape codes from the provided string.\\nBased on [strip-ansi](https://www.npmjs.com/package/strip-ansi).","text":"```ts\\nimport { stripAnsi } from \'@boost/terminal\';\\n\\nconst text = stripAnsi(aStringThatContainsAnsi);\\n```\\n"},"parameters":[{"id":1700,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/stripAnsi","previousId":1693,"nextId":1701},{"id":1701,"name":"truncate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":118,"character":16}],"signatures":[{"id":1702,"name":"truncate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Truncate a string to a desired terminal width while preserving ANSI escape codes,\\nUnicode surrogate pairs, and fullwidth characters.\\nBased on [cli-truncate](https://www.npmjs.com/package/cli-truncate).","text":"```ts\\nimport { truncate } from \'@boost/terminal\';\\n\\nconst text = truncate(aStringThatMayContainAnsi, 10, { position: \'middle\' });\\n```\\n"},"parameters":[{"id":1703,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1704,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1705,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","qualifiedName":"cliTruncate.Options","package":"cli-truncate","name":"Options"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/truncate","previousId":1698,"nextId":1706},{"id":1706,"name":"wrapAnsi","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/terminal/src/text.ts","line":138,"character":16}],"signatures":[{"id":1707,"name":"wrapAnsi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Wrap a string that contains ANSI escape codes to a desired terminal width.\\nBased on [wrap-ansi](https://www.npmjs.com/package/wrap-ansi).","text":"```ts\\nimport { wrapAnsi } from \'@boost/terminal\';\\n\\nconst text = wrapAnsi(aStringThatContainsAnsi, 20);\\n```\\n"},"parameters":[{"id":1708,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":1709,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":1710,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1713,"name":"WrapOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/terminal/function/wrapAnsi","previousId":1701,"nextId":1713}],"groups":[{"title":"Functions","kind":64,"children":[1679,1683,1686,1689,1693,1698,1701,1706]},{"title":"Interfaces","kind":256,"children":[1713]},{"title":"Namespaces","kind":4,"children":[1634,1663]},{"title":"Type aliases","kind":4194304,"children":[1712]},{"title":"Variables","kind":32,"children":[1711]}],"sources":[{"fileName":"packages/terminal/src/index.ts","line":6,"character":0}],"permalink":"/api/terminal"},"urlSlug":"terminal"}],"packageName":"@boost/terminal","packageVersion":"4.0.0-alpha.0"},{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":8,"name":"@boost/translate","kind":2,"kindString":"Module","flags":{},"children":[{"id":1739,"name":"MessageOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1742,"name":"context","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Context used for special parsing (male, female, etc)."},"sources":[{"fileName":"packages/translate/src/types.ts","line":17,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1741,"name":"count","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Count used to determine plurals."},"sources":[{"fileName":"packages/translate/src/types.ts","line":15,"character":1}],"type":{"type":"intrinsic","name":"number"}},{"id":1740,"name":"defaultValue","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Default value to return if a translation was not found."},"sources":[{"fileName":"packages/translate/src/types.ts","line":13,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1743,"name":"interpolation","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Interpolation options to pass down."},"sources":[{"fileName":"packages/translate/src/types.ts","line":19,"character":1}],"type":{"type":"reference","qualifiedName":"InterpolationOptions","package":"i18next","name":"InterpolationOptions"}},{"id":1744,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Force translation to this locale."},"sources":[{"fileName":"packages/translate/src/types.ts","line":21,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1745,"name":"postProcess","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Post-processors to run on the translation."},"sources":[{"fileName":"packages/translate/src/types.ts","line":23,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[1742,1741,1740,1743,1744,1745]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":11,"character":17}],"permalink":"/api/translate/interface/MessageOptions","previousId":1717,"nextId":1746},{"id":1746,"name":"Translator","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1747,"name":"direction","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":28,"character":1}],"type":{"type":"reference","id":1735,"name":"Direction"}},{"id":1748,"name":"locale","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":29,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1749,"name":"changeLocale","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":30,"character":1}],"signatures":[{"id":1750,"name":"changeLocale","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1751,"name":"locale","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[1747,1748]},{"title":"Methods","kind":2048,"children":[1749]}],"sources":[{"fileName":"packages/translate/src/types.ts","line":26,"character":17}],"signatures":[{"id":1753,"name":"Translator","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":1754,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1755,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1738,"name":"InterpolationParams"}},{"id":1756,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","id":1739,"name":"MessageOptions"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/api/translate/interface/Translator","previousId":1739,"nextId":1722},{"id":1722,"name":"TranslatorOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":1723,"name":"autoDetect","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Automatically detect the locale from the environment. Defaults to `true`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":18,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1724,"name":"debug","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Enable debugging by logging info to the console."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":20,"character":1}],"type":{"type":"intrinsic","name":"boolean"}},{"id":1725,"name":"fallbackLocale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Fallback locale(s) to use when the detected locale isn\'t translated. Defaults to `en`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":22,"character":1}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1726,"name":"locale","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Locale to explicitly use."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":24,"character":1}],"type":{"type":"intrinsic","name":"string"}},{"id":1727,"name":"lookupType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Order in which to load and lookup locale translations."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":26,"character":1}],"type":{"type":"union","types":[{"type":"literal","value":"all"},{"type":"literal","value":"currentOnly"},{"type":"literal","value":"languageOnly"}]}},{"id":1728,"name":"resourceFormat","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"File format resource bundles are written in. Defaults to `yaml`."},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":28,"character":1}],"type":{"type":"reference","id":1736,"name":"Format"}}],"groups":[{"title":"Properties","kind":1024,"children":[1723,1724,1725,1726,1727,1728]}],"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":16,"character":17}],"permalink":"/api/translate/interface/TranslatorOptions","previousId":1746,"nextId":1735},{"id":1735,"name":"Direction","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":3,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"ltr"},{"type":"literal","value":"rtl"}]},"permalink":"/api/translate#Direction","previousId":1722,"nextId":1736},{"id":1736,"name":"Format","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":5,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"js"},{"type":"literal","value":"json"},{"type":"literal","value":"yaml"}]},"permalink":"/api/translate#Format","previousId":1735,"nextId":1738},{"id":1738,"name":"InterpolationParams","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":9,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Record","package":"typescript","name":"Record"},"permalink":"/api/translate#InterpolationParams","previousId":1736,"nextId":1737},{"id":1737,"name":"Locale","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/types.ts","line":7,"character":12}],"type":{"type":"intrinsic","name":"string"},"permalink":"/api/translate#Locale","previousId":1738,"nextId":1729},{"id":1729,"name":"TranslateErrorCode","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":10,"character":12}],"type":{"type":"typeOperator","operator":"keyof","target":{"type":"query","queryType":{"type":"reference","name":"errors"}}},"permalink":"/api/translate#TranslateErrorCode","previousId":1737,"nextId":1730},{"id":1730,"name":"TranslateError","kind":32,"kindString":"Variable","flags":{"isConst":true},"sources":[{"fileName":"packages/translate/src/TranslateError.ts","line":12,"character":13}],"type":{"type":"reflection","declaration":{"id":1731,"name":"__type","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":1732,"name":"new TranslateError","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":1733,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}},{"id":1734,"name":"params","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}],"type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"},{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"LOCALE_REQUIRED"},{"type":"literal","value":"NAMESPACE_REQUIRED"},{"type":"literal","value":"RESOURCE_PATH_INVALID"},{"type":"literal","value":"RESOURCES_REQUIRED"}]}],"name":"ScopedError"}]}}]}},"defaultValue":"...","permalink":"/api/translate#TranslateError","previousId":1729},{"id":1717,"name":"createTranslator","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"packages/translate/src/createTranslator.ts","line":35,"character":16}],"signatures":[{"id":1718,"name":"createTranslator","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and return a `Translator` instance with the defined namespace.\\nA list of resource paths are required for locating translation files."},"parameters":[{"id":1719,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"id":1720,"name":"resourcePath","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"PortablePath"},{"type":"array","elementType":{"type":"reference","name":"PortablePath"}}]}},{"id":1721,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":1722,"name":"TranslatorOptions"},"defaultValue":"{}"}],"type":{"type":"reference","id":1746,"name":"Translator"}}],"permalink":"/api/translate/function/createTranslator","nextId":1739}],"groups":[{"title":"Functions","kind":64,"children":[1717]},{"title":"Interfaces","kind":256,"children":[1739,1746,1722]},{"title":"Type aliases","kind":4194304,"children":[1735,1736,1738,1737,1729]},{"title":"Variables","kind":32,"children":[1730]}],"sources":[{"fileName":"packages/translate/src/index.ts","line":6,"character":0}],"permalink":"/api/translate"},"urlSlug":"translate"}],"packageName":"@boost/translate","packageVersion":"4.0.0-alpha.0"}]')}}]);