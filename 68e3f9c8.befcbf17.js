(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{71:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return d})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return u}));var a=t(2),o=t(6),i=(t(0),t(86)),r=t(93),l=t(91),c=t(92),s={title:"Configuration"},d={unversionedId:"config",id:"config",isDocsHomePage:!1,title:"Configuration",description:"Powerful convention based finder, loader, and manager of both configuration and ignore files. Will",source:"@site/docs/config.mdx",slug:"/config",permalink:"/docs/config",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/config.mdx",version:"current",sidebar:"docs",previous:{title:"Project",permalink:"/docs/common/project"},next:{title:"Crash reporting",permalink:"/docs/crash"}},p=[{value:"Installation",id:"installation",children:[]},{value:"Events",id:"events",children:[]},{value:"Setup",id:"setup",children:[{value:"Finder options",id:"finder-options",children:[]},{value:"Processor options",id:"processor-options",children:[]},{value:"Processing settings",id:"processing-settings",children:[]}]},{value:"Config files",id:"config-files",children:[{value:"File patterns",id:"file-patterns",children:[]},{value:"File formats",id:"file-formats",children:[]},{value:"Loading config files",id:"loading-config-files",children:[]},{value:"Enable extending",id:"enable-extending",children:[]},{value:"Enable overrides",id:"enable-overrides",children:[]}]},{value:"Ignore files",id:"ignore-files",children:[{value:"File patterns",id:"file-patterns-1",children:[]},{value:"Loading ignore files",id:"loading-ignore-files",children:[]}]}],b={rightToc:p};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.a)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(i.a)(r.a,{backend:!0,tooling:!0,mdxType:"EnvBadges"}),Object(i.a)("p",null,"Powerful convention based finder, loader, and manager of both configuration and ignore files. Will\nfind config files of multiple supported formats while traversing up the tree."),Object(i.a)("h2",{id:"installation"},"Installation"),Object(i.a)(l.a,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},Object(i.a)(c.a,{value:"yarn",mdxType:"TabItem"},Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @boost/config\n"))),Object(i.a)(c.a,{value:"npm",mdxType:"TabItem"},Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install @boost/config\n")))),Object(i.a)("h2",{id:"events"},"Events"),Object(i.a)("table",null,Object(i.a)("thead",{parentName:"table"},Object(i.a)("tr",{parentName:"thead"},Object(i.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Event"),Object(i.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Arguments"),Object(i.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.a)("tbody",{parentName:"table"},Object(i.a)("tr",{parentName:"tbody"},Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},"Configuration#onLoadedConfig")),Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},"ConfigFile<T>[]")),Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Waterfall: Called after config files are loaded but before processed. Can modify config file list.")),Object(i.a)("tr",{parentName:"tbody"},Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},"Configuration#onLoadedIgnore")),Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},"IgnoreFile[]")),Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Waterfall: Called after ignore files are loaded. Can modify ignore file list.")),Object(i.a)("tr",{parentName:"tbody"},Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},"Configuration#onProcessedConfig")),Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},"T")),Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called after config files are loaded and processed.")))),Object(i.a)("h2",{id:"setup"},"Setup"),Object(i.a)("p",null,"Configuration in the context of this package encompasses 2 concepts: config files and ignore files.\nConfig files are a collection of settings (key-value pairs), while ignore files are a list of file\npath patterns and globs."),Object(i.a)("p",null,"To utilize this functionality, we must extend the ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration")," class, and define a blueprint for\nthe structure of our config file (using ",Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"/docs/common/contract"}),"optimal"),"). This class will fulfill\nmultiple roles: managing, finding, loading, and processing of files."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Blueprint, Predicates } from '@boost/common';\nimport { Configuration } from '@boost/config';\n\n// Example structure\ninterface ConfigFile {\n  ast?: boolean;\n  cwd?: string;\n  debug?: boolean;\n  exclude?: string[];\n  include?: string[];\n  options?: object;\n}\n\nclass Manager extends Configuration<ConfigFile> {\n  blueprint({ array, bool, string, object }: Predicates): Blueprint<ConfigFile> {\n    return {\n      ast: bool(),\n      cwd: string(process.cwd()),\n      debug: bool(),\n      exclude: array(string()),\n      include: array(string()),\n      options: object(),\n    };\n  }\n}\n")),Object(i.a)("p",null,'This class layer is designed to be "internal only", and should not be utilized by consumers\ndirectly. Instead, consumers should interact with an instance of the class, like so.'),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export default new Manager('boost');\n")),Object(i.a)("blockquote",null,Object(i.a)("p",{parentName:"blockquote"},"The string value passed to the constructor is the name of the config and ignore files, in camel\ncase format. For example, ",Object(i.a)("inlineCode",{parentName:"p"},"boost.js")," and ",Object(i.a)("inlineCode",{parentName:"p"},".boostignore"),".")),Object(i.a)("h3",{id:"finder-options"},"Finder options"),Object(i.a)("p",null,"To customize the config file finding and loading layer, call ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#configureFinder()"),"\nwithin ",Object(i.a)("inlineCode",{parentName:"p"},"bootstrap()"),"."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    this.configureFinder({\n      extendsSetting: 'extends',\n      includeEnv: false,\n    });\n  }\n}\n")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"extendsSetting")," (",Object(i.a)("inlineCode",{parentName:"li"},"string"),") - Name of the setting in which ",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"#enable-extending"}),"config extending"),"\nis enabled."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"extensions")," (",Object(i.a)("inlineCode",{parentName:"li"},"ExtType[]"),") - List of extensions, in order, to find config files within each\nfolder. Defaults to ",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"#file-formats"}),"file format list"),"."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"includeEnv")," (",Object(i.a)("inlineCode",{parentName:"li"},"boolean"),") - Find and load environment based config files (using ",Object(i.a)("inlineCode",{parentName:"li"},"NODE_ENV"),").\nDefaults to ",Object(i.a)("inlineCode",{parentName:"li"},"true"),"."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"loaders")," (",Object(i.a)("inlineCode",{parentName:"li"},"{ [K in LoaderType]: Loader<T> }"),") - Mapping of loader functions by type. Defaults to\nnormal file type loaders."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"overridesSetting")," (",Object(i.a)("inlineCode",{parentName:"li"},"string"),") - Name of the setting in which\n",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"#enable-overrides"}),"config overriding")," is enabled.")),Object(i.a)("h3",{id:"processor-options"},"Processor options"),Object(i.a)("p",null,"To customize the config processing layer, call ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#configureProcessor()")," while within\n",Object(i.a)("inlineCode",{parentName:"p"},"bootstrap()"),"."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    this.configureProcessor({\n      defaultWhenUndefined: false,\n    });\n  }\n}\n")),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"defaultWhenUndefined")," (",Object(i.a)("inlineCode",{parentName:"li"},"boolean"),") - When a setting has a value of ",Object(i.a)("inlineCode",{parentName:"li"},"undefined"),", fallback to the\ndefault/initial value for that setting. Defaults to ",Object(i.a)("inlineCode",{parentName:"li"},"true"),"."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"validate")," (",Object(i.a)("inlineCode",{parentName:"li"},"boolean"),") - Validate all settings within a config file before processing. Defaults to\n",Object(i.a)("inlineCode",{parentName:"li"},"true"),".")),Object(i.a)("h3",{id:"processing-settings"},"Processing settings"),Object(i.a)("p",null,"When multiple config files are merged into a single config file, this is known as processing.\nProcessing happens automatically for each setting as we need to determine what the next setting\nvalue would be. By default, the following rules apply when the next and previous setting values are:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("em",{parentName:"li"},"Arrays"),": will be merged and deduped into a new array."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("em",{parentName:"li"},"Objects"),": will be shallow merged (using spread) into a new object."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("em",{parentName:"li"},"Primitives"),": next value will overwrite the previous value."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("em",{parentName:"li"},"Undefined"),": will reset to initial value if ",Object(i.a)("inlineCode",{parentName:"li"},"defaultWhenUndefined")," is true.")),Object(i.a)("p",null,"If you would like to customize this process, you can define custom process handlers per setting with\n",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#addProcessHandler()"),". This method requires a setting name and handler function (which\nis passed the previous and next values)."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    // Always use forward slashes\n    this.addProcessHandler('cwd', (prev, next) => next.replace(/\\\\/g, '/'));\n\n    // Deep merge options since they're dynamic\n    this.addProcessHandler('options', (prev, next) => deepMerge(prev, next));\n  }\n}\n")),Object(i.a)("blockquote",null,Object(i.a)("p",{parentName:"blockquote"},"Handlers may only be defined on root-level settings.")),Object(i.a)("p",null,"To make this process even easier, we provide a handful of pre-defined handlers (below) that can be\nused for common scenarios (these handlers power the default rules mentioned above)."),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"mergeArray")," - Merges previous and next arrays into a new array while removing duplicates (using\n",Object(i.a)("inlineCode",{parentName:"li"},"Set"),")."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"mergeExtends")," - Merges previous and next file paths (either a string or array of strings) into a\nnew list of file paths. This is useful if utilizing ",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"#enable-extending"}),"config extending"),"."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"mergeObject")," - Shallow merges previous and next objects into a new object using object spread."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"mergePlugins")," - Merges previous and next plugin configurations into an object. Plugin configs can\neither be a list of module names, or a map of module names to flags/options. This is useful if\nutilizing the ",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"/docs/plugin#configuration-files"}),"plugin package"),"."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"overwrite")," - Overwrite the previous value with the next value.")),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { mergePlugins } from '@boost/config';\n\nclass Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    // Using example from @boost/plugin documentation\n    this.addProcessHandler('renderers', mergePlugins);\n  }\n}\n")),Object(i.a)("h2",{id:"config-files"},"Config files"),Object(i.a)("p",null,"A config file is a file that explicitly defines settings (key-value pairs) according to a defined\nstructure."),Object(i.a)("h3",{id:"file-patterns"},"File patterns"),Object(i.a)("p",null,"Config files are grouped into either the root or branch category. Root config files are located in a\n",Object(i.a)("inlineCode",{parentName:"p"},".config")," folder in the root of a project (denoted by the current working directory). Branch config\nfiles are located within folders (at any depth) below the root, and are prefixed with a leading dot\n(",Object(i.a)("inlineCode",{parentName:"p"},"."),")."),Object(i.a)("table",null,Object(i.a)("thead",{parentName:"table"},Object(i.a)("tr",{parentName:"thead"},Object(i.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Root"),Object(i.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Branch"))),Object(i.a)("tbody",{parentName:"table"},Object(i.a)("tr",{parentName:"tbody"},Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},".config/<name>.<ext>")),Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},".<name>.<ext>"))),Object(i.a)("tr",{parentName:"tbody"},Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},".config/<name>.<env>.<ext>")),Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},".<name>.<env>.<ext>"))))),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"<name>")," - Name passed to your ",Object(i.a)("inlineCode",{parentName:"li"},"Configuration")," instance (in camel case)."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"<env>")," - Current environment derived from ",Object(i.a)("inlineCode",{parentName:"li"},"NODE_ENV"),"."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"<ext>")," - File extension supported by the defined ",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"#finder-options"}),"loaders and extensions"),".")),Object(i.a)("h3",{id:"file-formats"},"File formats"),Object(i.a)("p",null,"Config files can be written in the formats below, and are listed in the order in which they're\nresolved (can customize with the ",Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"#finder-options"}),Object(i.a)("inlineCode",{parentName:"a"},"extensions"))," option)."),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},".js")," - JavaScript. Will load with ",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"https://nodejs.org/api/esm.html#esm_enabling"}),"CommonJS or ECMAScript modules")," depending on the\n",Object(i.a)("inlineCode",{parentName:"li"},"package.json")," ",Object(i.a)("inlineCode",{parentName:"li"},"type")," field. Defaults to CommonJS if not defined."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},".json"),", ",Object(i.a)("inlineCode",{parentName:"li"},".json5")," - JSON. Supports ",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"https://json5.org/"}),"JSON5")," for both extensions."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},".cjs")," - JavaScript using ",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"https://nodejs.org/api/esm.html#esm_enabling"}),"CommonJS")," (",Object(i.a)("inlineCode",{parentName:"li"},"require()"),"). ",Object(i.a)("em",{parentName:"li"},"Supported by all Node.js versions.")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},".mjs")," - JavaScript using ",Object(i.a)("a",Object(a.a)({parentName:"li"},{href:"https://nodejs.org/api/esm.html#esm_enabling"}),"ECMAScript modules")," (",Object(i.a)("inlineCode",{parentName:"li"},"import"),"/",Object(i.a)("inlineCode",{parentName:"li"},"export"),"). ",Object(i.a)("em",{parentName:"li"},"Requires Node.js\nv13.3+.")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},".ts")," - TypeScript. Will evaluate with either the ",Object(i.a)("inlineCode",{parentName:"li"},"typescript")," or ",Object(i.a)("inlineCode",{parentName:"li"},"@babel/core")," modules."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},".yaml"),", ",Object(i.a)("inlineCode",{parentName:"li"},".yml")," - YAML. ",Object(i.a)("em",{parentName:"li"},"Does not support multi-document."))),Object(i.a)("p",null,"Based on the file structure in the ",Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"#setup"}),"Setup")," section above, the config files can be\ndemonstrated as followed (excluding standard JavaScript since it's either CJS or ESM)."),Object(i.a)(l.a,{groupId:"file-format",defaultValue:"cjs",values:[{label:"JavaScript (CJS)",value:"cjs"},{label:"JavaScript (ESM)",value:"mjs"},{label:"TypeScript",value:"ts"},{label:"JSON",value:"json"},{label:"YAML",value:"yaml"}],mdxType:"Tabs"},Object(i.a)(c.a,{value:"cjs",mdxType:"TabItem"},Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n  ast: false,\n  debug: true,\n  exclude: ['**/node_modules/**'],\n  include: ['src/**', 'tests/**'],\n  options: { experimental: true },\n};\n"))),Object(i.a)(c.a,{value:"mjs",mdxType:"TabItem"},Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export default {\n  ast: false,\n  debug: true,\n  exclude: ['**/node_modules/**'],\n  include: ['src/**', 'tests/**'],\n  options: { experimental: true },\n};\n"))),Object(i.a)(c.a,{value:"ts",mdxType:"TabItem"},Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import type { ConfigFile } from './types';\n\nconst config: ConfigFile = {\n  ast: false,\n  debug: true,\n  exclude: ['**/node_modules/**'],\n  include: ['src/**', 'tests/**'],\n  options: { experimental: true },\n};\n\nexport default config;\n"))),Object(i.a)(c.a,{value:"json",mdxType:"TabItem"},Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "ast": false,\n  "debug": true,\n  "exclude": ["**/node_modules/**"],\n  "include": ["src/**", "tests/**"],\n  "options": { "experimental": true }\n}\n'))),Object(i.a)(c.a,{value:"yaml",mdxType:"TabItem"},Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"ast: false\ndebug: true\nexclude:\n  - '**/node_modules/**'\ninclude:\n  - 'src/**'\n  - 'tests/**'\noptions:\n  experimental: true\n")))),Object(i.a)("h3",{id:"loading-config-files"},"Loading config files"),Object(i.a)("p",null,"Config files can be found and loaded with either the ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#loadConfigFromRoot()")," or\n",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#loadConfigFromBranchToRoot()")," methods -- both of which return a processed config\nobject that abides this structure."),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"config")," (",Object(i.a)("inlineCode",{parentName:"li"},"Required<T>"),") - All found and loaded config file contents merged and processed into a\nsingle config object."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"files")," - List of config files found and loaded.",Object(i.a)("ul",{parentName:"li"},Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"config")," (",Object(i.a)("inlineCode",{parentName:"li"},"Partial<T>"),") - Config content of the file."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"path")," (",Object(i.a)("inlineCode",{parentName:"li"},"Path"),") - Absolute path of the file."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"source")," (",Object(i.a)("inlineCode",{parentName:"li"},"root | branch | overridden | extended"),") - The type of file.")))),Object(i.a)("h4",{id:"lookup-resolution"},"Lookup resolution"),Object(i.a)("p",null,"When the finder traverses through the file system and attempts to resolve config files within\neach/target folder, it does so using the lookup algorithm demonstrated below. Let's assume the\nfollowing:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"The config file name is ",Object(i.a)("inlineCode",{parentName:"li"},"boost"),"."),Object(i.a)("li",{parentName:"ul"},"All file formats are supported, in their default lookup order (js, json, cjs, mjs, ts, json5,\nyaml, yml)."),Object(i.a)("li",{parentName:"ul"},"The current environment is ",Object(i.a)("inlineCode",{parentName:"li"},"development")," (the value of ",Object(i.a)("inlineCode",{parentName:"li"},"NODE_ENV"),").")),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{}),"boost.js\nboost.development.js\nboost.json\nboost.development.json\nboost.cjs\nboost.development.cjs\nboost.mjs\nboost.development.mjs\nboost.ts\nboost.development.ts\nboost.json5\nboost.development.json5\nboost.yaml\nboost.development.yaml\nboost.yml\nboost.development.yml\n")),Object(i.a)("p",null,"For each file format, we attempt to find the base config file, and an environment config file (if\n",Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"#finder-options"}),Object(i.a)("inlineCode",{parentName:"a"},"includeEnv"))," is true). This allows for higher precendence config per environment.\nOnce a file is found, the lookup process is aborted, and the confg is returned."),Object(i.a)("blockquote",null,Object(i.a)("p",{parentName:"blockquote"},"Only 1 file format will be used per folder. Multiple file formats is not supported.")),Object(i.a)("h4",{id:"from-root"},"From root"),Object(i.a)("p",null,"The ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#loadConfigFromRoot()")," will load the config file found in the root ",Object(i.a)("inlineCode",{parentName:"p"},".config"),"\nfolder (typically 1 file). If no root path is provided, it defaults to process.cwd()."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="root/.config/boost.json"',title:'"root/.config/boost.json"'}),'{\n  "debug": true\n}\n')),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const { config } = await manager.loadConfigFromRoot('/root');\n\n/*\n{\n  config: { debug: true },\n  files: [\n    {\n      config: { debug: true },\n      path: new Path('/root/.config/boost.json'),\n      source: 'root',\n    },\n  ],\n}\n*/\n")),Object(i.a)("blockquote",null,Object(i.a)("p",{parentName:"blockquote"},"Why are root config files located within a ",Object(i.a)("inlineCode",{parentName:"p"},".config")," folder? In an effort to reduce the root\nconfig and dotfile churn that many projects suffer from, we're trying to push forward an idiomatic\nstandard that we hope many others will follow.")),Object(i.a)("h4",{id:"from-branch"},"From branch"),Object(i.a)("p",null,"The ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#loadConfigFromBranchToRoot()")," method will load a config file from each folder\nwhile traversing upwards from the branch folder to the root folder. The found list is returned in\nreverse order so that the deepest branch can be used to overwrite the previous branch (or root)."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="root/modules/features/.boost.mjs"',title:'"root/modules/features/.boost.mjs"'}),"export default {\n  ast: true,\n};\n")),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="root/modules/.boost.yaml"',title:'"root/modules/.boost.yaml"'}),"options:\n  experimental: true\n")),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="root/.config/boost.json"',title:'"root/.config/boost.json"'}),'{\n  "debug": true\n}\n')),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const { config } = await manager.loadConfigFromBranchToRoot('/root/modules/features');\n\n/*\n{\n  config: {\n    ast: true,\n    debug: true,\n    options: {\n      experimental: true,\n    },\n  },\n  files: [\n    {\n      config: { debug: true },\n      path: new Path('/root/.config/boost.json'),\n      source: 'root',\n    },\n    {\n      config: {\n        options: {\n          experimental: true,\n        },\n      },\n      path: new Path('/root/modules/.boost.yaml'),\n      source: 'branch',\n    },\n    {\n      config: { ast: true },\n      path: new Path('/root/modules/features/.boost.mjs'),\n      source: 'branch',\n    },\n  ],\n}\n*/\n")),Object(i.a)("h3",{id:"enable-extending"},"Enable extending"),Object(i.a)("p",null,"Config extending enables consumers of your project to extend and merge with external config files\nusing file system paths or ",Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"#presets"}),"Node.js modules"),", with the current config file taking\nprecedence. With that being said, extending is ",Object(i.a)("em",{parentName:"p"},"not")," enabled by default and must be configured for\nuse. To enable, define the ",Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"#finder-options"}),Object(i.a)("inlineCode",{parentName:"a"},"extendsSetting"))," option with the name of a setting in\nwhich extending would be configured."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    this.configureFinder({\n      extendsSetting: 'extend',\n    });\n  }\n}\n")),Object(i.a)("p",null,"Consumers may now extend external config files by defining a string or an array of strings for\n",Object(i.a)("inlineCode",{parentName:"p"},"extend")," (name derived from the example above)."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export default {\n  extend: ['./some/relative/path.js', 'npm-module'],\n  debug: false,\n};\n")),Object(i.a)("blockquote",null,Object(i.a)("p",{parentName:"blockquote"},"File paths are relative to the file it's configured in.")),Object(i.a)("h4",{id:"presets"},"Presets"),Object(i.a)("p",null,"To extend from a Node.js module, we must use a preset. A preset is a\n",Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"#file-formats"}),"JavaScript config file")," located in the module root, named in the format of\n",Object(i.a)("inlineCode",{parentName:"p"},"<name>.preset.js"),"."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="npm-module/boost.preset.js"',title:'"npm-module/boost.preset.js"'}),"module.exports = {\n  exclude: ['**/node_modules'],\n};\n")),Object(i.a)("blockquote",null,Object(i.a)("p",{parentName:"blockquote"},"Since the preset is JavaScript, it can be written in either CommonJS or ECMAScript format,\nassuming the ",Object(i.a)("inlineCode",{parentName:"p"},"type")," field has been set in ",Object(i.a)("inlineCode",{parentName:"p"},"package.json"),".")),Object(i.a)("h3",{id:"enable-overrides"},"Enable overrides"),Object(i.a)("p",null,"Config overrides enables consumers of your project to define granular settings based on file path\nmatching; settings defined in this fashion would override their base settings. With that being said,\noverrides are ",Object(i.a)("em",{parentName:"p"},"not")," enabled by default and must be configured for use. To enable, define the\n",Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"#finder-options"}),Object(i.a)("inlineCode",{parentName:"a"},"overridesSetting"))," option with the name of a setting in which overrides would be\nconfigured."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Manager extends Configuration<ConfigFile> {\n  // ...\n\n  bootstrap() {\n    this.configureFinder({\n      overridesSetting: 'override',\n    });\n  }\n}\n")),Object(i.a)("blockquote",null,Object(i.a)("p",{parentName:"blockquote"},"Overrides are extracted ",Object(i.a)("em",{parentName:"p"},"before")," configurations are processed, so a process handler is not\nrequired.")),Object(i.a)("p",null,"Consumers may now define overrides in their config file by passing a list of items to the ",Object(i.a)("inlineCode",{parentName:"p"},"override"),"\nsetting (name derived from the example above). Each item must abide the following structure:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"settings")," (",Object(i.a)("inlineCode",{parentName:"li"},"Partial<T>"),") - Settings configured for this specific override. ",Object(i.a)("em",{parentName:"li"},"(Required)")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"include")," (",Object(i.a)("inlineCode",{parentName:"li"},"string | string[]"),") - File path patterns/globs to match against. ",Object(i.a)("em",{parentName:"li"},"(Required)")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"exclude")," (",Object(i.a)("inlineCode",{parentName:"li"},"string | string[]"),") - File path patterns/globs to ignore.")),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export default {\n  debug: false,\n  override: [\n    {\n      include: '*.test.ts',\n      settings: {\n        debug: true,\n      },\n    },\n  ],\n};\n")),Object(i.a)("h2",{id:"ignore-files"},"Ignore files"),Object(i.a)("p",null,"An ignore file is a standard text file that denotes files and folders to ignore\n(filter/exclude/etc), within the current directory, using matching globs and patterns."),Object(i.a)("h3",{id:"file-patterns-1"},"File patterns"),Object(i.a)("p",null,"Both root and branch level ignore files use the same file naming scheme. The file is prefixed with a\nleading dot (",Object(i.a)("inlineCode",{parentName:"p"},"."),"), followed by the name passed to your ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration")," instance (in camel case), and\nsuffixed with ",Object(i.a)("inlineCode",{parentName:"p"},"ignore"),"."),Object(i.a)("table",null,Object(i.a)("thead",{parentName:"table"},Object(i.a)("tr",{parentName:"thead"},Object(i.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Root"),Object(i.a)("th",Object(a.a)({parentName:"tr"},{align:null}),"Branch"))),Object(i.a)("tbody",{parentName:"table"},Object(i.a)("tr",{parentName:"tbody"},Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},".<name>ignore")),Object(i.a)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.a)("inlineCode",{parentName:"td"},".<name>ignore"))))),Object(i.a)("blockquote",null,Object(i.a)("p",{parentName:"blockquote"},"The root ignore file is not located within the ",Object(i.a)("inlineCode",{parentName:"p"},".config")," folder as ignore paths/patterns/globs\nmust be relative to the current directory.")),Object(i.a)("h3",{id:"loading-ignore-files"},"Loading ignore files"),Object(i.a)("p",null,"Ignore files can be found and loaded with either the ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#loadIgnoreFromRoot()")," or\n",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#loadIgnoreFromBranchToRoot()")," methods -- both of which return a list of ignore\nmetadata that abides this structure."),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"ignore")," (",Object(i.a)("inlineCode",{parentName:"li"},"string[]"),") - List of all ignore patterns within the file (split on ",Object(i.a)("inlineCode",{parentName:"li"},"\\n"),")."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"path")," (",Object(i.a)("inlineCode",{parentName:"li"},"Path"),") - Absolute path of the file."),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"source")," (",Object(i.a)("inlineCode",{parentName:"li"},"root | branch"),") - Whether the file is a root or branch file.")),Object(i.a)("p",null,"To demonstrate this, let's assume the following file system."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{}),"root/\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 features/\n\u2502   \u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u2502   \u2514\u2500\u2500 .boostignore\n\u2502   \u251c\u2500\u2500 foo.ts\n\u2502   \u251c\u2500\u2500 bar.ts\n\u2502   \u2514\u2500\u2500 baz.ts\n\u2514\u2500\u2500 .boostignore\n")),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash",metastring:'title="root/modules/features/.boostignore"',title:'"root/modules/features/.boostignore"'}),"build/\n")),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash",metastring:'title="root/.boostignore"',title:'"root/.boostignore"'}),"*.log\n*.lock\n")),Object(i.a)("h4",{id:"from-root-1"},"From root"),Object(i.a)("p",null,"The ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#loadIgnoreFromRoot()")," will load the ignore file found in the root folder\n(typically 1 file). If no root path is provided, it defaults to ",Object(i.a)("inlineCode",{parentName:"p"},"process.cwd()"),"."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const list = await manager.loadIgnoreFromRoot('/root');\n\n/*\n[\n  {\n    ignore: ['*.log', '*.lock'],\n    path: new Path('/root/.boostignore'),\n    source: 'root',\n  },\n]\n*/\n")),Object(i.a)("h4",{id:"from-branch-1"},"From branch"),Object(i.a)("p",null,"The ",Object(i.a)("inlineCode",{parentName:"p"},"Configuration#loadIgnoreFromBranchToRoot()")," method will load an ignore file from each folder\nwhile traversing upwards from the branch folder to the root folder. The found list is returned in\nreverse order so that the deepest branch can be used to overwrite the previous branch (or root)."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const list = await manager.loadIgnoreFromBranchToRoot('/root/modules/features');\n\n/*\n[\n  {\n    ignore: ['*.log', '*.lock'],\n    path: new Path('/root'),\n    source: 'root',\n  },\n  {\n    ignore: ['build/'],\n    path: new Path('/root/modules/features/.boostignore'),\n    source: 'branch',\n  },\n]\n*/\n")))}u.isMDXComponent=!0},86:function(e,n,t){"use strict";t.d(n,"a",(function(){return u}));var a=t(0),o=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),d=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=d(t),u=a,m=b["".concat(r,".").concat(u)]||b[u]||p[u]||i;return t?o.a.createElement(m,l(l({ref:n},s),{},{components:t})):o.a.createElement(m,l({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<i;s++)r[s]=t[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},87:function(e,n,t){"use strict";function a(e){var n,t,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(o&&(o+=" "),o+=t);else for(n in e)e[n]&&(o&&(o+=" "),o+=n);return o}n.a=function(){for(var e,n,t=0,o="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(o&&(o+=" "),o+=n);return o}},88:function(e,n,t){"use strict";var a=t(0),o=Object(a.createContext)(void 0);n.a=o},89:function(e,n,t){"use strict";var a=t(0),o=t(88);n.a=function(){var e=Object(a.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},90:function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));var a=t(0),o=t.n(a);function i(e){var n=e.children,t=e.type;return o.a.createElement("span",{className:"badge badge--"+t},n)}},91:function(e,n,t){"use strict";var a=t(0),o=t.n(a),i=t(89),r=t(87),l=t(48),c=t.n(l),s=37,d=39;n.a=function(e){var n=e.block,t=e.children,l=e.defaultValue,p=e.values,b=e.groupId,u=Object(i.a)(),m=u.tabGroupChoices,f=u.setTabGroupChoices,g=Object(a.useState)(l),j=g[0],O=g[1],h=Object(a.useState)(!1),N=h[0],C=h[1];if(null!=b){var v=m[b];null!=v&&v!==j&&p.some((function(e){return e.value===v}))&&O(v)}var y=function(e){O(e),null!=b&&f(b,e)},w=[],x=function(e){e.metaKey||e.altKey||e.ctrlKey||C(!0)},T=function(){C(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",x),window.addEventListener("mousedown",T)}),[]),o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":n})},p.map((function(e){var n=e.value,t=e.label;return o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===n,className:Object(r.a)("tabs__item",c.a.tabItem,{"tabs__item--active":j===n}),style:N?{}:{outline:"none"},key:n,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case d:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case s:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(w,e.target,e),x(e)},onFocus:function(){return y(n)},onClick:function(){y(n),C(!1)},onPointerDown:function(){return C(!1)}},t)}))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(t).filter((function(e){return e.props.value===j}))[0]))}},92:function(e,n,t){"use strict";var a=t(0),o=t.n(a);n.a=function(e){return o.a.createElement("div",null,e.children)}},93:function(e,n,t){"use strict";t.d(n,"a",(function(){return s}));var a=t(0),o=t.n(a),i=t(90),r=t(47),l=t.n(r);function c(e){var n=e.children;return o.a.createElement("span",{className:l.a.badgeGroup},n)}function s(e){var n=e.backend,t=e.frontend,a=e.tooling;return o.a.createElement(c,null,n&&o.a.createElement(i.a,{type:"warning"},"Backend"),t&&o.a.createElement(i.a,{type:"success"},"Frontend"),a&&o.a.createElement(i.a,{type:"primary"},"Tooling"))}}}]);