(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{77:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return c})),n.d(a,"metadata",(function(){return p})),n.d(a,"rightToc",(function(){return u})),n.d(a,"default",(function(){return m}));var t=n(2),r=n(6),o=(n(0),n(86)),i=n(93),s=n(91),l=n(92),c={title:"Arguments"},p={unversionedId:"args",id:"args",isDocsHomePage:!1,title:"Arguments",description:"A type-safe and convention based argument parsing library, with strict validation checks.",source:"@site/docs/args.mdx",slug:"/args",permalink:"/docs/args",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/args.mdx",version:"current",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/"},next:{title:"CLIs",permalink:"/docs/cli"}},u=[{value:"Installation",id:"installation",children:[]},{value:"Parsing",id:"parsing",children:[{value:"Contextual parsing",id:"contextual-parsing",children:[]}]},{value:"Commands",id:"commands",children:[]},{value:"Options",id:"options",children:[{value:"Single value",id:"single-value",children:[]},{value:"Multiple values",id:"multiple-values",children:[]},{value:"Unknown options",id:"unknown-options",children:[]}]},{value:"Flags",id:"flags",children:[]},{value:"Params",id:"params",children:[{value:"Variadic params",id:"variadic-params",children:[]}]},{value:"Rest args",id:"rest-args",children:[]},{value:"Advanced",id:"advanced",children:[{value:"Short option groups",id:"short-option-groups",children:[]},{value:"Counter options",id:"counter-options",children:[]},{value:"Choice options",id:"choice-options",children:[]},{value:"Arity requirements",id:"arity-requirements",children:[]},{value:"Command &amp; option categories",id:"command--option-categories",children:[]},{value:"Loose mode",id:"loose-mode",children:[]}]},{value:"Type casting",id:"type-casting",children:[]},{value:"Validation checks",id:"validation-checks",children:[]},{value:"Formatting args",id:"formatting-args",children:[]}],d={rightToc:u};function m(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(o.a)("wrapper",Object(t.a)({},d,n,{components:a,mdxType:"MDXLayout"}),Object(o.a)(i.a,{tooling:!0,mdxType:"EnvBadges"}),Object(o.a)("p",null,"A type-safe and convention based argument parsing library, with strict validation checks."),Object(o.a)("h2",{id:"installation"},"Installation"),Object(o.a)(s.a,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},Object(o.a)(l.a,{value:"yarn",mdxType:"TabItem"},Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @boost/args\n"))),Object(o.a)(l.a,{value:"npm",mdxType:"TabItem"},Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"npm install @boost/args\n")))),Object(o.a)("h2",{id:"parsing"},"Parsing"),Object(o.a)("p",null,"This library is strict parser for command line arguments, primarily ",Object(o.a)("inlineCode",{parentName:"p"},"process.argv")," in Node.js, that\nsupports ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#commands"}),"commands"),", ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#options"}),"options"),", ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#flags"}),"flags"),", ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#params"}),"params"),", and\n",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#advanced-features"}),"much more"),"! It is ",Object(o.a)("em",{parentName:"p"},"not")," a command line interface or application but provides\nthe building blocks for such functionality."),Object(o.a)("p",null,"Parsing arguments is accomplished with the ",Object(o.a)("inlineCode",{parentName:"p"},"parse()")," function, which requires a list of strings\n(arguments also known as ",Object(o.a)("inlineCode",{parentName:"p"},"argv"),"), and a settings object to control whats supported. It also utilizes\nTypeScript generics to type options and params respectively."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"import { parse } from '@boost/args';\n\n// Remove node binary and script\nconst argv = process.argv.slice(2);\n\n// Parse argv into a consumable object\nconst { command, errors, options, params, rest } = parse<{ help: boolean }, [string]>(argv, {\n  options: {\n    help: {\n      description: 'Show the help menu',\n      short: 'H',\n      type: 'boolean',\n    },\n  },\n  params: [\n    {\n      description: 'File path to source directory',\n      label: 'Source',\n      required: true,\n      type: 'string',\n    },\n  ],\n});\n")),Object(o.a)("p",null,"A command line breaks down to the following parts. This terminology pertains to Boost but is based\non common patterns seen throughout the community."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{}),"\u250c 1 \u2510 \u250c 2 \u2510 \u250c\u2500\u2500\u2500 3 \u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500 4 \u2500\u2500\u2500\u2510 \u250c\u2500\u2500 5 \u2500\u2510 \u250c 6 \u2510 \u250c\u2500\u2500\u2500 7 \u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500 8 \u2500\u2500\u2500\u2500\u2510\nboost build --key value --key=value -flag -F -aBDc foo bar baz -- --foo bar -B\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 9 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),Object(o.a)("ol",null,Object(o.a)("li",{parentName:"ol"},"Binary that was executed. Also known as a script, and is never passed to ",Object(o.a)("inlineCode",{parentName:"li"},"argv"),"."),Object(o.a)("li",{parentName:"ol"},Object(o.a)("a",Object(t.a)({parentName:"li"},{href:"#commands"}),"Command")," being executed. Should always be first."),Object(o.a)("li",{parentName:"ol"},Object(o.a)("a",Object(t.a)({parentName:"li"},{href:"#options"}),"Option")," with a value."),Object(o.a)("li",{parentName:"ol"},Object(o.a)("a",Object(t.a)({parentName:"li"},{href:"#options"}),"Option")," with a value using an equals sign."),Object(o.a)("li",{parentName:"ol"},Object(o.a)("a",Object(t.a)({parentName:"li"},{href:"#flags"}),"Flag")," in both long and short form."),Object(o.a)("li",{parentName:"ol"},"A group of ",Object(o.a)("a",Object(t.a)({parentName:"li"},{href:"#short-option-groups"}),"short options"),", most commonly used by flags."),Object(o.a)("li",{parentName:"ol"},Object(o.a)("a",Object(t.a)({parentName:"li"},{href:"#params"}),"Parameters")," passed to a command."),Object(o.a)("li",{parentName:"ol"},Object(o.a)("a",Object(t.a)({parentName:"li"},{href:"#rest-args"}),"Rest")," arguments that are not parsed. Always appear after a ",Object(o.a)("inlineCode",{parentName:"li"},"--"),"."),Object(o.a)("li",{parentName:"ol"},"The command line.")),Object(o.a)("h3",{id:"contextual-parsing"},"Contextual parsing"),Object(o.a)("p",null,"While the above is straight forward (I hope so), it doesn't leave much room for customization. What\nif we want different options based on the command passed? Or different params? Or how to handle\nglobal options? So on and so forth."),Object(o.a)("p",null,"To provide this functionality, the ",Object(o.a)("inlineCode",{parentName:"p"},"parseInContext()")," function can be used. Like ",Object(o.a)("inlineCode",{parentName:"p"},"parse()"),", this\nfunction requires a list of strings (",Object(o.a)("inlineCode",{parentName:"p"},"argv"),"), but unlike, it requires a factory function that\nreturns contextual parser options."),Object(o.a)("p",null,"The parser will loop through each argument, executing the factory function with the argument and\nargv list, until a match is found and options were returned."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"import { parseInContext } from '@boost/args';\n\n// Remove node binary and script\nconst argv = process.argv.slice(2);\n\n// Parse argv into a consumable object\nconst { command, errors, options, params, rest } = parseInContext(argv, (arg) => {\n  // Build command found, define build specific options\n  if (arg === 'build') {\n    return {\n      command: ['build'],\n      options: {\n        dest: {\n          description: 'Destination path',\n          type: 'string',\n        },\n      },\n    };\n  }\n\n  // Install command found, require params\n  if (arg === 'install') {\n    return {\n      command: ['install'],\n      params: [\n        {\n          description: 'Package name(s)',\n          type: 'string',\n          required: true,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n});\n")),Object(o.a)("h2",{id:"commands"},"Commands"),Object(o.a)("p",null,"Commands are a feature that allow for branching logic, full isolation, and distinct code paths. That\nbeing said, the parser does not handle this functionality, as that's a CLI/programs job. The parser\nhowever, will detect a command, and sub-commands, and validate them accordingly."),Object(o.a)("p",null,"A command in Boost should be the first argument passed, before ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#options"}),"options"),", and definitely\nbefore ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#params"}),"params"),". They support numbers, letters, and dashes, with sub-commands being\nseparated by a colon (",Object(o.a)("inlineCode",{parentName:"p"},":"),")."),Object(o.a)("p",null,"To detect and parse commands, pass a list of all command and sub-command names to the ",Object(o.a)("inlineCode",{parentName:"p"},"commands"),"\nsetting, or use a custom function to manually do the checks. The detected command will be returned\nas an array, split on ",Object(o.a)("inlineCode",{parentName:"p"},":"),"."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const args = parse<{}>(argv, {\n  commands: ['build', 'build:esm', 'build:cjs', 'install'],\n  // OR\n  commands(arg) {\n    return arg === 'build'; // etc\n  },\n});\n\n// build:esm src/ --out lib/\nargs.command; // ['build', 'esm']\nargs.options; // { out: 'lib/' }\nargs.params; // ['src/']\n")),Object(o.a)("p",null,"If an argument is not found in the commands list or function, it will be treated as a parameter."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"// build:umd src/ --out lib/\nargs.command; // []\nargs.options; // { out: 'lib/' }\nargs.params; // ['build:umd', 'src/']\n")),Object(o.a)("h2",{id:"options"},"Options"),Object(o.a)("p",null,"An option is an optional argument that accepts a single value or multiple values. It has 2 forms,\nthe first being the default form, also known as a long option, which starts with ",Object(o.a)("inlineCode",{parentName:"p"},"--")," and is\nfollowed by a word or phrase (either in camel or kebab case). For example, ",Object(o.a)("inlineCode",{parentName:"p"},"--log"),", ",Object(o.a)("inlineCode",{parentName:"p"},"--log-level"),",\nor ",Object(o.a)("inlineCode",{parentName:"p"},"--logLevel")," (preferred)."),Object(o.a)("p",null,"The second form is known as the short form and is represented by a single alpha character (either\nlower or uppercase) prefixed with ",Object(o.a)("inlineCode",{parentName:"p"},"-"),", for example, ",Object(o.a)("inlineCode",{parentName:"p"},"-l")," or ",Object(o.a)("inlineCode",{parentName:"p"},"-L"),". The short option can be enabled\nwith the ",Object(o.a)("inlineCode",{parentName:"p"},"short")," setting."),Object(o.a)("p",null,"For options to parse correctly, they must be defined using a settings object. Each option supports\nthe following settings:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"type")," (",Object(o.a)("inlineCode",{parentName:"li"},"'boolean' | 'number' | 'string'"),") - Expected type of the provided value. When a value is\ncaptured from the command line, it will be type casted. ",Object(o.a)("em",{parentName:"li"},"(Required)")),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"category")," (",Object(o.a)("inlineCode",{parentName:"li"},"string"),") - A unique key to group options within categories. Couples with the\n",Object(o.a)("inlineCode",{parentName:"li"},"Category")," type."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"description")," (",Object(o.a)("inlineCode",{parentName:"li"},"string"),") - A description of what the option does. Primarily used in interface\noutput. ",Object(o.a)("em",{parentName:"li"},"(Required)")),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"default")," (",Object(o.a)("inlineCode",{parentName:"li"},"*"),") - The default value if option not provided on the command line. The value's type\nis dependent on the ",Object(o.a)("inlineCode",{parentName:"li"},"type")," and ",Object(o.a)("inlineCode",{parentName:"li"},"multiple")," settings. Furthermore, this value defaults to the\nfollowing if not defined.",Object(o.a)("ul",{parentName:"li"},Object(o.a)("li",{parentName:"ul"},"A zero (",Object(o.a)("inlineCode",{parentName:"li"},"0"),") when type is ",Object(o.a)("inlineCode",{parentName:"li"},"number"),"."),Object(o.a)("li",{parentName:"ul"},"An empty string (",Object(o.a)("inlineCode",{parentName:"li"},"''"),") when type is ",Object(o.a)("inlineCode",{parentName:"li"},"string"),"."),Object(o.a)("li",{parentName:"ul"},"And ",Object(o.a)("inlineCode",{parentName:"li"},"false")," when type is ",Object(o.a)("inlineCode",{parentName:"li"},"boolean"),"."))),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"format")," (",Object(o.a)("inlineCode",{parentName:"li"},"(value: T) => T"),") - An optional function to format the value after parsing. Must return\nthe same type."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"hidden")," (",Object(o.a)("inlineCode",{parentName:"li"},"boolean"),") - Hide the option from interface output. Defaults to ",Object(o.a)("inlineCode",{parentName:"li"},"false"),"."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"short")," (",Object(o.a)("inlineCode",{parentName:"li"},"string"),") - Single character used as a the short option alias."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"usage")," (",Object(o.a)("inlineCode",{parentName:"li"},"string"),") - Example instructions on how to use the option."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"validate")," (",Object(o.a)("inlineCode",{parentName:"li"},"(value: T) => void"),") - An optional function to validate the provided value.")),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const argv = ['--logLevel=2'];\nconst args = parse<{ logLevel: number }>(argv, {\n  options: {\n    logLevel: {\n      description: 'Increase log output verbosity',\n      type: 'number',\n      short: 'L',\n      validate(value) {\n        if (value < 0 || value > 10) {\n          throw new Error('Log level must be between 0 and 10.');\n        }\n      },\n    },\n  },\n});\n\nargs.options.logLevel; // 2\n")),Object(o.a)("p",null,"The name of options used on the command line are derived from the ",Object(o.a)("inlineCode",{parentName:"p"},"options")," keys (above), which are\npreferred to be camel case. Even though they are defined as camel case, kebab case variants are\nsupported on the command line."),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"When using TypeScript, a mapping of option names to expected types is defined as the 1st generic\nslot of ",Object(o.a)("inlineCode",{parentName:"p"},"parse()"),". If not provided, it defaults to ",Object(o.a)("inlineCode",{parentName:"p"},"object"),". It's highly encouraged to type\noptions correctly.")),Object(o.a)("h3",{id:"single-value"},"Single value"),Object(o.a)("p",null,"A value can be passed as either an additional argument separated by a space, like ",Object(o.a)("inlineCode",{parentName:"p"},"--option value"),"\n(preferred), or with an equals sign and no space (also known as an inline value), like\n",Object(o.a)("inlineCode",{parentName:"p"},"--option=value"),"."),Object(o.a)("p",null,"If you are passing a string that contains spaces or special characters, you must wrap the value in\ndouble quotes. For example, ",Object(o.a)("inlineCode",{parentName:"p"},'--option "long value"')," or ",Object(o.a)("inlineCode",{parentName:"p"},'--option="long value"'),"."),Object(o.a)("h3",{id:"multiple-values"},"Multiple values"),Object(o.a)("p",null,"To pass multiple values for an option, the ",Object(o.a)("inlineCode",{parentName:"p"},"multiple")," setting must be enabled (numbers and strings\nonly), and if using TypeScript, the option type must be a typed array."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const args = parse<{ files: string[] }>(argv, {\n  options: {\n    files: {\n      description: 'List of files to process',\n      multiple: true,\n      type: 'string',\n    },\n  },\n});\n")),Object(o.a)("p",null,"Like single values, there are 2 patterns for passing multiple values, but the semantics are slightly\ndifferent. When using inlines values (the equals sign), the option must be repeated for each value,\nlike ",Object(o.a)("inlineCode",{parentName:"p"},"--option=foo --option=bar --option=baz"),"."),Object(o.a)("p",null,"Otherwise, each value can be passed as a standalone argument, like ",Object(o.a)("inlineCode",{parentName:"p"},"--option foo bar baz"),". When\nusing this approach, all values will be captured until another option is passed, or the end of the\nlist is met."),Object(o.a)("h3",{id:"unknown-options"},"Unknown options"),Object(o.a)("p",null,"If an option is passed to ",Object(o.a)("inlineCode",{parentName:"p"},"parse()")," that is not configured in the ",Object(o.a)("inlineCode",{parentName:"p"},"options")," settings object, it will\nbe ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#validation-checks"}),"logged as a parse error")," unless the ",Object(o.a)("inlineCode",{parentName:"p"},"unknown")," setting is set to true. When\ntrue, all unknown options can be found in the result's ",Object(o.a)("inlineCode",{parentName:"p"},"unknown")," object and not in ",Object(o.a)("inlineCode",{parentName:"p"},"options"),", as a\nmeans to avoid collision."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const argv = ['--legit', 'foo', '--unknown', 'bar'];\nconst args = parse<{ legit: string }>(argv, {\n  options: {\n    legit: {\n      description: 'A legitimate option',\n      type: 'string',\n    },\n  },\n  unknown: true,\n});\n\nargs.options; // { legit: 'foo' }\nargs.unknown; // { unknown: 'bar' }\n")),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"Unknown short options will still throw an error, as they require a parent long option to\nreference.")),Object(o.a)("h2",{id:"flags"},"Flags"),Object(o.a)("p",null,"A flag is a special type of ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#options"}),"option")," that accepts no value, is always boolean, and\nrepresents a binary on-off switch. When the flag is passed on the command line (without a value),\nfor example, ",Object(o.a)("inlineCode",{parentName:"p"},"--color"),", the value is assumed to be ",Object(o.a)("inlineCode",{parentName:"p"},"true"),". To negate a truthy value and pass a falsy\none, prefix the option with ",Object(o.a)("inlineCode",{parentName:"p"},"no-"),", for example, ",Object(o.a)("inlineCode",{parentName:"p"},"--no-color"),"."),Object(o.a)("p",null,"Each flag supports the ",Object(o.a)("inlineCode",{parentName:"p"},"type")," (required), ",Object(o.a)("inlineCode",{parentName:"p"},"description")," (required), ",Object(o.a)("inlineCode",{parentName:"p"},"default")," (is ",Object(o.a)("inlineCode",{parentName:"p"},"false")," if not\nprovided), ",Object(o.a)("inlineCode",{parentName:"p"},"hidden"),", ",Object(o.a)("inlineCode",{parentName:"p"},"usage"),", and ",Object(o.a)("inlineCode",{parentName:"p"},"short")," settings mentioned above."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const argv = ['--color'];\nconst args = parse<{ color: boolean }>(argv, {\n  options: {\n    color: {\n      description: 'Enable colored output',\n      type: 'boolean',\n    },\n  },\n});\n\nargs.options.color; // true\n")),Object(o.a)("h2",{id:"params"},"Params"),Object(o.a)("p",null,"Parameters (or positional arguments) are standalone arguments that are treated as values, and are\nparsed in a strict order. They're an important mechanism that serves 2 purposes."),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"They're a catch all bucket for arguments that ",Object(o.a)("em",{parentName:"li"},"are not")," a command, option, or flag, nor do they\nappear after a rest ",Object(o.a)("inlineCode",{parentName:"li"},"--")," delimiter."),Object(o.a)("li",{parentName:"ul"},"They're tightly coupled to commands (when being used). Think of a command as a function, where the\nparams are the arguments that are passed to the function.")),Object(o.a)("p",null,"Like ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#options"}),"options"),", params can be configured, but unlike options, the settings are not\nrequired. When a setting is not defined, a param is treated as a string. Params support similar\nsettings as options, with the addition of:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"default"),", ",Object(o.a)("inlineCode",{parentName:"li"},"deprecated"),", ",Object(o.a)("inlineCode",{parentName:"li"},"description"),", ",Object(o.a)("inlineCode",{parentName:"li"},"hidden"),", ",Object(o.a)("inlineCode",{parentName:"li"},"type"),", ",Object(o.a)("inlineCode",{parentName:"li"},"validate")," - Same setting as options."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"label")," (",Object(o.a)("inlineCode",{parentName:"li"},"string"),") - Informational label to display in interface output. ",Object(o.a)("em",{parentName:"li"},"(Required)")),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"required")," (",Object(o.a)("inlineCode",{parentName:"li"},"boolean"),") - Whether the param is required or not. If required and not passed, the\nparser will throw an error. Defaults to ",Object(o.a)("inlineCode",{parentName:"li"},"false"),".")),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const argv = ['off', 'value', '123.45'];\nconst args = parse<{}, [boolean, string, number]>(argv, {\n  params: [\n    {\n      description: 'First parameter',\n      label: 'First',\n      type: 'boolean',\n      required: true,\n    },\n    { description: 'Second parameter', label: 'Second', type: 'string' },\n    { description: 'Third parameter', label: 'Third', type: 'number' },\n  ],\n});\n\nargs.params; // [false, 'value', 123.45]\n")),Object(o.a)("p",null,"Since parameters are order based and not named based, the ",Object(o.a)("inlineCode",{parentName:"p"},"params")," setting is an array, with each\nitem configuring the corresponding position/index (hence the name positional arguments)."),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"When using TypeScript, the expected type of each param is defined as a tuple in the 2nd generic\nslot of ",Object(o.a)("inlineCode",{parentName:"p"},"parse()"),". If not provided, it defaults to ",Object(o.a)("inlineCode",{parentName:"p"},"string[]"),".")),Object(o.a)("h3",{id:"variadic-params"},"Variadic params"),Object(o.a)("p",null,"By default the parser enables variadic params, which means that any argument that does not match a\ncommand or option, is considered a param (string only), and is appended to the end of the params\nlist. This also applies to non-configured params."),Object(o.a)("p",null,'As mentioned in the previous section, params are a "catch all bucket", but this only applies when\nthe parser allows variadic params. To disable this functionality, set ',Object(o.a)("inlineCode",{parentName:"p"},"variadic")," to false, which\nwill throw an error on any param that is not explicitly configured. Both of these scenarios are\ndemonstrated below."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"// Variadic, appends all params\nconst argv = ['foo', 'bar', 'baz'];\nconst args = parse<{}, [string, string, string]>(argv, {\n  params: [\n    {\n      description: 'First parameter',\n      label: 'First',\n      type: 'string',\n      required: true,\n    },\n  ],\n});\n\nargs.params; // ['foo', 'bar', 'baz']\n")),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"// Not variadic, will error for non-configured params\nconst argv = ['foo', 'bar', 'baz'];\nconst args = parse<{}, [string]>(argv, {\n  params: [\n    {\n      description: 'First parameter',\n      label: 'First',\n      type: 'string',\n      required: true,\n    },\n  ],\n  variadic: false,\n});\n\nargs.params; // ['foo']\n")),Object(o.a)("h2",{id:"rest-args"},"Rest args"),Object(o.a)("p",null,"Rest arguments are rather simple, as they're everything after a standalone ",Object(o.a)("inlineCode",{parentName:"p"},"--")," argument (also known\nas ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"https://unix.stackexchange.com/questions/147143/when-and-how-was-the-double-dash-introduced-as-an-end-of-options-delimiter"}),"end of options delimiter"),"). They are ",Object(o.a)("em",{parentName:"p"},"not")," parsed and are usually passed to\nsubsequent scripts or commands."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const args = parse(['foo', 'bar', '--', 'baz']);\n\nargs.params; // ['foo', 'bar']\nargs.rest; // ['baz']\n")),Object(o.a)("h2",{id:"advanced"},"Advanced"),Object(o.a)("h3",{id:"short-option-groups"},"Short option groups"),Object(o.a)("p",null,"Short options support a shortcut known as a short option group, where multiple short option names\ncan be placed under a single leading ",Object(o.a)("inlineCode",{parentName:"p"},"-"),". For example, instead of passing ",Object(o.a)("inlineCode",{parentName:"p"},"-a -b -c"),", you can pass\n",Object(o.a)("inlineCode",{parentName:"p"},"-abc"),". This shortcut is only available for ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#flags"}),"flags")," (boolean options) and\n",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#counters"}),"counters")," (numeric options with ",Object(o.a)("inlineCode",{parentName:"p"},"count"),"), otherwise an error is thrown."),Object(o.a)("p",null,"When passing flags within a group, it will mark the value as ",Object(o.a)("inlineCode",{parentName:"p"},"true"),". Flag negation is not supported\nwithin a group."),Object(o.a)("h3",{id:"counter-options"},"Counter options"),Object(o.a)("p",null,"Counters are a ",Object(o.a)("inlineCode",{parentName:"p"},"number")," option only feature, where each occurence of the option in a short option\ngroup will increment the option's value (starting from the ",Object(o.a)("inlineCode",{parentName:"p"},"default")," value). For example, passing\n",Object(o.a)("inlineCode",{parentName:"p"},"-vvv"),' will increment the value 3 times, once for each "v", resulting in a sum of 3. If not using a\ngroup, the numeric value will need to be explicitly passed, like ',Object(o.a)("inlineCode",{parentName:"p"},"--verbose 3"),"."),Object(o.a)("p",null,"To make use of this feature, enable the ",Object(o.a)("inlineCode",{parentName:"p"},"count")," setting on a numeric option."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const argv = ['-vvv'];\nconst args = parse<{ verbose: number }>(argv, {\n  options: {\n    verbose: {\n      count: true,\n      default: 0,\n      description: 'Increase output verbosity',\n      short: 'v',\n      type: 'number',\n    },\n  },\n});\n\nargs.options.verbose; // 3\n")),Object(o.a)("h3",{id:"choice-options"},"Choice options"),Object(o.a)("p",null,"For scenarios where you want to only accept an option value from a pre-defined list of choices, the\n",Object(o.a)("inlineCode",{parentName:"p"},"choices")," setting can be used (single number/string values only). If an unsupported value is\nprovided, the parser will throw an error."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const argv = ['--modules', 'umd'];\nconst args = parse<{ modules: 'cjs' | 'esm' | 'umd' }>(argv, {\n  options: {\n    modules: {\n      choices: ['cjs', 'esm', 'umd'] as 'esm'[],\n      default: 'esm',\n      description: 'Choose module output',\n      type: 'string',\n    },\n  },\n});\n\nargs.options.modules; // 'umd'\n")),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"TypeScript doesn't handle the mapping of unions very well, so we need to ",Object(o.a)("inlineCode",{parentName:"p"},"as")," the ",Object(o.a)("inlineCode",{parentName:"p"},"choices"),"\nsetting. This isn't necessary when using a non-union.")),Object(o.a)("h3",{id:"arity-requirements"},"Arity requirements"),Object(o.a)("p",null,"Another scenario may require an exact number of ",Object(o.a)("a",Object(t.a)({parentName:"p"},{href:"#multiple-values"}),"option values"),", otherwise an\nerror is thrown. This feature is known as arity (like function argument arity), and can be enabled\nwith the ",Object(o.a)("inlineCode",{parentName:"p"},"arity")," + ",Object(o.a)("inlineCode",{parentName:"p"},"multiple")," settings."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const argv = ['--colors', 'red', 'blue', 'green'];\nconst args = parse<{ colors: string[] }>(argv, {\n  options: {\n    colors: {\n      arity: 3,\n      description: 'Pick 3 favorite colors',\n      multiple: true,\n      type: 'string',\n    },\n  },\n});\n\nargs.options.colors; // ['red', 'blue', 'green']\n")),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"Arity will not error when 0 values are passed. To control this logic, use the ",Object(o.a)("inlineCode",{parentName:"p"},"validate")," setting.")),Object(o.a)("h3",{id:"command--option-categories"},"Command & option categories"),Object(o.a)("p",null,"While purely an informational feature, as it doesn't pertain to the parser, both commands and\noptions can be define a category. This category can be used within a consumer to group and organize\nbased on the category name."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const args = parse<{ color: string }>(argv, {\n  options: {\n    color: {\n      category: 'style',\n      description: 'Your favorite color',\n      type: 'string',\n    },\n  },\n});\n")),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"Command categories only pertain to the ",Object(o.a)("inlineCode",{parentName:"p"},"Command")," interface type.")),Object(o.a)("h3",{id:"loose-mode"},"Loose mode"),Object(o.a)("p",null,"When loose mode is enabled, the following changes to the parser are made:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"Unknown options will be typed as strings and set into the ",Object(o.a)("inlineCode",{parentName:"li"},"options")," return object. This supersedes\nthe ",Object(o.a)("inlineCode",{parentName:"li"},"unknown")," setting as it works differently."),Object(o.a)("li",{parentName:"ul"},"Short options without a configured parent will no longer throw an error, and will be set into the\n",Object(o.a)("inlineCode",{parentName:"li"},"options")," return object.",Object(o.a)("ul",{parentName:"li"},Object(o.a)("li",{parentName:"ul"},"When no value is provided, they will be typed as ",Object(o.a)("inlineCode",{parentName:"li"},"boolean"),", otherwise as ",Object(o.a)("inlineCode",{parentName:"li"},"string"),"."),Object(o.a)("li",{parentName:"ul"},"When found in a short option group, they will be typed as ",Object(o.a)("inlineCode",{parentName:"li"},"boolean"),".")))),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const argv = ['-F', 'k=value', '--legit', 'foo', '--unknown', 'bar'];\nconst args = parse<{ legit: string }>(argv, {\n  loose: true,\n  options: {\n    legit: {\n      description: 'A legitimate option',\n      type: 'string',\n    },\n  },\n});\n\nargs.options; // { F: true, k: 'value', legit: 'foo', unknown: 'bar' }\nargs.unknown; // {}\n")),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"This mode should only be used for interoperability with other argument parsers.")),Object(o.a)("h2",{id:"type-casting"},"Type casting"),Object(o.a)("p",null,"While option and param values are configured as ",Object(o.a)("inlineCode",{parentName:"p"},"boolean"),", ",Object(o.a)("inlineCode",{parentName:"p"},"number"),", or ",Object(o.a)("inlineCode",{parentName:"p"},"string")," types, arguments\npassed on the command line are always strings. Because of this, the parser will type cast all\ncaptured values before returning the final result, as a means for easier interoperability."),Object(o.a)("p",null,"This type casting follows specific semantics (below) and may have side-effects depending on the\ninput provided."),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"When a ",Object(o.a)("inlineCode",{parentName:"li"},"boolean"),", the following strings will be cast to ",Object(o.a)("inlineCode",{parentName:"li"},"true"),": true, on, yes, 1. The inverse will\nbe cast to ",Object(o.a)("inlineCode",{parentName:"li"},"false"),": false, off, no, 0. Other unsupported strings will also be cast to ",Object(o.a)("inlineCode",{parentName:"li"},"false"),"."),Object(o.a)("li",{parentName:"ul"},"When a ",Object(o.a)("inlineCode",{parentName:"li"},"number"),", the string will be cast using ",Object(o.a)("inlineCode",{parentName:"li"},"Number()"),". If a NaN occurs, the number will return\na ",Object(o.a)("inlineCode",{parentName:"li"},"0")," (use the ",Object(o.a)("inlineCode",{parentName:"li"},"validate")," setting for more control)."),Object(o.a)("li",{parentName:"ul"},"Strings are used as-is. Values with spaces or special characters should be wrapped in double\nquotes.")),Object(o.a)("h2",{id:"validation-checks"},"Validation checks"),Object(o.a)("p",null,"For improved interoperability and usability, the parser is strict, logging the following parse and\nvalidation errors."),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"ParseError"),"s are logged for invalid syntax, unknown options, and formatting. The failed argument\nand its index are stored as ",Object(o.a)("inlineCode",{parentName:"li"},"arg")," and ",Object(o.a)("inlineCode",{parentName:"li"},"index")," properties on the error instance, respectively."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"ValidationError"),"s are logged for invalid values, types, settings, and more. The invalid option\n(when applicable), is stored as the ",Object(o.a)("inlineCode",{parentName:"li"},"option")," property.")),Object(o.a)("p",null,"Furthermore, errors are not thrown and instead are returned as an array in the ",Object(o.a)("inlineCode",{parentName:"p"},"parse()")," result,\nunder the ",Object(o.a)("inlineCode",{parentName:"p"},"errors")," property. It's designed this way so that command line interfaces and or\napplications have full control, and can theoretically provide output like the following."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{}),'An error has occurred:\n\n  foo_bar --progressive --interactive -Y\n  \u2514\u2500\u2500\u252c\u2500\u2500\u2518\n     \u2514\u2500 Invalid "foo_bar" command format. Must be letters, numbers, and dashes.\n\n')),Object(o.a)("h2",{id:"formatting-args"},"Formatting args"),Object(o.a)("p",null,"If for some reason you need to format the args result from ",Object(o.a)("inlineCode",{parentName:"p"},"parse()")," back into an array of string\narguments, the ",Object(o.a)("inlineCode",{parentName:"p"},"format()")," function can be used. This function will use the values as is and does not\nreference the settings object, so all formatted arguments will be in their long form, and will not\nuse inline values."),Object(o.a)("pre",null,Object(o.a)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@boost/args';\n\n// cmd --string abc --numbers 123 456 --bool foo bar baz -- qux --version\nconst argv = format({\n  command: ['cmd'],\n  options: { string: 'abc', numbers: [123, 456], bool: true },\n  params: ['foo', 'bar', 'baz'],\n  rest: ['qux', '--version'],\n});\n")))}m.isMDXComponent=!0},86:function(e,a,n){"use strict";n.d(a,"a",(function(){return m}));var t=n(0),r=n.n(t);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var a=r.a.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},d=r.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=t,b=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return n?r.a.createElement(b,s(s({ref:a},c),{},{components:n})):r.a.createElement(b,s({ref:a},c))}));function m(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:t,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87:function(e,a,n){"use strict";function t(e){var a,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(n=t(e[a]))&&(r&&(r+=" "),r+=n);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}a.a=function(){for(var e,a,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(a=t(e))&&(r&&(r+=" "),r+=a);return r}},88:function(e,a,n){"use strict";var t=n(0),r=Object(t.createContext)(void 0);a.a=r},89:function(e,a,n){"use strict";var t=n(0),r=n(88);a.a=function(){var e=Object(t.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},90:function(e,a,n){"use strict";n.d(a,"a",(function(){return o}));var t=n(0),r=n.n(t);function o(e){var a=e.children,n=e.type;return r.a.createElement("span",{className:"badge badge--"+n},a)}},91:function(e,a,n){"use strict";var t=n(0),r=n.n(t),o=n(89),i=n(87),s=n(48),l=n.n(s),c=37,p=39;a.a=function(e){var a=e.block,n=e.children,s=e.defaultValue,u=e.values,d=e.groupId,m=Object(o.a)(),b=m.tabGroupChoices,h=m.setTabGroupChoices,g=Object(t.useState)(s),O=g[0],j=g[1],f=Object(t.useState)(!1),v=f[0],N=f[1];if(null!=d){var y=b[d];null!=y&&y!==O&&u.some((function(e){return e.value===y}))&&j(y)}var w=function(e){j(e),null!=d&&h(d,e)},C=[],k=function(e){e.metaKey||e.altKey||e.ctrlKey||N(!0)},T=function(){N(!1)};return Object(t.useEffect)((function(){window.addEventListener("keydown",k),window.addEventListener("mousedown",T)}),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":a})},u.map((function(e){var a=e.value,n=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===a,className:Object(i.a)("tabs__item",l.a.tabItem,{"tabs__item--active":O===a}),style:v?{}:{outline:"none"},key:a,ref:function(e){return C.push(e)},onKeyDown:function(e){!function(e,a,n){switch(n.keyCode){case p:!function(e,a){var n=e.indexOf(a)+1;e[n]?e[n].focus():e[0].focus()}(e,a);break;case c:!function(e,a){var n=e.indexOf(a)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,a)}}(C,e.target,e),k(e)},onFocus:function(){return w(a)},onClick:function(){w(a),N(!1)},onPointerDown:function(){return N(!1)}},n)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},t.Children.toArray(n).filter((function(e){return e.props.value===O}))[0]))}},92:function(e,a,n){"use strict";var t=n(0),r=n.n(t);a.a=function(e){return r.a.createElement("div",null,e.children)}},93:function(e,a,n){"use strict";n.d(a,"a",(function(){return c}));var t=n(0),r=n.n(t),o=n(90),i=n(47),s=n.n(i);function l(e){var a=e.children;return r.a.createElement("span",{className:s.a.badgeGroup},a)}function c(e){var a=e.backend,n=e.frontend,t=e.tooling;return r.a.createElement(l,null,a&&r.a.createElement(o.a,{type:"warning"},"Backend"),n&&r.a.createElement(o.a,{type:"success"},"Frontend"),t&&r.a.createElement(o.a,{type:"primary"},"Tooling"))}}}]);