(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(2),r=n(6),i=(n(0),n(84)),o={title:"Path"},l={unversionedId:"common/path",id:"common/path",isDocsHomePage:!1,title:"Path",description:"A Path class is an immutable abstraction around file/module paths and the Node.js fs and path",source:"@site/docs/common/path.md",permalink:"/docs/common/path",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/common/path.md",sidebar:"docs",previous:{title:"Contract",permalink:"/docs/common/contract"},next:{title:"PathResolver",permalink:"/docs/common/path-resolver"}},c=[{value:"Resolved paths",id:"resolved-paths",children:[]},{value:"Static factories",id:"static-factories",children:[]}],p={rightToc:c};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"Path")," class is an immutable abstraction around file/module paths and the Node.js ",Object(i.b)("inlineCode",{parentName:"p"},"fs")," and ",Object(i.b)("inlineCode",{parentName:"p"},"path"),"\nmodules. It aims to solve cross platform and operating system related issues in a straight forward\nway. To begin, import and instantiate the ",Object(i.b)("inlineCode",{parentName:"p"},"Path")," class, with either a single path, or a list of path\nparts that will be joined."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Path } from '@boost/common';\n\nconst absPath = new Path('/root/some/path');\nconst relPath = new Path('some/path', '../move/around', 'again');\n")),Object(i.b)("p",null,"The following methods are available on the class instance. The ",Object(i.b)("inlineCode",{parentName:"p"},"PortablePath")," type is a union of\n",Object(i.b)("inlineCode",{parentName:"p"},"string | Path"),"."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"append(...parts: PortablePath[]): Path")," - Append path parts to the end of the current path and\nreturn a new ",Object(i.b)("inlineCode",{parentName:"li"},"Path")," instance."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"equals(path: PortablePath): boolean")," - Returns true if both paths are equal using strict\nequality."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ext(withoutPeriod?: boolean): string")," - Return the extension (if applicable) with or without\nleading period."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"exists(): boolean")," - Return true if the current path exists on the file system."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isAbsolute(): boolean")," - Return true if the current path is absolute."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isDirectory(): boolean")," - Return true if the current path is a folder."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isFile(): boolean")," - Return true if the current path is a file."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name(withoutExtension?: boolean): string")," - Return the file name (with optional extension) or\nfolder name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"parent(): Path")," - Return the parent folder as a new ",Object(i.b)("inlineCode",{parentName:"li"},"Path")," instance."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"path(): FilePath")," - Return the current path as a normalized string."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"prepend(...parts: PortablePath[]): Path")," - Prepend path parts to the beginning of the current\npath and return a new ",Object(i.b)("inlineCode",{parentName:"li"},"Path")," instance."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"relativeTo(to: PortablePath): Path")," - Return a new relative ",Object(i.b)("inlineCode",{parentName:"li"},"Path"),' instance from the current\n"from" path to the defined "to" path.'),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"toString(): FilePath")," - Return the current path as a normalized string.")),Object(i.b)("h2",{id:"resolved-paths"},"Resolved paths"),Object(i.b)("p",null,"By default, the ",Object(i.b)("inlineCode",{parentName:"p"},"Path")," class operates on the defined path parts as-is. If you would prefer to\noperate against real or resolved paths, use the ",Object(i.b)("inlineCode",{parentName:"p"},"Path#realPath()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Path#resolve()")," methods\nrespectively. The current path is\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://nodejs.org/api/path.html#path_path_resolve_paths"}),"resolved against")," the defined current\nworking directory (",Object(i.b)("inlineCode",{parentName:"p"},"process.cwd()"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"path.path(); // Possibly inaccurate\npath.resolve().path(); // Resolved accurately\n")),Object(i.b)("h2",{id:"static-factories"},"Static factories"),Object(i.b)("p",null,"The static ",Object(i.b)("inlineCode",{parentName:"p"},"Path.create()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Path.resolve()")," methods can be used to factory a ",Object(i.b)("inlineCode",{parentName:"p"},"Path")," instance\nfrom a string or an existing instance. Especially useful when used in combination with the\n",Object(i.b)("inlineCode",{parentName:"p"},"PortablePath")," type."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"Path.create('some/file/path'); // Path\n")))}s.isMDXComponent=!0},84:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(n),h=a,d=b["".concat(o,".").concat(h)]||b[h]||u[h]||i;return n?r.a.createElement(d,l(l({ref:t},p),{},{components:n})):r.a.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);