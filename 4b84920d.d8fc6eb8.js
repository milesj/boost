(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{106:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return p}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},g=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=b(n),g=a,p=u["".concat(o,".").concat(g)]||u[g]||d[g]||i;return n?r.a.createElement(p,c(c({ref:t},s),{},{components:n})):r.a.createElement(p,c({ref:t},s))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},107:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},108:function(e,t,n){"use strict";var a=n(0),r=n(109);t.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},109:function(e,t,n){"use strict";var a=n(0),r=Object(a.createContext)(void 0);t.a=r},110:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n(0),r=n.n(a);function i(e){var t=e.children,n=e.type;return r.a.createElement("span",{className:"badge badge--"+n},t)}},111:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(108),o=n(107),c=n(56),l=n.n(c),s=37,b=39;t.a=function(e){var t=e.lazy,n=e.block,c=e.defaultValue,u=e.values,d=e.groupId,g=e.className,p=Object(i.a)(),m=p.tabGroupChoices,f=p.setTabGroupChoices,O=Object(a.useState)(c),h=O[0],v=O[1],j=a.Children.toArray(e.children);if(null!=d){var y=m[d];null!=y&&y!==h&&u.some((function(e){return e.value===y}))&&v(y)}var N=function(e){v(e),null!=d&&f(d,e)},w=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":n},g)},u.map((function(e){var t=e.value,n=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===t,className:Object(o.a)("tabs__item",l.a.tabItem,{"tabs__item--active":h===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case b:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case s:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e)},onFocus:function(){return N(t)},onClick:function(){N(t)}},n)}))),t?Object(a.cloneElement)(j.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},j.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==h})}))))}},112:function(e,t,n){"use strict";var a=n(0),r=n.n(a);t.a=function(e){var t=e.children,n=e.hidden,a=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},113:function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n(0),r=n.n(a),i=n(110),o=n(55),c=n.n(o);function l(e){var t=e.children;return r.a.createElement("span",{className:c.a.badgeGroup},t)}function s(e){var t=e.backend,n=e.frontend,a=e.tooling;return r.a.createElement(l,null,t&&r.a.createElement(i.a,{type:"warning"},"Backend"),n&&r.a.createElement(i.a,{type:"success"},"Frontend"),a&&r.a.createElement(i.a,{type:"primary"},"Tooling"))}},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return b})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return g}));var a=n(3),r=n(7),i=(n(0),n(106)),o=n(113),c=n(111),l=n(112),s={title:"Debugging"},b={unversionedId:"debug",id:"debug",isDocsHomePage:!1,title:"Debugging",description:"Lightweight debugging. Wraps the amazing debug library to",source:"@site/docs/debug.mdx",slug:"/debug",permalink:"/docs/debug",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/debug.mdx",version:"current",sidebar:"docs",previous:{title:"Crash reporting",permalink:"/docs/crash"},next:{title:"Decorators",permalink:"/docs/decorators"}},u=[{value:"Installation",id:"installation",children:[]},{value:"Environment variables",id:"environment-variables",children:[]},{value:"Debugging",id:"debugging",children:[{value:"Invariant messages",id:"invariant-messages",children:[]},{value:"Verbose output",id:"verbose-output",children:[]},{value:"Silencing output",id:"silencing-output",children:[]}]},{value:"Test utilities",id:"test-utilities",children:[{value:"<code>mockDebugger</code>",id:"mockdebugger",children:[]}]}],d={toc:u};function g(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)(o.a,{backend:!0,tooling:!0,mdxType:"EnvBadges"}),Object(i.b)("p",null,"Lightweight debugging. Wraps the amazing ",Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/debug"},"debug")," library to\nprovide additional functionality."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)(c.a,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"yarn",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"yarn add @boost/debug\n"))),Object(i.b)(l.a,{value:"npm",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"npm install @boost/debug\n")))),Object(i.b)("h2",{id:"environment-variables"},"Environment variables"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"BOOSTJS_DEBUG_NAMESPACE")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - A prefix for all debugger namespaces when created with\n",Object(i.b)("inlineCode",{parentName:"li"},"createDebugger()"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"BOOSTJS_DEBUG_VERBOSE")," (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),") - Print verbose messages logged from ",Object(i.b)("inlineCode",{parentName:"li"},"debugger.verbose()"),",\notherwise they are hidden.")),Object(i.b)("h2",{id:"debugging"},"Debugging"),Object(i.b)("p",null,"Like ",Object(i.b)("a",{parentName:"p",href:"/docs/log"},"logging"),', a "debugger" is a collection of functions that write to ',Object(i.b)("inlineCode",{parentName:"p"},"process.stderr"),".\nThe key difference is that debug messages are only displayed if the ",Object(i.b)("inlineCode",{parentName:"p"},"DEBUG")," environment variable is\nset and contains the debugger's namespace (logic provided by the\n",Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/debug"},"debug")," package). The namespace can be defined when\ninstantiating a debugger using ",Object(i.b)("inlineCode",{parentName:"p"},"createDebugger"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { createDebugger } from '@boost/debug';\n\nconst debug = createDebugger('boost');\n\nprocess.env.DEBUG = 'boost:*';\n\ndebug('Something is broken!');\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"A namespace can either be a string or an array of strings.")),Object(i.b)("p",null,"Each debug function that logs (excluding invariants) requires a message string as the 1st argument,\nand an optional rest of arguments to interpolate into the message using\n",Object(i.b)("a",{parentName:"p",href:"https://nodejs.org/api/util.html#util_util_format_format_args"},"util.format()"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"debug('Name: %s %s', user.first_name, user.last_name);\ndebug('Object: %O', data);\n")),Object(i.b)("h3",{id:"invariant-messages"},"Invariant messages"),Object(i.b)("p",null,"Invariant debugging logs either a success or a failure message, depending on the truthy evaluation\nof a condition. This can be achieved with\n",Object(i.b)("inlineCode",{parentName:"p"},"debugger.invariant(condition: boolean, message: string, pass: string, fail: string)"),", which\nrequires the condition to evaluate, a message to always display, and a success and failure message."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"debug.invariant(fs.existsSync(filePath), 'Does file exist?', 'Yes!', 'No');\n")),Object(i.b)("h3",{id:"verbose-output"},"Verbose output"),Object(i.b)("p",null,"Debug messages are already hidden behind the ",Object(i.b)("inlineCode",{parentName:"p"},"DEBUG")," environment variable, but Boost takes it a step\nfurther to support verbose debugging. Messages logged with\n",Object(i.b)("inlineCode",{parentName:"p"},"debugger.verbose(message: string, ...args: any[])")," will not be displayed unless the\n",Object(i.b)("inlineCode",{parentName:"p"},"BOOSTJS_DEBUG_VERBOSE")," environment variable is set -- even if ",Object(i.b)("inlineCode",{parentName:"p"},"DEBUG")," is set."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"// Will not write!\ndebug.verbose('We need extra information');\n\nprocess.env.BOOSTJS_DEBUG_VERBOSE = 'true';\n\n// Will write!\ndebug.verbose('We need extra information (again)');\n")),Object(i.b)("h3",{id:"silencing-output"},"Silencing output"),Object(i.b)("p",null,"By default, all logged messages are immediately written when ",Object(i.b)("inlineCode",{parentName:"p"},"DEBUG")," contains the debugger\nnamespace. To silence output for a specific debugger, call the ",Object(i.b)("inlineCode",{parentName:"p"},"debugger.disable()")," function, and to\nre-enable, call ",Object(i.b)("inlineCode",{parentName:"p"},"debugger.enable()"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"debug.disable();\n\n// Will not write!\ndebug('Something is broken!');\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Messages that are logged while silenced are ",Object(i.b)("em",{parentName:"p"},"lost")," and are ",Object(i.b)("em",{parentName:"p"},"not")," buffered.")),Object(i.b)("h2",{id:"test-utilities"},"Test utilities"),Object(i.b)("p",null,"The following ",Object(i.b)("a",{parentName:"p",href:"https://github.com/facebook/jest"},"Jest")," utilities are available in the\n",Object(i.b)("inlineCode",{parentName:"p"},"@boost/debug/test")," module."),Object(i.b)("h3",{id:"mockdebugger"},Object(i.b)("inlineCode",{parentName:"h3"},"mockDebugger")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"mockDebugger(): Debugger")),Object(i.b)("p",null,"Returns a Jest spy that matches the return value shape of ",Object(i.b)("inlineCode",{parentName:"p"},"createDebugger"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { mockDebugger } from '@boost/debug/test';\n\nit('calls the debugger', () => {\n  const debug = mockDebugger();\n\n  debug('Something is broken!');\n\n  expect(debug).toHaveBeenCalled();\n});\n")))}g.isMDXComponent=!0}}]);