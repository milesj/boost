(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{70:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return d}));var a=n(2),o=n(6),r=(n(0),n(85)),l=n(92),i=n(90),s=n(91),c={title:"Logging"},b={unversionedId:"log",id:"log",isDocsHomePage:!1,title:"Logging",description:"Lightweight level based logging system.",source:"@site/docs/log.mdx",permalink:"/docs/log",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/log.mdx",sidebar:"docs",previous:{title:"Events",permalink:"/docs/event"},next:{title:"Pipelines",permalink:"/docs/pipeline"}},p=[{value:"Installation",id:"installation",children:[]},{value:"Environment variables",id:"environment-variables",children:[]},{value:"Logging",id:"logging",children:[{value:"Options",id:"options",children:[]},{value:"Log levels",id:"log-levels",children:[]},{value:"Silencing output",id:"silencing-output",children:[]}]},{value:"Formats",id:"formats",children:[]},{value:"Metadata",id:"metadata",children:[]},{value:"Transport types",id:"transport-types",children:[{value:"<code>ConsoleTransport</code>",id:"consoletransport",children:[]},{value:"<code>StreamTransport</code>",id:"streamtransport",children:[]},{value:"<code>FileTransport</code>",id:"filetransport",children:[]},{value:"<code>RotatingFileTransport</code>",id:"rotatingfiletransport",children:[]}]},{value:"Test utilities",id:"test-utilities",children:[{value:"<code>mockLogger</code>",id:"mocklogger",children:[]}]}],m={rightToc:p};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)(l.a,{backend:!0,tooling:!0,mdxType:"EnvBadges"}),Object(r.b)("p",null,"Lightweight level based logging system."),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)(i.a,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},Object(r.b)(s.a,{value:"yarn",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @boost/log\n"))),Object(r.b)(s.a,{value:"npm",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install @boost/log\n")))),Object(r.b)("h2",{id:"environment-variables"},"Environment variables"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"BOOSTJS_LOG_DEFAULT_LEVEL")," (",Object(r.b)("inlineCode",{parentName:"li"},"LogLevel"),") - The default log level to use when calling the logger\nfunction stand alone (the usage examples below). Defaults to the lowest level, ",Object(r.b)("inlineCode",{parentName:"li"},"log"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"BOOSTJS_LOG_MAX_LEVEL")," (",Object(r.b)("inlineCode",{parentName:"li"},"LogLevel"),") - The maximum level, based on priority, to write to a stream.\nAll levels higher than the maximum will be ignored. Defaults to allowing all levels.")),Object(r.b)("h2",{id:"logging"},"Logging"),Object(r.b)("p",null,'Logging is based around the concept of a "logger", which provides a set of functions of severity\nlevels to log with. Logs are written to one or many provided transports -- or ',Object(r.b)("inlineCode",{parentName:"p"},"console")," if not\ndefined. To begin, instantiate a logger with ",Object(r.b)("inlineCode",{parentName:"p"},"createLogger"),", which returns a function that can be\nused for standard level logging."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { createLogger } from '@boost/log';\n\nconst log = createLogger({ name: 'boost' });\n\nlog('Something has happened\u2026');\n")),Object(r.b)("p",null,"Each logging function requires a message string as the 1st argument, and an optional rest of\narguments to interpolate into the message using\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://nodejs.org/api/util.html#util_util_format_format_args"}),"util.format()"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"log('Name: %s %s', user.first_name, user.last_name);\nlog('Object: %O', data);\n")),Object(r.b)("p",null,"If you would prefer to interact with a class instance, you may use the ",Object(r.b)("inlineCode",{parentName:"p"},"Logger")," class. The major\ndifference between the class and the function, is that the class only has 1 logging method, ",Object(r.b)("inlineCode",{parentName:"p"},"log()"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Logger } from '@boost/log';\n\nconst logger = new Logger({ name: 'boost' });\n\nlogger.log({\n  level: 'info',\n  message: 'Something else has happened\u2026',\n});\n")),Object(r.b)("h3",{id:"options"},"Options"),Object(r.b)("p",null,"The following options can be defined when creating a logger. They ",Object(r.b)("em",{parentName:"p"},"cannot")," be customized after the\nfact."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"labels")," (",Object(r.b)("inlineCode",{parentName:"li"},"object"),") - A mapping of localized log level names. Can be used with\n",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.npmjs.com/package/chalk"}),"chalk"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"name")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - Unique name of this logger instance, for debugging purposes. ",Object(r.b)("em",{parentName:"li"},"(Required)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"transports")," (",Object(r.b)("inlineCode",{parentName:"li"},"Transportable[]"),") - List of transports in which to write formatted log messages to.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import chalk from 'chalk';\nimport { createLogger, StreamTransport } from '@boost/log';\n\nconst log = createLogger({\n  name: 'boost',\n  labels: {\n    error: chalk.bgRed.black.bold(' FAIL '),\n  },\n  transports: [new StreamTransport({ levels: ['error'], stream: process.stderr })],\n});\n")),Object(r.b)("h3",{id:"log-levels"},"Log levels"),Object(r.b)("p",null,"There are 5 distinct logging levels outside the standard level, each represented as a unique\nfunction on the logger instance. The levels in order of ",Object(r.b)("strong",{parentName:"p"},"priority")," are ",Object(r.b)("inlineCode",{parentName:"p"},"trace"),", ",Object(r.b)("inlineCode",{parentName:"p"},"debug"),", ",Object(r.b)("inlineCode",{parentName:"p"},"info"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"warn"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"error"),". Each function requires a message as the 1st argument, and an optional rest of\narguments to interpolate into the message."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"log.trace('Code path hit?');\nlog.debug('What is going on here?');\nlog.info('Systems are stable');\nlog.warn('Something is definitely going on\u2026');\nlog.error('Systems are down! %s', error.message);\n")),Object(r.b)("h3",{id:"silencing-output"},"Silencing output"),Object(r.b)("p",null,"By default, all logged messages are immediately written to the configured transports. To silence\noutput and disable writes, call the ",Object(r.b)("inlineCode",{parentName:"p"},"logger.disable()")," function, and to re-enable, call\n",Object(r.b)("inlineCode",{parentName:"p"},"logger.enable()"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"log.disable();\n\n// Will not write!\nlog.debug('Something is broken!');\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Messages that are logged while silenced are ",Object(r.b)("em",{parentName:"p"},"lost")," and are ",Object(r.b)("em",{parentName:"p"},"not")," buffered.")),Object(r.b)("h2",{id:"formats"},"Formats"),Object(r.b)("p",null,"All logs are represented as an object, known as a log item. These items contain the following\nmetadata about the environment, the logger, and the current log message."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"host")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - The host name of the machine."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"label")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - The log level as a localized or customized label."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"level")," (",Object(r.b)("inlineCode",{parentName:"li"},"LogLevel"),") - The log level as a string."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"message")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - The log message with interpolated arguments applied."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"metadata")," (",Object(r.b)("inlineCode",{parentName:"li"},"object"),") - ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#metadata"}),"Additional data")," to include with a log item."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"name")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - Name of the logger."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pid")," (",Object(r.b)("inlineCode",{parentName:"li"},"number"),") - Current process ID."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"time")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - Timestamp of the log, native to the host machine.")),Object(r.b)("p",null,"Before an item is written to a transport, it must be formatted from an object into a string. This\ncan be done on a per transport basis using the ",Object(r.b)("inlineCode",{parentName:"p"},"format")," option, like so."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { ConsoleTransport, formats } from '@boost/log';\n\nconst transport = new ConsoleTransport({\n  format: (item) => `${item.level} ${item.message}`,\n  // Or a pre-built format\n  format: formats.json,\n});\n")),Object(r.b)("p",null,"Boost provides formats by default, all of which are pre-configured into each built-in transport.\nFeel free to use the following built-in formats, or customize your own!"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"formats.console")," - Formats the item as if it's being logged to ",Object(r.b)("inlineCode",{parentName:"li"},"console"),". Only inclues the label\nand message."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"formats.debug")," - Formats the item into a human-readable message with all item fields included.\nThis is the default format for most transports."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"formats.json")," - Formats the entire item into JSON."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"formats.message")," - Formats the item using only the message.")),Object(r.b)("h2",{id:"metadata"},"Metadata"),Object(r.b)("p",null,"Sometimes additional metadata may be required that is not found within the pre-defined log item\nfields. Metadata can be defined on the logger using an object, which is then passed to all log\nitems."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const log = createLogger({\n  name: 'boost',\n  metadata: {\n    locale: 'en',\n    region: 'eu',\n  },\n});\n")),Object(r.b)("p",null,"It can also be defined per log by passing an object as the 1st argument. Metadata defined at this\nlevel will override the logger metadata."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"log({ locale: 'de' }, \"What's going on?\");\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Fields ",Object(r.b)("inlineCode",{parentName:"p"},"name"),", ",Object(r.b)("inlineCode",{parentName:"p"},"host"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"pid")," are reserved names and cannot be used.")),Object(r.b)("h2",{id:"transport-types"},"Transport types"),Object(r.b)("p",null,"There are multiple types of transports that can be used within a logger, all of which support the\nfollowing shared options."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"eol")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - End of line character to append to a message. Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"os.EOL"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"format")," (",Object(r.b)("inlineCode",{parentName:"li"},"Formatter"),") - Function to format a log item into a message string. Default is transport\ndependent."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"levels")," (",Object(r.b)("inlineCode",{parentName:"li"},"LogLevel[]"),") - List of log levels to only write messages for. ",Object(r.b)("em",{parentName:"li"},"(Required)"))),Object(r.b)("h3",{id:"consoletransport"},Object(r.b)("inlineCode",{parentName:"h3"},"ConsoleTransport")),Object(r.b)("p",null,"Logs messages to the native ",Object(r.b)("inlineCode",{parentName:"p"},"console")," and its corresponding level. This is the default transport\nwhen no transports are defined."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { ConsoleTransport } from '@boost/log';\n\nconst transport = new ConsoleTransport();\n")),Object(r.b)("h3",{id:"streamtransport"},Object(r.b)("inlineCode",{parentName:"h3"},"StreamTransport")),Object(r.b)("p",null,"Logs messages to any writeable stream or an object that defines a ",Object(r.b)("inlineCode",{parentName:"p"},"write(message: string)")," method."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { StreamTransport } from '@boost/log';\n\nconst transport = new StreamTransport({\n  levels: ['error', 'warn'],\n  stream: process.stderr,\n});\n")),Object(r.b)("h3",{id:"filetransport"},Object(r.b)("inlineCode",{parentName:"h3"},"FileTransport")),Object(r.b)("p",null,"Appends and logs messages to a file at the defined path. Will automatically rotate files when a max\nfile size is met."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { FileTransport } from '@boost/log';\n\nconst transport = new FileTransport({\n  levels: ['error'],\n  path: '/var/log/error.log',\n});\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"gzip")," (",Object(r.b)("inlineCode",{parentName:"li"},"boolean"),") - Apply gzip compression to the write stream."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"maxSize")," (",Object(r.b)("inlineCode",{parentName:"li"},"number"),") - Maximum file size before rotating file. Will create a backup and truncate\nthe current file. Defaults to 10mb."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," (",Object(r.b)("inlineCode",{parentName:"li"},"string | Path"),") - Absolute file system path for the intended log file. ",Object(r.b)("em",{parentName:"li"},"(Required)"))),Object(r.b)("h3",{id:"rotatingfiletransport"},Object(r.b)("inlineCode",{parentName:"h3"},"RotatingFileTransport")),Object(r.b)("p",null,"Like ",Object(r.b)("inlineCode",{parentName:"p"},"FileTransport"),", but also rotates files based on timestamps and a chosen periodic interval."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { RotatingFileTransport } from '@boost/log';\n\nconst transport = new RotatingFileTransport({\n  levels: ['error'],\n  path: '/var/log/error.log',\n  rotation: 'daily',\n});\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"rotation")," (",Object(r.b)("inlineCode",{parentName:"li"},"hourly | daily | weekly | monthly"),") - Period in which to rotate files. Will append a\ntimestamp to the rotated log file.")),Object(r.b)("h2",{id:"test-utilities"},"Test utilities"),Object(r.b)("p",null,"The following ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/facebook/jest"}),"Jest")," utilities are available in the\n",Object(r.b)("inlineCode",{parentName:"p"},"@boost/log/lib/testing")," module."),Object(r.b)("h3",{id:"mocklogger"},Object(r.b)("inlineCode",{parentName:"h3"},"mockLogger")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"mockLogger(): Logger")),Object(r.b)("p",null,"Returns a Jest spy that matches the return value shape of ",Object(r.b)("inlineCode",{parentName:"p"},"createLogger"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { mockLogger } from '@boost/log/lib/testing';\n\nit('calls the logger', () => {\n  const log = mockLogger();\n\n  log('Something has happened');\n\n  expect(log).toHaveBeenCalled();\n});\n")))}d.isMDXComponent=!0},85:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),b=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=b(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,u=p["".concat(l,".").concat(d)]||p[d]||m[d]||r;return n?o.a.createElement(u,i(i({ref:t},c),{},{components:n})):o.a.createElement(u,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},86:function(e,t,n){"use strict";function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}},87:function(e,t,n){"use strict";var a=n(0);const o=Object(a.createContext)(void 0);t.a=o},88:function(e,t,n){"use strict";var a=n(0),o=n(87);t.a=function(){const e=Object(a.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},89:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n(0),o=n.n(a);function r({children:e,type:t}){return o.a.createElement("span",{className:"badge badge--"+t},e)}},90:function(e,t,n){"use strict";var a=n(0),o=n.n(a),r=n(88),l=n(86),i=n(48),s=n.n(i);const c=37,b=39;t.a=function(e){const{block:t,children:n,defaultValue:i,values:p,groupId:m}=e,{tabGroupChoices:d,setTabGroupChoices:u}=Object(r.a)(),[g,O]=Object(a.useState)(i),[j,h]=Object(a.useState)(!1);if(null!=m){const e=d[m];null!=e&&e!==g&&p.some(t=>t.value===e)&&O(e)}const f=e=>{O(e),null!=m&&u(m,e)},N=[],v=e=>{e.metaKey||e.altKey||e.ctrlKey||h(!0)},y=()=>{h(!1)};return Object(a.useEffect)(()=>{window.addEventListener("keydown",v),window.addEventListener("mousedown",y)},[]),o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t})},p.map(({value:e,label:t})=>o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===e,className:Object(l.a)("tabs__item",s.a.tabItem,{"tabs__item--active":g===e}),style:j?{}:{outline:"none"},key:e,ref:e=>N.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case b:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case c:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(N,e.target,e),v(e)},onFocus:()=>f(e),onClick:()=>{f(e),h(!1)},onPointerDown:()=>h(!1)},t))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter(e=>e.props.value===g)[0]))}},91:function(e,t,n){"use strict";var a=n(0),o=n.n(a);t.a=function(e){return o.a.createElement("div",null,e.children)}},92:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(0),o=n.n(a),r=n(89),l=n(47),i=n.n(l);function s({children:e}){return o.a.createElement("span",{className:i.a.badgeGroup},e)}function c({backend:e,frontend:t,tooling:n}){return o.a.createElement(s,null,e&&o.a.createElement(r.a,{type:"warning"},"Backend"),t&&o.a.createElement(r.a,{type:"success"},"Frontend"),n&&o.a.createElement(r.a,{type:"primary"},"Tooling"))}}}]);