(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return b})),t.d(n,"rightToc",(function(){return m})),t.d(n,"default",(function(){return d}));var a=t(2),o=t(6),r=(t(0),t(85)),i=t(92),l=t(90),c=t(91),s={title:"CLIs"},b={unversionedId:"cli",id:"cli",isDocsHomePage:!1,title:"CLIs",description:"A type-safe and interactive command line program, powered by React and Ink.",source:"@site/docs/cli.mdx",permalink:"/docs/cli",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/cli.mdx",sidebar:"docs",previous:{title:"Arguments",permalink:"/docs/args"},next:{title:"Common utilities",permalink:"/docs/common"}},m=[{value:"Installation",id:"installation",children:[]},{value:"Environment variables",id:"environment-variables",children:[]},{value:"Events",id:"events",children:[]},{value:"CLI",id:"cli",children:[]},{value:"Program",id:"program",children:[{value:"Package integration",id:"package-integration",children:[]},{value:"Stand-alone",id:"stand-alone",children:[]},{value:"Multi-command",id:"multi-command",children:[]},{value:"Middleware",id:"middleware",children:[]}]},{value:"Commands",id:"commands",children:[{value:"Config",id:"config",children:[]},{value:"Options",id:"options",children:[]},{value:"Params",id:"params",children:[]},{value:"Rest args",id:"rest-args",children:[]},{value:"Sub-commands",id:"sub-commands",children:[]},{value:"Rendering components",id:"rendering-components",children:[]},{value:"Shorthand registration",id:"shorthand-registration",children:[]}]},{value:"Tasks",id:"tasks",children:[]},{value:"Categories",id:"categories",children:[]},{value:"Logging",id:"logging",children:[]},{value:"Themes",id:"themes",children:[]},{value:"Components",id:"components",children:[{value:"<code>Style</code>",id:"style",children:[]},{value:"<code>Header</code>",id:"header",children:[]},{value:"<code>Help</code>",id:"help",children:[]},{value:"<code>Failure</code>",id:"failure",children:[]}]},{value:"Test utilities",id:"test-utilities",children:[{value:"<code>mockStreams</code>",id:"mockstreams",children:[]},{value:"<code>mockProgram</code>",id:"mockprogram",children:[]},{value:"<code>renderComponent</code>",id:"rendercomponent",children:[]},{value:"<code>runCommand</code>",id:"runcommand",children:[]},{value:"<code>runTask</code>",id:"runtask",children:[]},{value:"<code>runProgram</code>",id:"runprogram",children:[]}]}],p={rightToc:m};function d(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)(i.a,{tooling:!0,mdxType:"EnvBadges"}),Object(r.b)("p",null,"A type-safe and interactive command line program, powered by ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/"}),"React")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/vadimdemedes/ink"}),"Ink"),"."),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)(l.a,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"yarn",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @boost/cli react ink\n"))),Object(r.b)(c.a,{value:"npm",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install @boost/cli react ink\n")))),Object(r.b)("h2",{id:"environment-variables"},"Environment variables"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"BOOSTJS_CLI_THEME")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - Name of the theme module (without ",Object(r.b)("inlineCode",{parentName:"li"},"@boost")," or ",Object(r.b)("inlineCode",{parentName:"li"},"boost")," prefixes)\nto load for terminal style/color changes.")),Object(r.b)("h2",{id:"events"},"Events"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Event"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Arguments"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Command#onAfterRegister"),", ",Object(r.b)("inlineCode",{parentName:"td"},"Program#onAfterRegister")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"path: CommandPath, command: Commadable")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called after a command has been registered.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Command#onBeforeRegister"),", ",Object(r.b)("inlineCode",{parentName:"td"},"Program#onBeforeRegister")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"path: CommandPath, command: Commadable")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called before a command has been registered.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Program#onAfterRender")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called after a component has rendered.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Program#onAfterRun")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"error?: Error")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called after the program and command have been ran.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Program#onBeforeRender")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"result: RunResult")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called after a command has run but before a component will render.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Program#onBeforeRun")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"argv: Argv")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called before the program and command will run.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Program#onCommandFound")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"argv: Argv, path: CommandPath, command: Commadable")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called when a command has been found after parsing argv.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Program#onCommandNotFound")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"argv: Argv, path: CommandPath")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called when a command wasn't found after parsing argv.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Program#onExit")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"message: string, code: number")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called when the ",Object(r.b)("inlineCode",{parentName:"td"},"exit()")," handler is executed but before the process exits.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"Program#onHelp")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"CommandPath?")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called when the help menu is rendered.")))),Object(r.b)("h2",{id:"cli"},"CLI"),Object(r.b)("p",null,"The CLI provides a simple object oriented framework for building and managing command line programs,\nwith clear separation of commands, middleware, args, a program instance, and more. It further\nstreamlines the development process by utilizing ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/vadimdemedes/ink"}),"Ink")," for terminal rendering, as manually\nhandling ANSI escape sequences and terminal widths can be tedious and complicated."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The CLI makes heavy usage of the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/args"}),"args")," package, which will be continually referenced\nthroughout this documentation. It's encouraged to read and understand it first.")),Object(r.b)("h2",{id:"program"},"Program"),Object(r.b)("p",null,"The entry point of the command line is commonly referred to as the binary, or script, and is managed\nby the ",Object(r.b)("inlineCode",{parentName:"p"},"Program")," class. This class handles the registration of commands, applying\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#middleware"}),"middleware")," to argv (",Object(r.b)("inlineCode",{parentName:"p"},"process.argv"),"), parsing argv into ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/args"}),"arguments"),"\n(options, flags, etc), running the found command with these argument, outputing to the terminal, and\nfinally cleaning up or handling failures."),Object(r.b)("p",null,"Begin by importing and instantiating the ",Object(r.b)("inlineCode",{parentName:"p"},"Program")," class, while passing required and optional\noptions."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"banner")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - A large banner to appear at the top of the index help interface."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"bin")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - The name of the binary consumers enter on the command line. Must be in\nkebab-case. ",Object(r.b)("em",{parentName:"li"},"(Required)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"delimiter")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - The character(s) displayed before command line usage examples."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"footer")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - A string of text to display at the bottom of the index help interface."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"header")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - A string of text to display at the top of the index help interface, below\nthe banner (if present)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"name")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - A human readable name for your program. ",Object(r.b)("em",{parentName:"li"},"(Required)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"version")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - Current version of your CLI program. Typically the version found in your\n",Object(r.b)("inlineCode",{parentName:"li"},"package.json"),". This is output when ",Object(r.b)("inlineCode",{parentName:"li"},"--version")," is passed. ",Object(r.b)("em",{parentName:"li"},"(Required)"))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Program } from '@boost/cli';\nimport pkg from './package.json';\n\nconst program = new Program({\n  bin: 'boost',\n  footer: 'Documentation: https://boostlib.dev',\n  name: 'Boost Examples',\n  version: pkg.version,\n});\n")),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/cli/program.png",alt:"Program example"}))),Object(r.b)("p",null,"Once ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#commands"}),"commands")," and optional ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#middleware"}),"middleware")," have been registered, you must run\nthe program with ",Object(r.b)("inlineCode",{parentName:"p"},"Program#run()")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Program#runAndExit()"),", with the latter automatically passing\nthe exit code to ",Object(r.b)("inlineCode",{parentName:"p"},"process.exitCode"),". Both methods require an argv list to run."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"program.runAndExit(process.argv);\n")),Object(r.b)("h3",{id:"package-integration"},"Package integration"),Object(r.b)("p",null,"Now that you have the basics of a program, you can set the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.npmjs.com/files/package.json#bin"}),"bin")," field in your ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),". This should point\nto the program-aware file you have defined previously. For example, if my program will be called\n",Object(r.b)("inlineCode",{parentName:"p"},"boost"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "bin": {\n    "boost": "./bin/boost.js"\n  }\n}\n')),Object(r.b)("p",null,"If you're writing your program in TypeScript, or non-Node compatible JavaScript, you'll need to\ndown-level compile before releasing your package. A simple alternative approach is to point your\nbinary file to where the compiled program would be found."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="bin/boost.js"',title:'"bin/boost.js"'}),"#!/usr/bin/env node\n\nrequire('../lib/program.js');\n")),Object(r.b)("h3",{id:"stand-alone"},"Stand-alone"),Object(r.b)("p",null,"Boost offers 2 implementations for how the binary can be executed, the 1st is known as a stand-alone\nprogram. This implementation only supports 1 ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#commands"}),"command")," known as the default command,\nwhich is immediately ran when the binary is. It does not support sub-commands."),Object(r.b)("p",null,"To create a stand-alone binary, create and instantiate a command, then pass it to\n",Object(r.b)("inlineCode",{parentName:"p"},"Command#default()"),". The command's ",Object(r.b)("inlineCode",{parentName:"p"},"path")," is ignored for this situation."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Program } from '@boost/cli';\nimport StandAloneCommand from './commands/StandAloneCommand';\n\nconst program = new Program({\n  // ...\n});\n\nprogram.default(new StandAloneCommand()).runAndExit(process.argv);\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Some good examples of stand-alone binaries are ",Object(r.b)("inlineCode",{parentName:"p"},"babel"),", ",Object(r.b)("inlineCode",{parentName:"p"},"webpack"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"tsc"),".")),Object(r.b)("h3",{id:"multi-command"},"Multi-command"),Object(r.b)("p",null,"The 2nd implementation is opposite the stand-alone program, and is known as a multi-command program.\nWhen the binary is ran, and no arguments are passed, a help menu is displayed instead of executing\nthe default command. Otherwise, if arguments ",Object(r.b)("em",{parentName:"p"},"are")," passed, a registered command will be ran based on\nmatching path name."),Object(r.b)("p",null,"To create a multi-command binary, create and instantiate multiple commands, and pass them all to\n",Object(r.b)("inlineCode",{parentName:"p"},"Command#register()"),". In the example below, the ",Object(r.b)("inlineCode",{parentName:"p"},"boost")," binary would support the ",Object(r.b)("inlineCode",{parentName:"p"},"boost install"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"boost uninstall"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"boost build")," commands."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Program } from '@boost/cli';\nimport InstallCommand from './commands/InstallCommand';\nimport UninstallCommand from './commands/UninstallCommand';\nimport BuildCommand from './commands/BuildCommand';\n\nconst program = new Program({\n  // ...\n});\n\nprogram\n  .register(new InstallCommand())\n  .register(new UninstallCommand())\n  .register(new BuildCommand())\n  .runAndExit(process.argv);\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Some good examples of stand-alone binaries are ",Object(r.b)("inlineCode",{parentName:"p"},"npm"),", ",Object(r.b)("inlineCode",{parentName:"p"},"yarn"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"docker"),".")),Object(r.b)("h3",{id:"middleware"},"Middleware"),Object(r.b)("p",null,"Boost will parse provided argv (a list of string arguments, typically from ",Object(r.b)("inlineCode",{parentName:"p"},"process.argv"),") into\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/@boost/args"}),"args")," (an object of options, flags, params, etc) for easier consumption. This process can be\nintercepted with ",Object(r.b)("inlineCode",{parentName:"p"},"Program#middleware()"),", which allows both argv and args to be read and mutated."),Object(r.b)("p",null,"Middleware is a function, that receives the argv list as the 1st argument, and a parse callback as\nthe 2nd argument. It ",Object(r.b)("em",{parentName:"p"},"must")," return an args object, which can be built by executing the parse\ncallback. This allows both before, middle, and after implementations to be possible, as demonstrated\nbelow."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Program, Middleware } from '@boost/cli';\n\nconst example: Middleware = (argv, parse) => {\n  if (argv.includes('--help')) {\n    argv.push('--all');\n  }\n\n  return parse();\n};\n\nconst program = new Program({\n  // ...\n});\n\nprogram\n  // Function reference\n  .middleware(example)\n  // Inline async function\n  .middleware(async (argv, parse) => {\n    const args = await parse();\n\n    args.options.flag = true;\n\n    return args;\n  })\n  .runAndExit(process.argv);\n")),Object(r.b)("p",null,"Middleware is async, so the parse callback ",Object(r.b)("em",{parentName:"p"},"must be")," awaited! This also means you can implement your\nown async functionality, like file system access, or network requests."),Object(r.b)("h2",{id:"commands"},"Commands"),Object(r.b)("p",null,"Commands are self-encapsulated pieces of business logic that are ran when a matching path (a unique\nargument) is found on the command line. To create a command, import and extend the abstract\n",Object(r.b)("inlineCode",{parentName:"p"},"Command")," class, and implement a ",Object(r.b)("inlineCode",{parentName:"p"},"run()")," method. This method can be async and even render\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#rendering-components"}),"React components"),"!"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command } from '@boost/cli';\n\nexport default class BuildCommand extends Command {\n  async run() {\n    this.log('Starting process...');\n\n    await runHeavyAsyncProcess();\n\n    this.log('Process finished!');\n  }\n}\n")),Object(r.b)("p",null,"However, that's not all required, as a command and it's features must be configured! Features may be\ndefined with a declarative approach using TypeScript decorators, or an imperative approach with\nstatic class properties. Both variants will be demonstrated in the examples below."),Object(r.b)("h3",{id:"config"},"Config"),Object(r.b)("p",null,"All commands support the following metadata configuration, with ",Object(r.b)("inlineCode",{parentName:"p"},"path")," and ",Object(r.b)("inlineCode",{parentName:"p"},"description")," being\nmandatory."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"aliases")," (",Object(r.b)("inlineCode",{parentName:"li"},"string[]"),") - A list of aliased paths. Will not show up in the help menu, but will\nmatch on the command line."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"allowUnknownOptions")," (",Object(r.b)("inlineCode",{parentName:"li"},"boolean"),") - Allow ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/args#unknown-options"}),"unknown options")," to be\nparsed, otherwise an error is thrown. Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"allowVariadicParams")," (",Object(r.b)("inlineCode",{parentName:"li"},"boolean"),") - Allow ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/args#variadic-params"}),"variadic params")," to be\nparsed, otherwise an error is thrown. Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"categories")," (",Object(r.b)("inlineCode",{parentName:"li"},"object"),") - A mapping of sub-command and option ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#categories"}),"categories")," for this\ncommand only. ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#global-options"}),"Global options")," are automatically defined under the ",Object(r.b)("inlineCode",{parentName:"li"},"global"),"\ncategory."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"category")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - The category this command belongs to. Will be used to group in the parent\ncommand or program. Defaults to no category."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"deprecated")," (",Object(r.b)("inlineCode",{parentName:"li"},"boolean"),") - Whether the command is deprecated or not. Will display a tag in the\nhelp menu. Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"description")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - A description of what the command is and does. Supports basic markdown\nfor bold, italics, and underline. ",Object(r.b)("em",{parentName:"li"},"(Required)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"hidden")," (",Object(r.b)("inlineCode",{parentName:"li"},"boolean"),") - Whether the command should be hidden from the help menu or not. Will still\nmatch on the command line. Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"false"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - A unique name in which to match the command on the command line amongst a list\nof arguments (argv). ",Object(r.b)("em",{parentName:"li"},"(Required)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"usage")," (",Object(r.b)("inlineCode",{parentName:"li"},"string | string[]"),") - Define one or many usage examples to display in the help menu.")),Object(r.b)("p",null,"When using decorators, import the ",Object(r.b)("inlineCode",{parentName:"p"},"Config")," decorator and apply it to the ",Object(r.b)("inlineCode",{parentName:"p"},"Command")," class. The path\nand description are required, while all other metadata can be passed as an object. Otherwise, just\ndefine static class properties of the same name!"),Object(r.b)(l.a,{groupId:"command-format",defaultValue:"decl",values:[{label:"Declarative",value:"decl"},{label:"Imperative",value:"imp"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"decl",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Config } from '@boost/cli';\n\n@Config('build', 'Build a project', {\n  aliases: ['make'],\n  deprecated: true,\n})\nexport default class BuildCommand extends Command {}\n"))),Object(r.b)(c.a,{value:"imp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command } from '@boost/cli';\n\nexport default class BuildCommand extends Command {\n  static path: string = 'build';\n\n  static aliases: string[] = ['make'];\n\n  static description: string = 'Build a project';\n\n  static deprecated: boolean = true;\n}\n")))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/cli/command.png",alt:"Command example"}))),Object(r.b)("h3",{id:"options"},"Options"),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/args#options"}),"Options")," are optional arguments that accept a value on the command line. When a\ncommand is ran, each option is set as a class property based on the matching command line value, or\nthe provided default value. Like configuration above, options can be defined declaratively or\nimperatively, with option types being passed to the 1st ",Object(r.b)("inlineCode",{parentName:"p"},"Command")," generic slot."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Declarative"),": There are 5 ",Object(r.b)("inlineCode",{parentName:"p"},"Arg")," decorators to choose from when defining options, all of which are\ndefined on a class property, where the property name becomes the option name. For example, a\nproperty of ",Object(r.b)("inlineCode",{parentName:"p"},"save")," would become the ",Object(r.b)("inlineCode",{parentName:"p"},"--save")," option. Depending on the decorator, they support many\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/args#options"}),"option settings"),", excluding ",Object(r.b)("inlineCode",{parentName:"p"},"type")," and ",Object(r.b)("inlineCode",{parentName:"p"},"description"),", which are inferred, and\n",Object(r.b)("inlineCode",{parentName:"p"},"default")," which comes from the property value."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Imperative"),": If you prefer to use static properties, all options are defined through the single\nstatic ",Object(r.b)("inlineCode",{parentName:"p"},"options")," property, which requires a mapping of option names to\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/args#options"}),"option settings"),". With this approach, ",Object(r.b)("inlineCode",{parentName:"p"},"type")," and ",Object(r.b)("inlineCode",{parentName:"p"},"description")," are required,\nwith ",Object(r.b)("inlineCode",{parentName:"p"},"default")," either being configured with a setting, or coming from the class property value. For\neasier type safety, the ",Object(r.b)("inlineCode",{parentName:"p"},"Options")," collection type can be used to type the static property."),Object(r.b)(l.a,{groupId:"command-format",defaultValue:"decl",values:[{label:"Declarative",value:"decl"},{label:"Imperative",value:"imp"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"decl",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Arg, GlobalOptions } from '@boost/cli';\n\ninterface CustomOptions extends GlobalOptions {\n  flag: boolean;\n  number: number;\n  numbers: number[];\n  string: string;\n  strings: string[];\n}\n\nexport default class CustomCommand extends Command<CustomOptions> {\n  @Arg.Flag('Boolean flag')\n  flag: boolean = false;\n\n  @Arg.Number('Single number', { count: true, short: 'N' })\n  number: number = 0;\n\n  @Arg.Numbers('List of numbers', { deprecated: true })\n  numbers: number[] = [];\n\n  @Arg.String('Single string', { choices: ['a', 'b', 'c'], hidden: true })\n  string: string = '';\n\n  @Arg.Strings('List of strings', { arity: 5, short: 'S' })\n  strings: string[] = [];\n\n  run() {\n    const { flag, strings } = this;\n\n    // ...\n  }\n}\n"))),Object(r.b)(c.a,{value:"imp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, GlobalOptions, Options } from '@boost/cli';\n\ninterface CustomOptions extends GlobalOptions {\n  flag: boolean;\n  number: number;\n  numbers: number[];\n  string: string;\n  strings: string[];\n}\n\nexport default class CustomCommand extends Command<CustomOptions> {\n  static options: Options<CustomOptions> = {\n    flag: {\n      description: 'Boolean flag',\n      type: 'boolean',\n    },\n    number: {\n      count: true,\n      description: 'Single number',\n      short: 'N',\n      type: 'number',\n    },\n    numbers: {\n      deprecated: true,\n      description: 'List of numbers',\n      multiple: true,\n      type: 'number',\n    },\n    string: {\n      choices: ['a', 'b', 'c'],\n      description: 'Single string',\n      hidden: true,\n      type: 'string',\n    },\n    strings: {\n      arity: 5,\n      description: 'List of strings',\n      multiple: true,\n      short: 'S',\n      type: 'string',\n    },\n  };\n\n  flag: boolean = false;\n\n  number: number = 0;\n\n  numbers: number[] = [];\n\n  string: string = '';\n\n  strings: string[] = [];\n\n  run() {\n    const { flag, strings } = this;\n\n    // ...\n  }\n}\n")))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/cli/options.png",alt:"Options example"}))),Object(r.b)("h4",{id:"unknown-options"},"Unknown options"),Object(r.b)("p",null,"By default, unknown options are not allowed and will throw an error. To allow, set the\n",Object(r.b)("inlineCode",{parentName:"p"},"allowUnknownOptions")," ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#config"}),"configuration setting")," to true. When enabled, all unknown options\nwill be set as a string object to the ",Object(r.b)("inlineCode",{parentName:"p"},"Command#unknown")," class property."),Object(r.b)(l.a,{groupId:"command-format",defaultValue:"decl",values:[{label:"Declarative",value:"decl"},{label:"Imperative",value:"imp"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"decl",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, GlobalOptions, Config } from '@boost/cli';\n\n@Config('custom', 'Example', { allowUnknownOptions: true })\nexport default class CustomCommand extends Command<GlobalOptions> {\n  run() {\n    const { foo, bar } = this.unknown;\n    // ...\n  }\n}\n"))),Object(r.b)(c.a,{value:"imp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, GlobalOptions } from '@boost/cli';\n\nexport default class CustomCommand extends Command<GlobalOptions> {\n  static path: string = 'custom';\n\n  static description: string = 'Example';\n\n  static allowUnknownOptions: boolean = true;\n\n  run() {\n    const { foo, bar } = this.unknown;\n    // ...\n  }\n}\n")))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/cli/unknown-option.png",alt:"Unknown option example"}))),Object(r.b)("h4",{id:"global-options"},"Global options"),Object(r.b)("p",null,"Boost provides the follow options that are always available to all commands."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"--help"),", ",Object(r.b)("inlineCode",{parentName:"li"},"-h")," (",Object(r.b)("inlineCode",{parentName:"li"},"boolean"),") - Displays a help menu for the chosen command or the program itself.\nAvailable under the ",Object(r.b)("inlineCode",{parentName:"li"},"help")," class property."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"--locale")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),') - Display errors, messages, and the interface in the chosen locale (if\nsupported). Locale must be in the format of "en" or "en-US". Available under the ',Object(r.b)("inlineCode",{parentName:"li"},"locale")," class\nproperty."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"--version"),", ",Object(r.b)("inlineCode",{parentName:"li"},"-v")," (",Object(r.b)("inlineCode",{parentName:"li"},"boolean"),") - Display the current program version and exit. Available under the\n",Object(r.b)("inlineCode",{parentName:"li"},"version")," class property.")),Object(r.b)("h3",{id:"params"},"Params"),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/args#params"}),"Params")," are command line values that will be passed to ",Object(r.b)("inlineCode",{parentName:"p"},"Command#run()")," as\narguments. When defining params, all ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/args#params"}),"param settings")," are supported, and required\nare mandatory. Param types are passed to the 2nd ",Object(r.b)("inlineCode",{parentName:"p"},"Command")," generic slot."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Declarative"),": When using decorators, the ",Object(r.b)("inlineCode",{parentName:"p"},"Arg.Params")," decorator must be defined on the\n",Object(r.b)("inlineCode",{parentName:"p"},"Command#run()")," method. It accepts an argument for each param you want to configure, in the order\nthey should be expected."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Imperative"),": If you prefer to use static properties, all params are defined through the single\nstatic ",Object(r.b)("inlineCode",{parentName:"p"},"params")," property, which requires an array of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/args#params"}),"param settings"),". For easier\ntype safety, the ",Object(r.b)("inlineCode",{parentName:"p"},"Params")," collection type can be used to type the static property."),Object(r.b)(l.a,{groupId:"command-format",defaultValue:"decl",values:[{label:"Declarative",value:"decl"},{label:"Imperative",value:"imp"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"decl",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Arg, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number, boolean];\n\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  @Arg.Params<CustomParams>(\n    {\n      description: 'String',\n      label: 'name',\n      required: true,\n      type: 'string',\n    },\n    {\n      default: 18,\n      description: 'Number',\n      label: 'age',\n      type: 'number',\n    },\n    {\n      description: 'Boolean',\n      label: 'active',\n      type: 'boolean',\n    },\n  )\n  run(name: string, age: number, active: boolean) {\n    // ...\n  }\n}\n"))),Object(r.b)(c.a,{value:"imp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Params, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number, boolean];\n\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  static params: Params<CustomParams> = [\n    {\n      description: 'String',\n      label: 'name',\n      required: true,\n      type: 'string',\n    },\n    {\n      default: 18,\n      description: 'Number',\n      label: 'age',\n      type: 'number',\n    },\n    {\n      description: 'Boolean',\n      label: 'active',\n      type: 'boolean',\n    },\n  ];\n\n  run(name: string, age: number, active: boolean) {\n    // ...\n  }\n}\n")))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/cli/params.png",alt:"Params example"}))),Object(r.b)("h4",{id:"variadic-params"},"Variadic params"),Object(r.b)("p",null,"By default, variadic params are not enabled and will throw an error when an unconfigured param is\nfound. To allow, set the ",Object(r.b)("inlineCode",{parentName:"p"},"allowVariadicParams")," ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#config"}),"configuration setting")," to true. When\nenabled, all extra params will spread onto the end of the ",Object(r.b)("inlineCode",{parentName:"p"},"Command#run()")," method as strings."),Object(r.b)("p",null,"Using the example above, it would look like the following."),Object(r.b)(l.a,{groupId:"command-format",defaultValue:"decl",values:[{label:"Declarative",value:"decl"},{label:"Imperative",value:"imp"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"decl",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Config, Arg, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number];\n\n@Config('custom', 'Example', { allowVariadicParams: true })\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  @Arg.Params<CustomParams>([\n    // ...\n  ])\n  run(name: string, age: number, ...params: string[]) {\n    // ...\n  }\n}\n"))),Object(r.b)(c.a,{value:"imp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Params, GlobalOptions } from '@boost/cli';\n\ntype CustomParams = [string, number];\n\nexport default class CustomCommand extends Command<GlobalOptions, CustomParams> {\n  static path: string = 'custom';\n\n  static description: string = 'Example';\n\n  static allowVariadicParams: boolean = true;\n\n  static params: Params<CustomParams> = [\n    // ...\n  ];\n\n  run(name: string, age: number, ...params: string[]) {\n    // ...\n  }\n}\n")))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/cli/variadic-params.png",alt:"Variadic params example"}))),Object(r.b)("h3",{id:"rest-args"},"Rest args"),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/args#rest-args"}),"Rest arguments")," are all arguments that come after a standalone ",Object(r.b)("inlineCode",{parentName:"p"},"--"),"\ndelimiter, and can be accessed using the ",Object(r.b)("inlineCode",{parentName:"p"},"Command#rest")," property, which is an array of strings."),Object(r.b)("h3",{id:"sub-commands"},"Sub-commands"),Object(r.b)("p",null,"Of course commands can register their own commands, known as sub-commands -- it's commands all the\nway down! Sub-commands are configured exactly the same, with the key difference being that their\npath must be prefixed with their parent command's path, separated by a colon."),Object(r.b)("p",null,"For example, say we have a scaffolding command, where each sub-command is the specific template to\ngenerate. The parent path would be ",Object(r.b)("inlineCode",{parentName:"p"},"scaffold"),", where a child would be ",Object(r.b)("inlineCode",{parentName:"p"},"scaffold:model"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"scaffond:controller"),", so on and so forth. You can see this in action below."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Config } from '@boost/cli';\n\n@Config('scaffold:controller', 'Scaffold a controller')\nclass ScaffoldControllerCommand extends Command {}\n\n@Config('scaffold:model', 'Scaffold a model')\nclass ScaffoldModelCommand extends Command {}\n\n@Config('scaffold', 'Scaffold a template')\nclass ScaffoldCommand extends Command {\n  constructor() {\n    super();\n\n    this.register(new ScaffoldControllerCommand());\n    this.register(new ScaffoldModelCommand());\n  }\n}\n")),Object(r.b)("p",null,"Sub-commands can now be executed on the command line by passing their full path, like so:\n",Object(r.b)("inlineCode",{parentName:"p"},"boost scaffold:model --name User"),"."),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/cli/subcommands.png",alt:"Sub-commands example"}))),Object(r.b)("h3",{id:"rendering-components"},"Rendering components"),Object(r.b)("p",null,"This chapter assumes you have knowledge of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/"}),"React"),", JSX/TSX, and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/vadimdemedes/ink"}),"Ink"),". If you do not,\nit's highly encouraged to study those topics, but React is not necessarily a requirement (can use\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#logging"}),"logging"),"). With that being said, return React elements from ",Object(r.b)("inlineCode",{parentName:"p"},"Command#run()")," to render the\ncomponent output to the CLI."),Object(r.b)("p",null,"For a quick demonstration, let's implement a component that writes to a file asynchronously."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import fs from 'fs';\nimport React, { useState, useEffect } from 'react';\nimport { Box, Text } from 'ink';\nimport { Style, ProgramContext } from '@boost/cli';\n\ninterface WriteConfigProps {\n  data: object;\n  path: string;\n}\n\nexport default function WriteConfig({ data, path }: WriteConfigProps) {\n  const { exit } = useContext(ProgramContext);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fs.promises\n      .writeFile(path, JSON.stringify(data), 'utf8')\n      .then(() => {\n        setLoading(false);\n      })\n      .catch((error) => {\n        exit(error.message);\n      });\n  }, [path]);\n\n  if (loading) {\n    return (\n      <Box>\n        <Text>Writing config file...</Text>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Text>\n        Wrote config to file <Style type=\"success\">{path}</Style>\n      </Text>\n    </Box>\n  );\n}\n")),Object(r.b)("p",null,"Then we implement the command that returns and renders the component."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { Command, Config, Arg } from '@boost/cli';\nimport WriteConfig from './components/WriteConfig';\n\n@Config('config', 'Manage configuration files')\nexport default class ConfigCommand extends Command {\n  @Arg.Params({\n    description: 'Path to file',\n    type: 'string',\n    required: true,\n  })\n  async run(path: string) {\n    const data = await loadConfigFromSomeSource();\n\n    return <WriteConfig data={data} path={path} />;\n  }\n}\n")),Object(r.b)("h3",{id:"shorthand-registration"},"Shorthand registration"),Object(r.b)("p",null,"Sometimes classes may be overkill for commands, so Boost offers a feature known as shorthand\ncommands, where only objects and functions are used. To utilize shorthand commands, call either the\n",Object(r.b)("inlineCode",{parentName:"p"},"Program#register()")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Command#register()")," methods, with a unique path, settings object (config,\noptions, params, etc)), and run function."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Program, TaskContext } from '@boost/cli';\n\ninterface BuildOptions {\n  minify: boolean;\n}\n\ntype BuildParams = [string];\n\nprogram.register<BuildOptions, BuildParams>(\n  'build',\n  {\n    description: 'Build a project',\n    options: {\n      minify: { description: 'Minify source files', type: 'boolean' },\n    },\n    params: [\n      { description: 'Name of project', label: 'name', type: 'string' }\n    ]\n  },\n  function build(this: TaskContext, options: BuildOptions, params: BuildParams, rest: string[]) => {\n    // ...\n  },\n);\n")),Object(r.b)("p",null,"Besides a different API, the arguments to the run function are also different. Instead of spread\nparams like in a class, they are an options object, list of params, and list of rest arguments\nrespectively."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"If you want to access the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#logging"}),"logger"),", be sure to use a function declaration instead of an\nanonymous function, so that context binding works correctly!")),Object(r.b)("h2",{id:"tasks"},"Tasks"),Object(r.b)("p",null,"Tasks are reusable functions that can be executed within any command, while gaining contextual and\nlimited access to that command's instance. This promotes reusability and composition while avoiding\ninheritance related issues."),Object(r.b)("p",null,"To use a task, create a function with any arguments and function body that you'd like. The function\nbody has access to the parent command's ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#options"}),"options"),", ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#logging"}),"logger"),", and\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#rest-args"}),"rest arguments")," through ",Object(r.b)("inlineCode",{parentName:"p"},"this"),". If using TypeScript, the ",Object(r.b)("inlineCode",{parentName:"p"},"this")," special argument should\nbe typed."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import fs from 'fs';\nimport { TaskContext } from '@boost/cli';\n\n// Write a JSON blob to a file defined by a --path option\nexport default async function writeJson(\n  this: TaskContext<{ path: string }>,\n  data: unknown,\n  pretty: boolean = false,\n) {\n  await fs.promises.writeFile(\n    this.path,\n    pretty ? JSON.stringify(data, null, 2) : JSON.stringify(data),\n    'utf8',\n  );\n\n  this.log('Wrote file to %s', this.path);\n}\n")),Object(r.b)("p",null,"Now that are task is created, we can now execute it within a command using ",Object(r.b)("inlineCode",{parentName:"p"},"Command#runTask()"),". This\nmethod requires the task as a function reference, and all it's required arguments."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Config, Arg } from '@boost/cli';\nimport writeJson from './tasks/writeJson';\n\n@Config('init', 'Initialize project')\nexport default class InitCommand extends Command {\n  @Arg.String('Path to config file')\n  path: string;\n\n  async run() {\n    const data = await loadConfigFromSomeSource();\n\n    await this.runTask(writeJson, data);\n  }\n}\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Tasks are a command only feature and cannot be executed from within a React component.")),Object(r.b)("h2",{id:"categories"},"Categories"),Object(r.b)("p",null,"Categories are a mechanism for grouping commands and options in the help menu for easier\nreadability. They're shared between both commands and options for interoperability purposes, and can\nbe defined globally with ",Object(r.b)("inlineCode",{parentName:"p"},"Program#categories()"),", or per command through\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#config"}),Object(r.b)("inlineCode",{parentName:"a"},"categories")," configuration"),". To make use of categories, define a mapping of keys to\ncategory names and optional weights, like so."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"program.categories({\n  // Explicit weight\n  cache: {\n    name: 'Caching',\n    weight: 60,\n  },\n\n  // Automatic weight\n  error: 'Error handling',\n});\n")),Object(r.b)(l.a,{groupId:"command-format",defaultValue:"decl",values:[{label:"Declarative",value:"decl"},{label:"Imperative",value:"imp"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"decl",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Config } from '@boost/cli';\n\n@Config('custom', 'Example', {\n  categories: {\n    cache: {\n      name: 'Caching',\n      weight: 60,\n    },\n    error: 'Error handling',\n  },\n})\nexport default class CustomCommand extends Command {\n  // ...\n}\n"))),Object(r.b)(c.a,{value:"imp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Categories } from '@boost/cli';\n\nexport default class CustomCommand extends Command {\n  static path: string = 'custom';\n\n  static description: string = 'Example';\n\n  static categories: Categories = {\n    cache: {\n      name: 'Caching',\n      weight: 60,\n    },\n    error: 'Error handling',\n  };\n\n  // ...\n}\n")))),Object(r.b)("p",null,"Categories are sorted by weight first, then alphabetical second, so define ",Object(r.b)("inlineCode",{parentName:"p"},"weight")," when you want\nstrict control of the category order. Uncategorized items have a weight of ",Object(r.b)("inlineCode",{parentName:"p"},"0"),", and the built-in\nglobals have a weight of ",Object(r.b)("inlineCode",{parentName:"p"},"100"),"."),Object(r.b)("p",null,"Now that categories have been defined, be sure to set the category on your commands and options\nusing the ",Object(r.b)("inlineCode",{parentName:"p"},"category")," setting! Here's an example using decorators."),Object(r.b)(l.a,{groupId:"command-format",defaultValue:"decl",values:[{label:"Declarative",value:"decl"},{label:"Imperative",value:"imp"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"decl",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Config, Arg, GlobalOptions } from '@boost/cli';\n\ninterface BuildOptions extends GlobalOptions {\n  cache: boolean;\n}\n\n@Config('build', 'Build a project', { category: 'build' })\nexport default class BuildCommand extends Command<BuildOptions> {\n  @Arg.Flag('Write output to cache', { category: 'cache' })\n  cache: boolean = false;\n\n  // ...\n}\n"))),Object(r.b)(c.a,{value:"imp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command, Options, GlobalOptions } from '@boost/cli';\n\ninterface BuildOptions extends GlobalOptions {\n  cache: boolean;\n}\n\nexport default class BuildCommand extends Command<BuildOptions> {\n  static path: string = 'build';\n\n  static description: string = 'Build a project';\n\n  static category: string = 'build';\n\n  static options: Options<BuildOptions> = {\n    cache: {\n      category: 'cache',\n      description: 'Write output to cache',\n      type: 'boolean',\n    },\n  };\n\n  cache: boolean = false;\n\n  // ...\n}\n")))),Object(r.b)("h2",{id:"logging"},"Logging"),Object(r.b)("p",null,"Boost integrates its very own ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/log"}),"logger")," so that logs can easily be sent to the configured\n",Object(r.b)("inlineCode",{parentName:"p"},"stdout")," and ",Object(r.b)("inlineCode",{parentName:"p"},"stderr"),". The logger is accessible using ",Object(r.b)("inlineCode",{parentName:"p"},"Command#log()")," and associated methods."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command } from '@boost/cli';\n\nclass CustomCommand extends Command {\n  run() {\n    this.log('Normal log');\n    this.log.error('Failed log');\n    this.log.debug('Debug log');\n    // ...\n  }\n}\n")),Object(r.b)("p",null,"The logger is also accessible within a component by using the ",Object(r.b)("inlineCode",{parentName:"p"},"ProgramContext"),", like so."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React, { useContext } from 'react';\nimport { Box } from 'ink';\nimport { ProgramContext } from '@boost/cli';\n\nfunction CustomComponent() {\n  const { log } = useContext(ProgramContext);\n\n  log('Normal log');\n  log.error('Failed log');\n  log.debug('Debug log');\n  // ...\n\n  return <Box>Loading...</Box>;\n}\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"It's highly encouraged to use the logger instead of the native console, so that logged messages do\nnot interrupt the React rendering process, and write to the configured streams!")),Object(r.b)("h2",{id:"themes"},"Themes"),Object(r.b)("p",null,"Themes allow consumers to alter the color of text and backgrounds for elements rendered with the\n",Object(r.b)("inlineCode",{parentName:"p"},"Style")," component. Themes are simply NPM modules that return an object of hexcodes or ANSI colors,\nand can be enabled by defining the ",Object(r.b)("inlineCode",{parentName:"p"},"BOOSTJS_CLI_THEME")," environment variable."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"BOOSTJS_CLI_THEME=nyan <program>\n")),Object(r.b)("p",null,"When defining a theme, we'll attempt to load from ",Object(r.b)("inlineCode",{parentName:"p"},"@boost/theme-<name>")," or ",Object(r.b)("inlineCode",{parentName:"p"},"boost-theme-<name>"),",\notherwise we throw an error. Third-party modules are currently not supported."),Object(r.b)("h2",{id:"components"},"Components"),Object(r.b)("p",null,"Boost provides the following components for use within your programs."),Object(r.b)("h3",{id:"style"},Object(r.b)("inlineCode",{parentName:"h3"},"Style")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Style")," component is special in that it renders and applies colors based on the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#themes"}),"chosen theme"),". It accomplishes this through the ",Object(r.b)("inlineCode",{parentName:"p"},"type")," prop, which accepts one of the\ntheme palette names."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { Style } from '@boost/cli';\n\n<Style type=\"success\">Downloaded 123 packages</Style>;\n")),Object(r.b)("p",null,"Furthermore, it also supports text styling similar to Ink's ",Object(r.b)("inlineCode",{parentName:"p"},"Text")," component. This uses\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/chalk"}),"chalk")," under the hood."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'<Style bold type="failure">\n  Faild to download packages\n</Style>\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"It's highly encouraged to use this component for all color based styling, so that consumers can\nalways use their chosen theme!")),Object(r.b)("h3",{id:"header"},Object(r.b)("inlineCode",{parentName:"h3"},"Header")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Header")," component is simply that, a header! It renders an inverted background, with bold and\nuppercased text, and appropriate margins. It's what the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#help"}),"help")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#failure"}),"failure")," menus\nuse to separate and denote sections."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { Header } from '@boost/cli';\n\n<Header label=\"About\" />;\n")),Object(r.b)("p",null,"Headers can also be ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#style"}),"styled")," by providing a ",Object(r.b)("inlineCode",{parentName:"p"},"type")," prop, which will color the background."),Object(r.b)("h3",{id:"help"},Object(r.b)("inlineCode",{parentName:"h3"},"Help")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Help")," component can be used to render elegant command usage and help menus. It's a very complex\ncomponent that supports everything from command metadata to variadic params, all through the\nfollowing props (all optional)."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"categories")," (",Object(r.b)("inlineCode",{parentName:"li"},"{ [name: string]: Category }"),") - Mapping of ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#categories"}),"categories")," to use for\ncommand and option grouping."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"config")," (",Object(r.b)("inlineCode",{parentName:"li"},"CommandConfig"),") - ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#config"}),"Configuration")," metadata about the current command."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"commands")," (",Object(r.b)("inlineCode",{parentName:"li"},"{ [path: string]: CommandConfig }"),") - Mapping of ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#sub-commands"}),"commands"),", typically\nsub-commands."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"header")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),") - A ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#header"}),"header")," to display at the top of the output."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"options")," (",Object(r.b)("inlineCode",{parentName:"li"},"{ [name: string]: OptionConfig }"),") - Mapping of ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#options"}),"options"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"params")," (",Object(r.b)("inlineCode",{parentName:"li"},"ParamConfig[]"),") - List of ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#params"}),"params"),".")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { Help } from '@boost/cli';\n\n<Help\n  header=\"Info\"\n  config={{ description: 'This is a very cool program', deprecated: true }}\n  params={[\n    {\n      description: 'Name',\n      type: 'string',\n    },\n  ]}\n/>;\n")),Object(r.b)("h3",{id:"failure"},Object(r.b)("inlineCode",{parentName:"h3"},"Failure")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Failure")," component can be used to render a beautiful failure menu, for an error and its stack\ntrace. The ",Object(r.b)("inlineCode",{parentName:"p"},"error")," prop must be provided with an ",Object(r.b)("inlineCode",{parentName:"p"},"Error")," instance. An optional ",Object(r.b)("inlineCode",{parentName:"p"},"warnings")," prop can\nbe provided with a list of ",Object(r.b)("inlineCode",{parentName:"p"},"Error"),"s, for displaying minor issues without a stack trace."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { Failure } from '@boost/cli';\n\n<Failure error={new Error('Something is broken!')} />;\n")),Object(r.b)("h2",{id:"test-utilities"},"Test utilities"),Object(r.b)("p",null,"The following ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/facebook/jest"}),"Jest")," utilities are available in the\n",Object(r.b)("inlineCode",{parentName:"p"},"@boost/cli/lib/testing")," module."),Object(r.b)("h3",{id:"mockstreams"},Object(r.b)("inlineCode",{parentName:"h3"},"mockStreams")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"mockStreams(): ProgramStreams")),Object(r.b)("p",null,"Returns mocked ",Object(r.b)("inlineCode",{parentName:"p"},"stderr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"stdout"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"stdin")," streams that can be passed to a ",Object(r.b)("inlineCode",{parentName:"p"},"Program"),". This does\nnot mock all stream functionality, only those required by Boost and Ink."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { mockStreams } from '@boost/cli/lib/testing';\n\nconst streams = mockStreams();\n")),Object(r.b)("h3",{id:"mockprogram"},Object(r.b)("inlineCode",{parentName:"h3"},"mockProgram")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"mockProgram(options?: ProgramOptions, streams?: ProgramStreams): Program")),Object(r.b)("p",null,"Returns a ",Object(r.b)("inlineCode",{parentName:"p"},"Program")," instance with required options pre-filled and streams mocked (unless manually\nprovided)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { mockProgram } from '@boost/cli/lib/testing';\n\nconst program = mockProgram({ name: 'Example' });\n")),Object(r.b)("h3",{id:"rendercomponent"},Object(r.b)("inlineCode",{parentName:"h3"},"renderComponent")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"async renderComponent(element: React.ReactElement, stripped?: boolean): Promise<string",">")),Object(r.b)("p",null,"Can be used to render a React component with Ink and return the rendered result as a terminal\ncompatible string. If ",Object(r.b)("inlineCode",{parentName:"p"},"stripped")," is true, it will strip ANSI escape escape sequences."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { renderComponent } from '@boost/cli/lib/testing';\nimport TestComponent from '../src/components/TestComponent';\n\nit('renders a component', async () => {\n  expect(await renderComponent(<TestComponent />)).toMatchSnapshot();\n});\n")),Object(r.b)("h3",{id:"runcommand"},Object(r.b)("inlineCode",{parentName:"h3"},"runCommand")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"async runCommand<O, P",">","(command: Command, params: P, options?: O): Promise<string",">")),Object(r.b)("p",null,"Runs a ",Object(r.b)("inlineCode",{parentName:"p"},"Command")," outside the context of a ",Object(r.b)("inlineCode",{parentName:"p"},"Program"),", but mimics similar functionality, including\nReact component rendering. Params are required as they're passed to the run method, while options\nare optional and assume class properties have been defined. Also, the ",Object(r.b)("inlineCode",{parentName:"p"},"exit")," and ",Object(r.b)("inlineCode",{parentName:"p"},"log")," methods have\nbeen mocked with Jest spies so that they can be asserted."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { runCommand } from '@boost/cli/lib/testing';\nimport TestCommand from '../src/commands/TestCommand';\n\nit('runs a command', async () => {\n  const command = new TestCommand();\n\n  expect(await runCommand(command, ['foo', 'bar', 'baz'])).toMatchSnapshot();\n  expect(command.log).toHaveBeenCalled();\n});\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Since there is no ",Object(r.b)("inlineCode",{parentName:"p"},"Program")," context, any functionality that requires a program will fail. If\nneeded, use ",Object(r.b)("inlineCode",{parentName:"p"},"runProgram()")," instead.")),Object(r.b)("h3",{id:"runtask"},Object(r.b)("inlineCode",{parentName:"h3"},"runTask")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"runTask<A, R, T extends TaskContext",">","(task: (this: T, ...args: A) => R, args: A, context?: T): R")),Object(r.b)("p",null,"Runs a task function outside the context of a ",Object(r.b)("inlineCode",{parentName:"p"},"Command"),", in complete isolation. A mock command\ncontext is provided with standard defaults, and can be customized through the 3rd argument."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { runTask } from '@boost/cli/lib/testing';\nimport testTask from '../src/tasks/testTask';\n\nit('runs a task', async () => {\n  const context = {\n    log: jest.fn(),\n  };\n\n  expect(await runTask(testTask, ['foo', 'bar', 'baz'], context)).toMatchSnapshot();\n  expect(context.log).toHaveBeenCalled();\n});\n")),Object(r.b)("h3",{id:"runprogram"},Object(r.b)("inlineCode",{parentName:"h3"},"runProgram")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"async runProgram(program: Program, argv: string[]): Promise<{ code: ExitCode; output: string;\noutputStripped: string }",">")),Object(r.b)("p",null,"Runs a ",Object(r.b)("inlineCode",{parentName:"p"},"Program")," as if it were ran on the command line, including middleware, commands, success and\nfailuer states, and more. Utilizes mocked streams to capture and return standard output and ANSI\nstripped output. Failed runs will not throw and instead will render a failure output."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { runProgram } from '@boost/cli/lib/testing';\nimport Program from '../src/program';\n\nit('runs a program', async () => {\n  const program = new Program();\n\n  const { code, output } = await runProgram(program, ['cmd', '--foo', '123', 'bar']);\n\n  expect(output).toMatchSnapshot();\n  expect(code).toBe(0);\n});\n")))}d.isMDXComponent=!0},85:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return u}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),b=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=b(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=b(t),d=a,u=m["".concat(i,".").concat(d)]||m[d]||p[d]||r;return t?o.a.createElement(u,l(l({ref:n},s),{},{components:t})):o.a.createElement(u,l({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},86:function(e,n,t){"use strict";function a(e){var n,t,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(o&&(o+=" "),o+=t);else for(n in e)e[n]&&(o&&(o+=" "),o+=n);return o}n.a=function(){for(var e,n,t=0,o="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(o&&(o+=" "),o+=n);return o}},87:function(e,n,t){"use strict";var a=t(0);const o=Object(a.createContext)(void 0);n.a=o},88:function(e,n,t){"use strict";var a=t(0),o=t(87);n.a=function(){const e=Object(a.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},89:function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var a=t(0),o=t.n(a);function r({children:e,type:n}){return o.a.createElement("span",{className:"badge badge--"+n},e)}},90:function(e,n,t){"use strict";var a=t(0),o=t.n(a),r=t(88),i=t(86),l=t(48),c=t.n(l);const s=37,b=39;n.a=function(e){const{block:n,children:t,defaultValue:l,values:m,groupId:p}=e,{tabGroupChoices:d,setTabGroupChoices:u}=Object(r.a)(),[g,O]=Object(a.useState)(l),[h,j]=Object(a.useState)(!1);if(null!=p){const e=d[p];null!=e&&e!==g&&m.some(n=>n.value===e)&&O(e)}const f=e=>{O(e),null!=p&&u(p,e)},N=[],C=e=>{e.metaKey||e.altKey||e.ctrlKey||j(!0)},y=()=>{j(!1)};return Object(a.useEffect)(()=>{window.addEventListener("keydown",C),window.addEventListener("mousedown",y)},[]),o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":n})},m.map(({value:e,label:n})=>o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===e,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":g===e}),style:h?{}:{outline:"none"},key:e,ref:e=>N.push(e),onKeyDown:e=>{((e,n,t)=>{switch(t.keyCode){case b:((e,n)=>{const t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()})(e,n);break;case s:((e,n)=>{const t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,n)}})(N,e.target,e),C(e)},onFocus:()=>f(e),onClick:()=>{f(e),j(!1)},onPointerDown:()=>j(!1)},n))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(t).filter(e=>e.props.value===g)[0]))}},91:function(e,n,t){"use strict";var a=t(0),o=t.n(a);n.a=function(e){return o.a.createElement("div",null,e.children)}},92:function(e,n,t){"use strict";t.d(n,"a",(function(){return s}));var a=t(0),o=t.n(a),r=t(89),i=t(47),l=t.n(i);function c({children:e}){return o.a.createElement("span",{className:l.a.badgeGroup},e)}function s({backend:e,frontend:n,tooling:t}){return o.a.createElement(c,null,e&&o.a.createElement(r.a,{type:"warning"},"Backend"),n&&o.a.createElement(r.a,{type:"success"},"Frontend"),t&&o.a.createElement(r.a,{type:"primary"},"Tooling"))}}}]);