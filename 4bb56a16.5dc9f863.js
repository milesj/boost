(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{129:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/confirm-eec401a1ad5787093e3ca837093c1c5f.gif"},130:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/hidden-input-abdd4ee11917de7b071a9ec1cd3e974a.gif"},131:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/input-670675eb6f3db970cc5ff1bcd6e5de8d.gif"},132:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/multiselect-d8a2cd82f588a8a38206aea8803193f3.gif"},133:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/password-input-d6ca3c8202f463b432ce6b1b0560921d.gif"},134:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/select-cbddd6c1f7f631474ffb739fbc291e81.gif"},135:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/select-labels-55f1a1ef5423092ee0eab47f2bbf1f2f.gif"},70:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return p}));var a=n(2),l=n(6),i=(n(0),n(90)),r={title:"Prompts"},o={unversionedId:"cli/prompts",id:"cli/prompts",isDocsHomePage:!1,title:"Prompts",description:"Prompts are specialized React components for handling process.stdin input.",source:"@site/docs/cli/prompts.md",slug:"/cli/prompts",permalink:"/docs/cli/prompts",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/cli/prompts.md",version:"current",sidebar:"docs",previous:{title:"Components",permalink:"/docs/cli/components"},next:{title:"Testing",permalink:"/docs/cli/testing"}},b=[{value:"<code>Confirm</code>",id:"confirm",children:[]},{value:"<code>HiddenInput</code>",id:"hiddeninput",children:[]},{value:"<code>Input</code>",id:"input",children:[]},{value:"<code>MultiSelect</code>",id:"multiselect",children:[]},{value:"<code>PasswordInput</code>",id:"passwordinput",children:[]},{value:"<code>Select</code>",id:"select",children:[]},{value:"Non-React",id:"non-react",children:[]}],c={rightToc:b};function p(e){var t=e.components,r=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Prompts are specialized ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/cli/components"}),"React components")," for handling ",Object(i.b)("inlineCode",{parentName:"p"},"process.stdin")," input."),Object(i.b)("p",null,"All prompt components share most of the following props."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"label")," (",Object(i.b)("inlineCode",{parentName:"li"},"string | React.ReactElement"),") - Label to display before or above the prompt itself.\n",Object(i.b)("em",{parentName:"li"},"(Required)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"prefix")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - Single character symbol to display before the label. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"?"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onSubmit")," (",Object(i.b)("inlineCode",{parentName:"li"},"(value: T) => void"),") - Callback triggered when the value is submitted."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"validate")," (",Object(i.b)("inlineCode",{parentName:"li"},"(value: T) => void"),") - Function to validate the value on submit. To trigger a failed\nstate, thrown an ",Object(i.b)("inlineCode",{parentName:"li"},"Error"),".")),Object(i.b)("h2",{id:"confirm"},Object(i.b)("inlineCode",{parentName:"h2"},"Confirm")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Confirm")," component provides a binary choice through the input of a single character. On\nsubmission, either a ",Object(i.b)("inlineCode",{parentName:"p"},"true")," or ",Object(i.b)("inlineCode",{parentName:"p"},"false")," value will be passed."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"invalidError")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - Error message to display when an invalid character is pressed.\nDefaults to a custom message."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"no")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - Character that triggers a falsy state when pressed. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"N"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"yes")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - Character that triggers a truthy state when pressed. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"y"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { Confirm } from '@boost/cli';\n\n<Confirm label=\"Do you want to continue?\" onSubmit={handleSubmit} />;\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Does not support the ",Object(i.b)("inlineCode",{parentName:"p"},"validate")," prop.")),Object(i.b)("p",null,Object(i.b)("img",{alt:"Confirm example",src:n(129).default})),Object(i.b)("h2",{id:"hiddeninput"},Object(i.b)("inlineCode",{parentName:"h2"},"HiddenInput")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"HiddenInput")," component is a specialized ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#input"}),"Input")," that accepts user input, hides it from\nthe console, and returns the entered string on a submission."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Inherits all the same props as ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#input"}),"Input")," except for ",Object(i.b)("inlineCode",{parentName:"li"},"hideCursor"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { HiddenInput } from \'@boost/cli\';\n\n<HiddenInput label="What is your secret key?" placeholder="<key>" onSubmit={handleSubmit} />;\n')),Object(i.b)("p",null,Object(i.b)("img",{alt:"Hidden input example",src:n(130).default})),Object(i.b)("h2",{id:"input"},Object(i.b)("inlineCode",{parentName:"h2"},"Input")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Input")," component is a simple text prompt that takes user input and returns a string. Supports\nstandard typing, backspacing. On submission, the final ",Object(i.b)("inlineCode",{parentName:"p"},"string")," will be trimmed of whitespace."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"defaultValue")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - A default value. If none provided, will use an empty state."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"hideCursor")," (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),") - Hide the cursor in the console. Will remove the background color, but\nstill functions."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"placeholder")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - Custom string to display when the value is empty and non-dirty."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onChange")," (",Object(i.b)("inlineCode",{parentName:"li"},"(value: string) => void"),") - Callback triggered when the value changes.")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { Input } from \'@boost/cli\';\n\n<Input\n  label="What is your name?"\n  placeholder="<name>"\n  onChange={handleChange}\n  onSubmit={handleSubmit}\n/>;\n')),Object(i.b)("p",null,Object(i.b)("img",{alt:"Input example",src:n(131).default})),Object(i.b)("h2",{id:"multiselect"},Object(i.b)("inlineCode",{parentName:"h2"},"MultiSelect")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"MultiSelect")," component works in a similar fashion to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#select"}),"Select"),", but allows for multiple\nvalues to be selected before submission. To select or unselect a value, press the space bar."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"defaultSelected")," (",Object(i.b)("inlineCode",{parentName:"li"},"T[]"),") - List of option values selected by default."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onChange")," (",Object(i.b)("inlineCode",{parentName:"li"},"(values: T[]) => void"),") - Callback triggered when a value is selected or unselected."),Object(i.b)("li",{parentName:"ul"},"Inherits all the same props as ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#select"}),"Select"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { MultiSelect } from '@boost/cli';\n\n<MultiSelect\n  label=\"What is your favorite fruits?\"\n  defaultSelected={['banana']}\n  onChange={handleChange}\n  onSubmit={handleSubmit}\n  options={[\n    { label: '\ud83c\udf4e Apple', value: 'apple' },\n    { label: '\ud83c\udf4c Banana', value: 'banana' },\n    { label: '\ud83e\udd65 Coconut', value: 'coconut' },\n    { label: '\ud83c\udf47 Grapes', value: 'grapes' },\n    { label: '\ud83e\udd5d Kiwi', value: 'kiwi' },\n    { label: '\ud83c\udf4b Lemon', value: 'lemon' },\n    { label: '\ud83c\udf48 Melon', value: 'melon' },\n    { label: '\ud83c\udf4a Orange', value: 'orange' },\n    { label: '\ud83c\udf51 Peach', value: 'peach' },\n    { label: '\ud83c\udf50 Pear', value: 'pear' },\n    { label: '\ud83c\udf4d Pineapple', value: 'pineapple' },\n    { label: '\ud83c\udf53 Strawberry', value: 'strawberry' },\n    { label: '\ud83c\udf49 Watermelon', value: 'watermelon' },\n  ]}\n/>;\n")),Object(i.b)("p",null,Object(i.b)("img",{alt:"Multiple select example",src:n(132).default})),Object(i.b)("h2",{id:"passwordinput"},Object(i.b)("inlineCode",{parentName:"h2"},"PasswordInput")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"PasswordInput")," component is a specialized ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#input"}),"Input")," that masks user input and replaces\neach character with a star (",Object(i.b)("inlineCode",{parentName:"p"},"*"),")."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Inherits all the same props as ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#input"}),"Input"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { PasswordInput } from \'@boost/cli\';\n\n<PasswordInput label="What is your password?" placeholder="<pass>" onSubmit={handleSubmit} />;\n')),Object(i.b)("p",null,Object(i.b)("img",{alt:"Password input example",src:n(133).default})),Object(i.b)("h2",{id:"select"},Object(i.b)("inlineCode",{parentName:"h2"},"Select")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Select")," component allows a value to be selected from a pre-defined list of options. Supports\nstandard keyboard navigation. On submission, the currently highlighted option will be chosen."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"limit")," (",Object(i.b)("inlineCode",{parentName:"li"},"number"),") - Number of options to display before scrolling. Defaults to console height."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"options")," (",Object(i.b)("inlineCode",{parentName:"li"},"(T | SelectOption<T>)[]"),") - List of options to choose from. Can either be a string,\nnumber, or object with a ",Object(i.b)("inlineCode",{parentName:"li"},"label")," and ",Object(i.b)("inlineCode",{parentName:"li"},"value"),". ",Object(i.b)("em",{parentName:"li"},"(Required)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"overflowAfterLabel")," (",Object(i.b)("inlineCode",{parentName:"li"},"string | (count: number) => string"),") - Label to display above scrollable\noptions with the number of overflowing options."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"overflowBeforeLabel")," (",Object(i.b)("inlineCode",{parentName:"li"},"string | (count: number) => string"),") - Label to display below scrollable\noptions with the number of overflowing options."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scrollType")," (",Object(i.b)("inlineCode",{parentName:"li"},"cycle | overflow"),") - The pattern in which to limit options when scrolling. Defaults\nto ",Object(i.b)("inlineCode",{parentName:"li"},"overflow"),".",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"cycle")," - Will continously cycle through options, even when navigating to and past edges."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"overflow")," - Will display options bound to an edge, with the number of options hidden above and\nbelow.")))),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { Select } from '@boost/cli';\n\n<Select\n  label=\"What is your favorite fruit?\"\n  onSubmit={handleSubmit}\n  options={[\n    'apple',\n    'banana',\n    'coconut',\n    'grapes',\n    'kiwi',\n    'lemon',\n    'melon',\n    'orange',\n    'peach',\n    'pear',\n    'pineapple',\n    'strawberry',\n    'watermelon',\n  ]}\n/>;\n")),Object(i.b)("p",null,Object(i.b)("img",{alt:"Select example",src:n(134).default})),Object(i.b)("p",null,"Options can also be customized with objects, allowing a more unique ",Object(i.b)("inlineCode",{parentName:"p"},"label")," to be provided. Options\ncan also be grouped by inserting ",Object(i.b)("inlineCode",{parentName:"p"},"divider")," only options."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { Select } from '@boost/cli';\n\n<Select\n  label=\"What is your favorite fruit?\"\n  onSubmit={handleSubmit}\n  options={[\n    { label: '\ud83c\udf4e Apple', value: 'apple' },\n    { label: '\ud83c\udf4c Banana', value: 'banana' },\n    { label: '\ud83e\udd65 Coconut', value: 'coconut' },\n    { label: '\ud83c\udf47 Grapes', value: 'grapes' },\n    { label: '\ud83e\udd5d Kiwi', value: 'kiwi' },\n    { label: '\ud83c\udf4b Lemon', value: 'lemon' },\n    { label: '\ud83c\udf48 Melon', value: 'melon' },\n    { label: '\ud83c\udf4a Orange', value: 'orange' },\n    { label: '\ud83c\udf51 Peach', value: 'peach' },\n    { label: '\ud83c\udf50 Pear', value: 'pear' },\n    { label: '\ud83c\udf4d Pineapple', value: 'pineapple' },\n    { label: '\ud83c\udf53 Strawberry', value: 'strawberry' },\n    { label: '\ud83c\udf49 Watermelon', value: 'watermelon' },\n  ]}\n/>;\n")),Object(i.b)("p",null,Object(i.b)("img",{alt:"Select with labels example",src:n(135).default})),Object(i.b)("h2",{id:"non-react"},"Non-React"),Object(i.b)("p",null,"If you would like to use prompts outside of React components and within the command space, sadly,\nthere is no built-in Boost solution. However, you can easily use a third-party solution like\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/enquirer/enquirer"}),"enquirer"),". Just be sure to set ",Object(i.b)("inlineCode",{parentName:"p"},"stdin")," and ",Object(i.b)("inlineCode",{parentName:"p"},"stdout")," streams\ncorrectly!"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { prompt } from 'enquirer';\nimport { Command } from '@boost/cli';\n\nexport default class InitCommand extends Command {\n  async run() {\n    const { stdin, stdout } = this.getProgram().streams;\n\n    const { username } = await prompt({\n      type: 'input',\n      name: 'username',\n      message: 'What is your username?',\n      stdin,\n      stdout,\n    });\n  }\n}\n")))}p.isMDXComponent=!0},90:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var a=n(0),l=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=l.a.createContext({}),p=function(e){var t=l.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return l.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},m=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),s=p(n),m=a,d=s["".concat(r,".").concat(m)]||s[m]||u[m]||i;return n?l.a.createElement(d,o(o({ref:t},c),{},{components:n})):l.a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<i;c++)r[c]=n[c];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);