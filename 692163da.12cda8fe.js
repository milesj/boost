(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{75:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return c})),a.d(n,"metadata",(function(){return p})),a.d(n,"rightToc",(function(){return l})),a.d(n,"default",(function(){return d}));var t=a(2),r=a(6),o=(a(0),a(90)),c={title:"PackageGraph"},p={unversionedId:"common/package-graph",id:"common/package-graph",isDocsHomePage:!1,title:"PackageGraph",description:"Generate a dependency graph for a list of packages, based on their defined dependencies and",source:"@site/docs/common/package-graph.md",slug:"/common/package-graph",permalink:"/docs/common/package-graph",editUrl:"https://github.com/milesj/boost/edit/master/website/docs/common/package-graph.md",version:"current",sidebar:"docs",previous:{title:"Contract",permalink:"/docs/common/contract"},next:{title:"Path",permalink:"/docs/common/path"}},l=[{value:"API",id:"api",children:[{value:"<code>addPackage</code>",id:"addpackage",children:[]},{value:"<code>addPackages</code>",id:"addpackages",children:[]},{value:"<code>resolveBatchList</code>",id:"resolvebatchlist",children:[]},{value:"<code>resolveList</code>",id:"resolvelist",children:[]},{value:"<code>resolveTree</code>",id:"resolvetree",children:[]}]}],i={rightToc:l};function d(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},i,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Generate a dependency graph for a list of packages, based on their defined ",Object(o.b)("inlineCode",{parentName:"p"},"dependencies")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"peerDependencies"),". To begin, instantiate an instance of ",Object(o.b)("inlineCode",{parentName:"p"},"PackageGraph"),", which accepts a list of\noptional ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," objects as the first argument."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"import { PackageGraph } from '@boost/common';\n\nconst graph = new PackageGraph([\n  {\n    name: '@boost/common',\n    version: '1.2.3',\n  },\n  {\n    name: '@boost/cli',\n    version: '1.0.0',\n    dependencies: {\n      '@boost/common': '^1.0.0',\n    },\n  },\n]);\n")),Object(o.b)("p",null,"Once all packages have been defined, we can resolve our graph into 1 of 3 formats."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"const batch = graph.resolveBatchList();\nconst list = graph.resolveList();\nconst tree = graph.resolveTree();\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Will only resolve and return packages that have been defined. Will ",Object(o.b)("em",{parentName:"p"},"not")," return non-defined\npackages found in ",Object(o.b)("inlineCode",{parentName:"p"},"dependencies")," and ",Object(o.b)("inlineCode",{parentName:"p"},"peerDependencies"),".")),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("h3",{id:"addpackage"},Object(o.b)("inlineCode",{parentName:"h3"},"addPackage")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"PackageGraph#addPackage(package: T): this")),Object(o.b)("p",null,"Add a package by name with an associated ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," object. Will map a dependency between the\npackage and its dependees found in ",Object(o.b)("inlineCode",{parentName:"p"},"dependencies")," and ",Object(o.b)("inlineCode",{parentName:"p"},"peerDependencies"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"graph.addPackage({\n  name: '@boost/plugin',\n  version: '1.6.0',\n  peerDependencies: {\n    '@boost/common': '^1.0.0',\n    '@boost/debug': '^1.0.0',\n  },\n});\n")),Object(o.b)("h3",{id:"addpackages"},Object(o.b)("inlineCode",{parentName:"h3"},"addPackages")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"PackageGraph#addPackages(packages: T[]): this")),Object(o.b)("p",null,"Add multiple packages and map their dependencies."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"graph.addPackages([\n  {\n    name: '@boost/plugin',\n    version: '1.6.0',\n  },\n  {\n    name: '@boost/debug',\n    version: '1.2.0',\n  },\n]);\n")),Object(o.b)("h3",{id:"resolvebatchlist"},Object(o.b)("inlineCode",{parentName:"h3"},"resolveBatchList")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"PackageGraph#resolveBatchList(): T","[][]")),Object(o.b)("p",null,"Resolve the dependency graph and return a list of batched ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," objects (array of arrays)\nin the order they are depended on."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"graph.resolveBatchList().forEach((pkgs) => {\n  pkgs.forEach((pkg) => {\n    console.log(pkg.name);\n  });\n});\n")),Object(o.b)("h3",{id:"resolvelist"},Object(o.b)("inlineCode",{parentName:"h3"},"resolveList")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"PackageGraph#resolveList(): T[]")),Object(o.b)("p",null,"Resolve the dependency graph and return a list of all ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," objects in the order they are\ndepended on."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"graph.resolveList().forEach((pkg) => {\n  console.log(pkg.name);\n});\n")),Object(o.b)("h3",{id:"resolvetree"},Object(o.b)("inlineCode",{parentName:"h3"},"resolveTree")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"PackageGraph#resolveTree(): PackageGraphTree<T",">")),Object(o.b)("p",null,"Resolve the dependency graph and return a tree of nodes for all ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," objects and their\ndependency mappings."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"graph.resolveTree().nodes.forEach((node) => {\n  console.log(node.package.name);\n\n  if (node.nodes) {\n    // Dependents\n  }\n});\n")))}d.isMDXComponent=!0},90:function(e,n,a){"use strict";a.d(n,"a",(function(){return s})),a.d(n,"b",(function(){return m}));var t=a(0),r=a.n(t);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function c(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function p(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?c(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=r.a.createContext({}),d=function(e){var n=r.a.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):p(p({},n),e)),a},s=function(e){var n=d(e.components);return r.a.createElement(i.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),s=d(a),u=t,m=s["".concat(c,".").concat(u)]||s[u]||b[u]||o;return a?r.a.createElement(m,p(p({ref:n},i),{},{components:a})):r.a.createElement(m,p({ref:n},i))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,c=new Array(o);c[0]=u;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:t,c[1]=p;for(var i=2;i<o;i++)c[i]=a[i];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);